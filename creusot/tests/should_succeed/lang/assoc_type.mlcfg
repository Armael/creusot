
module CreusotContracts_Invariant_Inv_Stub
  type t
  predicate inv (_x : t)
end
module CreusotContracts_Invariant_Inv_Interface
  type t
  predicate inv (_x : t)
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module CreusotContracts_Invariant_Inv
  type t
  predicate inv (_x : t) =
    [#"../../../../../creusot-contracts/src/invariant.rs" 16 4 16 8] true
  val inv (_x : t) : bool
    ensures { result = inv _x }
    
end
module AssocType_Assoc_Type
  type t_assoc 'u 'proj0 =
    | C_Assoc 'proj0
    
end
module AssocType_Tr_A_Type
  type self
  type a
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module TyInv_Trivial
  type t
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = t
  axiom inv_trivial : forall self : t . Inv0.inv self = true
end
module AssocType_Uses_Interface
  type a
  clone AssocType_Tr_A_Type as A0 with
    type self = a
  use AssocType_Assoc_Type as AssocType_Assoc_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = AssocType_Assoc_Type.t_assoc a A0.a
  val uses [#"../assoc_type.rs" 12 0 12 31] (_1 : AssocType_Assoc_Type.t_assoc a A0.a) : ()
    requires {[#"../assoc_type.rs" 1 0 1 0] Inv0.inv _1}
    
end
module AssocType_Uses
  type a
  clone AssocType_Tr_A_Type as A0 with
    type self = a
  use AssocType_Assoc_Type as AssocType_Assoc_Type
  clone AssocType_Tr_A_Type as A1 with
    type self = AssocType_Assoc_Type.t_assoc a A0.a
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = AssocType_Assoc_Type.t_assoc a A0.a
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = AssocType_Assoc_Type.t_assoc a A0.a,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = AssocType_Assoc_Type.t_assoc a A0.a
  let rec cfg uses [#"../assoc_type.rs" 12 0 12 31] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : AssocType_Assoc_Type.t_assoc a A0.a) : ()
    requires {[#"../assoc_type.rs" 1 0 1 0] Inv0.inv _1}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : AssocType_Assoc_Type.t_assoc a A0.a = _1;
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    assert { [@expl:type invariant] Inv0.inv _1 };
    assume { Resolve0.resolve _1 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module AssocType_Assoc2_Type
  type t_assoc2 'u 'f 'b 'proj0 =
    | C_Assoc2 'f 'proj0 'b
    
end
module AssocType_Uses2_Interface
  type c
  type x
  type y
  clone AssocType_Tr_A_Type as A0 with
    type self = c
  use AssocType_Assoc2_Type as AssocType_Assoc2_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = AssocType_Assoc2_Type.t_assoc2 c x y A0.a
  val uses2 [#"../assoc_type.rs" 20 0 20 45] (_1 : AssocType_Assoc2_Type.t_assoc2 c x y A0.a) : ()
    requires {[#"../assoc_type.rs" 1 0 1 0] Inv0.inv _1}
    
end
module AssocType_Uses2
  type c
  type x
  type y
  clone AssocType_Tr_A_Type as A0 with
    type self = c
  use AssocType_Assoc2_Type as AssocType_Assoc2_Type
  clone AssocType_Tr_A_Type as A1 with
    type self = AssocType_Assoc2_Type.t_assoc2 c x y A0.a
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = AssocType_Assoc2_Type.t_assoc2 c x y A0.a
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = AssocType_Assoc2_Type.t_assoc2 c x y A0.a,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = AssocType_Assoc2_Type.t_assoc2 c x y A0.a
  let rec cfg uses2 [#"../assoc_type.rs" 20 0 20 45] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : AssocType_Assoc2_Type.t_assoc2 c x y A0.a) : ()
    requires {[#"../assoc_type.rs" 1 0 1 0] Inv0.inv _1}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : AssocType_Assoc2_Type.t_assoc2 c x y A0.a = _1;
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    assert { [@expl:type invariant] Inv0.inv _1 };
    assume { Resolve0.resolve _1 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module AssocType_Fix_Type
  use prelude.Int
  use prelude.UIntSize
  type t_fix  =
    | C_Fix usize
    
end
module AssocType_Mono_Interface
  use AssocType_Fix_Type as AssocType_Fix_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = AssocType_Fix_Type.t_fix
  val mono [#"../assoc_type.rs" 30 0 30 19] (_1 : AssocType_Fix_Type.t_fix) : ()
    requires {[#"../assoc_type.rs" 1 0 1 0] Inv0.inv _1}
    
end
module AssocType_Mono
  use AssocType_Fix_Type as AssocType_Fix_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = AssocType_Fix_Type.t_fix
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = AssocType_Fix_Type.t_fix,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  let rec cfg mono [#"../assoc_type.rs" 30 0 30 19] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : AssocType_Fix_Type.t_fix) : ()
    requires {[#"../assoc_type.rs" 1 0 1 0] Inv0.inv _1}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module AssocType_Nested_Type
  clone AssocType_Tr_A_Type as A0 with
    type self = t
  use AssocType_Assoc_Type as AssocType_Assoc_Type
  type t_nested 't 'proj0 =
    | C_Nested (AssocType_Assoc_Type.t_assoc 't 'proj0)
    
end
module AssocType_Uses3_Interface
  type t
  clone AssocType_Tr_A_Type as A0 with
    type self = t
  use AssocType_Nested_Type as AssocType_Nested_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = AssocType_Nested_Type.t_nested t A0.a
  val uses3 [#"../assoc_type.rs" 36 0 36 33] (_1 : AssocType_Nested_Type.t_nested t A0.a) : ()
    requires {[#"../assoc_type.rs" 1 0 1 0] Inv0.inv _1}
    
end
module AssocType_Uses3
  type t
  clone AssocType_Tr_A_Type as A0 with
    type self = t
  use AssocType_Nested_Type as AssocType_Nested_Type
  clone AssocType_Tr_A_Type as A1 with
    type self = AssocType_Nested_Type.t_nested t A0.a
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = AssocType_Nested_Type.t_nested t A0.a
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = AssocType_Nested_Type.t_nested t A0.a,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = AssocType_Nested_Type.t_nested t A0.a
  let rec cfg uses3 [#"../assoc_type.rs" 36 0 36 33] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : AssocType_Nested_Type.t_nested t A0.a) : ()
    requires {[#"../assoc_type.rs" 1 0 1 0] Inv0.inv _1}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : AssocType_Nested_Type.t_nested t A0.a = _1;
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    assert { [@expl:type invariant] Inv0.inv _1 };
    assume { Resolve0.resolve _1 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module AssocType_Nested2_Type
  use AssocType_Assoc_Type as AssocType_Assoc_Type
  type t_nested2 'proj0 =
    | C_Nested2 (AssocType_Assoc_Type.t_assoc () 'proj0)
    
end
module AssocType_Uses4_Interface
  use prelude.Int
  use prelude.UIntSize
  use AssocType_Nested2_Type as AssocType_Nested2_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = AssocType_Nested2_Type.t_nested2 usize
  val uses4 [#"../assoc_type.rs" 42 0 42 24] (_1 : AssocType_Nested2_Type.t_nested2 usize) : ()
    requires {[#"../assoc_type.rs" 1 0 1 0] Inv0.inv _1}
    
end
module AssocType_Uses4
  use prelude.Int
  use prelude.UIntSize
  use AssocType_Nested2_Type as AssocType_Nested2_Type
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = AssocType_Nested2_Type.t_nested2 usize
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = AssocType_Nested2_Type.t_nested2 usize,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  let rec cfg uses4 [#"../assoc_type.rs" 42 0 42 24] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : AssocType_Nested2_Type.t_nested2 usize) : ()
    requires {[#"../assoc_type.rs" 1 0 1 0] Inv0.inv _1}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module AssocType_Map_Type
  use prelude.Ghost
  use seq.Seq
  type t_map 'i 'proj0 =
    | C_Map 'i (Ghost.ghost_ty (Seq.seq 'proj0))
    
end
module AssocType_UseMap_Interface
  type i
  clone AssocType_Tr_A_Type as A0 with
    type self = i
  use AssocType_Map_Type as AssocType_Map_Type
  clone CreusotContracts_Invariant_Inv_Stub as Inv0 with
    type t = AssocType_Map_Type.t_map i A0.a
  val use_map [#"../assoc_type.rs" 49 0 49 33] (_1 : AssocType_Map_Type.t_map i A0.a) : ()
    requires {[#"../assoc_type.rs" 1 0 1 0] Inv0.inv _1}
    
end
module AssocType_UseMap
  type i
  clone AssocType_Tr_A_Type as A0 with
    type self = i
  use AssocType_Map_Type as AssocType_Map_Type
  clone AssocType_Tr_A_Type as A1 with
    type self = AssocType_Map_Type.t_map i A0.a
  clone CreusotContracts_Invariant_Inv_Interface as Inv0 with
    type t = AssocType_Map_Type.t_map i A0.a
  clone TyInv_Trivial as TyInv_Trivial0 with
    type t = AssocType_Map_Type.t_map i A0.a,
    predicate Inv0.inv = Inv0.inv,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = AssocType_Map_Type.t_map i A0.a
  let rec cfg use_map [#"../assoc_type.rs" 49 0 49 33] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : AssocType_Map_Type.t_map i A0.a) : ()
    requires {[#"../assoc_type.rs" 1 0 1 0] Inv0.inv _1}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : AssocType_Map_Type.t_map i A0.a = _1;
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    assert { [@expl:type invariant] Inv0.inv _1 };
    assume { Resolve0.resolve _1 };
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module AssocType_Impl0
  
end
