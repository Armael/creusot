
module Core_Option_Option_Type
  type core_option_option_type 't =
    | Core_Option_Option_None_Type
    | Core_Option_Option_Some_Type 't
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module PromotedConstants_PromotedNone_Interface
  val promoted_none [@cfg:stackify] (_ : ()) : ()
end
module PromotedConstants_PromotedNone
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  use Core_Option_Option_Type
  let constant promoted0  : Core_Option_Option_Type.core_option_option_type int32 = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = Core_Option_Option_Type.Core_Option_Option_Some_Type (43 : int32) in let _0 = _1 in _0
  let constant promoted1  : Core_Option_Option_Type.core_option_option_type int32 = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = Core_Option_Option_Type.Core_Option_Option_Some_Type (42 : int32) in let _0 = _1 in _0
  use prelude.IntSize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = Core_Option_Option_Type.core_option_option_type int32
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve0 with type t1 = Core_Option_Option_Type.core_option_option_type int32,
  type t2 = Core_Option_Option_Type.core_option_option_type int32, predicate Resolve0.resolve = Resolve1.resolve,
  predicate Resolve1.resolve = Resolve1.resolve
  let rec cfg promoted_none [@cfg:stackify] [#"../promoted_constants.rs" 3 0 3 22] (_ : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _ix_1 : Core_Option_Option_Type.core_option_option_type int32;
  var _2 : (Core_Option_Option_Type.core_option_option_type int32, Core_Option_Option_Type.core_option_option_type int32);
  var _3 : Core_Option_Option_Type.core_option_option_type int32;
  var _4 : Core_Option_Option_Type.core_option_option_type int32;
  var _5 : Core_Option_Option_Type.core_option_option_type int32;
  var _6 : Core_Option_Option_Type.core_option_option_type int32;
  var _7 : isize;
  var _8 : isize;
  var _9 : ();
  var _10 : Core_Option_Option_Type.core_option_option_type int32;
  var _11 : Core_Option_Option_Type.core_option_option_type int32;
  {
    goto BB0
  }
  BB0 {
    _ix_1 <- Core_Option_Option_Type.Core_Option_Option_Some_Type (0 : int32);
    _11 <- promoted1;
    _3 <- _11;
    _10 <- promoted0;
    _5 <- _10;
    _2 <- (_3, _5);
    switch (let (a, _) = _2 in a)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB1
      | _ -> goto BB5
      end
  }
  BB1 {
    assume { Resolve0.resolve _2 };
    switch (let (_, a) = _2 in a)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    _0 <- ();
    return _0
  }
  BB3 {
    absurd
  }
  BB5 {
    assume { Resolve0.resolve _2 };
    goto BB2
  }
  
end
module PromotedConstants_PromotedInt_Interface
  val promoted_int [@cfg:stackify] (_ : ()) : ()
end
module PromotedConstants_PromotedInt
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  let constant promoted0  : int32 = [@vc:do_not_keep_trace] [@vc:sp]
    let _2 = (1 : int32) + (5 : int32) in let _1 = _2 + (10 : int32) in let _0 = _1 in _0
  let rec cfg promoted_int [@cfg:stackify] [#"../promoted_constants.rs" 12 0 12 21] (_ : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var ix_1 : int32;
  var _2 : int32;
  var _3 : int32;
  var _4 : bool;
  var _5 : int32;
  var _6 : ();
  var _7 : ();
  var _8 : ();
  var _9 : int32;
  {
    goto BB0
  }
  BB0 {
    _9 <- promoted0;
    ix_1 <- _9;
    _5 <- ix_1;
    _4 <- ([#"../promoted_constants.rs" 15 7 15 16] _5 <> (16 : int32));
    switch (_4)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    absurd
  }
  BB2 {
    _0 <- ();
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type core_ptr_nonnull_nonnull_type 't =
    | Core_Ptr_NonNull_NonNull_Type opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_ptr_unique_unique_type 't =
    | Core_Ptr_Unique_Unique_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type
  type alloc_rawvec_rawvec_type 't 'a =
    | Alloc_RawVec_RawVec_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type
  type alloc_vec_vec_type 't 'a =
    | Alloc_Vec_Vec_Type (Alloc_RawVec_RawVec_Type.alloc_rawvec_rawvec_type 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type alloc_alloc_global_type  =
    | Alloc_Alloc_Global_Type
    
end
module Alloc_String_String_Type
  use mach.int.Int
  use prelude.UInt8
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  type alloc_string_string_type  =
    | Alloc_String_String_Type (Alloc_Vec_Vec_Type.alloc_vec_vec_type uint8 (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    
end
module PromotedConstants_String_Interface
  use Alloc_String_String_Type
  val string [@cfg:stackify] (_s : Alloc_String_String_Type.alloc_string_string_type) : ()
end
module PromotedConstants_String
  use Alloc_String_String_Type
  let rec cfg string [@cfg:stackify] [#"../promoted_constants.rs" 20 0 20 25] (_s : Alloc_String_String_Type.alloc_string_string_type) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _s_1 : Alloc_String_String_Type.alloc_string_string_type;
  {
    _s_1 <- _s;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module PromotedConstants_Str_Interface
  val str [@cfg:stackify] (_ : ()) : ()
end
module PromotedConstants_Str
  use prelude.Borrow
  let rec cfg str [@cfg:stackify] [#"../promoted_constants.rs" 22 0 22 12] (_ : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _s_1 : string;
  {
    goto BB0
  }
  BB0 {
    _s_1 <- "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
    _0 <- ();
    return _0
  }
  
end
