module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module TraitImpl_Main
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec cfg impl () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module TraitImpl_Impl0_X
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  type b   
  type t2   
  type t1   
  let rec cfg impl (o_self_1 : (t1, t2)) : () = 
  var _0 : ();
  var self_1 : (t1, t2);
  {
    self_1 <- o_self_1;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    assume { (fun x -> true) self_1 };
    return _0
  }
  
end
module TraitImpl_Impl1_X
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  type b   
  let rec cfg impl (o_self_1 : uint32) : () = 
  var _0 : ();
  var self_1 : uint32;
  {
    self_1 <- o_self_1;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { (fun x -> true) self_1 };
    return _0
  }
  
end
