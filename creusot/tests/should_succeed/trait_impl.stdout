module TraitImpl
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
    type three  = 
      | Three_I
      | Three_Ii
      | Three_Iii
      
    predicate drop_three (self : three) = 
      match (self) with
        | Three_I -> true
        | Three_Ii -> true
        | Three_Iii -> true
        end
  end
  let rec cfg impl1_eq (o_self_1 : Type.three) (o_other_2 : Type.three) : bool
    =
  var _0 : bool;
  var self_1 : Type.three;
  var other_2 : Type.three;
  var __self_vi_3 : isize;
  var _4 : Type.three;
  var _5 : Type.three;
  var __arg_1_vi_6 : isize;
  var _7 : Type.three;
  var _8 : Type.three;
  var _9 : bool;
  var _10 : bool;
  var _11 : isize;
  var _12 : isize;
  var _13 : (Type.three, Type.three);
  var _14 : Type.three;
  var _15 : Type.three;
  {
    self_1 <- o_self_1;
    other_2 <- o_other_2;
    goto BB0
  }
  BB0 {
    _5 <- self_1;
    _4 <- _5;
    assume { drop_ref _5 };
    __self_vi_3 <- core.Intrinsics.1.discriminantValue _4;
    goto BB1
  }
  BB1 {
    _8 <- other_2;
    _7 <- _8;
    assume { drop_ref _8 };
    __arg_1_vi_6 <- core.Intrinsics.1.discriminantValue _7;
    goto BB2
  }
  BB2 {
    switch (true)
      | False -> goto BB4
      | True -> goto BB5
      | _ -> goto BB5
      end
  }
  BB3 {
    assume { drop_bool _10 };
    _9 <- true;
    goto BB6
  }
  BB4 {
    assume { drop_int __self_vi_3 };
    assume { drop_int __arg_1_vi_6 };
    _9 <- false;
    goto BB6
  }
  BB5 {
    _11 <- __self_vi_3;
    assume { drop_int __self_vi_3 };
    _12 <- __arg_1_vi_6;
    assume { drop_int __arg_1_vi_6 };
    _10 <- _11 = _12;
    switch (_10)
      | False -> goto BB11
      | True -> goto BB3
      | _ -> goto BB3
      end
  }
  BB6 {
    switch (_9)
      | False -> goto BB8
      | True -> goto BB7
      | _ -> goto BB7
      end
  }
  BB7 {
    assume { drop_bool _9 };
    _14 <- self_1;
    assume { drop_ref self_1 };
    _15 <- other_2;
    assume { drop_ref other_2 };
    _13 <- (_14, _15);
    assume { (fun tup -> let (a, b) = tup in drop_ref a && drop_ref b) _13 };
    _0 <- true;
    goto BB9
  }
  BB8 {
    assume { drop_ref self_1 };
    assume { drop_ref other_2 };
    assume { drop_bool _9 };
    _0 <- false;
    goto BB9
  }
  BB9 {
    return _0
  }
  BB11 {
    assume { drop_bool _10 };
    goto BB4
  }
  
  let rec cfg main () : ()
    =
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
