
module CreusotContracts_GhostPtr_GhostPtrToken_Type
  type t_ghostptrtoken 't
end
module CreusotContracts_GhostPtr_GhostPtrTokenMut_Type
  type t_ghostptrtokenmut 't
end
module CreusotContracts_Logic_Fmap_FMap_Type
  type t_fmap 'k 'v
end
module Core_Panicking_AssertKind_Type
  type t_assertkind  =
    | C_Eq
    | C_Ne
    | C_Match
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module GhostPtrToken_Test
  use prelude.Int32
  use prelude.Opaque
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate invariant7 (self : Core_Option_Option_Type.t_option int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant7 (self : Core_Option_Option_Type.t_option int32) : bool
    ensures { result = invariant7 self }
    
  predicate inv7 (_x : Core_Option_Option_Type.t_option int32)
  val inv7 (_x : Core_Option_Option_Type.t_option int32) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : forall x : Core_Option_Option_Type.t_option int32 . inv7 x = true
  use map.Map
  predicate invariant6 (self : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant6 (self : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) : bool
    ensures { result = invariant6 self }
    
  predicate inv6 (_x : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32))
  val inv6 (_x : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : forall x : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32) . inv6 x = true
  predicate invariant5 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant5 (self : int32) : bool
    ensures { result = invariant5 self }
    
  predicate inv5 (_x : int32)
  val inv5 (_x : int32) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : forall x : int32 . inv5 x = true
  predicate invariant4 (self : opaque_ptr) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant4 (self : opaque_ptr) : bool
    ensures { result = invariant4 self }
    
  predicate inv4 (_x : opaque_ptr)
  val inv4 (_x : opaque_ptr) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : forall x : opaque_ptr . inv4 x = true
  use CreusotContracts_Logic_Fmap_FMap_Type as CreusotContracts_Logic_Fmap_FMap_Type
  predicate invariant3 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant3 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : bool
    ensures { result = invariant3 self }
    
  predicate inv3 (_x : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32)
  val inv3 (_x : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : forall x : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32 . inv3 x = true
  predicate invariant2 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant2 (self : int32) : bool
    ensures { result = invariant2 self }
    
  predicate inv2 (_x : int32)
  val inv2 (_x : int32) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : forall x : int32 . inv2 x = true
  use prelude.Borrow
  predicate invariant1 (self : borrowed int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant1 (self : borrowed int32) : bool
    ensures { result = invariant1 self }
    
  predicate inv1 (_x : borrowed int32)
  val inv1 (_x : borrowed int32) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : forall x : borrowed int32 . inv1 x = true
  predicate invariant0 (self : int32) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant0 (self : int32) : bool
    ensures { result = invariant0 self }
    
  predicate inv0 (_x : int32)
  val inv0 (_x : int32) : bool
    ensures { result = inv0 _x }
    
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  axiom inv0 : forall x : int32 . inv0 x = true
  use prelude.Opaque
  use Core_Panicking_AssertKind_Type as Core_Panicking_AssertKind_Type
  use CreusotContracts_GhostPtr_GhostPtrToken_Type as CreusotContracts_GhostPtr_GhostPtrToken_Type
  function unreachable0 (_1 : ()) : int32
  val unreachable0 (_1 : ()) : int32
    requires {[#"../../../../creusot-contracts/src/util.rs" 24 11 24 16] false}
    ensures { result = unreachable0 _1 }
    
  axiom unreachable0_spec : forall _1 : () . ([#"../../../../creusot-contracts/src/util.rs" 24 11 24 16] false) -> ([#"../../../../creusot-contracts/src/util.rs" 27 0 27 28] inv0 (unreachable0 _1)) && ([#"../../../../creusot-contracts/src/util.rs" 25 10 25 15] false)
  function unwrap0 (op : Core_Option_Option_Type.t_option int32) : int32
  val unwrap0 (op : Core_Option_Option_Type.t_option int32) : int32
    requires {[#"../../../../creusot-contracts/src/util.rs" 33 11 33 21] op <> Core_Option_Option_Type.C_None}
    requires {[#"../../../../creusot-contracts/src/util.rs" 35 17 35 19] inv7 op}
    ensures { result = unwrap0 op }
    
  axiom unwrap0_spec : forall op : Core_Option_Option_Type.t_option int32 . ([#"../../../../creusot-contracts/src/util.rs" 33 11 33 21] op <> Core_Option_Option_Type.C_None) -> ([#"../../../../creusot-contracts/src/util.rs" 35 17 35 19] inv7 op) -> ([#"../../../../creusot-contracts/src/util.rs" 35 0 35 36] inv0 (unwrap0 op)) && ([#"../../../../creusot-contracts/src/util.rs" 34 10 34 28] Core_Option_Option_Type.C_Some (unwrap0 op) = op)
  use map.Map
  function mk0 (_m : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  val mk0 (_m : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    ensures { result = mk0 _m }
    
  function view0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)
    
  val view0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : Map.map opaque_ptr (Core_Option_Option_Type.t_option int32)
    requires {[#"../../../../creusot-contracts/src/logic/fmap.rs" 28 16 28 20] inv3 self}
    ensures { result = view0 self }
    
  axiom view0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32 . ([#"../../../../creusot-contracts/src/logic/fmap.rs" 28 16 28 20] inv3 self) -> ([#"../../../../creusot-contracts/src/logic/fmap.rs" 28 4 28 35] inv6 (view0 self)) && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 27 14 27 38] mk0 (view0 self) = self)
  function get0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : Core_Option_Option_Type.t_option int32
    
   =
    [#"../../../../creusot-contracts/src/logic/fmap.rs" 55 8 55 26] Map.get (view0 self) k
  val get0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : Core_Option_Option_Type.t_option int32
    ensures { result = get0 self k }
    
  function lookup_unsized0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : int32
    
   =
    [#"../../../../creusot-contracts/src/logic/fmap.rs" 62 8 62 27] unwrap0 (get0 self k)
  val lookup_unsized0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : int32
    ensures { result = lookup_unsized0 self k }
    
  function contains0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : bool
    
   =
    [#"../../../../creusot-contracts/src/logic/fmap.rs" 79 8 79 27] get0 self k <> Core_Option_Option_Type.C_None
  val contains0 [@inline:trivial] (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : bool
    ensures { result = contains0 self k }
    
  function shallow_model0 (self : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  val shallow_model0 (self : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    ensures { result = shallow_model0 self }
    
  function shallow_model1 (self : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
   =
    [#"../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model0 self
  val shallow_model1 (self : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    ensures { result = shallow_model1 self }
    
  val ptr_as_ref0 (self : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32) (ptr : opaque_ptr) : int32
    requires {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 79 4 79 36] contains0 (shallow_model1 self) ptr}
    ensures { [#"../../../../creusot-contracts/src/ghost_ptr.rs" 80 14 80 51] result = lookup_unsized0 (shallow_model1 self) ptr }
    ensures { [#"../../../../creusot-contracts/src/ghost_ptr.rs" 81 4 81 49] inv2 result }
    
  predicate resolve2 (self : borrowed int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed int32) : bool
    ensures { result = resolve2 self }
    
  val swap0 (x : borrowed int32) (y : borrowed int32) : ()
    requires {inv1 x}
    requires {inv1 y}
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 11 22 11 30]  ^ x =  * y }
    ensures { [#"../../../../creusot-contracts/src/std/mem.rs" 12 22 12 30]  ^ y =  * x }
    
  predicate resolve3 (self : int32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 45 8 45 12] true
  val resolve3 (self : int32) : bool
    ensures { result = resolve3 self }
    
  predicate resolve1 (self : (int32, int32)) =
    [#"../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] resolve3 (let (a, _) = self in a) /\ resolve3 (let (_, a) = self in a)
  val resolve1 (self : (int32, int32)) : bool
    ensures { result = resolve1 self }
    
  use CreusotContracts_GhostPtr_GhostPtrTokenMut_Type as CreusotContracts_GhostPtr_GhostPtrTokenMut_Type
  function fin0 (self : CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  val fin0 (self : CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    ensures { result = fin0 self }
    
  function cur0 (self : CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  val cur0 (self : CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    ensures { result = cur0 self }
    
  predicate resolve0 (self : CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) =
    [#"../../../../creusot-contracts/src/ghost_ptr.rs" 261 8 261 32] cur0 self = fin0 self
  val resolve0 (self : CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  function len0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : int
  val len0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) : int
    requires {[#"../../../../creusot-contracts/src/logic/fmap.rs" 13 15 13 19] inv3 self}
    ensures { result = len0 self }
    
  axiom len0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32 . ([#"../../../../creusot-contracts/src/logic/fmap.rs" 13 15 13 19] inv3 self) -> ([#"../../../../creusot-contracts/src/logic/fmap.rs" 12 14 12 25] len0 self >= 0)
  use map.Map
  function make_sized0 (self : int32) : int32
  val make_sized0 (self : int32) : int32
    requires {[#"../../../../creusot-contracts/src/util.rs" 16 18 16 22] inv5 self}
    ensures { result = make_sized0 self }
    
  axiom make_sized0_spec : forall self : int32 . ([#"../../../../creusot-contracts/src/util.rs" 16 18 16 22] inv5 self) -> ([#"../../../../creusot-contracts/src/util.rs" 16 4 16 39] inv0 (make_sized0 self)) && ([#"../../../../creusot-contracts/src/util.rs" 15 14 15 29] make_sized0 self = self)
  function insert0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) (v : int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  val insert0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) (v : int32) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    requires {[#"../../../../creusot-contracts/src/logic/fmap.rs" 38 18 38 22] inv3 self}
    requires {[#"../../../../creusot-contracts/src/logic/fmap.rs" 38 24 38 25] inv4 k}
    requires {[#"../../../../creusot-contracts/src/logic/fmap.rs" 38 30 38 31] inv5 v}
    ensures { result = insert0 self k v }
    
  axiom insert0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32, k : opaque_ptr, v : int32 . ([#"../../../../creusot-contracts/src/logic/fmap.rs" 38 18 38 22] inv3 self) -> ([#"../../../../creusot-contracts/src/logic/fmap.rs" 38 24 38 25] inv4 k) -> ([#"../../../../creusot-contracts/src/logic/fmap.rs" 38 30 38 31] inv5 v) -> ([#"../../../../creusot-contracts/src/logic/fmap.rs" 38 4 38 43] inv3 (insert0 self k v)) && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 37 4 37 68] not contains0 self k -> len0 (insert0 self k v) = len0 self + 1) && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 36 4 36 63] contains0 self k -> len0 (insert0 self k v) = len0 self) && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 35 14 35 71] view0 (insert0 self k v) = Map.set (view0 self) k (Core_Option_Option_Type.C_Some (make_sized0 v)))
  function remove0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    
  val remove0 (self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32) (k : opaque_ptr) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    requires {[#"../../../../creusot-contracts/src/logic/fmap.rs" 47 18 47 22] inv3 self}
    requires {[#"../../../../creusot-contracts/src/logic/fmap.rs" 47 24 47 25] inv4 k}
    ensures { result = remove0 self k }
    
  axiom remove0_spec : forall self : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32, k : opaque_ptr . ([#"../../../../creusot-contracts/src/logic/fmap.rs" 47 18 47 22] inv3 self) -> ([#"../../../../creusot-contracts/src/logic/fmap.rs" 47 24 47 25] inv4 k) -> ([#"../../../../creusot-contracts/src/logic/fmap.rs" 47 4 47 37] inv3 (remove0 self k)) && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 46 14 46 84] len0 (remove0 self k) = (if contains0 self k then
    len0 self - 1
  else
    len0 self
  )) && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 45 14 45 55] view0 (remove0 self k) = Map.set (view0 self) k (Core_Option_Option_Type.C_None))
  val take_mut0 (self : borrowed (CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32)) (ptr : opaque_ptr) : borrowed int32
    requires {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 227 15 227 42] contains0 (cur0 ( * self)) ptr}
    ensures { [#"../../../../creusot-contracts/src/ghost_ptr.rs" 228 14 228 59]  * result = lookup_unsized0 (cur0 ( * self)) ptr }
    ensures { [#"../../../../creusot-contracts/src/ghost_ptr.rs" 229 14 229 56] cur0 ( ^ self) = remove0 (cur0 ( * self)) ptr }
    ensures { [#"../../../../creusot-contracts/src/ghost_ptr.rs" 230 14 230 65] fin0 ( * self) = insert0 (fin0 ( ^ self)) ptr ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/ghost_ptr.rs" 231 14 231 42] not contains0 (fin0 ( ^ self)) ptr }
    ensures { [#"../../../../creusot-contracts/src/ghost_ptr.rs" 232 4 232 58] inv1 result }
    
  val borrow_mut0 (self : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)) : CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32
    ensures { [#"../../../../creusot-contracts/src/ghost_ptr.rs" 123 14 123 38] cur0 result = shallow_model0 ( * self) }
    ensures { [#"../../../../creusot-contracts/src/ghost_ptr.rs" 124 14 124 38] fin0 result = shallow_model0 ( ^ self) }
    
  val ptr_from_box0 (self : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32)) (val' : int32) : opaque_ptr
    requires {[#"../../../../creusot-contracts/src/ghost_ptr.rs" 71 35 71 38] inv0 val'}
    ensures { [#"../../../../creusot-contracts/src/ghost_ptr.rs" 67 4 67 42] not contains0 (shallow_model0 ( * self)) result }
    ensures { [#"../../../../creusot-contracts/src/ghost_ptr.rs" 70 14 70 55] shallow_model0 ( ^ self) = insert0 (shallow_model0 ( * self)) result val' }
    
  use map.Const
  function empty0 (_1 : ()) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
  val empty0 (_1 : ()) : CreusotContracts_Logic_Fmap_FMap_Type.t_fmap opaque_ptr int32
    ensures { result = empty0 _1 }
    
  axiom empty0_spec : forall _1 : () . ([#"../../../../creusot-contracts/src/logic/fmap.rs" 87 4 87 26] inv3 (empty0 _1)) && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 86 14 86 49] view0 (empty0 _1) = Const.const (Core_Option_Option_Type.C_None)) && ([#"../../../../creusot-contracts/src/logic/fmap.rs" 85 14 85 31] len0 (empty0 _1) = 0)
  val new0 (_1 : ()) : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32
    ensures { [#"../../../../creusot-contracts/src/ghost_ptr.rs" 41 14 41 38] shallow_model0 result = empty0 () }
    
  let constant promoted0 [#"../ghost_ptr_token.rs" 3 0 3 13]  : int32 = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = [#"../ghost_ptr_token.rs" 17 40 17 41] [#"../ghost_ptr_token.rs" 17 40 17 41] (1 : int32) in let _0 = _1 in _0
  let constant promoted1 [#"../ghost_ptr_token.rs" 3 0 3 13]  : int32 = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = [#"../ghost_ptr_token.rs" 16 40 16 41] [#"../ghost_ptr_token.rs" 16 40 16 41] (2 : int32) in let _0 = _1 in _0
  let constant promoted2 [#"../ghost_ptr_token.rs" 3 0 3 13]  : int32 = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = [#"../ghost_ptr_token.rs" 13 20 13 21] [#"../ghost_ptr_token.rs" 13 20 13 21] (2 : int32) in let _0 = _1 in _0
  let constant promoted3 [#"../ghost_ptr_token.rs" 3 0 3 13]  : int32 = [@vc:do_not_keep_trace] [@vc:sp]
    let _1 = [#"../ghost_ptr_token.rs" 12 20 12 21] [#"../ghost_ptr_token.rs" 12 20 12 21] (1 : int32) in let _0 = _1 in _0
  let rec cfg test [#"../ghost_ptr_token.rs" 3 0 3 13] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var token : CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32;
  var ptr1 : opaque_ptr;
  var _3 : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32);
  var ptr2 : opaque_ptr;
  var _6 : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32);
  var token_mut : CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32;
  var _9 : borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32);
  var m1 : borrowed int32;
  var _11 : borrowed (CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32);
  var m2 : borrowed int32;
  var _14 : borrowed (CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32);
  var _17 : (int32, int32);
  var left_val : int32;
  var right_val : int32;
  var kind : Core_Panicking_AssertKind_Type.t_assertkind;
  var _32 : int32;
  var _34 : int32;
  var _37 : (int32, int32);
  var left_val1 : int32;
  var right_val1 : int32;
  var kind1 : Core_Panicking_AssertKind_Type.t_assertkind;
  var _52 : int32;
  var _54 : int32;
  var _56 : ();
  var _57 : borrowed int32;
  var _58 : borrowed int32;
  var _60 : (int32, int32);
  var _62 : int32;
  var left_val2 : int32;
  var right_val2 : int32;
  var kind2 : Core_Panicking_AssertKind_Type.t_assertkind;
  var _78 : int32;
  var _80 : int32;
  var _83 : (int32, int32);
  var _85 : int32;
  var left_val3 : int32;
  var right_val3 : int32;
  var kind3 : Core_Panicking_AssertKind_Type.t_assertkind;
  var _101 : int32;
  var _103 : int32;
  var _105 : int32;
  var _106 : int32;
  var _107 : int32;
  var _108 : int32;
  {
    goto BB0
  }
  BB0 {
    [#"../ghost_ptr_token.rs" 4 20 4 40] token <- ([#"../ghost_ptr_token.rs" 4 20 4 40] new0 ());
    goto BB1
  }
  BB1 {
    [#"../ghost_ptr_token.rs" 5 15 5 46] _3 <- Borrow.borrow_mut token;
    [#"../ghost_ptr_token.rs" 5 15 5 46] token <-  ^ _3;
    goto BB2
  }
  BB2 {
    [#"../ghost_ptr_token.rs" 5 15 5 46] ptr1 <- ([#"../ghost_ptr_token.rs" 5 15 5 46] ptr_from_box0 _3 ([#"../ghost_ptr_token.rs" 5 43 5 44] [#"../ghost_ptr_token.rs" 5 43 5 44] (1 : int32)));
    _3 <- any borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32);
    goto BB3
  }
  BB3 {
    [#"../ghost_ptr_token.rs" 6 15 6 46] _6 <- Borrow.borrow_mut token;
    [#"../ghost_ptr_token.rs" 6 15 6 46] token <-  ^ _6;
    goto BB4
  }
  BB4 {
    [#"../ghost_ptr_token.rs" 6 15 6 46] ptr2 <- ([#"../ghost_ptr_token.rs" 6 15 6 46] ptr_from_box0 _6 ([#"../ghost_ptr_token.rs" 6 43 6 44] [#"../ghost_ptr_token.rs" 6 43 6 44] (2 : int32)));
    _6 <- any borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32);
    goto BB5
  }
  BB5 {
    [#"../ghost_ptr_token.rs" 8 24 8 42] _9 <- Borrow.borrow_mut token;
    [#"../ghost_ptr_token.rs" 8 24 8 42] token <-  ^ _9;
    [#"../ghost_ptr_token.rs" 8 24 8 42] token_mut <- ([#"../ghost_ptr_token.rs" 8 24 8 42] borrow_mut0 _9);
    _9 <- any borrowed (CreusotContracts_GhostPtr_GhostPtrToken_Type.t_ghostptrtoken int32);
    goto BB6
  }
  BB6 {
    [#"../ghost_ptr_token.rs" 9 13 9 37] _11 <- Borrow.borrow_mut token_mut;
    [#"../ghost_ptr_token.rs" 9 13 9 37] token_mut <-  ^ _11;
    [#"../ghost_ptr_token.rs" 9 13 9 37] m1 <- ([#"../ghost_ptr_token.rs" 9 13 9 37] take_mut0 _11 ([#"../ghost_ptr_token.rs" 9 32 9 36] ptr1));
    _11 <- any borrowed (CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32);
    goto BB7
  }
  BB7 {
    [#"../ghost_ptr_token.rs" 10 13 10 37] _14 <- Borrow.borrow_mut token_mut;
    [#"../ghost_ptr_token.rs" 10 13 10 37] token_mut <-  ^ _14;
    [#"../ghost_ptr_token.rs" 10 13 10 37] m2 <- ([#"../ghost_ptr_token.rs" 10 13 10 37] take_mut0 _14 ([#"../ghost_ptr_token.rs" 10 32 10 36] ptr2));
    _14 <- any borrowed (CreusotContracts_GhostPtr_GhostPtrTokenMut_Type.t_ghostptrtokenmut int32);
    goto BB8
  }
  BB8 {
    assume { resolve0 token_mut };
    _108 <- promoted3;
    _17 <- ( * m1, _108);
    left_val <- (let (a, _) = _17 in a);
    right_val <- (let (_, a) = _17 in a);
    assume { resolve1 _17 };
    switch (not left_val = right_val)
      | False -> goto BB10
      | True -> goto BB9
      end
  }
  BB9 {
    assume { resolve2 m2 };
    kind <- Core_Panicking_AssertKind_Type.C_Eq;
    _32 <- left_val;
    _34 <- right_val;
    assert { false };
    absurd
  }
  BB10 {
    _107 <- promoted2;
    _37 <- ( * m2, _107);
    left_val1 <- (let (a, _) = _37 in a);
    right_val1 <- (let (_, a) = _37 in a);
    assume { resolve1 _37 };
    switch (not left_val1 = right_val1)
      | False -> goto BB12
      | True -> goto BB11
      end
  }
  BB11 {
    assume { resolve2 m1 };
    kind1 <- Core_Panicking_AssertKind_Type.C_Eq;
    _52 <- left_val1;
    _54 <- right_val1;
    assert { false };
    absurd
  }
  BB12 {
    [#"../ghost_ptr_token.rs" 15 20 15 22] _57 <- Borrow.borrow_mut ( * m1);
    [#"../ghost_ptr_token.rs" 15 20 15 22] m1 <- { m1 with current =  ^ _57 };
    [#"../ghost_ptr_token.rs" 15 24 15 26] _58 <- Borrow.borrow_mut ( * m2);
    [#"../ghost_ptr_token.rs" 15 24 15 26] m2 <- { m2 with current =  ^ _58 };
    [#"../ghost_ptr_token.rs" 15 4 15 27] _56 <- ([#"../ghost_ptr_token.rs" 15 4 15 27] swap0 _57 _58);
    _57 <- any borrowed int32;
    _58 <- any borrowed int32;
    goto BB13
  }
  BB13 {
    assume { resolve2 m2 };
    assume { resolve2 m1 };
    [#"../ghost_ptr_token.rs" 16 16 16 38] _62 <- ([#"../ghost_ptr_token.rs" 16 16 16 38] ptr_as_ref0 ([#"../ghost_ptr_token.rs" 16 16 16 38] token) ([#"../ghost_ptr_token.rs" 16 33 16 37] ptr1));
    goto BB14
  }
  BB14 {
    _106 <- promoted1;
    _60 <- (_62, _106);
    left_val2 <- (let (a, _) = _60 in a);
    right_val2 <- (let (_, a) = _60 in a);
    assume { resolve1 _60 };
    switch (not left_val2 = right_val2)
      | False -> goto BB16
      | True -> goto BB15
      end
  }
  BB15 {
    kind2 <- Core_Panicking_AssertKind_Type.C_Eq;
    _78 <- left_val2;
    _80 <- right_val2;
    assert { false };
    absurd
  }
  BB16 {
    [#"../ghost_ptr_token.rs" 17 16 17 38] _85 <- ([#"../ghost_ptr_token.rs" 17 16 17 38] ptr_as_ref0 ([#"../ghost_ptr_token.rs" 17 16 17 38] token) ([#"../ghost_ptr_token.rs" 17 33 17 37] ptr2));
    goto BB17
  }
  BB17 {
    _105 <- promoted0;
    _83 <- (_85, _105);
    left_val3 <- (let (a, _) = _83 in a);
    right_val3 <- (let (_, a) = _83 in a);
    assume { resolve1 _83 };
    switch (not left_val3 = right_val3)
      | False -> goto BB19
      | True -> goto BB18
      end
  }
  BB18 {
    kind3 <- Core_Panicking_AssertKind_Type.C_Eq;
    _101 <- left_val3;
    _103 <- right_val3;
    assert { false };
    absurd
  }
  BB19 {
    [#"../ghost_ptr_token.rs" 3 14 18 1] _0 <- ([#"../ghost_ptr_token.rs" 3 14 18 1] ());
    return _0
  }
  
end
