<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.12.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="6" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="hashmap.mlcfg"/>
<theory name="Hashmap_Impl2_Hash" proved="true">
 <goal name="hash&#39;vc" expl="VC for hash" proved="true">
 <proof prover="6"><result status="valid" time="0.00" steps="16"/></proof>
 </goal>
</theory>
<theory name="Hashmap_Impl5_New" proved="true">
 <goal name="new&#39;vc" expl="VC for new" proved="true">
 <proof prover="6"><result status="valid" time="0.02" steps="319"/></proof>
 </goal>
</theory>
<theory name="Hashmap_Impl5_Add" proved="true">
 <goal name="add&#39;vc" expl="VC for add" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="add&#39;vc.0" expl="remainder by zero" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="34"/></proof>
  </goal>
  <goal name="add&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="add&#39;vc.2" expl="division by zero" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="27"/></proof>
  </goal>
  <goal name="add&#39;vc.3" expl="integer overflow" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="231"/></proof>
  </goal>
  <goal name="add&#39;vc.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="323"/></proof>
  </goal>
  <goal name="add&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="53960"/></proof>
  </goal>
  <goal name="add&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.07" steps="302964"/></proof>
  </goal>
  <goal name="add&#39;vc.7" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="65"/></proof>
  </goal>
  <goal name="add&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="65"/></proof>
  </goal>
  <goal name="add&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="65"/></proof>
  </goal>
  <goal name="add&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="478"/></proof>
  </goal>
  <goal name="add&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="67"/></proof>
  </goal>
  <goal name="add&#39;vc.12" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="add&#39;vc.12.0" expl="assertion" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="add&#39;vc.12.0.0" expl="VC for add" proved="true">
    <proof prover="6"><result status="valid" time="0.02" steps="374"/></proof>
    </goal>
    <goal name="add&#39;vc.12.0.1" expl="VC for add" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="add&#39;vc.12.0.1.0" expl="VC for add" proved="true">
     <proof prover="6" timelimit="5" memlimit="2000"><result status="valid" time="2.32" steps="28355"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="add&#39;vc.12.0.2" expl="VC for add" proved="true">
    <proof prover="1"><result status="valid" time="0.44" steps="40685"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add&#39;vc.13" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="128"/></proof>
  </goal>
  <goal name="add&#39;vc.14" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.21" steps="395680"/></proof>
  </goal>
  <goal name="add&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.44" steps="34874"/></proof>
  </goal>
  <goal name="add&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="125153"/></proof>
  </goal>
  <goal name="add&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.20" steps="30526"/></proof>
  </goal>
  <goal name="add&#39;vc.18" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="396"/></proof>
  </goal>
  <goal name="add&#39;vc.19" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.39" steps="30332"/></proof>
  </goal>
  <goal name="add&#39;vc.20" expl="unreachable point" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="293"/></proof>
  </goal>
  <goal name="add&#39;vc.21" expl="unreachable point" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="229"/></proof>
  </goal>
  <goal name="add&#39;vc.22" expl="unreachable point" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="163"/></proof>
  </goal>
  <goal name="add&#39;vc.23" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="add&#39;vc.23.0" expl="assertion" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="add&#39;vc.23.0.0" expl="VC for add" proved="true">
    <proof prover="6"><result status="valid" time="0.01" steps="167"/></proof>
    </goal>
    <goal name="add&#39;vc.23.0.1" expl="VC for add" proved="true">
    <proof prover="6"><result status="valid" time="0.77" steps="7331"/></proof>
    </goal>
    <goal name="add&#39;vc.23.0.2" expl="VC for add" proved="true">
    <proof prover="6"><result status="valid" time="0.07" steps="2220"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="add&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="225090"/></proof>
  </goal>
  <goal name="add&#39;vc.25" expl="postcondition" proved="true">
  <transf name="remove" proved="true" arg1="(-),(&gt;),(&lt;=),(&gt;=),([&lt;-]&#39;),([]),singleton,cons,snoc,(++),id,no_double_binding,Unit_def_l,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Abs_le,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,new&#39;spec,slice&#39;invariant,shallow_model_spec,Assume,Ensures6,Ensures5,Assert,Ensures4,Ensures3,Ensures">
   <goal name="add&#39;vc.25.0" expl="postcondition" proved="true">
   <transf name="remove" proved="true" arg1="get2,uint64&#39;maxInt,uint64&#39;minInt,max_uint64,length2,radix,Assoc,Unit_def_r,Inv_def_l,Inv_def_r,Trans,Antisymm,Total,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod1,Div_bound,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,to_int_in_bounds">
    <goal name="add&#39;vc.25.0.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.46" steps="59506"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Hashmap_Impl5_Get" proved="true">
 <goal name="get&#39;vc" expl="VC for get" proved="true">
 <proof prover="6"><result status="valid" time="0.53" steps="4502"/></proof>
 </goal>
</theory>
<theory name="Hashmap_Impl5_Resize" proved="true">
 <goal name="resize&#39;vc" expl="VC for resize" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="resize&#39;vc.0" expl="integer overflow" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="23"/></proof>
  </goal>
  <goal name="resize&#39;vc.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="32"/></proof>
  </goal>
  <goal name="resize&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="96285"/></proof>
  </goal>
  <goal name="resize&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="54"/></proof>
  </goal>
  <goal name="resize&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="40"/></proof>
  </goal>
  <goal name="resize&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="24"/></proof>
  </goal>
  <goal name="resize&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="24"/></proof>
  </goal>
  <goal name="resize&#39;vc.7" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="15906"/></proof>
  </goal>
  <goal name="resize&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="42"/></proof>
  </goal>
  <goal name="resize&#39;vc.9" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="90"/></proof>
  </goal>
  <goal name="resize&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="81"/></proof>
  </goal>
  <goal name="resize&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="107"/></proof>
  </goal>
  <goal name="resize&#39;vc.12" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="109"/></proof>
  </goal>
  <goal name="resize&#39;vc.13" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.19" steps="285308"/></proof>
  </goal>
  <goal name="resize&#39;vc.14" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="235"/></proof>
  </goal>
  <goal name="resize&#39;vc.15" expl="loop invariant init" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="292"/></proof>
  </goal>
  <goal name="resize&#39;vc.16" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="52235"/></proof>
  </goal>
  <goal name="resize&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="106"/></proof>
  </goal>
  <goal name="resize&#39;vc.18" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="934"/></proof>
  </goal>
  <goal name="resize&#39;vc.19" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="954"/></proof>
  </goal>
  <goal name="resize&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.21" steps="33197"/></proof>
  </goal>
  <goal name="resize&#39;vc.21" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="110000"/></proof>
  </goal>
  <goal name="resize&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="1176"/></proof>
  </goal>
  <goal name="resize&#39;vc.23" expl="unreachable point" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="127"/></proof>
  </goal>
  <goal name="resize&#39;vc.24" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="4273"/></proof>
  </goal>
  <goal name="resize&#39;vc.25" expl="integer overflow" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="119"/></proof>
  </goal>
  <goal name="resize&#39;vc.26" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="143"/></proof>
  </goal>
  <goal name="resize&#39;vc.27" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="124"/></proof>
  </goal>
  <goal name="resize&#39;vc.28" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="267"/></proof>
  </goal>
  <goal name="resize&#39;vc.29" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="88"/></proof>
  </goal>
  <goal name="resize&#39;vc.30" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="30098"/></proof>
  </goal>
  <goal name="resize&#39;vc.31" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="132"/></proof>
  </goal>
  <goal name="resize&#39;vc.32" expl="loop invariant preservation" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="98"/></proof>
  </goal>
  <goal name="resize&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.01" steps="72"/></proof>
  </goal>
  <goal name="resize&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="105859"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Hashmap_Main" proved="true">
 <goal name="main&#39;vc" expl="VC for main" proved="true">
 <proof prover="6"><result status="valid" time="0.02" steps="83"/></proof>
 </goal>
</theory>
<theory name="Hashmap_Impl0" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="6"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
</theory>
<theory name="Hashmap_Impl2" proved="true">
 <goal name="hash_refn" proved="true">
 <proof prover="6"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
</file>
</why3session>
