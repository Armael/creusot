module Ambient
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double

  type usize = int
  type isize = int

  type borrowed 'a = { current : 'a ; final : 'a; }
  let function ( *_ ) x = x.current
  let function ( ^_ ) x = x.final
  val borrow_mut (a : 'a) : borrowed 'a
  ensures { *result = a }

  predicate drop_fix (_ : 'a) = true
  predicate drop_uint (_ : 'a) = true
  predicate drop_int (_ : 'a) = true
  predicate drop_float (_ : 'a) = true
  predicate drop_bool (_ : 'a) = true
  predicate drop_mut_ref (b : borrowed 'a) = ^ b = * b
  predicate drop_ref (_ : 'a) = true

  scope Type
  end
  let rec cfg main () : ()
    =
  var _0 : ();
  var x_1 : int32;
  var y_2 : borrowed int32;
  {
    goto BB0
  }
  BB0 {
    x_1 <- 0;
    y_2 <- borrow_mut x_1;
    x_1 <-  ^ y_2;
    assume { drop_int x_1 };
    y_2 <- { y_2 with current = 5 };
    assume { drop_mut_ref y_2 };
    _0 <- ();
    return _0
  }


end
