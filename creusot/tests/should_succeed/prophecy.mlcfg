module Ambient
use Ref 
use mach.int.Int 
use mach.int.Int32
use mach.int.Int64
use mach.int.UInt32
use mach.int.UInt64
use string.Char
use floating_point.Single
use floating_point.Double
(** Generic Type for borrowed values *) 
type borrowed 'a = 
{ current : 'a ; 
final : 'a; (* The "future" value when borrow will end *) 
} 
let function ( *_ ) x = x.current 
let function ( ^_ ) x = x.final 
val borrow_mut (a : 'a) : borrowed 'a 
ensures { *result = a }
type usize = int
type isize = int
  let cfg main () : ()
    =
  var _0 : ();
  var x_1 : int32;
  var y_2 : borrowed int32;
  {
    goto BB0;
  }
  BB0 {
    x_1 <- 0;
    y_2 <- borrow_mut x_1;
    x_1 <-  ^ y_2;
    y_2 <- { y_2 with current = 5 };
    assume { ^ y_2 = * y_2 };
    _0 <- ();
    _0
  }

end
