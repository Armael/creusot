module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
end
module C07ExternSpec_Impl0_Test_Interface
  val test [@cfg:stackify] (self : ()) : ()
end
module C07ExternSpec_Impl0_Test
  let rec cfg test [@cfg:stackify] [#"../07_extern_spec.rs" 10 4 17] (self : ()) : () =
  var _0 : ();
  var self_1 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module C07ExternSpec_Impl1_Meth_Interface
  type t
  type f
  use prelude.Prelude
  use seq.Seq
  val meth [@cfg:stackify] (self : seq t) (f : f) : ()
end
module C07ExternSpec_Impl1_Meth
  type t
  type f
  use prelude.Prelude
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = f
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = seq t
  let rec cfg meth [@cfg:stackify] [#"../07_extern_spec.rs" 18 4 27] (self : seq t) (f : f) : () =
  var _0 : ();
  var self_1 : seq t;
  var f_2 : f;
  {
    self_1 <- self;
    f_2 <- f;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve f_2 };
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Core_Slice_Impl0_Len_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (Model0.model self) = UInt64.to_int result }
    
end
module Core_Slice_Impl0_Len
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (Model0.model self) = UInt64.to_int result }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt64
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . Seq.length (model self) <= 18446744073709551615 && model self = Prelude.id self
end
module C07ExternSpec_Omg_Interface
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  val omg [@cfg:stackify] (x : borrowed (seq uint32)) : ()
end
module C07ExternSpec_Omg
  use prelude.Prelude
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.UInt64
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model1 with type t = uint32, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy as ModelTy0 with type t = uint32
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = seq uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Slice_Impl0_Len_Interface as Len0 with type t = uint32, function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = seq uint32
  let rec cfg omg [@cfg:stackify] [#"../07_extern_spec.rs" 21 0 25] (x : borrowed (seq uint32)) : () =
  var _0 : ();
  var x_1 : borrowed (seq uint32);
  var _2 : usize;
  var _3 : seq uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _3 <-  * x_1;
    assume { Resolve0.resolve x_1 };
    _2 <- ([#"../07_extern_spec.rs" 22 12 19] Len0.len _3);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
module C07ExternSpec_Omg_Test_Interface
  type self
  val test [@cfg:stackify] (self : self) : ()
end
module C07ExternSpec_Omg_Test
  type self
  val test [@cfg:stackify] (self : self) : ()
end
module C07ExternSpec_Impl0
  clone C07ExternSpec_Impl0_Test_Interface as Test0
  clone C07ExternSpec_Omg_Test_Interface as Test1 with type self = (), val test = Test0.test
end
module C07ExternSpec_GenericMethod_Meth_Interface
  type self
  type f
  use prelude.Prelude
  val meth [@cfg:stackify] (self : self) (f : f) : ()
end
module C07ExternSpec_GenericMethod_Meth
  type self
  type f
  use prelude.Prelude
  val meth [@cfg:stackify] (self : self) (f : f) : ()
end
module C07ExternSpec_Impl1
  type t
  type f
  use prelude.Prelude
  use seq.Seq
  clone C07ExternSpec_Impl1_Meth_Interface as Meth0 with type t = t, type f = f
  clone C07ExternSpec_GenericMethod_Meth_Interface as Meth1 with type self = seq t, type f = f, val meth = Meth0.meth
end
