module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type c02operators_x  = 
    | C02Operators_X usize
    
  let function c02operators_x_X_a (self : c02operators_x) : usize = 
    match (self) with
      | C02Operators_X a -> a
      end
end
module C02Operators_Division_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val division [@cfg:stackify] (x : usize) (y : usize) : usize
end
module C02Operators_Division
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  let rec cfg division [@cfg:stackify] (x : usize) (y : usize) : usize = 
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _3 : usize;
  var _4 : usize;
  var _5 : bool;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _3 <- x_1;
    _4 <- y_2;
    _5 <- ([#"../02_operators.rs" 6 4 9] _4 = (0 : usize));
    assert { not _5 };
    goto BB1
  }
  BB1 {
    _0 <- ([#"../02_operators.rs" 6 4 9] _3 / _4);
    return _0
  }
  
end
module C02Operators_Modulus_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val modulus [@cfg:stackify] (x : usize) (y : usize) : usize
end
module C02Operators_Modulus
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  let rec cfg modulus [@cfg:stackify] (x : usize) (y : usize) : usize = 
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _3 : usize;
  var _4 : usize;
  var _5 : bool;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _3 <- x_1;
    _4 <- y_2;
    _5 <- ([#"../02_operators.rs" 20 4 9] _4 = (0 : usize));
    assert { not _5 };
    goto BB1
  }
  BB1 {
    _0 <- ([#"../02_operators.rs" 20 4 9] _3 % _4);
    return _0
  }
  
end
module C02Operators_Multiply_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val multiply [@cfg:stackify] (x : usize) (y : usize) : usize
end
module C02Operators_Multiply
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  let rec cfg multiply [@cfg:stackify] (x : usize) (y : usize) : usize = 
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _3 : usize;
  var _4 : usize;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _3 <- x_1;
    _4 <- y_2;
    _0 <- ([#"../02_operators.rs" 34 4 9] _3 * _4);
    return _0
  }
  
end
module C02Operators_Add_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val add [@cfg:stackify] (x : usize) (y : usize) : usize
end
module C02Operators_Add
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  let rec cfg add [@cfg:stackify] (x : usize) (y : usize) : usize = 
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _3 : usize;
  var _4 : usize;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _3 <- x_1;
    _4 <- y_2;
    _0 <- ([#"../02_operators.rs" 43 4 9] _3 + _4);
    return _0
  }
  
end
module C02Operators_Sub_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val sub [@cfg:stackify] (x : usize) (y : usize) : usize
end
module C02Operators_Sub
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  let rec cfg sub [@cfg:stackify] (x : usize) (y : usize) : usize = 
  var _0 : usize;
  var x_1 : usize;
  var y_2 : usize;
  var _3 : usize;
  var _4 : usize;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _3 <- x_1;
    _4 <- y_2;
    _0 <- ([#"../02_operators.rs" 57 4 9] _3 - _4);
    return _0
  }
  
end
module C02Operators_Expression_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val expression [@cfg:stackify] (x : usize) (y : usize) (z : usize) : bool
end
module C02Operators_Expression
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  let rec cfg expression [@cfg:stackify] (x : usize) (y : usize) (z : usize) : bool = 
  var _0 : bool;
  var x_1 : usize;
  var y_2 : usize;
  var z_3 : usize;
  var _4 : usize;
  var _5 : usize;
  var _6 : usize;
  var _7 : usize;
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : usize;
  var _12 : usize;
  var _13 : usize;
  var _14 : bool;
  var _15 : usize;
  {
    x_1 <- x;
    y_2 <- y;
    z_3 <- z;
    goto BB0
  }
  BB0 {
    _6 <- x_1;
    _7 <- y_2;
    _8 <- ([#"../02_operators.rs" 68 4 9] _7 = (0 : usize));
    assert { not _8 };
    goto BB1
  }
  BB1 {
    _5 <- ([#"../02_operators.rs" 68 4 9] _6 / _7);
    _9 <- z_3;
    _4 <- ([#"../02_operators.rs" 68 4 13] _5 * _9);
    _12 <- x_1;
    _13 <- y_2;
    _14 <- ([#"../02_operators.rs" 68 17 24] _13 = (0 : usize));
    assert { not _14 };
    goto BB2
  }
  BB2 {
    _11 <- ([#"../02_operators.rs" 68 17 24] _12 / _13);
    _15 <- z_3;
    _10 <- ([#"../02_operators.rs" 68 17 28] _11 * _15);
    _0 <- ([#"../02_operators.rs" 68 4 28] _4 = _10);
    return _0
  }
  
end
module C02Operators_DivisionInt_Interface
  use mach.int.Int
  function division_int (x : int) (y : int) : int
end
module C02Operators_DivisionInt
  use mach.int.Int
  function division_int (x : int) (y : int) : int = 
    [#"../02_operators.rs" 15 0 38] div x y
end
module C02Operators_ModulusInt_Interface
  use mach.int.Int
  function modulus_int (x : int) (y : int) : int
end
module C02Operators_ModulusInt
  use mach.int.Int
  function modulus_int (x : int) (y : int) : int = 
    [#"../02_operators.rs" 29 0 37] Int.mod x y
end
module C02Operators_MultiplyInt_Interface
  use mach.int.Int
  function multiply_int (x : int) (y : int) : int
end
module C02Operators_MultiplyInt
  use mach.int.Int
  function multiply_int (x : int) (y : int) : int = 
    [#"../02_operators.rs" 38 0 38] x * y
end
module C02Operators_AddInt_Interface
  use mach.int.Int
  function add_int (x : int) (y : int) : int
end
module C02Operators_AddInt
  use mach.int.Int
  function add_int (x : int) (y : int) : int = 
    [#"../02_operators.rs" 47 0 33] x + y
end
module C02Operators_SubInt_Interface
  use mach.int.Int
  function sub_int (x : int) (y : int) : int
end
module C02Operators_SubInt
  use mach.int.Int
  function sub_int (x : int) (y : int) : int = 
    [#"../02_operators.rs" 61 0 33] x - y
end
module C02Operators_ExpressionLogic_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function expression_logic (x : usize) (y : usize) (z : usize) : bool
end
module C02Operators_ExpressionLogic
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function expression_logic (x : usize) (y : usize) (z : usize) : bool = 
    [#"../02_operators.rs" 72 0 57] div x y * z = div x y * z
end
module C02Operators_PrimitiveComparison_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  val primitive_comparison [@cfg:stackify] (x : Type.c02operators_x) : ()
    ensures { [#"../02_operators.rs" 80 0 26] Type.c02operators_x_X_a x <= Type.c02operators_x_X_a x }
    
end
module C02Operators_PrimitiveComparison
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  let rec cfg primitive_comparison [@cfg:stackify] (x : Type.c02operators_x) : ()
    ensures { [#"../02_operators.rs" 80 0 26] Type.c02operators_x_X_a x <= Type.c02operators_x_X_a x }
    
   = 
  var _0 : ();
  var x_1 : Type.c02operators_x;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module C02Operators_BoolEq_Interface
  val bool_eq [@cfg:stackify] (a : bool) (b : bool) : bool
    ensures { [#"../02_operators.rs" 83 0 30] result = (a = b) }
    
end
module C02Operators_BoolEq
  use prelude.Prelude
  let rec cfg bool_eq [@cfg:stackify] (a : bool) (b : bool) : bool
    ensures { [#"../02_operators.rs" 83 0 30] result = (a = b) }
    
   = 
  var _0 : bool;
  var a_1 : bool;
  var b_2 : bool;
  var _3 : bool;
  var _4 : bool;
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _3 <- a_1;
    _4 <- b_2;
    _0 <- Prelude.eqb _3 _4;
    return _0
  }
  
end
module C02Operators_OldTest_Interface
  val old_test [@cfg:stackify] (x : bool) : ()
    ensures { [#"../02_operators.rs" 88 0 23] old(x) = x }
    
end
module C02Operators_OldTest
  let rec cfg old_test [@cfg:stackify] (x : bool) : ()
    ensures { [#"../02_operators.rs" 88 0 23] old(x) = x }
    
   = 
  var _0 : ();
  var x_1 : bool;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
