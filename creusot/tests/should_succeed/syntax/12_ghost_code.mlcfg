
module CreusotContracts_Logic_Ghost_Ghost_Type
  type creusotcontracts_logic_ghost_ghost_type 't =
    | CreusotContracts_Logic_Ghost_Ghost_Type 't
    
  let function creusotcontracts_logic_ghost_ghost_type_Ghost_0 (self : creusotcontracts_logic_ghost_ghost_type 't) : 't
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | CreusotContracts_Logic_Ghost_Ghost_Type a -> a
      end
end
module CreusotContracts_Logic_Ghost_Impl0_Deref_Interface
  type t
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type
  function deref (self : CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Deref
  type t
  use prelude.Borrow
  use CreusotContracts_Logic_Ghost_Ghost_Type
  function deref (self : CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type t) : t
  val deref (self : CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type t) : t
    ensures { result = deref self }
    
  axiom deref_spec : forall self : CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type t . deref self = CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type_Ghost_0 self
end
module CreusotContracts_Logic_Ghost_Impl0
  type t
end
module C12GhostCode_GhostArg_Interface
  use mach.int.Int
  use mach.int.UInt32
  use CreusotContracts_Logic_Ghost_Ghost_Type
  val ghost_arg [@cfg:stackify] (g : CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type uint32) : ()
    
end
module C12GhostCode_GhostArg
  use mach.int.Int
  use mach.int.UInt32
  use CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Ghost_Impl0_Deref as Deref0 with type t = uint32, axiom .
  let rec cfg ghost_arg [@cfg:stackify] [#"../12_ghost_code.rs" 4 0 4 31] (g : CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type uint32) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var g_1 : CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type uint32;
  var _x_2 : CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type uint32;
  var _5 : ();
  {
    g_1 <- g;
    goto BB0
  }
  BB0 {
    _5 <- ();
    _x_2 <- ([#"../12_ghost_code.rs" 5 25 5 38] CreusotContracts_Logic_Ghost_Ghost_Type.CreusotContracts_Logic_Ghost_Ghost_Type (Deref0.deref g_1));
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type core_ptr_nonnull_nonnull_type 't =
    | Core_Ptr_NonNull_NonNull_Type opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_ptr_unique_unique_type 't =
    | Core_Ptr_Unique_Unique_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type
  type alloc_rawvec_rawvec_type 't 'a =
    | Alloc_RawVec_RawVec_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type
  type alloc_vec_vec_type 't 'a =
    | Alloc_Vec_Vec_Type (Alloc_RawVec_RawVec_Type.alloc_rawvec_rawvec_type 't 'a) usize
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
  val model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
    ensures { result = model self }
    
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a . Seq.length (model self) <= 18446744073709551615
end
module Alloc_Alloc_Global_Type
  type alloc_alloc_global_type  =
    | Alloc_Alloc_Global_Type
    
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val new [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val new [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) =
    forall i : int . 0 <= i /\ i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
  val resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module C12GhostCode_GhostVec_Interface
  val ghost_vec [@cfg:stackify] (_ : ()) : ()
end
module C12GhostCode_GhostVec
  use mach.int.Int
  use mach.int.UInt32
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = uint32
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = uint32,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve0 with type t = uint32, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = uint32, function Model0.model = Model0.model
  let rec cfg ghost_vec [@cfg:stackify] [#"../12_ghost_code.rs" 8 0 8 18] (_ : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : Alloc_Vec_Vec_Type.alloc_vec_vec_type uint32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _s_2 : CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type uint32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _4 : ();
  {
    goto BB0
  }
  BB0 {
    x_1 <- ([#"../12_ghost_code.rs" 9 22 9 32] New0.new ());
    goto BB1
  }
  BB1 {
    _4 <- ();
    _s_2 <- ([#"../12_ghost_code.rs" 10 32 10 44] CreusotContracts_Logic_Ghost_Ghost_Type.CreusotContracts_Logic_Ghost_Ghost_Type x_1);
    goto BB2
  }
  BB2 {
    _0 <- ();
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve x_1 };
    return _0
  }
  
end
module C12GhostCode_Omg_Interface
  function omg (_ : ()) : ()
end
module C12GhostCode_Omg
  function omg [#"../12_ghost_code.rs" 14 0 14 12] (_ : ()) : () =
    [#"../12_ghost_code.rs" 13 0 13 8] ()
  val omg (_wild0 : ()) : ()
    ensures { result = omg _wild0 }
    
end
module C12GhostCode_GhostCopy_Interface
  val ghost_copy [@cfg:stackify] (_ : ()) : ()
end
module C12GhostCode_GhostCopy
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Ghost_Impl0_Deref as Deref0 with type t = Seq.seq int32, axiom .
  let rec cfg ghost_copy [@cfg:stackify] [#"../12_ghost_code.rs" 16 0 16 19] (_ : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a_1 : int32;
  var _s_2 : CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type (Seq.seq int32);
  var _5 : ();
  var _6 : CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type (Seq.seq int32);
  var _9 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- (0 : int32);
    _5 <- ();
    _s_2 <- ([#"../12_ghost_code.rs" 18 17 18 46] CreusotContracts_Logic_Ghost_Ghost_Type.CreusotContracts_Logic_Ghost_Ghost_Type (Seq.snoc (Seq.empty ) (0 : int32)));
    goto BB1
  }
  BB1 {
    _9 <- ();
    _6 <- ([#"../12_ghost_code.rs" 19 9 19 34] CreusotContracts_Logic_Ghost_Ghost_Type.CreusotContracts_Logic_Ghost_Ghost_Type (Seq.snoc (Deref0.deref _s_2) a_1));
    goto BB2
  }
  BB2 {
    _s_2 <- _6;
    _6 <- any CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type (Seq.seq int32);
    _0 <- ();
    return _0
  }
  
end
module C12GhostCode_LogiDrop_Interface
  type t
  function logi_drop (_1' : t) : ()
end
module C12GhostCode_LogiDrop
  type t
  function logi_drop [#"../12_ghost_code.rs" 23 0 23 21] (_1' : t) : () =
    [#"../12_ghost_code.rs" 22 0 22 8] ()
  val logi_drop (_1' : t) : ()
    ensures { result = logi_drop _1' }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module C12GhostCode_GhostCheck_Interface
  val ghost_check [@cfg:stackify] (_ : ()) : ()
end
module C12GhostCode_GhostCheck
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use prelude.Borrow
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = int32
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = int32,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve0 with type t = int32, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = int32,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = int32,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model
  clone C12GhostCode_LogiDrop as LogiDrop0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = int32, function Model0.model = Model0.model
  let rec cfg ghost_check [@cfg:stackify] [#"../12_ghost_code.rs" 25 0 25 20] (_ : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _2 : CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type ();
  var _4 : ();
  var _5 : ();
  var _6 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _7 : ();
  var _8 : bool;
  var _9 : bool;
  var _10 : usize;
  var _11 : Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _12 : ();
  {
    goto BB0
  }
  BB0 {
    x_1 <- ([#"../12_ghost_code.rs" 26 16 26 26] New0.new ());
    goto BB1
  }
  BB1 {
    _4 <- ();
    _2 <- ([#"../12_ghost_code.rs" 29 4 29 31] CreusotContracts_Logic_Ghost_Ghost_Type.CreusotContracts_Logic_Ghost_Ghost_Type (let _ = LogiDrop0.logi_drop x_1 in ()));
    goto BB2
  }
  BB2 {
    _6 <- borrow_mut x_1;
    x_1 <-  ^ _6;
    _5 <- ([#"../12_ghost_code.rs" 31 4 31 13] Push0.push _6 (0 : int32));
    goto BB3
  }
  BB3 {
    _11 <- x_1;
    _10 <- ([#"../12_ghost_code.rs" 33 12 33 19] Len0.len _11);
    goto BB4
  }
  BB4 {
    _9 <- ([#"../12_ghost_code.rs" 33 12 33 24] _10 = (1 : usize));
    _8 <- not _9;
    switch (_8)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    absurd
  }
  BB6 {
    _7 <- ();
    _0 <- ();
    goto BB7
  }
  BB7 {
    assume { Resolve0.resolve x_1 };
    return _0
  }
  
end
module C12GhostCode_MyStruct_Type
  use mach.int.Int
  use mach.int.UInt32
  use CreusotContracts_Logic_Ghost_Ghost_Type
  type c12ghostcode_mystruct_type  =
    | C12GhostCode_MyStruct_Type uint32 (CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type uint32)
    
  let function c12ghostcode_mystruct_type_MyStruct_g (self : c12ghostcode_mystruct_type) : CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type uint32
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C12GhostCode_MyStruct_Type _ a -> a
      end
  let function c12ghostcode_mystruct_type_MyStruct_f (self : c12ghostcode_mystruct_type) : uint32
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C12GhostCode_MyStruct_Type a _ -> a
      end
end
module C12GhostCode_TakesStruct_Interface
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  use CreusotContracts_Logic_Ghost_Ghost_Type
  use C12GhostCode_MyStruct_Type
  clone CreusotContracts_Logic_Ghost_Impl0_Deref_Interface as Deref0 with type t = uint32, axiom .
  val takes_struct [@cfg:stackify] (x : C12GhostCode_MyStruct_Type.c12ghostcode_mystruct_type) : ()
    requires {[#"../12_ghost_code.rs" 41 11 41 20] UInt32.to_int (Deref0.deref (C12GhostCode_MyStruct_Type.c12ghostcode_mystruct_type_MyStruct_g x)) = 0}
    
end
module C12GhostCode_TakesStruct
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  use CreusotContracts_Logic_Ghost_Ghost_Type
  use C12GhostCode_MyStruct_Type
  clone CreusotContracts_Logic_Ghost_Impl0_Deref as Deref0 with type t = uint32, axiom .
  let rec cfg takes_struct [@cfg:stackify] [#"../12_ghost_code.rs" 42 0 42 36] (x : C12GhostCode_MyStruct_Type.c12ghostcode_mystruct_type) : ()
    requires {[#"../12_ghost_code.rs" 41 11 41 20] UInt32.to_int (Deref0.deref (C12GhostCode_MyStruct_Type.c12ghostcode_mystruct_type_MyStruct_g x)) = 0}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : C12GhostCode_MyStruct_Type.c12ghostcode_mystruct_type;
  var _3 : CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type uint32;
  var _6 : ();
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _6 <- ();
    _3 <- ([#"../12_ghost_code.rs" 43 10 43 24] CreusotContracts_Logic_Ghost_Ghost_Type.CreusotContracts_Logic_Ghost_Ghost_Type (C12GhostCode_MyStruct_Type.c12ghostcode_mystruct_type_MyStruct_f x_1));
    goto BB1
  }
  BB1 {
    x_1 <- (let C12GhostCode_MyStruct_Type.C12GhostCode_MyStruct_Type a b = x_1 in C12GhostCode_MyStruct_Type.C12GhostCode_MyStruct_Type a _3);
    _3 <- any CreusotContracts_Logic_Ghost_Ghost_Type.creusotcontracts_logic_ghost_ghost_type uint32;
    _0 <- ();
    return _0
  }
  
end
