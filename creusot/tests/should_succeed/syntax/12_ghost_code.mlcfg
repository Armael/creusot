module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
end
module C12GhostCode_GhostCopy_Interface
  val ghost_copy [@cfg:stackify] (_ : ()) : ()
end
module C12GhostCode_GhostCopy
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  let rec cfg ghost_copy [@cfg:stackify] [#"../12_ghost_code.rs" 16 0 15] (_ : ()) : () =
  var _0 : ();
  var a_1 : int32;
  ghost var s_2 : Seq.seq int32;
  var _3 : ();
  ghost var _4 : Seq.seq int32;
  var _5 : ();
  {
    goto BB0
  }
  BB0 {
    a_1 <- (0 : int32);
    _3 <- ();
    s_2 <- ghost ([#"../12_ghost_code.rs" 18 16 45] Seq.snoc (Seq.empty ) (0 : int32));
    goto BB1
  }
  BB1 {
    _5 <- ();
    _4 <- ghost ([#"../12_ghost_code.rs" 19 8 40] Seq.snoc s_2 a_1);
    goto BB2
  }
  BB2 {
    s_2 <- _4;
    _0 <- ();
    return _0
  }
  
end
module C12GhostCode_LogiDrop_Interface
  type t
  function logi_drop (_1' : t) : ()
end
module C12GhostCode_LogiDrop
  type t
  function logi_drop [#"../12_ghost_code.rs" 29 0 21] (_1' : t) : () =
    [#"../12_ghost_code.rs" 29 0 21] ()
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 9223372036854775807
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val new [@cfg:stackify] (_ : ()) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Type.alloc_vec_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Type.alloc_vec_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl1_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl1_Resolve
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) =
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_Impl1
  type t
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = t, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = Type.alloc_vec_vec t (Type.alloc_alloc_global),
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.alloc_vec_vec t a,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.alloc_vec_vec t a,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module C12GhostCode_GhostCheck_Interface
  val ghost_check [@cfg:stackify] (_ : ()) : ()
end
module C12GhostCode_GhostCheck
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone C12GhostCode_LogiDrop as LogiDrop0 with type t = Type.alloc_vec_vec int32 (Type.alloc_alloc_global)
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = int32
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = int32, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = int32, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = int32, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = int32, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = int32, function Model0.model = Model0.model
  let rec cfg ghost_check [@cfg:stackify] [#"../12_ghost_code.rs" 31 0 16] (_ : ()) : () =
  var _0 : ();
  var x_1 : Type.alloc_vec_vec int32 (Type.alloc_alloc_global);
  ghost var _2 : ();
  var _3 : ();
  var _4 : ();
  var _5 : borrowed (Type.alloc_vec_vec int32 (Type.alloc_alloc_global));
  var _6 : ();
  var _7 : bool;
  var _8 : bool;
  var _9 : usize;
  var _10 : Type.alloc_vec_vec int32 (Type.alloc_alloc_global);
  var _11 : ();
  {
    goto BB0
  }
  BB0 {
    x_1 <- ([#"../12_ghost_code.rs" 32 16 26] New0.new ());
    goto BB1
  }
  BB1 {
    _3 <- ();
    _2 <- ghost ([#"../12_ghost_code.rs" 35 4 31] let _ = LogiDrop0.logi_drop x_1 in ());
    goto BB2
  }
  BB2 {
    _5 <- borrow_mut x_1;
    x_1 <-  ^ _5;
    _4 <- ([#"../12_ghost_code.rs" 37 4 13] Push0.push _5 (0 : int32));
    goto BB3
  }
  BB3 {
    _10 <- x_1;
    _9 <- ([#"../12_ghost_code.rs" 39 12 19] Len0.len _10);
    goto BB4
  }
  BB4 {
    _8 <- ([#"../12_ghost_code.rs" 39 12 24] _9 = (1 : usize));
    _7 <- not _8;
    switch (_7)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    absurd
  }
  BB6 {
    _6 <- ();
    _0 <- ();
    goto BB7
  }
  BB7 {
    assume { Resolve0.resolve x_1 };
    return _0
  }
  
end
module C12GhostCode_Omg_Interface
  function omg (_ : ()) : ()
end
module C12GhostCode_Omg
  function omg [#"../12_ghost_code.rs" 14 0 8] (_ : ()) : () =
    [#"../12_ghost_code.rs" 14 0 8] ()
end
