
module DeepModel_UnitStruct_Type
  type t_unitstruct  =
    | C_UnitStruct
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unitstruct (input:t_unitstruct) (ret  )= any
    [ good -> {C_UnitStruct  = input} (! ret) | bad -> {C_UnitStruct  <> input} {false} any ]
    
end
module DeepModel_UnitStructDeepModel_Type
  type t_unitstructdeepmodel  =
    | C_UnitStructDeepModel
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unitstructdeepmodel (input:t_unitstructdeepmodel) (ret  )= any
    [ good -> {C_UnitStructDeepModel  = input} (! ret) | bad -> {C_UnitStructDeepModel  <> input} {false} any ]
    
end
module DeepModel_TupleStruct_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_tuplestruct  =
    | C_TupleStruct int32 bool
  
  function any_l (_ : 'b) : 'a
  
  let rec t_tuplestruct (input:t_tuplestruct) (ret  (field_0:int32) (field_1:bool))= any
    [ good (field_0:int32) (field_1:bool)-> {C_TupleStruct field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:int32) (field_1:bool)-> {C_TupleStruct field_0 field_1 <> input} {false} any ]
    
  
  function tuplestruct_0 (self : t_tuplestruct) : int32 =
    match self with
      | C_TupleStruct a _ -> a
      end
  
  function tuplestruct_1 (self : t_tuplestruct) : bool =
    match self with
      | C_TupleStruct _ a -> a
      end
end
module DeepModel_TupleStructDeepModel_Type
  use prelude.prelude.Int
  
  type t_tuplestructdeepmodel  =
    | C_TupleStructDeepModel int bool
  
  function any_l (_ : 'b) : 'a
  
  let rec t_tuplestructdeepmodel (input:t_tuplestructdeepmodel) (ret  (field_0:int) (field_1:bool))= any
    [ good (field_0:int) (field_1:bool)-> {C_TupleStructDeepModel field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:int) (field_1:bool)-> {C_TupleStructDeepModel field_0 field_1 <> input} {false} any ]
    
end
module DeepModel_Struct_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_struct  =
    | C_Struct int32 bool
  
  function any_l (_ : 'b) : 'a
  
  let rec t_struct (input:t_struct) (ret  (x:int32) (b:bool))= any
    [ good (x:int32) (b:bool)-> {C_Struct x b = input} (! ret {x} {b})
    | bad (x:int32) (b:bool)-> {C_Struct x b <> input} {false} any ]
    
  
  function struct_x (self : t_struct) : int32 =
    match self with
      | C_Struct a _ -> a
      end
  
  function struct_b (self : t_struct) : bool =
    match self with
      | C_Struct _ a -> a
      end
end
module DeepModel_StructDeepModel_Type
  use prelude.prelude.Int
  
  type t_structdeepmodel  =
    | C_StructDeepModel int bool
  
  function any_l (_ : 'b) : 'a
  
  let rec t_structdeepmodel (input:t_structdeepmodel) (ret  (x:int) (b:bool))= any
    [ good (x:int) (b:bool)-> {C_StructDeepModel x b = input} (! ret {x} {b})
    | bad (x:int) (b:bool)-> {C_StructDeepModel x b <> input} {false} any ]
    
end
module DeepModel_TupleStructGenerics_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_tuplestructgenerics 't 'u =
    | C_TupleStructGenerics int32 't 'u
  
  function any_l (_ : 'b) : 'a
  
  let rec t_tuplestructgenerics < 't > < 'u > (input:t_tuplestructgenerics 't 'u) (ret  (field_0:int32) (field_1:'t) (field_2:'u))= any
    [ good (field_0:int32) (field_1:'t) (field_2:'u)-> {C_TupleStructGenerics field_0 field_1 field_2 = input}
      (! ret {field_0} {field_1} {field_2})
    | bad (field_0:int32) (field_1:'t) (field_2:'u)-> {C_TupleStructGenerics field_0 field_1 field_2 <> input}
      {false}
      any ]
    
  
  function tuplestructgenerics_0 (self : t_tuplestructgenerics 't 'u) : int32 =
    match self with
      | C_TupleStructGenerics a _ _ -> a
      end
  
  function tuplestructgenerics_1 (self : t_tuplestructgenerics 't 'u) : 't =
    match self with
      | C_TupleStructGenerics _ a _ -> a
      end
  
  function tuplestructgenerics_2 (self : t_tuplestructgenerics 't 'u) : 'u =
    match self with
      | C_TupleStructGenerics _ _ a -> a
      end
end
module DeepModel_TupleStructGenericsDeepModel_Type
  type deep_model_ty'1
  
  type deep_model_ty'0
  
  use prelude.prelude.Int
  
  type t_tuplestructgenericsdeepmodel 't 'u 'proj0 'proj1 =
    | C_TupleStructGenericsDeepModel int 'proj0 'proj1
  
  function any_l (_ : 'b) : 'a
  
  let rec t_tuplestructgenericsdeepmodel < 't > < 'u > < 'proj0 > < 'proj1 > (input:t_tuplestructgenericsdeepmodel 't 'u 'proj0 'proj1) (ret  (field_0:int) (field_1:'proj0) (field_2:'proj1))= any
    [ good (field_0:int) (field_1:'proj0) (field_2:'proj1)-> {C_TupleStructGenericsDeepModel field_0 field_1 field_2
      = input}
      (! ret {field_0} {field_1} {field_2})
    | bad (field_0:int) (field_1:'proj0) (field_2:'proj1)-> {C_TupleStructGenericsDeepModel field_0 field_1 field_2
      <> input}
      {false}
      any ]
    
end
module DeepModel_StructGenerics_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_structgenerics 't 'u =
    | C_StructGenerics int32 't 'u
  
  function any_l (_ : 'b) : 'a
  
  let rec t_structgenerics < 't > < 'u > (input:t_structgenerics 't 'u) (ret  (x:int32) (t:'t) (u:'u))= any
    [ good (x:int32) (t:'t) (u:'u)-> {C_StructGenerics x t u = input} (! ret {x} {t} {u})
    | bad (x:int32) (t:'t) (u:'u)-> {C_StructGenerics x t u <> input} {false} any ]
    
  
  function structgenerics_x (self : t_structgenerics 't 'u) : int32 =
    match self with
      | C_StructGenerics a _ _ -> a
      end
  
  function structgenerics_t (self : t_structgenerics 't 'u) : 't =
    match self with
      | C_StructGenerics _ a _ -> a
      end
  
  function structgenerics_u (self : t_structgenerics 't 'u) : 'u =
    match self with
      | C_StructGenerics _ _ a -> a
      end
end
module DeepModel_StructGenericsDeepModel_Type
  type deep_model_ty'1
  
  type deep_model_ty'0
  
  use prelude.prelude.Int
  
  type t_structgenericsdeepmodel 't 'u 'proj0 'proj1 =
    | C_StructGenericsDeepModel int 'proj0 'proj1
  
  function any_l (_ : 'b) : 'a
  
  let rec t_structgenericsdeepmodel < 't > < 'u > < 'proj0 > < 'proj1 > (input:t_structgenericsdeepmodel 't 'u 'proj0 'proj1) (ret  (x:int) (t:'proj0) (u:'proj1))= any
    [ good (x:int) (t:'proj0) (u:'proj1)-> {C_StructGenericsDeepModel x t u = input} (! ret {x} {t} {u})
    | bad (x:int) (t:'proj0) (u:'proj1)-> {C_StructGenericsDeepModel x t u <> input} {false} any ]
    
end
module DeepModel_UnitEnum_Type
  type t_unitenum  =
    | C_A
    | C_B
  
  function any_l (_ : 'b) : 'a
  
  let rec a (input:t_unitenum) (ret  )= any [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} {false} any ] 
  
  let rec b (input:t_unitenum) (ret  )= any [ good -> {C_B  = input} (! ret) | bad -> {C_B  <> input} {false} any ] 
end
module DeepModel_UnitEnumDeepModel_Type
  type t_unitenumdeepmodel  =
    | C_A
    | C_B
  
  function any_l (_ : 'b) : 'a
  
  let rec a (input:t_unitenumdeepmodel) (ret  )= any
    [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} {false} any ]
    
  
  let rec b (input:t_unitenumdeepmodel) (ret  )= any
    [ good -> {C_B  = input} (! ret) | bad -> {C_B  <> input} {false} any ]
    
end
module DeepModel_Enum_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_enum  =
    | C_A
    | C_Int int32
    | C_Bool bool
  
  function any_l (_ : 'b) : 'a
  
  let rec a (input:t_enum) (ret  )= any [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} {false} any ] 
  
  let rec int (input:t_enum) (ret  (field_0:int32))= any
    [ good (field_0:int32)-> {C_Int field_0 = input} (! ret {field_0})
    | bad (field_0:int32)-> {C_Int field_0 <> input} {false} any ]
    
  
  let rec bool (input:t_enum) (ret  (b:bool))= any
    [ good (b:bool)-> {C_Bool b = input} (! ret {b}) | bad (b:bool)-> {C_Bool b <> input} {false} any ]
    
end
module DeepModel_EnumDeepModel_Type
  use prelude.prelude.Int
  
  type t_enumdeepmodel  =
    | C_A
    | C_Int int
    | C_Bool bool
  
  function any_l (_ : 'b) : 'a
  
  let rec a (input:t_enumdeepmodel) (ret  )= any
    [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} {false} any ]
    
  
  let rec int (input:t_enumdeepmodel) (ret  (field_0:int))= any
    [ good (field_0:int)-> {C_Int field_0 = input} (! ret {field_0})
    | bad (field_0:int)-> {C_Int field_0 <> input} {false} any ]
    
  
  let rec bool (input:t_enumdeepmodel) (ret  (b:bool))= any
    [ good (b:bool)-> {C_Bool b = input} (! ret {b}) | bad (b:bool)-> {C_Bool b <> input} {false} any ]
    
end
module DeepModel_EnumGenerics_Type
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  type t_enumgenerics 't 'u =
    | C_A
    | C_Int int32
    | C_T 't
    | C_U 'u
  
  function any_l (_ : 'b) : 'a
  
  let rec a < 't > < 'u > (input:t_enumgenerics 't 'u) (ret  )= any
    [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} {false} any ]
    
  
  let rec int < 't > < 'u > (input:t_enumgenerics 't 'u) (ret  (field_0:int32))= any
    [ good (field_0:int32)-> {C_Int field_0 = input} (! ret {field_0})
    | bad (field_0:int32)-> {C_Int field_0 <> input} {false} any ]
    
  
  let rec t < 't > < 'u > (input:t_enumgenerics 't 'u) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_T field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_T field_0 <> input} {false} any ]
    
  
  let rec u < 't > < 'u > (input:t_enumgenerics 't 'u) (ret  (u:'u))= any
    [ good (u:'u)-> {C_U u = input} (! ret {u}) | bad (u:'u)-> {C_U u <> input} {false} any ]
    
end
module DeepModel_EnumGenericsDeepModel_Type
  type deep_model_ty'1
  
  type deep_model_ty'0
  
  use prelude.prelude.Int
  
  type t_enumgenericsdeepmodel 't 'u 'proj0 'proj1 =
    | C_A
    | C_Int int
    | C_T 'proj0
    | C_U 'proj1
  
  function any_l (_ : 'b) : 'a
  
  let rec a < 't > < 'u > < 'proj0 > < 'proj1 > (input:t_enumgenericsdeepmodel 't 'u 'proj0 'proj1) (ret  )= any
    [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} {false} any ]
    
  
  let rec int < 't > < 'u > < 'proj0 > < 'proj1 > (input:t_enumgenericsdeepmodel 't 'u 'proj0 'proj1) (ret  (field_0:int))= any
    [ good (field_0:int)-> {C_Int field_0 = input} (! ret {field_0})
    | bad (field_0:int)-> {C_Int field_0 <> input} {false} any ]
    
  
  let rec t < 't > < 'u > < 'proj0 > < 'proj1 > (input:t_enumgenericsdeepmodel 't 'u 'proj0 'proj1) (ret  (field_0:'proj0))= any
    [ good (field_0:'proj0)-> {C_T field_0 = input} (! ret {field_0})
    | bad (field_0:'proj0)-> {C_T field_0 <> input} {false} any ]
    
  
  let rec u < 't > < 'u > < 'proj0 > < 'proj1 > (input:t_enumgenericsdeepmodel 't 'u 'proj0 'proj1) (ret  (u:'proj1))= any
    [ good (u:'proj1)-> {C_U u = input} (! ret {u}) | bad (u:'proj1)-> {C_U u <> input} {false} any ]
    
end
module DeepModel_Impl0
  
end
module DeepModel_Impl1
  
end
module DeepModel_Impl2
  
end
module DeepModel_Impl3
  type t
  
  type u
end
module DeepModel_Impl4
  type t
  
  type u
end
module DeepModel_Impl5
  
end
module DeepModel_Impl6
  
end
module DeepModel_Impl7
  type t
  
  type u
end
