
module Core_Option_Option_Type
  type core_option_option_type 't =
    | Core_Option_Option_None_Type
    | Core_Option_Option_Some_Type 't
    
  let function core_option_option_type_Some_0 (self : core_option_option_type 't) : 't
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Core_Option_Option_None_Type -> any 't
      | Core_Option_Option_Some_Type a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Prelude
  type core_ptr_nonnull_nonnull_type 't =
    | Core_Ptr_NonNull_NonNull_Type opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_ptr_unique_unique_type 't =
    | Core_Ptr_Unique_Unique_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type
  type alloc_boxed_box_type 't 'a =
    | Alloc_Boxed_Box_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type alloc_alloc_global_type  =
    | Alloc_Alloc_Global_Type
    
end
module C387_Node_Type
  use mach.int.Int
  use mach.int.UInt32
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  type c387_node_type  =
    | C387_Node_Type (c387_tree_type) uint32 (c387_tree_type)
    with c387_tree_type  =
    | C387_Tree_Type (Core_Option_Option_Type.core_option_option_type (c387_node_type))
    
  let function c387_tree_type_Tree_0 (self : c387_tree_type) : Core_Option_Option_Type.core_option_option_type (c387_node_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C387_Tree_Type a -> a
      end
  let function c387_node_type_Node_left (self : c387_node_type) : c387_tree_type = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C387_Node_Type a _ _ -> a
      end
  let function c387_node_type_Node_right (self : c387_node_type) : c387_tree_type = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C387_Node_Type _ _ a -> a
      end
end
module C387_UseTree_Interface
  use prelude.Prelude
  use C387_Node_Type
  val use_tree [@cfg:stackify] (_1' : C387_Node_Type.c387_tree_type) : ()
end
module C387_UseTree
  use prelude.Prelude
  use C387_Node_Type
  let rec cfg use_tree [@cfg:stackify] [#"../387.rs" 13 0 13 25] (_1' : C387_Node_Type.c387_tree_type) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : C387_Node_Type.c387_tree_type;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module Core_Cmp_Ordering_Type
  type core_cmp_ordering_type  =
    | Core_Cmp_Ordering_Less_Type
    | Core_Cmp_Ordering_Equal_Type
    | Core_Cmp_Ordering_Greater_Type
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
end
module Core_Cmp_Ord_Max_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val max [@cfg:stackify] (self : self) (other : self) : self
    ensures { GeLog0.ge_log (Model0.model result) (Model0.model self) }
    ensures { GeLog0.ge_log (Model0.model result) (Model0.model other) }
    ensures { result = self \/ result = other }
    ensures { LeLog0.le_log (Model0.model self) (Model0.model other) -> result = other }
    ensures { LtLog0.lt_log (Model0.model other) (Model0.model self) -> result = self }
    
end
module Core_Cmp_Ord_Max
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val max [@cfg:stackify] (self : self) (other : self) : self
    ensures { GeLog0.ge_log (Model0.model result) (Model0.model self) }
    ensures { GeLog0.ge_log (Model0.model result) (Model0.model other) }
    ensures { result = self \/ result = other }
    ensures { LeLog0.le_log (Model0.model self) (Model0.model other) -> result = other }
    ensures { LtLog0.lt_log (Model0.model other) (Model0.model self) -> result = self }
    
end
module CreusotContracts_Logic_Int_Impl16_Model_Interface
  use mach.int.Int
  use mach.int.UInt64
  function model (self : uint64) : int
end
module CreusotContracts_Logic_Int_Impl16_Model
  use mach.int.Int
  use mach.int.UInt64
  function model (self : uint64) : int =
    UInt64.to_int self
end
module CreusotContracts_Logic_Int_Impl16
  
end
module CreusotContracts_Logic_Ord_Impl1_GeLog_Interface
  use mach.int.Int
  predicate ge_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1_GeLog
  use mach.int.Int
  predicate ge_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1
  
end
module CreusotContracts_Logic_Ord_Impl1_LeLog_Interface
  use mach.int.Int
  predicate le_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1_LeLog
  use mach.int.Int
  predicate le_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1_LtLog_Interface
  use mach.int.Int
  predicate lt_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl1_LtLog
  use mach.int.Int
  predicate lt_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Int_Impl16_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module CreusotContracts_Logic_Ord_Impl1_CmpLeLog_Interface
  use mach.int.Int
  function cmp_le_log (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpLeLog
  use mach.int.Int
  function cmp_le_log (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpLtLog_Interface
  use mach.int.Int
  function cmp_lt_log (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpLtLog
  use mach.int.Int
  function cmp_lt_log (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGeLog_Interface
  use mach.int.Int
  function cmp_ge_log (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGeLog
  use mach.int.Int
  function cmp_ge_log (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGtLog_Interface
  use mach.int.Int
  function cmp_gt_log (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_CmpGtLog
  use mach.int.Int
  function cmp_gt_log (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_Refl_Interface
  use mach.int.Int
  function refl (_1' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Refl
  use mach.int.Int
  function refl (_1' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_Trans_Interface
  use mach.int.Int
  use Core_Cmp_Ordering_Type
  function trans (_1' : int) (_2' : int) (_3' : int) (_4' : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Trans
  use mach.int.Int
  use Core_Cmp_Ordering_Type
  function trans (_1' : int) (_2' : int) (_3' : int) (_4' : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym1_Interface
  use mach.int.Int
  function antisym1 (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym1
  use mach.int.Int
  function antisym1 (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym2_Interface
  use mach.int.Int
  function antisym2 (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_Antisym2
  use mach.int.Int
  function antisym2 (_1' : int) (_2' : int) : () =
    ()
end
module CreusotContracts_Logic_Ord_Impl1_EqCmp_Interface
  use mach.int.Int
  function eq_cmp (_1' : int) (_2' : int) : ()
end
module CreusotContracts_Logic_Ord_Impl1_EqCmp
  use mach.int.Int
  function eq_cmp (_1' : int) (_2' : int) : () =
    ()
end
module C387_Impl0_Height_Interface
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  use C387_Node_Type
  val height [@cfg:stackify] (self : C387_Node_Type.c387_tree_type) : uint64
end
module C387_Impl0_Height
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt64
  use C387_Node_Type
  use mach.int.Int64
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_Impl1_EqCmp as EqCmp0
  clone CreusotContracts_Logic_Ord_Impl1_Antisym2 as Antisym20
  clone CreusotContracts_Logic_Ord_Impl1_Antisym1 as Antisym10
  clone CreusotContracts_Logic_Ord_Impl1_Trans as Trans0
  clone CreusotContracts_Logic_Ord_Impl1_Refl as Refl0
  clone CreusotContracts_Logic_Ord_Impl1_CmpGtLog as CmpGtLog0
  clone CreusotContracts_Logic_Ord_Impl1_CmpGeLog as CmpGeLog0
  clone CreusotContracts_Logic_Ord_Impl1_CmpLtLog as CmpLtLog0
  clone CreusotContracts_Logic_Ord_Impl1_CmpLeLog as CmpLeLog0
  clone CreusotContracts_Logic_Int_Impl16_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Ord_Impl1_LtLog as LtLog0
  clone CreusotContracts_Logic_Ord_Impl1_LeLog as LeLog0
  clone CreusotContracts_Logic_Ord_Impl1_GeLog as GeLog0
  clone CreusotContracts_Logic_Int_Impl16_Model as Model0
  clone Core_Cmp_Ord_Max_Interface as Max0 with type self = uint64, function Model0.model = Model0.model,
  predicate GeLog0.ge_log = GeLog0.ge_log, predicate LeLog0.le_log = LeLog0.le_log,
  predicate LtLog0.lt_log = LtLog0.lt_log, type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg height [@cfg:stackify] [#"../387.rs" 16 4 16 31] (self : C387_Node_Type.c387_tree_type) : uint64
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint64;
  var self_1 : C387_Node_Type.c387_tree_type;
  var _2 : isize;
  var n_3 : C387_Node_Type.c387_node_type;
  var _4 : uint64;
  var _5 : uint64;
  var _6 : C387_Node_Type.c387_tree_type;
  var _7 : uint64;
  var _8 : C387_Node_Type.c387_tree_type;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (C387_Node_Type.c387_tree_type_Tree_0 self_1)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB3
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB1
      end
  }
  BB1 {
    n_3 <- Core_Option_Option_Type.core_option_option_type_Some_0 (C387_Node_Type.c387_tree_type_Tree_0 self_1);
    _6 <- C387_Node_Type.c387_node_type_Node_left n_3;
    _5 <- ([#"../387.rs" 19 29 19 44] height _6);
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- (0 : uint64);
    goto BB7
  }
  BB4 {
    _8 <- C387_Node_Type.c387_node_type_Node_right n_3;
    _7 <- ([#"../387.rs" 19 49 19 65] height _8);
    goto BB5
  }
  BB5 {
    _4 <- ([#"../387.rs" 19 29 19 66] Max0.max _5 _7);
    goto BB6
  }
  BB6 {
    _0 <- ([#"../387.rs" 19 29 19 70] _4 + (1 : uint64));
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
