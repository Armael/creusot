module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t   
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t   
  predicate resolve (self : t) = 
    true
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl2
  type t   
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module C195_Example_Interface
  val example [@cfg:stackify] (exampleParameter : bool) : ()
    requires {exampleParameter = exampleParameter}
    
end
module C195_Example
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = bool
  let rec cfg example [@cfg:stackify] (exampleParameter : bool) : ()
    requires {exampleParameter = exampleParameter}
    
   = 
  var _0 : ();
  var exampleParameter_1 : bool;
  {
    exampleParameter_1 <- exampleParameter;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve exampleParameter_1 };
    _0 <- ();
    return _0
  }
  
end
