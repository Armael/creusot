module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use set.Fset
  use map.Map
  use prelude.Prelude
  type c486_hasmutref 't =
    | C486_HasMutRef (borrowed 't)
    
  let function c486_hasmutref_HasMutRef_0 (self : c486_hasmutref 't) : borrowed 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C486_HasMutRef a -> a
      end
end
module C486_Test_Interface
  use prelude.Prelude
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  use Type
  val test [@cfg:stackify] (x : Type.c486_hasmutref uint32) : ()
    ensures { [#"../486.rs" 6 10 6 20] UInt32.to_int ( ^ Type.c486_hasmutref_HasMutRef_0 x) = 5 }
    
end
module C486_Test
  use prelude.Prelude
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  use Type
  let rec cfg test [@cfg:stackify] [#"../486.rs" 7 0 7 34] (x : Type.c486_hasmutref uint32) : ()
    ensures { [#"../486.rs" 6 10 6 20] UInt32.to_int ( ^ Type.c486_hasmutref_HasMutRef_0 x) = 5 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : Type.c486_hasmutref uint32;
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    x_1 <- (let Type.C486_HasMutRef a = x_1 in Type.C486_HasMutRef ({ (Type.c486_hasmutref_HasMutRef_0 x_1) with current = (5 : uint32) }));
    _0 <- ();
    return _0
  }
  
end
