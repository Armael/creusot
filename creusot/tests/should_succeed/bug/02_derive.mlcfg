
module C02Derive_Lit_Type
  type t_lit  =
    | C_Lit
    
end
module C02Derive_Impl0_Clone
  use prelude.Borrow
  use C02Derive_Lit_Type as C02Derive_Lit_Type
  let rec cfg clone' [#"../02_derive.rs" 3 9 3 14] [@cfg:stackify] [@cfg:subregion_analysis] (self : C02Derive_Lit_Type.t_lit) : C02Derive_Lit_Type.t_lit
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C02Derive_Lit_Type.t_lit;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../02_derive.rs" 3 9 3 14] C02Derive_Lit_Type.C_Lit);
    return _0
  }
  
end
module C02Derive_Impl0
  use C02Derive_Lit_Type as C02Derive_Lit_Type
  predicate inv1 (_x : C02Derive_Lit_Type.t_lit)
  val inv1 (_x : C02Derive_Lit_Type.t_lit) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : [#"../02_derive.rs" 1 0 1 0] forall x : C02Derive_Lit_Type.t_lit . inv1 x = true
  predicate inv0 (_x : C02Derive_Lit_Type.t_lit)
  val inv0 (_x : C02Derive_Lit_Type.t_lit) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : [#"../02_derive.rs" 1 0 1 0] forall x : C02Derive_Lit_Type.t_lit . inv0 x = true
  use prelude.Borrow
  goal clone'_refn : [#"../02_derive.rs" 3 9 3 14] forall self : C02Derive_Lit_Type.t_lit . inv0 self -> (forall result : C02Derive_Lit_Type.t_lit . inv1 result /\ result = self)
end
