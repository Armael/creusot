
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
  val model (self : self) : ModelTy0.modelTy
    ensures { result = model self }
    
end
module CreusotContracts_Logic_Model_Impl0_ModelTy_Type
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  type modelTy  =
    ModelTy0.modelTy
end
module Core_Cmp_Impls_Impl9_Eq_Interface
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = a
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy1 with type t = b,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy0 with type t = a,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = b,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : a) (other : b) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Core_Cmp_Impls_Impl9_Eq
  type a
  type b
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = a
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy1 with type t = b,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy0 with type t = a,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = b,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : a) (other : b) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
  val model (self : t) : ModelTy0.modelTy
    ensures { result = model self }
    
end
module EqPanic_Omg_Interface
  type t
  use prelude.Borrow
  val omg [@cfg:stackify] (x : t) (y : t) : bool
end
module EqPanic_Omg
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy1 with type t = t,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_ModelTy_Type as ModelTy0 with type t = t,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy1.modelTy,
  function Model0.model = Model1.model
  clone Core_Cmp_Impls_Impl9_Eq_Interface as Eq0 with type a = t, type b = t, function Model0.model = Model0.model,
  function Model1.model = Model0.model, type ModelTy2.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  let rec cfg omg [@cfg:stackify] [#"../eq_panic.rs" 6 0 6 47] (x : t) (y : t) : bool = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var x_1 : t;
  var y_2 : t;
  var _3 : t;
  var _4 : t;
  {
    x_1 <- x;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _3 <- x_1;
    assume { Resolve0.resolve x_1 };
    _4 <- y_2;
    assume { Resolve0.resolve y_2 };
    _0 <- ([#"../eq_panic.rs" 7 4 7 10] Eq0.eq _3 _4);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
