
module Core_Option_Option_Type
  type core_option_option_type 't =
    | Core_Option_Option_None_Type
    | Core_Option_Option_Some_Type 't
    
end
module CreusotContracts_Logic_Int_Int_Type
  use prelude.Prelude
  type creusotcontracts_logic_int_int_type  =
    | CreusotContracts_Logic_Int_Int_Type opaque_ptr
    
end
module PureNeq_F_Interface
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  function f (x : Core_Option_Option_Type.core_option_option_type int) (y : Core_Option_Option_Type.core_option_option_type int) : bool
    
end
module PureNeq_F
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  function f [#"../pure_neq.rs" 6 0 6 48] (x : Core_Option_Option_Type.core_option_option_type int) (y : Core_Option_Option_Type.core_option_option_type int) : bool
    
   =
    [#"../pure_neq.rs" 7 16 7 22] x <> y
  axiom f_spec : forall x : Core_Option_Option_Type.core_option_option_type int, y : Core_Option_Option_Type.core_option_option_type int . [#"../pure_neq.rs" 5 10 5 29] f x y = (not x = y)
end
module PureNeq_F_Impl
  use mach.int.Int
  use CreusotContracts_Logic_Int_Int_Type
  use Core_Option_Option_Type
  let rec ghost function f (x : Core_Option_Option_Type.core_option_option_type int) (y : Core_Option_Option_Type.core_option_option_type int) : bool
    ensures { [#"../pure_neq.rs" 5 10 5 29] result = (not x = y) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../pure_neq.rs" 7 16 7 22] pure {x <> y}
end
