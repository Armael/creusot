module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module C173_Test233_Interface
  val test_233 [@cfg:stackify] (_ : ()) : ()
end
module C173_Test233
  use mach.int.Int32
  use mach.int.Int
  let rec cfg test_233 [@cfg:stackify] (_ : ()) : () = 
  var _0 : ();
  var x_1 : int32;
  var _2 : ();
  var x_3 : int32;
  var _4 : ();
  {
    goto BB0
  }
  BB0 {
    x_1 <- (17 : int32);
    assert { [#"../173.rs" 22 4 29] Int32.to_int x_1 = 17 };
    _2 <- ();
    x_3 <- (42 : int32);
    assert { [#"../173.rs" 24 4 29] Int32.to_int x_3 = 42 };
    _4 <- ();
    _0 <- ();
    return _0
  }
  
end
module C173_Knapsack01Dyn_Interface
  type name
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  val knapsack01_dyn [@cfg:stackify] (n : usize) : ()
    requires {[#"../173.rs" 6 0 33] 0 < UInt64.to_int n && UInt64.to_int n < 10000}
    
end
module C173_Knapsack01Dyn
  type name
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  let rec cfg knapsack01_dyn [@cfg:stackify] (n : usize) : ()
    requires {[#"../173.rs" 6 0 33] 0 < UInt64.to_int n && UInt64.to_int n < 10000}
    
   = 
  var _0 : ();
  var n_1 : usize;
  var i_2 : usize;
  var w_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : ();
  var _10 : ();
  var _11 : ();
  var i_12 : usize;
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    w_3 <- (1 : usize);
    goto BB1
  }
  BB1 {
    invariant i_items_len { [#"../173.rs" 12 4 38] UInt64.to_int i_2 < UInt64.to_int n_1 };
    _7 <- w_3;
    _8 <- n_1;
    _6 <- ([#"../173.rs" 13 10 16] _7 <= _8);
    switch (_6)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    w_3 <- ([#"../173.rs" 14 8 14] w_3 + (1 : usize));
    _5 <- ();
    goto BB1
  }
  BB3 {
    _4 <- ();
    i_12 <- n_1;
    _0 <- ();
    return _0
  }
  
end
