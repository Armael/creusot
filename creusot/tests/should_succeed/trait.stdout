module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_cmp_ordering  = 
    | Core_Cmp_Ordering_Less
    | Core_Cmp_Ordering_Equal
    | Core_Cmp_Ordering_Greater
    
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
end
module Core_Marker_Sized
  type self   
end
module Trait_TraitWParams
  type self   
  type d   
  type c   
  clone Core_Marker_Sized as Sized1 with type self = c
  clone Core_Marker_Sized as Sized0 with type self = d
end
module Trait_UsesCustom_Interface
  type a   
  type b   
  type t   
  val uses_custom (t : t) : ()
end
module Trait_UsesCustom
  type a   
  type b   
  type t   
  clone Trait_TraitWParams as TraitWParams0 with type self = t, type d = a, type c = b
  clone Core_Marker_Sized as Sized2 with type self = t
  clone Core_Marker_Sized as Sized1 with type self = b
  clone Core_Marker_Sized as Sized0 with type self = a
  let rec cfg uses_custom (t : t) : () = 
  var _0 : ();
  var t_1 : t;
  {
    t_1 <- t;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    assume { (fun x -> true) t_1 };
    return _0
  }
  
end
module Core_Cmp_PartialEq_Ne_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val ne (self : self) (other : rhs) : bool
end
module Core_Cmp_PartialEq_Ne
  type self   
  type rhs   
  use prelude.Prelude
  val ne (self : self) (other : rhs) : bool
end
module Core_Cmp_PartialEq
  type self   
  type rhs   
  use prelude.Prelude
  val eq (self : self) (other : rhs) : bool
  clone export Core_Cmp_PartialEq_Ne_Interface with type self = self, type rhs = rhs
end
module Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface
  type self   
  use prelude.Prelude
  val assert_receiver_is_total_eq (self : self) : ()
end
module Core_Cmp_Eq_AssertReceiverIsTotalEq
  type self   
  use prelude.Prelude
  val assert_receiver_is_total_eq (self : self) : ()
end
module Core_Cmp_Eq
  type self   
  clone Core_Cmp_PartialEq as PartialEq0 with type self = self, type rhs = self
  clone export Core_Cmp_Eq_AssertReceiverIsTotalEq_Interface with type self = self
end
module Core_Cmp_PartialOrd_Lt_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val lt (self : self) (other : rhs) : bool
end
module Core_Cmp_PartialOrd_Lt
  type self   
  type rhs   
  use prelude.Prelude
  val lt (self : self) (other : rhs) : bool
end
module Core_Cmp_PartialOrd_Le_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val le (self : self) (other : rhs) : bool
end
module Core_Cmp_PartialOrd_Le
  type self   
  type rhs   
  use prelude.Prelude
  val le (self : self) (other : rhs) : bool
end
module Core_Cmp_PartialOrd_Gt_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val gt (self : self) (other : rhs) : bool
end
module Core_Cmp_PartialOrd_Gt
  type self   
  type rhs   
  use prelude.Prelude
  val gt (self : self) (other : rhs) : bool
end
module Core_Cmp_PartialOrd_Ge_Interface
  type self   
  type rhs   
  use prelude.Prelude
  val ge (self : self) (other : rhs) : bool
end
module Core_Cmp_PartialOrd_Ge
  type self   
  type rhs   
  use prelude.Prelude
  val ge (self : self) (other : rhs) : bool
end
module Core_Cmp_PartialOrd
  type self   
  type rhs   
  clone Core_Cmp_PartialEq as PartialEq0 with type self = self, type rhs = rhs
  use prelude.Prelude
  use Type
  val partial_cmp (self : self) (other : rhs) : Type.core_option_option (Type.core_cmp_ordering)
  clone export Core_Cmp_PartialOrd_Lt_Interface with type self = self, type rhs = rhs
  clone export Core_Cmp_PartialOrd_Le_Interface with type self = self, type rhs = rhs
  clone export Core_Cmp_PartialOrd_Gt_Interface with type self = self, type rhs = rhs
  clone export Core_Cmp_PartialOrd_Ge_Interface with type self = self, type rhs = rhs
end
module Core_Cmp_Ord_Max_Interface
  type self   
  val max (self : self) (other : self) : self
end
module Core_Cmp_Ord_Max
  type self   
  val max (self : self) (other : self) : self
end
module Core_Cmp_Ord_Min_Interface
  type self   
  val min (self : self) (other : self) : self
end
module Core_Cmp_Ord_Min
  type self   
  val min (self : self) (other : self) : self
end
module Core_Cmp_Ord_Clamp_Interface
  type self   
  val clamp (self : self) (min : self) (max : self) : self
end
module Core_Cmp_Ord_Clamp
  type self   
  val clamp (self : self) (min : self) (max : self) : self
end
module Core_Cmp_Ord
  type self   
  clone Core_Cmp_PartialOrd as PartialOrd0 with type self = self, type rhs = self
  clone Core_Cmp_Eq as Eq0 with type self = self
  use prelude.Prelude
  use Type
  val cmp (self : self) (other : self) : Type.core_cmp_ordering
  clone export Core_Cmp_Ord_Max_Interface with type self = self
  clone export Core_Cmp_Ord_Min_Interface with type self = self
  clone export Core_Cmp_Ord_Clamp_Interface with type self = self
end
module Trait_TraitWParams2
  type self   
  type d   
  type c   
  clone Core_Marker_Sized as Sized1 with type self = c
  clone Core_Cmp_Ord as Ord0 with type self = d
  clone Core_Marker_Sized as Sized0 with type self = d
  clone Trait_TraitWParams as TraitWParams0 with type self = self, type d = d, type c = c
end
module Trait_UsesCustom2_Interface
  type a   
  type b   
  type t   
  val uses_custom2 (t : t) : ()
end
module Trait_UsesCustom2
  type a   
  type b   
  type t   
  clone Trait_TraitWParams2 as TraitWParams20 with type self = t, type d = a, type c = b
  clone Core_Marker_Sized as Sized2 with type self = t
  clone Core_Marker_Sized as Sized1 with type self = b
  clone Core_Cmp_Ord as Ord0 with type self = a
  clone Core_Marker_Sized as Sized0 with type self = a
  let rec cfg uses_custom2 (t : t) : () = 
  var _0 : ();
  var t_1 : t;
  {
    t_1 <- t;
    goto BB0
  }
  BB0 {
    _0 <- ();
    goto BB1
  }
  BB1 {
    assume { (fun x -> true) t_1 };
    return _0
  }
  
end
module Trait_Main_Interface
  val main () : ()
end
module Trait_Main
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
