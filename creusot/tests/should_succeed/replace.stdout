module Replace
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude

  scope Type
    type core_option_option 't = 
      | Core_Option_Option_None
      | Core_Option_Option_Some('t)
      
    predicate drop_core_option_option (drop_t : 't -> bool) (self : core_option_option 't) = 
      match (self) with
        | Core_Option_Option_None -> true
        | Core_Option_Option_Some(a) -> drop_t a
        end
    type something  = 
      | Something(uint32, core_option_option (something))
      
    predicate drop_something (self : something) = 
      let Something(a, b) = self in drop_uint a && drop_core_option_option drop_fix b
  end
  let rec cfg test (o_a_1 : Type.something) (o_b_2 : Type.something) : () = 
  var _0 : ();
  var a_1 : Type.something;
  var b_2 : Type.something;
  var _3 : Type.something;
  {
    a_1 <- o_a_1;
    b_2 <- o_b_2;
    goto BB0
  }
  BB0 {
    assume { Type.drop_something _3 };
    _3 <- b_2;
    assume { Type.drop_something a_1 };
    a_1 <- _3;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Type.drop_something _3 };
    _0 <- ();
    goto BB3
  }
  BB3 {
    assume { Type.drop_something b_2 };
    goto BB4
  }
  BB4 {
    assume { Type.drop_something a_1 };
    return _0
  }
  
  let rec cfg main () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
