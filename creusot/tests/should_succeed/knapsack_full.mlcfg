
module KnapsackFull_Max_Interface
  use prelude.UIntSize
  use int.MinMax
  use prelude.Int
  val max [#"../knapsack_full.rs" 14 0 14 35] (a : usize) (b : usize) : usize
    ensures { [#"../knapsack_full.rs" 13 10 13 31] UIntSize.to_int result = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b) }
    
end
module KnapsackFull_Max
  use prelude.Int
  use prelude.UIntSize
  use int.MinMax
  let rec cfg max [#"../knapsack_full.rs" 14 0 14 35] [@cfg:stackify] [@cfg:subregion_analysis] (a : usize) (b : usize) : usize
    ensures { [#"../knapsack_full.rs" 13 10 13 31] UIntSize.to_int result = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var a_1 : usize;
  var b_2 : usize;
  var _4 : bool;
  var _5 : usize;
  var _6 : usize;
  {
    a_1 <- a;
    b_2 <- b;
    goto BB0
  }
  BB0 {
    _5 <- a_1;
    _6 <- b_2;
    _4 <- ([#"../knapsack_full.rs" 15 7 15 12] _5 < _6);
    switch (_4)
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    _0 <- b_2;
    goto BB3
  }
  BB2 {
    _0 <- a_1;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module KnapsackFull_Item_Type
  use prelude.Int
  use prelude.UIntSize
  type t_item 'name =
    | C_Item 'name usize usize
    
  let function item_weight (self : t_item 'name) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Item _ a _ -> a
      end
  let function item_value (self : t_item 'name) : usize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Item _ _ a -> a
      end
end
module KnapsackFull_SumWeights_Stub
  type name
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  function sum_weights [#"../knapsack_full.rs" 26 0 26 56] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    
end
module KnapsackFull_SumWeights_Interface
  type name
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  function sum_weights [#"../knapsack_full.rs" 26 0 26 56] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    
  axiom sum_weights_spec : forall s : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int . ([#"../knapsack_full.rs" 24 11 24 33] 0 <= i /\ i <= Seq.length s) -> ([#"../knapsack_full.rs" 25 10 25 21] sum_weights s i >= 0)
end
module KnapsackFull_SumWeights
  type name
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  use prelude.UIntSize
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  function sum_weights [#"../knapsack_full.rs" 26 0 26 56] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    
  val sum_weights [#"../knapsack_full.rs" 26 0 26 56] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 24 11 24 33] 0 <= i /\ i <= Seq.length s}
    ensures { result = sum_weights s i }
    
  axiom def : forall s : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int . sum_weights s i = ([#"../knapsack_full.rs" 27 4 30 5] if i = Seq.length s then
    0
  else
    UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get s i)) + sum_weights s (i + 1)
  )
  axiom sum_weights_spec : forall s : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int . ([#"../knapsack_full.rs" 24 11 24 33] 0 <= i /\ i <= Seq.length s) -> ([#"../knapsack_full.rs" 25 10 25 21] sum_weights s i >= 0)
end
module KnapsackFull_SumWeights_Impl
  type name
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  use prelude.UIntSize
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  let rec ghost function sum_weights [#"../knapsack_full.rs" 26 0 26 56] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 24 11 24 33] 0 <= i /\ i <= Seq.length s}
    ensures { [#"../knapsack_full.rs" 25 10 25 21] result >= 0 }
    variant {[#"../knapsack_full.rs" 23 10 23 19] Seq.length s - i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../knapsack_full.rs" 27 4 30 5] if pure {i = Seq.length s} then
      0
    else
      UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get s i)) + sum_weights s (i + 1)
    
end
module KnapsackFull_SumValues_Stub
  type name
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  function sum_values [#"../knapsack_full.rs" 36 0 36 55] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    
end
module KnapsackFull_SumValues_Interface
  type name
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  function sum_values [#"../knapsack_full.rs" 36 0 36 55] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    
end
module KnapsackFull_SumValues
  type name
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  use prelude.UIntSize
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  function sum_values [#"../knapsack_full.rs" 36 0 36 55] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    
  val sum_values [#"../knapsack_full.rs" 36 0 36 55] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 35 11 35 33] i >= 0 /\ i <= Seq.length s}
    ensures { result = sum_values s i }
    
  axiom def : forall s : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int . sum_values s i = ([#"../knapsack_full.rs" 37 4 40 5] if i = Seq.length s then
    0
  else
    UIntSize.to_int (KnapsackFull_Item_Type.item_value (Seq.get s i)) + sum_values s (i + 1)
  )
end
module KnapsackFull_SumValues_Impl
  type name
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  use prelude.UIntSize
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  let rec ghost function sum_values [#"../knapsack_full.rs" 36 0 36 55] (s : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) : int
    requires {[#"../knapsack_full.rs" 35 11 35 33] i >= 0 /\ i <= Seq.length s}
    variant {[#"../knapsack_full.rs" 34 10 34 19] Seq.length s - i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../knapsack_full.rs" 37 4 40 5] if pure {i = Seq.length s} then
      0
    else
      UIntSize.to_int (KnapsackFull_Item_Type.item_value (Seq.get s i)) + sum_values s (i + 1)
    
end
module KnapsackFull_SubseqRev_Stub
  type t
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  predicate subseq_rev [#"../knapsack_full.rs" 47 0 47 67] (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int)
end
module KnapsackFull_SubseqRev_Interface
  type t
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  predicate subseq_rev [#"../knapsack_full.rs" 47 0 47 67] (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int)
end
module KnapsackFull_SubseqRev
  type t
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  predicate subseq_rev [#"../knapsack_full.rs" 47 0 47 67] (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int)
  val subseq_rev [#"../knapsack_full.rs" 47 0 47 67] (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int) : bool
    requires {[#"../knapsack_full.rs" 45 11 45 36] 0 <= i1 /\ i1 <= Seq.length s1}
    requires {[#"../knapsack_full.rs" 46 11 46 36] 0 <= i2 /\ i2 <= Seq.length s2}
    ensures { result = subseq_rev s1 i1 s2 i2 }
    
  axiom def : forall s1 : Seq.seq t, i1 : int, s2 : Seq.seq t, i2 : int . subseq_rev s1 i1 s2 i2 = ([#"../knapsack_full.rs" 48 4 54 5] if i2 = 0 then
    i1 = Seq.length s1
  else
    i1 < Seq.length s1 /\ Seq.get s1 i1 = Seq.get s2 (i2 - 1) /\ subseq_rev s1 (i1 + 1) s2 (i2 - 1) \/ subseq_rev s1 i1 s2 (i2 - 1)
  )
end
module KnapsackFull_SubseqRev_Impl
  type t
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  let rec ghost predicate subseq_rev [#"../knapsack_full.rs" 47 0 47 67] (s1 : Seq.seq t) (i1 : int) (s2 : Seq.seq t) (i2 : int)
    requires {[#"../knapsack_full.rs" 45 11 45 36] 0 <= i1 /\ i1 <= Seq.length s1}
    requires {[#"../knapsack_full.rs" 46 11 46 36] 0 <= i2 /\ i2 <= Seq.length s2}
    variant {[#"../knapsack_full.rs" 44 10 44 12] i2}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../knapsack_full.rs" 48 4 54 5] if pure {i2 = 0} then
      pure {i1 = Seq.length s1}
    else
      pure {i1 < Seq.length s1} && pure {Seq.get s1 i1 = Seq.get s2 (i2 - 1)} && subseq_rev s1 (i1 + 1) s2 (i2 - 1) || subseq_rev s1 i1 s2 (i2 - 1)
    
end
module KnapsackFull_M_Stub
  type name
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  clone KnapsackFull_SumValues_Stub as SumValues0 with
    type name = name,
    axiom .
  clone KnapsackFull_SumWeights_Stub as SumWeights0 with
    type name = name,
    axiom .
  clone KnapsackFull_SubseqRev_Stub as SubseqRev0 with
    type t = KnapsackFull_Item_Type.t_item name,
    axiom .
  function m [#"../knapsack_full.rs" 65 0 65 57] (items : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) (w : int) : int
    
end
module KnapsackFull_M_Interface
  type name
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  clone KnapsackFull_SumValues_Stub as SumValues0 with
    type name = name,
    axiom .
  clone KnapsackFull_SumWeights_Stub as SumWeights0 with
    type name = name,
    axiom .
  clone KnapsackFull_SubseqRev_Stub as SubseqRev0 with
    type t = KnapsackFull_Item_Type.t_item name,
    axiom .
  function m [#"../knapsack_full.rs" 65 0 65 57] (items : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) (w : int) : int
    
  axiom m_spec : forall items : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int, w : int . ([#"../knapsack_full.rs" 59 11 59 37] 0 <= i /\ i <= Seq.length items) -> ([#"../knapsack_full.rs" 60 11 60 17] 0 <= w) -> ([#"../knapsack_full.rs" 62 0 64 2] forall j : int . forall s : Seq.seq (KnapsackFull_Item_Type.t_item name) . 0 <= j /\ j <= Seq.length s /\ SubseqRev0.subseq_rev s j items i /\ SumWeights0.sum_weights s j <= w -> SumValues0.sum_values s j <= m items i w) && ([#"../knapsack_full.rs" 61 10 61 21] m items i w >= 0)
end
module KnapsackFull_M
  type name
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  use prelude.UIntSize
  use int.MinMax
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  clone KnapsackFull_SumValues_Stub as SumValues0 with
    type name = name,
    axiom .
  clone KnapsackFull_SumWeights_Stub as SumWeights0 with
    type name = name,
    axiom .
  clone KnapsackFull_SubseqRev_Stub as SubseqRev0 with
    type t = KnapsackFull_Item_Type.t_item name,
    axiom .
  function m [#"../knapsack_full.rs" 65 0 65 57] (items : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) (w : int) : int
    
  val m [#"../knapsack_full.rs" 65 0 65 57] (items : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) (w : int) : int
    requires {[#"../knapsack_full.rs" 59 11 59 37] 0 <= i /\ i <= Seq.length items}
    requires {[#"../knapsack_full.rs" 60 11 60 17] 0 <= w}
    ensures { result = m items i w }
    
  axiom def : forall items : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int, w : int . m items i w = ([#"../knapsack_full.rs" 66 4 73 5] if i = 0 then
    0
  else
    if UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1))) > w then
      m items (i - 1) w
    else
      MinMax.max (m items (i - 1) w) (m items (i - 1) (w - UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1)))) + UIntSize.to_int (KnapsackFull_Item_Type.item_value (Seq.get items (i - 1))))
    
  )
  axiom m_spec : forall items : Seq.seq (KnapsackFull_Item_Type.t_item name), i : int, w : int . ([#"../knapsack_full.rs" 59 11 59 37] 0 <= i /\ i <= Seq.length items) -> ([#"../knapsack_full.rs" 60 11 60 17] 0 <= w) -> ([#"../knapsack_full.rs" 62 0 64 2] forall j : int . forall s : Seq.seq (KnapsackFull_Item_Type.t_item name) . 0 <= j /\ j <= Seq.length s /\ SubseqRev0.subseq_rev s j items i /\ SumWeights0.sum_weights s j <= w -> SumValues0.sum_values s j <= m items i w) && ([#"../knapsack_full.rs" 61 10 61 21] m items i w >= 0)
end
module KnapsackFull_M_Impl
  type name
  use prelude.Int
  use seq.Seq
  use prelude.Borrow
  use prelude.UIntSize
  use int.MinMax
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  clone KnapsackFull_SumValues as SumValues0 with
    type name = name,
    axiom .
  clone KnapsackFull_SumWeights as SumWeights0 with
    type name = name,
    axiom .
  clone KnapsackFull_SubseqRev as SubseqRev0 with
    type t = KnapsackFull_Item_Type.t_item name,
    axiom .
  let rec ghost function m [#"../knapsack_full.rs" 65 0 65 57] (items : Seq.seq (KnapsackFull_Item_Type.t_item name)) (i : int) (w : int) : int
    requires {[#"../knapsack_full.rs" 59 11 59 37] 0 <= i /\ i <= Seq.length items}
    requires {[#"../knapsack_full.rs" 60 11 60 17] 0 <= w}
    ensures { [#"../knapsack_full.rs" 61 10 61 21] result >= 0 }
    ensures { [#"../knapsack_full.rs" 62 0 64 2] forall j : int . forall s : Seq.seq (KnapsackFull_Item_Type.t_item name) . 0 <= j /\ j <= Seq.length s /\ SubseqRev0.subseq_rev s j items i /\ SumWeights0.sum_weights s j <= w -> SumValues0.sum_values s j <= result }
    variant {[#"../knapsack_full.rs" 58 10 58 11] i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../knapsack_full.rs" 66 4 73 5] if pure {i = 0} then
      0
    else
      if pure {UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1))) > w} then
        m items (i - 1) w
      else
        let a' = m items (i - 1) w in let b' = m items (i - 1) (w - UIntSize.to_int (KnapsackFull_Item_Type.item_weight (Seq.get items (i - 1)))) + UIntSize.to_int (KnapsackFull_Item_Type.item_value (Seq.get items (i - 1))) in MinMax.max a' b'
      
    
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 38 8 38 31] ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic_Interface
  type t
  type s
  use prelude.Int
  function index_logic [@inline:trivial] (self : s) (ix : int) : t
end
module CreusotContracts_Logic_Ops_Impl0_IndexLogic
  type t
  type s
  use prelude.Int
  use seq.Seq
  use seq.Seq
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = s,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  function index_logic [@inline:trivial] (self : s) (ix : int) : t =
    [#"../../../../creusot-contracts/src/logic/ops.rs" 16 8 16 31] Seq.get (ShallowModel0.shallow_model self) ix
  val index_logic [@inline:trivial] (self : s) (ix : int) : t
    ensures { result = index_logic self ix }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.Int
  use prelude.UIntSize
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.Int
  use prelude.UIntSize
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . [#"../../../../creusot-contracts/src/std/vec.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max_Stub as Max0
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . [#"../../../../creusot-contracts/src/std/vec.rs" 17 14 17 41] Seq.length (shallow_model self) <= UIntSize.to_int Max0.mAX'
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Core_Ops_Range_Range_Type
  type t_range 'idx =
    | C_Range 'idx 'idx
    
  let function range_end (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range _ a -> a
      end
  let function range_start (self : t_range 'idx) : 'idx = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Range a _ -> a
      end
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Core_Ops_Range_RangeInclusive_Type
  type t_rangeinclusive 'idx =
    | C_RangeInclusive 'idx 'idx bool
    
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self) =
    [#"../../../../creusot-contracts/src/invariant.rs" 8 8 8 12] true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Produces
  type idx
  use seq.Seq
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx)
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 19 8 25 9] Core_Ops_Range_Range_Type.range_end self = Core_Ops_Range_Range_Type.range_end o /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) /\ (Seq.length visited > 0 -> DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) <= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end o)) /\ Seq.length visited = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start o) - DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start self) + i)
  val produces (self : Core_Ops_Range_Range_Type.t_range idx) (visited : Seq.seq idx) (o : Core_Ops_Range_Range_Type.t_range idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 23 20 23 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Ops_Impl5_StartLog_Stub
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
end
module CreusotContracts_Std1_Ops_Impl5_StartLog_Interface
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
end
module CreusotContracts_Std1_Ops_Impl5_StartLog
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
  val start_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
    ensures { result = start_log self }
    
end
module CreusotContracts_Std1_Ops_Impl5_EndLog_Stub
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
end
module CreusotContracts_Std1_Ops_Impl5_EndLog_Interface
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
end
module CreusotContracts_Std1_Ops_Impl5_EndLog
  type idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  function end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
  val end_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : idx
    ensures { result = end_log self }
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate le_log (self : self) (o : self) =
    [#"../../../../creusot-contracts/src/logic/ord.rs" 10 20 10 56] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub
  type idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  predicate is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
end
module CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Interface
  type idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  predicate is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
  axiom is_empty_log_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . [#"../../../../creusot-contracts/src/std/ops.rs" 196 4 196 88] not is_empty_log self -> LeLog0.le_log (DeepModel0.deep_model (StartLog0.start_log self)) (DeepModel0.deep_model (EndLog0.end_log self))
end
module CreusotContracts_Std1_Ops_Impl5_IsEmptyLog
  type idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  predicate is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
  val is_empty_log (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
    ensures { result = is_empty_log self }
    
  axiom is_empty_log_spec : forall self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . [#"../../../../creusot-contracts/src/std/ops.rs" 196 4 196 88] not is_empty_log self -> LeLog0.le_log (DeepModel0.deep_model (StartLog0.start_log self)) (DeepModel0.deep_model (EndLog0.end_log self))
end
module CreusotContracts_Logic_Ord_Impl2_LeLog_Stub
  use prelude.Int
  predicate le_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl2_LeLog_Interface
  use prelude.Int
  predicate le_log (self : int) (_2' : int)
end
module CreusotContracts_Logic_Ord_Impl2_LeLog
  use prelude.Int
  use int.Int
  predicate le_log (self : int) (_2' : int) =
    Int.(<=) self _2'
  val le_log (self : int) (_2' : int) : bool
    ensures { result = le_log self _2' }
    
end
module CreusotContracts_Std1_Iter_Range_RangeInclusiveLen_Stub
  type idx
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Logic_Ord_Impl2_LeLog_Stub as LeLog0
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  function range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int
end
module CreusotContracts_Std1_Iter_Range_RangeInclusiveLen_Interface
  type idx
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Logic_Ord_Impl2_LeLog_Stub as LeLog0
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  function range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int
  axiom range_inclusive_len_spec : forall r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 10 40 43] IsEmptyLog0.is_empty_log r = (range_inclusive_len r = 0)
end
module CreusotContracts_Std1_Iter_Range_RangeInclusiveLen
  type idx
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Logic_Ord_Impl2_LeLog_Stub as LeLog0
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  function range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 42 4 45 5] if IsEmptyLog0.is_empty_log r then
      0
    else
      DeepModel0.deep_model (EndLog0.end_log r) - DeepModel0.deep_model (StartLog0.start_log r) + 1
    
  val range_inclusive_len (r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : int
    ensures { result = range_inclusive_len r }
    
  axiom range_inclusive_len_spec : forall r : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . [#"../../../../creusot-contracts/src/std/iter/range.rs" 40 10 40 43] IsEmptyLog0.is_empty_log r = (range_inclusive_len r = 0)
end
module CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_Produces_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_Produces
  type idx
  use seq.Seq
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Logic_Ord_Impl2_LeLog_Stub as LeLog0
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_RangeInclusiveLen_Stub as RangeInclusiveLen0 with
    type idx = idx,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    function EndLog0.end_log = EndLog0.end_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function StartLog0.start_log = StartLog0.start_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    axiom .
  predicate produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 58 8 64 9] Seq.length visited = RangeInclusiveLen0.range_inclusive_len self - RangeInclusiveLen0.range_inclusive_len o /\ (IsEmptyLog0.is_empty_log self -> IsEmptyLog0.is_empty_log o) /\ (IsEmptyLog0.is_empty_log o \/ EndLog0.end_log self = EndLog0.end_log o) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> DeepModel0.deep_model (Seq.get visited i) = DeepModel0.deep_model (StartLog0.start_log self) + i)
  val produces (self : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (visited : Seq.seq idx) (o : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : bool
    ensures { result = produces self visited o }
    
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl10_Resolve
  type t
  use prelude.Int
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    [#"../../../../creusot-contracts/src/std/vec.rs" 47 8 47 85] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (IndexLogic0.index_logic self i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use prelude.UIntSize
  use prelude.Int
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = t,
    type s = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val from_elem (elem : t) (n : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 143 22 143 41] Seq.length (ShallowModel0.shallow_model result) = UIntSize.to_int n }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 144 12 144 78] forall i : int . 0 <= i /\ i < UIntSize.to_int n -> IndexLogic0.index_logic result i = elem }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use prelude.UIntSize
  use seq.Seq
  use prelude.Borrow
  use prelude.Int
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val len (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 62 26 62 48] UIntSize.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Interface
  type self
  predicate into_iter_pre (self : self)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre
  type self
  predicate into_iter_pre (self : self) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 55 20 55 24] true
  val into_iter_pre (self : self) : bool
    ensures { result = into_iter_pre self }
    
end
module Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type
  type self
  type intoIter
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Interface
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
end
module CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost
  type self
  clone Core_Iter_Traits_Collect_IntoIterator_IntoIter_Type as IntoIter0 with
    type self = self
  predicate into_iter_post (self : self) (res : IntoIter0.intoIter)
  val into_iter_post (self : self) (res : IntoIter0.intoIter) : bool
    ensures { result = into_iter_post self res }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPost_Stub as IntoIterPost0 with
    type self = i,
    type IntoIter0.intoIter = i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  clone CreusotContracts_Std1_Iter_IntoIterator_IntoIterPre_Stub as IntoIterPre0 with
    type self = i
  val into_iter (self : i) : i
    requires {[#"../../../../creusot-contracts/src/std/iter.rs" 79 0 147 1] IntoIterPre0.into_iter_pre self}
    requires {Invariant0.invariant' self}
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 79 0 147 1] IntoIterPost0.into_iter_post self result }
    ensures { Invariant0.invariant' result }
    
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
end
module CreusotContracts_Std1_Iter_Iterator_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_o : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_o : self) : bool
    ensures { result = produces self visited _o }
    
end
module Core_Iter_Range_Impl3_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_Range_Type.t_range a,
    type Item0.item = a
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_Range_Type.t_range a
  val next (self : borrowed (Core_Ops_Range_Range_Type.t_range a)) : Core_Option_Option_Type.t_option a
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 85 26 88 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = self,
    type t = t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module Alloc_Vec_Impl13_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 127 27 127 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 128 26 128 54] HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module Core_Ops_Range_Impl7_New_Interface
  type idx
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = idx
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  val new (start : idx) (end' : idx) : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx
    ensures { [#"../../../../creusot-contracts/src/std/ops.rs" 210 26 210 53] StartLog0.start_log result = start }
    ensures { [#"../../../../creusot-contracts/src/std/ops.rs" 211 26 211 49] EndLog0.end_log result = end' }
    ensures { [#"../../../../creusot-contracts/src/std/ops.rs" 212 16 212 93] LeLog0.le_log (DeepModel0.deep_model start) (DeepModel0.deep_model end') -> not IsEmptyLog0.is_empty_log result }
    
end
module Core_Iter_Range_Impl12_Next_Interface
  type a
  use prelude.Borrow
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Iterator_Produces_Stub as Produces0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a,
    type Item0.item = a
  clone CreusotContracts_Std1_Iter_Iterator_Completed_Stub as Completed0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a
  val next (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive a)) : Core_Option_Option_Type.t_option a
    ensures { [#"../../../../creusot-contracts/src/std/iter.rs" 85 26 88 17] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    [#"../../../../creusot-contracts/src/model.rs" 54 8 54 31] ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
end
module CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  predicate resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy)
    
  val resolve_elswhere (self : self) (old' : ShallowModelTy0.shallowModelTy) (fin : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module Alloc_Vec_Impl14_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone Core_Num_Impl11_Max_Stub as Max0
  use seq.Seq
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with
    type self = i,
    type t = slice t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_ResolveElswhere_Stub as ResolveElswhere0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t,
    type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with
    type self = i,
    type t = slice t,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  val index_mut (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : i) : borrowed Output0.output
    requires {[#"../../../../creusot-contracts/src/std/vec.rs" 118 27 118 46] InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 119 26 119 54] HasValue0.has_value index (ShallowModel0.shallow_model self) ( * result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 120 26 120 57] HasValue0.has_value index (ShallowModel1.shallow_model ( ^ self)) ( ^ result) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 121 26 121 62] ResolveElswhere0.resolve_elswhere index (ShallowModel0.shallow_model self) (ShallowModel1.shallow_model ( ^ self)) }
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 122 26 122 55] Seq.length (ShallowModel1.shallow_model ( ^ self)) = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl0_WithCapacity_Interface
  type t
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val with_capacity (capacity : usize) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 58 26 58 44] Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  clone Core_Num_Impl11_Max_Stub as Max0
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = Seq.seq t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type a = a,
    val Max0.mAX' = Max0.mAX',
    axiom .
  val push (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { [#"../../../../creusot-contracts/src/std/vec.rs" 65 26 65 51] ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Stub
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre_Interface
  type i
  predicate into_iter_pre (self : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPre
  type i
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = i
  predicate into_iter_pre (self : i) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 65 8 65 24] Invariant0.invariant' self
  val into_iter_pre (self : i) : bool
    ensures { result = into_iter_pre self }
    
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Stub
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost_Interface
  type i
  predicate into_iter_post (self : i) (res : i)
end
module CreusotContracts_Std1_Iter_Impl0_IntoIterPost
  type i
  predicate into_iter_post (self : i) (res : i) =
    [#"../../../../creusot-contracts/src/std/iter.rs" 70 8 70 19] self = res
  val into_iter_post (self : i) (res : i) : bool
    ensures { result = into_iter_post self res }
    
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
  axiom is_inhabited_spec : forall _1' : () . ([#"../../../../creusot-contracts/src/invariant.rs" 13 14 13 20] is_inhabited _1') && ([#"../../../../creusot-contracts/src/invariant.rs" 12 4 12 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool =
    [#"../../../../creusot-contracts/src/invariant.rs" 18 8 18 12] true
  val is_inhabited (_1' : ()) : bool
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . ([#"../../../../creusot-contracts/src/invariant.rs" 13 14 13 20] is_inhabited _1') && ([#"../../../../creusot-contracts/src/invariant.rs" 12 4 12 45] exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . [#"../../../../creusot-contracts/src/std/iter/range.rs" 29 14 29 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : () =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 28 4 28 10] ()
  val produces_refl (a : Core_Ops_Range_Range_Type.t_range idx) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_Range_Type.t_range idx . [#"../../../../creusot-contracts/src/std/iter/range.rs" 29 14 29 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 32] Produces0.produces a ab b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 34 15 34 32] Produces0.produces b bc c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 35 14 35 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans
  type idx
  use seq.Seq
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 32 4 32 10] ()
  val produces_trans (a : Core_Ops_Range_Range_Type.t_range idx) (ab : Seq.seq idx) (b : Core_Ops_Range_Range_Type.t_range idx) (bc : Seq.seq idx) (c : Core_Ops_Range_Range_Type.t_range idx) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 32] Produces0.produces a ab b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 34 15 34 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_Range_Type.t_range idx, ab : Seq.seq idx, b : Core_Ops_Range_Range_Type.t_range idx, bc : Seq.seq idx, c : Core_Ops_Range_Range_Type.t_range idx . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 32] Produces0.produces a ab b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 34 15 34 32] Produces0.produces b bc c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 35 14 35 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Stub
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl16_DeepModel_Interface
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int
end
module CreusotContracts_Std1_Num_Impl16_DeepModel
  use prelude.Int
  use prelude.UIntSize
  function deep_model (self : usize) : int =
    [#"../../../../creusot-contracts/src/std/num.rs" 20 16 20 35] UIntSize.to_int self
  val deep_model (self : usize) : int
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx))
end
module CreusotContracts_Std1_Iter_Range_Impl0_Completed
  type idx
  use prelude.Borrow
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range idx
  predicate completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 13 12 13 78] Resolve0.resolve self /\ DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_start ( * self)) >= DeepModel0.deep_model (Core_Ops_Range_Range_Type.range_end ( * self))
  val completed (self : borrowed (Core_Ops_Range_Range_Type.t_range idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_InBounds
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 102 20 102 37] UIntSize.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl5_HasValue
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 108 20 108 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
  axiom produces_refl_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . [#"../../../../creusot-contracts/src/std/iter/range.rs" 68 14 68 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  function produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : () =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 67 4 67 10] ()
  val produces_refl (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . [#"../../../../creusot-contracts/src/std/iter/range.rs" 68 14 68 39] Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans_Stub
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans_Interface
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, ab : Seq.seq idx, b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, bc : Seq.seq idx, c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 72 15 72 32] Produces0.produces a ab b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 73 15 73 32] Produces0.produces b bc c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 74 14 74 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans
  type idx
  use seq.Seq
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces_Stub as Produces0 with
    type idx = idx
  function produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    
   =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 71 4 71 10] ()
  val produces_trans (a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (ab : Seq.seq idx) (b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) (bc : Seq.seq idx) (c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx) : ()
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 72 15 72 32] Produces0.produces a ab b}
    requires {[#"../../../../creusot-contracts/src/std/iter/range.rs" 73 15 73 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, ab : Seq.seq idx, b : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx, bc : Seq.seq idx, c : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx . ([#"../../../../creusot-contracts/src/std/iter/range.rs" 72 15 72 32] Produces0.produces a ab b) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 73 15 73 32] Produces0.produces b bc c) -> ([#"../../../../creusot-contracts/src/std/iter/range.rs" 74 14 74 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module CreusotContracts_Std1_Iter_Range_Impl1_Completed_Stub
  type idx
  use prelude.Borrow
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx))
end
module CreusotContracts_Std1_Iter_Range_Impl1_Completed_Interface
  type idx
  use prelude.Borrow
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  predicate completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx))
end
module CreusotContracts_Std1_Iter_Range_Impl1_Completed
  type idx
  use prelude.Borrow
  use prelude.Int
  use prelude.Int
  clone CreusotContracts_Logic_Ord_Impl2_LeLog_Stub as LeLog0
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl5_EndLog_Stub as EndLog0 with
    type idx = idx
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = idx,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Std1_Ops_Impl5_StartLog_Stub as StartLog0 with
    type idx = idx
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog_Stub as IsEmptyLog0 with
    type idx = idx,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  predicate completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)) =
    [#"../../../../creusot-contracts/src/std/iter/range.rs" 52 12 52 57] IsEmptyLog0.is_empty_log ( * self) /\ IsEmptyLog0.is_empty_log ( ^ self)
  val completed (self : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive idx)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Stub
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere_Interface
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl5_ResolveElswhere
  type t
  use prelude.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    [#"../../../../creusot-contracts/src/std/slice.rs" 114 8 114 96] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
  val resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) : bool
    ensures { result = resolve_elswhere self old' fin }
    
end
module CreusotContracts_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    [#"../../../../creusot-contracts/src/resolve.rs" 33 8 33 12] true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module KnapsackFull_Knapsack01Dyn_Interface
  type name
  use seq.Seq
  use prelude.Int
  use prelude.UIntSize
  use prelude.Borrow
  clone Core_Num_Impl11_Max_Stub as Max0
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone KnapsackFull_SumValues_Stub as SumValues0 with
    type name = name,
    axiom .
  clone KnapsackFull_SubseqRev_Stub as SubseqRev0 with
    type t = KnapsackFull_Item_Type.t_item name,
    axiom .
  clone KnapsackFull_SumWeights_Stub as SumWeights0 with
    type name = name,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel1 with
    type t = KnapsackFull_Item_Type.t_item name,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max0.mAX',
    axiom .
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic_Stub as IndexLogic0 with
    type t = KnapsackFull_Item_Type.t_item name,
    type s = Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (KnapsackFull_Item_Type.t_item name)
  val knapsack01_dyn [#"../knapsack_full.rs" 84 0 84 91] (items : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) (max_weight : usize) : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)
    requires {[#"../knapsack_full.rs" 76 11 76 34] Seq.length (ShallowModel0.shallow_model items) < 10000000}
    requires {[#"../knapsack_full.rs" 77 11 77 33] UIntSize.to_int max_weight < 10000000}
    requires {[#"../knapsack_full.rs" 78 0 78 86] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model items) -> UIntSize.to_int (KnapsackFull_Item_Type.item_value (IndexLogic0.index_logic items i)) <= 10000000}
    ensures { [#"../knapsack_full.rs" 79 10 79 60] SumWeights0.sum_weights (ShallowModel1.shallow_model result) (Seq.length (ShallowModel1.shallow_model result)) <= UIntSize.to_int max_weight }
    ensures { [#"../knapsack_full.rs" 80 10 80 54] SubseqRev0.subseq_rev (ShallowModel1.shallow_model result) 0 (ShallowModel0.shallow_model items) (Seq.length (ShallowModel0.shallow_model items)) }
    ensures { [#"../knapsack_full.rs" 81 0 83 2] forall s : Seq.seq (KnapsackFull_Item_Type.t_item name) . SubseqRev0.subseq_rev s 0 (ShallowModel0.shallow_model items) (Seq.length (ShallowModel0.shallow_model items)) /\ SumWeights0.sum_weights s (Seq.length s) <= UIntSize.to_int max_weight -> SumValues0.sum_values s (Seq.length s) <= SumValues0.sum_values (ShallowModel1.shallow_model result) (Seq.length (ShallowModel1.shallow_model result)) }
    
end
module KnapsackFull_Knapsack01Dyn
  type name
  use prelude.Borrow
  use prelude.Int
  use prelude.UIntSize
  use prelude.Ghost
  use seq.Seq
  use prelude.IntSize
  clone CreusotContracts_Resolve_Impl2_Resolve as Resolve8 with
    type t = usize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use KnapsackFull_Item_Type as KnapsackFull_Item_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone Core_Num_Impl11_Max as Max1
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel1 with
    type t = KnapsackFull_Item_Type.t_item name,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  use seq.Seq
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel9 with
    type t = Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (KnapsackFull_Item_Type.t_item name),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere1 with
    type t = usize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel3 with
    type t = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel8 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Slice_Impl5_ResolveElswhere as ResolveElswhere0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel2 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel7 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue2 with
    type t = usize
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds2 with
    type t = usize
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel6 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel5 with
    type t = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic3 with
    type t = usize,
    type s = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve7 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function IndexLogic0.index_logic = IndexLogic3.index_logic,
    predicate Resolve0.resolve = Resolve8.resolve,
    val Max0.mAX' = Max1.mAX'
  use prelude.Int
  clone CreusotContracts_Logic_Ord_Impl2_LeLog as LeLog0
  use Core_Ops_Range_RangeInclusive_Type as Core_Ops_Range_RangeInclusive_Type
  clone CreusotContracts_Std1_Ops_Impl5_EndLog as EndLog0 with
    type idx = usize
  clone CreusotContracts_Std1_Num_Impl16_DeepModel as DeepModel0
  clone CreusotContracts_Std1_Ops_Impl5_StartLog as StartLog0 with
    type idx = usize
  clone CreusotContracts_Std1_Ops_Impl5_IsEmptyLog as IsEmptyLog0 with
    type idx = usize,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    type DeepModelTy0.deepModelTy = int,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl1_Completed as Completed1 with
    type idx = usize,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    function StartLog0.start_log = StartLog0.start_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function EndLog0.end_log = EndLog0.end_log,
    predicate LeLog0.le_log = LeLog0.le_log
  clone CreusotContracts_Std1_Iter_Range_RangeInclusiveLen as RangeInclusiveLen0 with
    type idx = usize,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    function EndLog0.end_log = EndLog0.end_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function StartLog0.start_log = StartLog0.start_log,
    predicate LeLog0.le_log = LeLog0.le_log,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl1_Produces as Produces1 with
    type idx = usize,
    function RangeInclusiveLen0.range_inclusive_len = RangeInclusiveLen0.range_inclusive_len,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    function EndLog0.end_log = EndLog0.end_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function StartLog0.start_log = StartLog0.start_log,
    predicate LeLog0.le_log = LeLog0.le_log
  clone CreusotContracts_Std1_Iter_Range_Impl1_ProducesTrans as ProducesTrans1 with
    type idx = usize,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl1_ProducesRefl as ProducesRefl1 with
    type idx = usize,
    predicate Produces0.produces = Produces1.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant1 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited1 with
    type self = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize,
    predicate Invariant0.invariant' = Invariant1.invariant',
    axiom .
  use prelude.Ghost
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost1 with
    type i = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre1 with
    type i = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize,
    predicate Invariant0.invariant' = Invariant1.invariant'
  clone CreusotContracts_Std1_Slice_Impl5_HasValue as HasValue0 with
    type t = KnapsackFull_Item_Type.t_item name
  clone CreusotContracts_Std1_Slice_Impl5_InBounds as InBounds0 with
    type t = KnapsackFull_Item_Type.t_item name
  use Core_Ops_Range_Range_Type as Core_Ops_Range_Range_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Range_Impl0_Completed as Completed0 with
    type idx = usize,
    predicate Resolve0.resolve = Resolve0.resolve,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_Produces as Produces0 with
    type idx = usize,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesTrans as ProducesTrans0 with
    type idx = usize,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Std1_Iter_Range_Impl0_ProducesRefl as ProducesRefl0 with
    type idx = usize,
    predicate Produces0.produces = Produces0.produces,
    axiom .
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant0 with
    type self = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = Core_Ops_Range_Range_Type.t_range usize,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPost as IntoIterPost0 with
    type i = Core_Ops_Range_Range_Type.t_range usize
  clone CreusotContracts_Std1_Iter_Impl0_IntoIterPre as IntoIterPre0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    predicate Invariant0.invariant' = Invariant0.invariant'
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel4 with
    type t = KnapsackFull_Item_Type.t_item name,
    type a = Alloc_Alloc_Global_Type.t_global,
    val Max0.mAX' = Max1.mAX',
    axiom .
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with
    type t = KnapsackFull_Item_Type.t_item name,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel9.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic2 with
    type t = KnapsackFull_Item_Type.t_item name,
    type s = Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Alloc_Vec_Impl0_WithCapacity_Interface as WithCapacity0 with
    type t = KnapsackFull_Item_Type.t_item name,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    val Max0.mAX' = Max1.mAX'
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve6 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = usize
  clone Alloc_Vec_Impl14_IndexMut_Interface as IndexMut1 with
    type t = usize,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel8.shallow_model,
    predicate InBounds0.in_bounds = InBounds2.in_bounds,
    predicate HasValue0.has_value = HasValue2.has_value,
    function ShallowModel1.shallow_model = ShallowModel3.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere,
    type Output0.output = usize,
    val Max0.mAX' = Max1.mAX'
  clone Alloc_Vec_Impl14_IndexMut_Interface as IndexMut0 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel7.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate HasValue0.has_value = HasValue1.has_value,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model,
    predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere,
    val Max0.mAX' = Max1.mAX'
  clone KnapsackFull_Max_Interface as Max0
  clone Alloc_Vec_Impl13_Index_Interface as Index2 with
    type t = usize,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel6.shallow_model,
    predicate InBounds0.in_bounds = InBounds2.in_bounds,
    predicate HasValue0.has_value = HasValue2.has_value,
    type Output0.output = usize
  clone Alloc_Vec_Impl13_Index_Interface as Index1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel5.shallow_model,
    predicate InBounds0.in_bounds = InBounds1.in_bounds,
    predicate HasValue0.has_value = HasValue1.has_value
  clone KnapsackFull_Knapsack01Dyn_Closure24_Interface as Closure240 with
    type name = name
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    type s = Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Std1_Vec_Impl10_Resolve as Resolve4 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    predicate Resolve0.resolve = Resolve7.resolve,
    val Max0.mAX' = Max1.mAX'
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve3 with
    type self = Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone Core_Iter_Range_Impl12_Next_Interface as Next1 with
    type a = usize,
    type Item0.item = usize,
    predicate Completed0.completed = Completed1.completed,
    predicate Produces0.produces = Produces1.produces
  clone KnapsackFull_Knapsack01Dyn_Closure15_Interface as Closure150 with
    type name = name
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter1 with
    type i = Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre1.into_iter_pre,
    predicate Invariant0.invariant' = Invariant1.invariant',
    predicate IntoIterPost0.into_iter_post = IntoIterPost1.into_iter_post
  clone Core_Ops_Range_Impl7_New_Interface as New0 with
    type idx = usize,
    function StartLog0.start_log = StartLog0.start_log,
    function EndLog0.end_log = EndLog0.end_log,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate IsEmptyLog0.is_empty_log = IsEmptyLog0.is_empty_log,
    type DeepModelTy0.deepModelTy = int
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve1 with
    type self = KnapsackFull_Item_Type.t_item name
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = Seq.seq (KnapsackFull_Item_Type.t_item name),
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone Alloc_Vec_Impl13_Index_Interface as Index0 with
    type t = KnapsackFull_Item_Type.t_item name,
    type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global,
    type Output0.output = KnapsackFull_Item_Type.t_item name,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds,
    predicate HasValue0.has_value = HasValue0.has_value
  clone KnapsackFull_Knapsack01Dyn_Closure14_Interface as Closure140 with
    type name = name
  clone Core_Iter_Range_Impl3_Next_Interface as Next0 with
    type a = usize,
    type Item0.item = usize,
    predicate Completed0.completed = Completed0.completed,
    predicate Produces0.produces = Produces0.produces
  clone KnapsackFull_SumValues as SumValues0 with
    type name = name,
    axiom .
  clone KnapsackFull_SumWeights as SumWeights0 with
    type name = name,
    axiom .
  clone KnapsackFull_SubseqRev as SubseqRev0 with
    type t = KnapsackFull_Item_Type.t_item name,
    axiom .
  clone KnapsackFull_M as M0 with
    type name = name,
    predicate SubseqRev0.subseq_rev = SubseqRev0.subseq_rev,
    function SumWeights0.sum_weights = SumWeights0.sum_weights,
    function SumValues0.sum_values = SumValues0.sum_values,
    axiom .
  clone KnapsackFull_Knapsack01Dyn_Closure6_Interface as Closure60 with
    type name = name
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with
    type i = Core_Ops_Range_Range_Type.t_range usize,
    predicate IntoIterPre0.into_iter_pre = IntoIterPre0.into_iter_pre,
    predicate Invariant0.invariant' = Invariant0.invariant',
    predicate IntoIterPost0.into_iter_post = IntoIterPost0.into_iter_post
  clone Alloc_Vec_FromElem_Interface as FromElem1 with
    type t = Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    function IndexLogic0.index_logic = IndexLogic1.index_logic,
    val Max0.mAX' = Max1.mAX'
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with
    type t = KnapsackFull_Item_Type.t_item name,
    type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_FromElem_Interface as FromElem0 with
    type t = usize,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function IndexLogic0.index_logic = IndexLogic3.index_logic,
    val Max0.mAX' = Max1.mAX'
  clone CreusotContracts_Logic_Ops_Impl0_IndexLogic as IndexLogic0 with
    type t = KnapsackFull_Item_Type.t_item name,
    type s = Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global),
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let rec cfg knapsack01_dyn [#"../knapsack_full.rs" 84 0 84 91] [@cfg:stackify] [@cfg:subregion_analysis] (items : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)) (max_weight : usize) : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global)
    requires {[#"../knapsack_full.rs" 76 11 76 34] Seq.length (ShallowModel0.shallow_model items) < 10000000}
    requires {[#"../knapsack_full.rs" 77 11 77 33] UIntSize.to_int max_weight < 10000000}
    requires {[#"../knapsack_full.rs" 78 0 78 86] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model items) -> UIntSize.to_int (KnapsackFull_Item_Type.item_value (IndexLogic0.index_logic items i)) <= 10000000}
    ensures { [#"../knapsack_full.rs" 79 10 79 60] SumWeights0.sum_weights (ShallowModel1.shallow_model result) (Seq.length (ShallowModel1.shallow_model result)) <= UIntSize.to_int max_weight }
    ensures { [#"../knapsack_full.rs" 80 10 80 54] SubseqRev0.subseq_rev (ShallowModel1.shallow_model result) 0 (ShallowModel0.shallow_model items) (Seq.length (ShallowModel0.shallow_model items)) }
    ensures { [#"../knapsack_full.rs" 81 0 83 2] forall s : Seq.seq (KnapsackFull_Item_Type.t_item name) . SubseqRev0.subseq_rev s 0 (ShallowModel0.shallow_model items) (Seq.length (ShallowModel0.shallow_model items)) /\ SumWeights0.sum_weights s (Seq.length s) <= UIntSize.to_int max_weight -> SumValues0.sum_values s (Seq.length s) <= SumValues0.sum_values (ShallowModel1.shallow_model result) (Seq.length (ShallowModel1.shallow_model result)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var items_1 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var max_weight_2 : usize;
  var best_value_9 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _10 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _11 : usize;
  var _12 : usize;
  var _13 : usize;
  var _14 : usize;
  var _15 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var _16 : ();
  var iter_17 : Core_Ops_Range_Range_Type.t_range usize;
  var _18 : Core_Ops_Range_Range_Type.t_range usize;
  var _19 : usize;
  var _20 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var iter_old_21 : Ghost.ghost_ty (Core_Ops_Range_Range_Type.t_range usize);
  var _24 : ();
  var produced_25 : Ghost.ghost_ty (Seq.seq usize);
  var _28 : ();
  var _35 : ();
  var _36 : Core_Option_Option_Type.t_option usize;
  var _37 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _38 : borrowed (Core_Ops_Range_Range_Type.t_range usize);
  var _39 : isize;
  var __creusot_proc_iter_elem_40 : usize;
  var _41 : Ghost.ghost_ty (Seq.seq usize);
  var _44 : ();
  var i_45 : usize;
  var it_46 : KnapsackFull_Item_Type.t_item name;
  var _47 : KnapsackFull_Item_Type.t_item name;
  var _48 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var _49 : usize;
  var iter_50 : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize;
  var _51 : Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize;
  var _52 : usize;
  var iter_old_53 : Ghost.ghost_ty (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize);
  var _56 : ();
  var produced_57 : Ghost.ghost_ty (Seq.seq usize);
  var _60 : ();
  var _68 : Core_Option_Option_Type.t_option usize;
  var _69 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize);
  var _70 : borrowed (Core_Ops_Range_RangeInclusive_Type.t_rangeinclusive usize);
  var _71 : isize;
  var __creusot_proc_iter_elem_72 : usize;
  var _73 : Ghost.ghost_ty (Seq.seq usize);
  var _76 : ();
  var w_77 : usize;
  var _78 : usize;
  var _79 : bool;
  var _80 : usize;
  var _81 : usize;
  var _82 : usize;
  var _83 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _84 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _85 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _86 : usize;
  var _87 : usize;
  var _88 : usize;
  var _89 : usize;
  var _90 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _91 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _92 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _93 : usize;
  var _94 : usize;
  var _95 : usize;
  var _96 : usize;
  var _97 : usize;
  var _98 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _99 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _100 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _101 : usize;
  var _102 : usize;
  var _103 : usize;
  var _104 : usize;
  var _105 : usize;
  var _106 : borrowed usize;
  var _107 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _108 : borrowed (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global));
  var _109 : borrowed (Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global));
  var _110 : usize;
  var _111 : usize;
  var _112 : usize;
  var _113 : ();
  var _114 : ();
  var result_115 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var _116 : usize;
  var _117 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var left_weight_118 : usize;
  var j_119 : usize;
  var _120 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var _121 : ();
  var _127 : bool;
  var _128 : usize;
  var it_129 : KnapsackFull_Item_Type.t_item name;
  var _130 : KnapsackFull_Item_Type.t_item name;
  var _131 : Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
  var _132 : usize;
  var _133 : bool;
  var _134 : usize;
  var _135 : usize;
  var _136 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _137 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _138 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _139 : usize;
  var _140 : usize;
  var _141 : usize;
  var _142 : usize;
  var _143 : usize;
  var _144 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _145 : Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global);
  var _146 : Alloc_Vec_Vec_Type.t_vec (Alloc_Vec_Vec_Type.t_vec usize (Alloc_Alloc_Global_Type.t_global)) (Alloc_Alloc_Global_Type.t_global);
  var _147 : usize;
  var _148 : usize;
  var _149 : ();
  var _150 : borrowed (Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global));
  var _151 : KnapsackFull_Item_Type.t_item name;
  var _152 : usize;
  var _153 : ();
  var _154 : ();
  var _155 : ();
  {
    items_1 <- items;
    max_weight_2 <- max_weight;
    goto BB0
  }
  BB0 {
    _12 <- max_weight_2;
    _11 <- ([#"../knapsack_full.rs" 85 38 85 52] _12 + ([#"../knapsack_full.rs" 85 51 85 52] (1 : usize)));
    _10 <- ([#"../knapsack_full.rs" 85 30 85 53] FromElem0.from_elem ([#"../knapsack_full.rs" 85 35 85 36] (0 : usize)) _11);
    goto BB1
  }
  BB1 {
    _15 <- items_1;
    _14 <- ([#"../knapsack_full.rs" 85 55 85 66] Len0.len _15);
    goto BB2
  }
  BB2 {
    _13 <- ([#"../knapsack_full.rs" 85 55 85 70] _14 + ([#"../knapsack_full.rs" 85 69 85 70] (1 : usize)));
    best_value_9 <- ([#"../knapsack_full.rs" 85 25 85 71] FromElem1.from_elem _10 _13);
    goto BB3
  }
  BB3 {
    _20 <- items_1;
    _19 <- ([#"../knapsack_full.rs" 94 16 94 27] Len0.len _20);
    goto BB4
  }
  BB4 {
    _18 <- Core_Ops_Range_Range_Type.C_Range ([#"../knapsack_full.rs" 94 13 94 14] (0 : usize)) _19;
    iter_17 <- ([#"../knapsack_full.rs" 87 4 87 55] IntoIter0.into_iter _18);
    goto BB5
  }
  BB5 {
    _23 <- a_22;
    a_22 <- any Closure60.knapsackfull_knapsack01dyn_closure6 name;
    _24 <- ();
    iter_old_21 <- ([#"../knapsack_full.rs" 87 4 87 55] Ghost.new iter_17);
    goto BB6
  }
  BB6 {
    _28 <- ();
    produced_25 <- ([#"../knapsack_full.rs" 87 4 87 55] Ghost.new (Seq.empty ));
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    invariant { [#"../knapsack_full.rs" 87 4 87 55] Invariant0.invariant' iter_17 };
    invariant { [#"../knapsack_full.rs" 87 4 87 55] Produces0.produces (Ghost.inner iter_old_21) (Ghost.inner produced_25) iter_17 };
    invariant { [#"../knapsack_full.rs" 87 16 87 53] Seq.length (ShallowModel0.shallow_model items_1) + 1 = Seq.length (ShallowModel2.shallow_model best_value_9) };
    invariant { [#"../knapsack_full.rs" 87 4 87 55] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel2.shallow_model best_value_9) -> UIntSize.to_int max_weight_2 + 1 = Seq.length (ShallowModel3.shallow_model (IndexLogic1.index_logic best_value_9 i)) };
    invariant { [#"../knapsack_full.rs" 87 4 87 55] forall ww : int . forall ii : int . 0 <= ii /\ ii <= Seq.length (Ghost.inner produced_25) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight_2 -> UIntSize.to_int (Seq.get (ShallowModel3.shallow_model (IndexLogic1.index_logic best_value_9 ii)) ww) = M0.m (ShallowModel0.shallow_model items_1) ii ww };
    invariant { [#"../knapsack_full.rs" 87 4 87 55] forall ww : int . forall ii : int . 0 <= ii /\ ii <= Seq.length (ShallowModel0.shallow_model items_1) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight_2 -> UIntSize.to_int (Seq.get (ShallowModel3.shallow_model (IndexLogic1.index_logic best_value_9 ii)) ww) <= 10000000 * ii };
    goto BB13
  }
  BB13 {
    _38 <- borrow_mut iter_17;
    iter_17 <-  ^ _38;
    _37 <- borrow_mut ( * _38);
    _38 <- { _38 with current = ( ^ _37) };
    _36 <- ([#"../knapsack_full.rs" 87 4 87 55] Next0.next _37);
    goto BB14
  }
  BB14 {
    assume { Resolve0.resolve _38 };
    switch (_36)
      | Core_Option_Option_Type.C_None -> goto BB15
      | Core_Option_Option_Type.C_Some _ -> goto BB16
      end
  }
  BB15 {
    _16 <- ();
    _117 <- items_1;
    _116 <- ([#"../knapsack_full.rs" 118 49 118 60] Len0.len _117);
    goto BB49
  }
  BB16 {
    goto BB18
  }
  BB17 {
    absurd
  }
  BB18 {
    __creusot_proc_iter_elem_40 <- Core_Option_Option_Type.some_0 _36;
    _43 <- a_42;
    a_42 <- any Closure140.knapsackfull_knapsack01dyn_closure14 name;
    _44 <- ();
    _41 <- ([#"../knapsack_full.rs" 87 4 87 55] Ghost.new (Seq.(++) (Ghost.inner produced_25) (Seq.singleton __creusot_proc_iter_elem_40)));
    goto BB19
  }
  BB19 {
    produced_25 <- _41;
    _41 <- any Ghost.ghost_ty (Seq.seq usize);
    i_45 <- __creusot_proc_iter_elem_40;
    _48 <- items_1;
    _49 <- i_45;
    _47 <- ([#"../knapsack_full.rs" 95 18 95 26] Index0.index _48 _49);
    goto BB20
  }
  BB20 {
    it_46 <- _47;
    assume { Resolve1.resolve _47 };
    _52 <- max_weight_2;
    _51 <- ([#"../knapsack_full.rs" 109 17 109 31] New0.new ([#"../knapsack_full.rs" 109 17 109 18] (0 : usize)) _52);
    goto BB21
  }
  BB21 {
    iter_50 <- ([#"../knapsack_full.rs" 97 8 97 59] IntoIter1.into_iter _51);
    goto BB22
  }
  BB22 {
    _55 <- a_54;
    a_54 <- any Closure150.knapsackfull_knapsack01dyn_closure15 name;
    _56 <- ();
    iter_old_53 <- ([#"../knapsack_full.rs" 97 8 97 59] Ghost.new iter_50);
    goto BB23
  }
  BB23 {
    _60 <- ();
    produced_57 <- ([#"../knapsack_full.rs" 97 8 97 59] Ghost.new (Seq.empty ));
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB26
  }
  BB26 {
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    invariant { [#"../knapsack_full.rs" 97 8 97 59] Invariant1.invariant' iter_50 };
    invariant { [#"../knapsack_full.rs" 97 8 97 59] Produces1.produces (Ghost.inner iter_old_53) (Ghost.inner produced_57) iter_50 };
    invariant { [#"../knapsack_full.rs" 97 20 97 57] Seq.length (ShallowModel0.shallow_model items_1) + 1 = Seq.length (ShallowModel2.shallow_model best_value_9) };
    invariant { [#"../knapsack_full.rs" 97 8 97 59] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel2.shallow_model best_value_9) -> UIntSize.to_int max_weight_2 + 1 = Seq.length (ShallowModel3.shallow_model (IndexLogic1.index_logic best_value_9 i)) };
    invariant { [#"../knapsack_full.rs" 97 8 97 59] forall ww : int . forall ii : int . 0 <= ii /\ ii <= UIntSize.to_int i_45 /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight_2 -> UIntSize.to_int (Seq.get (ShallowModel3.shallow_model (IndexLogic1.index_logic best_value_9 ii)) ww) = M0.m (ShallowModel0.shallow_model items_1) ii ww };
    invariant { [#"../knapsack_full.rs" 97 8 97 59] forall ww : int . 0 <= ww /\ ww <= Seq.length (Ghost.inner produced_57) - 1 -> UIntSize.to_int (Seq.get (ShallowModel3.shallow_model (IndexLogic1.index_logic best_value_9 (UIntSize.to_int i_45 + 1))) ww) = M0.m (ShallowModel0.shallow_model items_1) (UIntSize.to_int i_45 + 1) ww };
    invariant { [#"../knapsack_full.rs" 97 8 97 59] forall ww : int . forall ii : int . 0 <= ii /\ ii <= Seq.length (ShallowModel0.shallow_model items_1) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight_2 -> UIntSize.to_int (Seq.get (ShallowModel3.shallow_model (IndexLogic1.index_logic best_value_9 ii)) ww) <= 10000000 * ii };
    goto BB31
  }
  BB31 {
    _70 <- borrow_mut iter_50;
    iter_50 <-  ^ _70;
    _69 <- borrow_mut ( * _70);
    _70 <- { _70 with current = ( ^ _69) };
    _68 <- ([#"../knapsack_full.rs" 97 8 97 59] Next1.next _69);
    goto BB32
  }
  BB32 {
    assume { Resolve2.resolve _70 };
    switch (_68)
      | Core_Option_Option_Type.C_None -> goto BB33
      | Core_Option_Option_Type.C_Some _ -> goto BB34
      end
  }
  BB33 {
    assume { Resolve1.resolve it_46 };
    _35 <- ();
    goto BB12
  }
  BB34 {
    goto BB35
  }
  BB35 {
    __creusot_proc_iter_elem_72 <- Core_Option_Option_Type.some_0 _68;
    _75 <- a_74;
    a_74 <- any Closure240.knapsackfull_knapsack01dyn_closure24 name;
    _76 <- ();
    _73 <- ([#"../knapsack_full.rs" 97 8 97 59] Ghost.new (Seq.(++) (Ghost.inner produced_57) (Seq.singleton __creusot_proc_iter_elem_72)));
    goto BB36
  }
  BB36 {
    produced_57 <- _73;
    _73 <- any Ghost.ghost_ty (Seq.seq usize);
    w_77 <- __creusot_proc_iter_elem_72;
    _80 <- KnapsackFull_Item_Type.item_weight it_46;
    _81 <- w_77;
    _79 <- ([#"../knapsack_full.rs" 110 38 110 51] _80 > _81);
    switch (_79)
      | False -> goto BB40
      | True -> goto BB37
      end
  }
  BB37 {
    _85 <- best_value_9;
    _86 <- i_45;
    _84 <- ([#"../knapsack_full.rs" 111 16 111 29] Index1.index _85 _86);
    goto BB38
  }
  BB38 {
    _83 <- _84;
    _87 <- w_77;
    _82 <- ([#"../knapsack_full.rs" 111 16 111 32] Index2.index _83 _87);
    goto BB39
  }
  BB39 {
    _78 <- _82;
    goto BB46
  }
  BB40 {
    _92 <- best_value_9;
    _93 <- i_45;
    _91 <- ([#"../knapsack_full.rs" 113 20 113 33] Index1.index _92 _93);
    goto BB41
  }
  BB41 {
    _90 <- _91;
    _94 <- w_77;
    _89 <- ([#"../knapsack_full.rs" 113 20 113 36] Index2.index _90 _94);
    goto BB42
  }
  BB42 {
    _88 <- _89;
    _100 <- best_value_9;
    _101 <- i_45;
    _99 <- ([#"../knapsack_full.rs" 113 38 113 51] Index1.index _100 _101);
    goto BB43
  }
  BB43 {
    _98 <- _99;
    _103 <- w_77;
    _104 <- KnapsackFull_Item_Type.item_weight it_46;
    _102 <- ([#"../knapsack_full.rs" 113 52 113 65] _103 - _104);
    _97 <- ([#"../knapsack_full.rs" 113 38 113 66] Index2.index _98 _102);
    goto BB44
  }
  BB44 {
    _96 <- _97;
    _105 <- KnapsackFull_Item_Type.item_value it_46;
    _95 <- ([#"../knapsack_full.rs" 113 38 113 77] _96 + _105);
    _78 <- ([#"../knapsack_full.rs" 113 16 113 78] Max0.max _88 _95);
    goto BB45
  }
  BB45 {
    goto BB46
  }
  BB46 {
    _109 <- borrow_mut best_value_9;
    best_value_9 <-  ^ _109;
    _111 <- i_45;
    _110 <- ([#"../knapsack_full.rs" 110 23 110 28] _111 + ([#"../knapsack_full.rs" 110 27 110 28] (1 : usize)));
    _108 <- ([#"../knapsack_full.rs" 110 12 110 29] IndexMut0.index_mut _109 _110);
    goto BB47
  }
  BB47 {
    _107 <- borrow_mut ( * _108);
    _108 <- { _108 with current = ( ^ _107) };
    _112 <- w_77;
    _106 <- ([#"../knapsack_full.rs" 110 12 110 32] IndexMut1.index_mut _107 _112);
    goto BB48
  }
  BB48 {
    _106 <- { _106 with current = _78 };
    _78 <- any usize;
    assume { Resolve5.resolve _106 };
    assume { Resolve6.resolve _108 };
    _35 <- ();
    goto BB30
  }
  BB49 {
    result_115 <- ([#"../knapsack_full.rs" 118 30 118 61] WithCapacity0.with_capacity _116);
    goto BB50
  }
  BB50 {
    left_weight_118 <- max_weight_2;
    _120 <- items_1;
    j_119 <- ([#"../knapsack_full.rs" 121 16 121 27] Len0.len _120);
    goto BB51
  }
  BB51 {
    goto BB52
  }
  BB52 {
    goto BB53
  }
  BB53 {
    goto BB54
  }
  BB54 {
    goto BB55
  }
  BB55 {
    invariant { [#"../knapsack_full.rs" 122 16 122 34] UIntSize.to_int j_119 <= Seq.length (ShallowModel0.shallow_model items_1) };
    invariant { [#"../knapsack_full.rs" 123 16 123 43] UIntSize.to_int left_weight_118 <= UIntSize.to_int max_weight_2 };
    invariant { [#"../knapsack_full.rs" 122 4 122 36] forall r : Seq.seq (KnapsackFull_Item_Type.t_item name) . Seq.length (ShallowModel1.shallow_model result_115) <= Seq.length r /\ (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model result_115) -> IndexLogic2.index_logic result_115 i = Seq.get r i) /\ SumWeights0.sum_weights r (Seq.length (ShallowModel1.shallow_model result_115)) <= UIntSize.to_int left_weight_118 -> SumWeights0.sum_weights r 0 <= UIntSize.to_int max_weight_2 };
    invariant { [#"../knapsack_full.rs" 122 4 122 36] forall r : Seq.seq (KnapsackFull_Item_Type.t_item name) . Seq.length (ShallowModel1.shallow_model result_115) <= Seq.length r /\ (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model result_115) -> IndexLogic2.index_logic result_115 i = Seq.get r i) /\ SumValues0.sum_values r (Seq.length (ShallowModel1.shallow_model result_115)) = M0.m (ShallowModel0.shallow_model items_1) (UIntSize.to_int j_119) (UIntSize.to_int left_weight_118) -> SumValues0.sum_values r 0 = M0.m (ShallowModel0.shallow_model items_1) (Seq.length (ShallowModel0.shallow_model items_1)) (UIntSize.to_int max_weight_2) };
    invariant { [#"../knapsack_full.rs" 122 4 122 36] forall r : Seq.seq (KnapsackFull_Item_Type.t_item name) . Seq.length (ShallowModel1.shallow_model result_115) <= Seq.length r /\ (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model result_115) -> IndexLogic2.index_logic result_115 i = Seq.get r i) /\ SubseqRev0.subseq_rev r (Seq.length (ShallowModel1.shallow_model result_115)) (ShallowModel0.shallow_model items_1) (UIntSize.to_int j_119) -> SubseqRev0.subseq_rev r 0 (ShallowModel0.shallow_model items_1) (Seq.length (ShallowModel0.shallow_model items_1)) };
    goto BB56
  }
  BB56 {
    _128 <- j_119;
    _127 <- ([#"../knapsack_full.rs" 139 10 139 15] ([#"../knapsack_full.rs" 139 10 139 11] (0 : usize)) < _128);
    switch (_127)
      | False -> goto BB67
      | True -> goto BB57
      end
  }
  BB57 {
    j_119 <- ([#"../knapsack_full.rs" 140 8 140 14] j_119 - ([#"../knapsack_full.rs" 140 13 140 14] (1 : usize)));
    _131 <- items_1;
    _132 <- j_119;
    _130 <- ([#"../knapsack_full.rs" 141 18 141 26] Index0.index _131 _132);
    goto BB58
  }
  BB58 {
    it_129 <- _130;
    assume { Resolve1.resolve _130 };
    _138 <- best_value_9;
    _140 <- j_119;
    _139 <- ([#"../knapsack_full.rs" 142 22 142 27] _140 + ([#"../knapsack_full.rs" 142 26 142 27] (1 : usize)));
    _137 <- ([#"../knapsack_full.rs" 142 11 142 28] Index1.index _138 _139);
    goto BB59
  }
  BB59 {
    _136 <- _137;
    _141 <- left_weight_118;
    _135 <- ([#"../knapsack_full.rs" 142 11 142 41] Index2.index _136 _141);
    goto BB60
  }
  BB60 {
    _134 <- _135;
    _146 <- best_value_9;
    _147 <- j_119;
    _145 <- ([#"../knapsack_full.rs" 142 45 142 58] Index1.index _146 _147);
    goto BB61
  }
  BB61 {
    _144 <- _145;
    _148 <- left_weight_118;
    _143 <- ([#"../knapsack_full.rs" 142 45 142 71] Index2.index _144 _148);
    goto BB62
  }
  BB62 {
    _142 <- _143;
    _133 <- ([#"../knapsack_full.rs" 142 11 142 71] _134 <> _142);
    switch (_133)
      | False -> goto BB65
      | True -> goto BB63
      end
  }
  BB63 {
    _150 <- borrow_mut result_115;
    result_115 <-  ^ _150;
    _151 <- it_129;
    _149 <- ([#"../knapsack_full.rs" 143 12 143 27] Push0.push _150 _151);
    goto BB64
  }
  BB64 {
    _152 <- KnapsackFull_Item_Type.item_weight it_129;
    assume { Resolve1.resolve it_129 };
    left_weight_118 <- ([#"../knapsack_full.rs" 144 12 144 36] left_weight_118 - _152);
    _35 <- ();
    goto BB66
  }
  BB65 {
    assume { Resolve1.resolve it_129 };
    _35 <- ();
    goto BB66
  }
  BB66 {
    goto BB55
  }
  BB67 {
    assume { Resolve3.resolve items_1 };
    assume { Resolve4.resolve best_value_9 };
    _121 <- ();
    _0 <- result_115;
    result_115 <- any Alloc_Vec_Vec_Type.t_vec (KnapsackFull_Item_Type.t_item name) (Alloc_Alloc_Global_Type.t_global);
    goto BB68
  }
  BB68 {
    goto BB69
  }
  BB69 {
    return _0
  }
  BB74 {
    assume { Resolve3.resolve items_1 };
    assume { Resolve4.resolve best_value_9 };
    goto BB17
  }
  BB75 {
    assume { Resolve3.resolve items_1 };
    assume { Resolve4.resolve best_value_9 };
    assume { Resolve1.resolve it_46 };
    goto BB17
  }
  
end
