module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some('t)
    
  predicate drop_core_option_option (drop_t : 't -> bool) (self : core_option_option 't) = 
    match (self) with
      | Core_Option_Option_None -> true
      | Core_Option_Option_Some(a) -> drop_t a
      end
  type list  = 
    | List_Cons(uint32, list)
    | List_Nil
    
  predicate drop_list (self : list) = 
    match (self) with
      | List_Cons(a, b) -> drop_uint a && drop_fix b
      | List_Nil -> true
      end
end
module Len
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec function impl (l : Type.list) : int = 
    match (l) with
      | Type.List_Cons(_, ls) -> Int32.to_int (1 : int32) + impl ls
      | Type.List_Nil -> Int32.to_int (0 : int32)
      end
end
module Get
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec function impl (l : Type.list) (ix : int) : Type.core_option_option uint32 = 
    match (l) with
      | Type.List_Cons(x, ls) -> match (ix = Int32.to_int (0 : int32)) with
        | True -> Type.Core_Option_Option_Some(x)
        | False -> impl ls (ix - Int32.to_int (1 : int32))
        end
      | Type.List_Nil -> Type.Core_Option_Option_None
      end
end
module AllZero
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  clone Len as Len0
  clone Get as Get1
  let rec cfg impl (o_l_1 : borrowed (Type.list)) : ()
    ensures { Len0.impl ( * o_l_1) = Len0.impl ( ^ o_l_1) }
    ensures { forall i : (int) . Int32.to_int (0 : int32) <= i && i < Len0.impl ( * o_l_1) -> Get1.impl ( ^ o_l_1) i = Type.Core_Option_Option_Some((0 : uint32)) }
    
   = 
  var _0 : ();
  var l_1 : borrowed (Type.list);
  var loop_l_2 : borrowed (Type.list);
  var _5 : ();
  var _6 : isize;
  var value_7 : borrowed uint32;
  var next_8 : borrowed (Type.list);
  var _9 : borrowed (Type.list);
  var _10 : ();
  {
    l_1 <- o_l_1;
    goto BB0
  }
  BB0 {
    assume { drop_mut_ref loop_l_2 };
    loop_l_2 <- l_1;
    goto BB1
  }
  BB1 {
    invariant zeroed { (forall i : (int) . Int32.to_int (0 : int32) <= i && i < Len0.impl ( * loop_l_2) -> Get1.impl ( ^ loop_l_2) i = Type.Core_Option_Option_Some((0 : uint32))) -> (forall i : (int) . Int32.to_int (0 : int32) <= i && i < Len0.impl ( * l_1) -> Get1.impl ( ^ l_1) i = Type.Core_Option_Option_Some((0 : uint32))) };
    invariant in_len { Len0.impl ( ^ loop_l_2) = Len0.impl ( * loop_l_2) -> Len0.impl ( ^ l_1) = Len0.impl ( * l_1) };
    goto BB2
  }
  BB2 {
    switch ( * loop_l_2)
      | Type.List_Cons(_, _) -> goto BB3
      | _ -> goto BB4
      end
  }
  BB3 {
    assume { drop_int _6 };
    goto BB5
  }
  BB4 {
    assume { drop_mut_ref loop_l_2 };
    assume { drop_int _6 };
    _0 <- ();
    return _0
  }
  BB5 {
    value_7 <- borrow_mut (let Type.List_Cons(a, _) =  * loop_l_2 in a);
    loop_l_2 <- { loop_l_2 with current = (let Type.List_Cons(a, b) =  * loop_l_2 in Type.List_Cons( ^ value_7, b)) };
    next_8 <- borrow_mut (let Type.List_Cons(_, a) =  * loop_l_2 in a);
    loop_l_2 <- { loop_l_2 with current = (let Type.List_Cons(a, b) =  * loop_l_2 in Type.List_Cons(a,  ^ next_8)) };
    assume { drop_mut_ref loop_l_2 };
    value_7 <- { value_7 with current = (0 : uint32) };
    assume { drop_mut_ref value_7 };
    _9 <- borrow_mut ( * next_8);
    next_8 <- { next_8 with current = ( ^ _9) };
    assume { drop_mut_ref next_8 };
    assume { drop_mut_ref loop_l_2 };
    loop_l_2 <- _9;
    _5 <- ();
    assume { (fun tup -> let () = tup in true) _5 };
    goto BB1
  }
  
end
module Main
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec cfg impl () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
