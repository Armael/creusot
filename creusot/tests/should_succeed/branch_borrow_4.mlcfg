module Ambient
use Ref 
use mach.int.Int 
use mach.int.Int32
use mach.int.Int64
use mach.int.UInt32
use mach.int.UInt64
use string.Char
use floating_point.Single
use floating_point.Double
(** Generic Type for borrowed values *) 
type borrowed 'a = 
{ current : 'a ; 
final : 'a; (* The "future" value when borrow will end *) 
} 
let function ( *_ ) x = x.current 
let function ( ^_ ) x = x.final 
val borrow_mut (a : 'a) : borrowed 'a 
ensures { *result = a }
type usize = int
type isize = int
  let cfg main () : ()
    =
  var _0 : ();
  var a_1 : int32;
  var b_2 : int32;
  var x_3 : borrowed int32;
  var y_4 : borrowed int32;
  var w_5 : borrowed int32;
  var _6 : ();
  var _7 : bool;
  var _8 : borrowed int32;
  var _9 : borrowed int32;
  var _10 : int32;
  {
    goto BB0;
  }
  BB0 {
    a_1 <- 10;
    b_2 <- 10;
    x_3 <- borrow_mut a_1;
    a_1 <-  ^ x_3;
    y_4 <- borrow_mut b_2;
    b_2 <-  ^ y_4;
    _7 <- true;
    switch (_7)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { ^ y_4 = * y_4 };
    goto BB3
  }
  BB3 {
    x_3 <- { x_3 with current = 5 };
    _8 <- x_3;
    w_5 <- _8;
    _6 <- ();
    goto BB4
  }
  BB4 {
    _10 <-  * w_5;
    assume { ^ w_5 = * w_5 };
    _0 <- ();
    _0
  }
  BB2 {
    assume { ^ x_3 = * x_3 };
    y_4 <- { y_4 with current = 6 };
    _9 <- borrow_mut ( * y_4);
    y_4 <- { y_4 with current = ( ^ _9) };
    assume { ^ y_4 = * y_4 };
    w_5 <- _9;
    _6 <- ();
    goto BB4
  }

end
