module Ambient
  use Ref 
  use mach.int.Int 
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double

  type usize = int
  type isize = int

  (** Generic Type for borrowed values *) 
  type borrowed 'a = 
  { current : 'a ; 
  final : 'a; (* The "future" value when borrow will end *) 
  } 
  let function ( *_ ) x = x.current 
  let function ( ^_ ) x = x.final 
  val borrow_mut (a : 'a) : borrowed 'a 
  ensures { *result = a }

  predicate drop_fix (_ : 'a) = true
  predicate drop_uint (_ : 'a) = true
  predicate drop_int (_ : 'a) = true
  predicate drop_float (_ : 'a) = true
  predicate drop_bool (_ : 'a) = true
  predicate drop_mut_ref (b : borrowed 'a) = ^ b = * b
  predicate drop_ref (_ : 'a) = true

  scope B
    scope C
      type t  =
          | T(A.t)

      predicate drop_t (self : t) =
        let T(a) = self in A.drop_t a
    end
    type o  =
        | O(uint32)

    predicate drop_o (self : o) =
      let O(a) = self in drop_uint a
  end
  scope A
    type t  =
        | T(uint32)

    predicate drop_t (self : t) =
      let T(a) = self in drop_uint a
  end
  type s  =
      | S(A.t)

  predicate drop_s (self : s) =
    let S(a) = self in A.drop_t a
  let cfg main () : ()
    =
  var _0 : ();
  {
    goto BB0
  }
BB0   {
    _0 <- ();
    return _0
  }

end
