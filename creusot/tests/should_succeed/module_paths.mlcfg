module Ambient
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double

  type usize = int
  type isize = int

  type borrowed 'a = { current : 'a ; final : 'a; }
  let function ( *_ ) x = x.current
  let function ( ^_ ) x = x.final
  val borrow_mut (a : 'a) : borrowed 'a
  ensures { *result = a }

  predicate drop_fix (_ : 'a) = true
  predicate drop_uint (_ : 'a) = true
  predicate drop_int (_ : 'a) = true
  predicate drop_float (_ : 'a) = true
  predicate drop_bool (_ : 'a) = true
  predicate drop_mut_ref (b : borrowed 'a) = ^ b = * b
  predicate drop_ref (_ : 'a) = true

  scope Type
  type b_o  =
      | B_o_O(uint32)

  predicate drop_b_o (self : b_o) =
    let B_o_O(a) = self in drop_uint a
  type a_t  =
      | A_t_T(uint32)

  predicate drop_a_t (self : a_t) =
    let A_t_T(a) = self in drop_uint a
  type s  =
      | S_S(a_t)

  predicate drop_s (self : s) =
    let S_S(a) = self in drop_a_t a
  type b_c_t  =
      | B_c_t_T(a_t)

  predicate drop_b_c_t (self : b_c_t) =
    let B_c_t_T(a) = self in drop_a_t a
  end
  let rec cfg main () : ()
    =
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }


end
