<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="4000"/>
<prover id="1" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.11.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC5" version="1.0.2" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="heapsort_generic.mlcfg"/>
<theory name="HeapsortGeneric_HeapFragMax_Impl" proved="true">
 <goal name="heap_frag_max&#39;vc" expl="VC for heap_frag_max" proved="true">
 <proof prover="1"><result status="valid" time="0.05" steps="443"/></proof>
 </goal>
</theory>
<theory name="HeapsortGeneric_SiftDown" proved="true">
 <goal name="sift_down&#39;vc" expl="VC for sift_down" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="sift_down&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="70"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="22"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="30"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="51"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="165"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="365"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="609"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.7" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="50"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.8" expl="division by zero" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="51"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.9" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="138"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.10" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="793"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.11" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="576"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="750"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.13" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="689"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.14" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="288"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="783"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.16" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="396"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.17" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="1326"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="1374"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="1501"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.20" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="1664"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.21" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="1568"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="1914"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.21" steps="39439"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.24" expl="loop invariant preservation" proved="true">
  <transf name="remove" proved="true" arg1="(-),uint64&#39;maxInt,uint64&#39;minInt,max_uint64,length1,radix,min_unsigned,in_bounds1,singleton,cons,snoc,(++),mem,iseq,occ,occ_all,seq_eq_sub,permut_sub,permut_all,id,mAX&#39;,shallow_model5,in_bounds,resolve,index_logic2,heap_frag,Assoc1,CompatOrderMult,Abs_le,Abs_pos,Div_sign_pos,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,numof&#39;def,Numof_bounds,Numof_append,Numof_left_no_add,Numof_left_add,Empty,Full,numof_increasing,numof_strictly_increasing,numof_change_any,numof_change_some,numof_change_equiv,to_int_in_bounds,extensionality,zero_unsigned_is_zero,(==)&#39;spec,create&#39;spec,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,mem_append,mem_tail,occ_cons,occ_snoc,occ_tail,append_num_occ">
   <goal name="sift_down&#39;vc.24.0" expl="loop invariant preservation" proved="true">
   <transf name="remove" proved="true" arg1="zero,one,(&gt;),(&lt;=),(&gt;=),abs,deep_model2,has_value,shallow_model3,parent,index_logic,Unit_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,Div_mod,Div_bound,Mod_bound,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Mod_mult,length_nonnegative,empty&#39;def,permut_refl,permut_sym,permut_trans,permut_exists,permut_all_mem,exchange_permut_all,new&#39;spec,slice&#39;invariant,shallow_model_spec,antisym2_spec,antisym1_spec,trans_spec,refl_spec,cmp_gt_log_spec,cmp_ge_log_spec,cmp_lt_log_spec,Requires2,Requires1,H27,H26,H25,H24,H23,Ensures9,Ensures8,Assert,Ensures7,H22,H19,H18,Ensures6,H17,Assume2,H16,H15,Ensures5,H14,Assume1,H13,H12,H5,H3">
    <goal name="sift_down&#39;vc.24.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="4"><result status="valid" time="0.07" steps="11746"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="sift_down&#39;vc.25" expl="loop invariant preservation" proved="true">
  <transf name="remove" proved="true" arg1="(-),uint64&#39;maxInt,uint64&#39;minInt,max_uint64,length1,radix,min_unsigned,in_bounds1,singleton,cons,snoc,(++),mem,iseq,occ,occ_all,seq_eq_sub,permut_sub,permut_all,id,mAX&#39;,shallow_model5,in_bounds,resolve,index_logic2,heap_frag,Assoc1,CompatOrderMult,Abs_le,Abs_pos,Div_sign_pos,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,numof&#39;def,Numof_bounds,Numof_append,Numof_left_no_add,Numof_left_add,Empty,Full,numof_increasing,numof_strictly_increasing,numof_change_any,numof_change_some,numof_change_equiv,to_int_in_bounds,extensionality,zero_unsigned_is_zero,(==)&#39;spec,create&#39;spec,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,mem_append,mem_tail,occ_cons,occ_snoc,occ_tail,append_num_occ">
   <goal name="sift_down&#39;vc.25.0" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.35" steps="42553"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sift_down&#39;vc.26" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.50" steps="66606"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.27" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.55" steps="75709"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.28" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="sift_down&#39;vc.28.0" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.07" steps="726"/></proof>
   </goal>
   <goal name="sift_down&#39;vc.28.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="1" memlimit="1000"><result status="valid" time="0.57" steps="97466"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sift_down&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="416"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.30" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="479"/></proof>
  </goal>
  <goal name="sift_down&#39;vc.31" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="196461"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="HeapsortGeneric_HeapSort" proved="true">
 <goal name="heap_sort&#39;vc" expl="VC for heap_sort" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="heap_sort&#39;vc.0" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="19"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.1" expl="division by zero" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="21"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="75"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="270"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="512"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="127"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="140"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.7" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="41"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.8" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="166"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="232"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="153"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.11" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="1141"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="155"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.13" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="162"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.14" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="183"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.15" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="196"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.16" expl="assertion" proved="true">
  <proof prover="0" timelimit="10"><result status="valid" time="1.08" steps="311155"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.17" expl="precondition" proved="true">
  <proof prover="0" memlimit="2000"><result status="valid" time="0.15" steps="48069"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.18" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.06" steps="82"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.19" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.09" steps="223"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.16" steps="748"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.21" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.18" steps="1491"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.13" steps="226"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.23" expl="loop invariant preservation" proved="true">
  <transf name="remove" proved="true" arg1="to_int_in_bounds,extensionality,zero_unsigned_is_zero,(==)&#39;spec,create&#39;spec,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,mem_append,mem_tail,occ_cons,occ_snoc,occ_tail,append_num_occ">
   <goal name="heap_sort&#39;vc.23.0" expl="loop invariant preservation" proved="true">
   <transf name="remove" proved="true" arg1="zero,abs,singleton,cons,snoc,(++),mem,iseq,occ,occ_all,seq_eq_sub,permut_sub,permut_all,inner,id,mAX&#39;1,shallow_model5,shallow_model2,resolve1,heap_frag,shallow_model,sorted,mAX&#39;,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Div_bound,Mod_bound,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,numof&#39;def,Numof_bounds,Numof_append,Numof_left_no_add,Numof_left_add,Empty,Full,numof_increasing,numof_strictly_increasing,numof_change_any,numof_change_some,numof_change_equiv,empty&#39;def,exchange_set,exchange_permut_sub,Permut_sub_weakening,permut_refl,permut_sym,permut_trans,permut_exists,permut_all_mem,new&#39;spec,slice&#39;invariant,shallow_model_spec1,eq_cmp_spec,antisym2_spec,antisym1_spec,trans_spec,refl_spec,cmp_gt_log_spec,cmp_ge_log_spec,cmp_lt_log_spec,cmp_le_log_spec,shallow_model_spec,def,heap_frag_max_spec,Requires,H25,Ensures16,H24,H23,Ensures15,Ensures14,Ensures13,Assert1,Ensures12,H22,H20,H19,H21,H18,H17,H16,Ensures11,H13,H15,H12,H14,Assert,Ensures3,Ensures,H2,H1,H">
    <goal name="heap_sort&#39;vc.23.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="4"><result status="valid" time="0.05" steps="9187"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="heap_sort&#39;vc.24" expl="loop invariant preservation" proved="true">
  <transf name="remove" proved="true" arg1="(-),uint64&#39;maxInt,uint64&#39;minInt,max_uint64,length1,radix,min_unsigned,in_bounds1,singleton,cons,snoc,(++),mem,iseq,occ,occ_all,seq_eq_sub,permut_sub,permut_all,id,mAX&#39;,shallow_model5,in_bounds,resolve,index_logic2,heap_frag,Assoc1,CompatOrderMult,Abs_le,Abs_pos,Div_sign_pos,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,numof&#39;def,Numof_bounds,Numof_append,Numof_left_no_add,Numof_left_add,Empty,Full,numof_increasing,numof_strictly_increasing,numof_change_any,numof_change_some,numof_change_equiv,to_int_in_bounds,extensionality,zero_unsigned_is_zero,(==)&#39;spec,create&#39;spec,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,mem_append,mem_tail,occ_cons,occ_snoc,occ_tail,append_num_occ">
   <goal name="heap_sort&#39;vc.24.0" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.10" steps="18140"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="heap_sort&#39;vc.25" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="131"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.26" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="166"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.27" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="198"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.28" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="171"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.29" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.07" steps="1145"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.30" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="607"/></proof>
  </goal>
  <goal name="heap_sort&#39;vc.31" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.05" steps="783"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
