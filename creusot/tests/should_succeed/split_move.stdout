module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type splitmove_myint  = 
    | SplitMove_MyInt(usize)
    
  predicate drop_splitmove_myint (self : splitmove_myint) = 
    let SplitMove_MyInt(a) = self in drop_uint a
end
module SplitMove_Main
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec cfg impl () : () = 
  var _0 : ();
  var a_1 : (Type.splitmove_myint, Type.splitmove_myint);
  var _2 : Type.splitmove_myint;
  var _3 : Type.splitmove_myint;
  var x_4 : borrowed (Type.splitmove_myint, Type.splitmove_myint);
  var z_5 : borrowed (Type.splitmove_myint);
  var _6 : Type.splitmove_myint;
  var _7 : bool;
  var _8 : usize;
  {
    goto BB0
  }
  BB0 {
    _2 <- Type.SplitMove_MyInt((1 : usize));
    _3 <- Type.SplitMove_MyInt((2 : usize));
    a_1 <- (_2, _3);
    x_4 <- borrow_mut a_1;
    a_1 <-  ^ x_4;
    z_5 <- borrow_mut (let (_, a) =  * x_4 in a);
    x_4 <- { x_4 with current = (let (a, b) =  * x_4 in (a,  ^ z_5)) };
    assume { drop_mut_ref z_5 };
    _6 <- Type.SplitMove_MyInt((3 : usize));
    assume { Type.drop_splitmove_myint (let (a, _) =  * x_4 in a) };
    x_4 <- { x_4 with current = (let (a, b) =  * x_4 in (_6, b)) };
    assume { drop_mut_ref x_4 };
    assume { Type.drop_splitmove_myint _6 };
    assume { drop_uint _8 };
    _8 <- (let Type.SplitMove_MyInt(a) = let (a, _) = a_1 in a in a);
    assume { (fun tup -> let (a, b) = tup in Type.drop_splitmove_myint a && Type.drop_splitmove_myint b) a_1 };
    _7 <- _8 = (3 : usize);
    assume { drop_bool _7 };
    _0 <- ();
    return _0
  }
  
end
