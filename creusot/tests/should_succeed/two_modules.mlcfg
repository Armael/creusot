
module TwoModules_Mod1_T_Type
  type twomodules_mod1_t_type  =
    | TwoModules_Mod1_T_A_Type
    | TwoModules_Mod1_T_B_Type
    | TwoModules_Mod1_T_C_Type
    
end
module TwoModules_Mod2_X_Interface
  use TwoModules_Mod1_T_Type
  val x [@cfg:stackify] (_t : TwoModules_Mod1_T_Type.twomodules_mod1_t_type) : bool
end
module TwoModules_Mod2_X
  use TwoModules_Mod1_T_Type
  let rec cfg x [@cfg:stackify] [#"../two_modules.rs" 15 4 15 33] (_t : TwoModules_Mod1_T_Type.twomodules_mod1_t_type) : bool
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var _t_1 : TwoModules_Mod1_T_Type.twomodules_mod1_t_type;
  {
    _t_1 <- _t;
    goto BB0
  }
  BB0 {
    _0 <- true;
    return _0
  }
  
end
module TwoModules_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module TwoModules_F
  use TwoModules_Mod1_T_Type
  clone TwoModules_Mod2_X_Interface as X0
  let rec cfg f [@cfg:stackify] [#"../two_modules.rs" 22 0 22 10] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var _1 : bool;
  var _2 : TwoModules_Mod1_T_Type.twomodules_mod1_t_type;
  {
    goto BB0
  }
  BB0 {
    _2 <- TwoModules_Mod1_T_Type.TwoModules_Mod1_T_B_Type;
    _1 <- ([#"../two_modules.rs" 23 4 23 14] X0.x _2);
    goto BB1
  }
  BB1 {
    _0 <- ();
    return _0
  }
  
end
