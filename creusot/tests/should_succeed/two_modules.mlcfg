module Ambient
  use Ref 
  use mach.int.Int 
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double

  type usize = int
  type isize = int

  (** Generic Type for borrowed values *) 
  type borrowed 'a = 
  { current : 'a ; 
  final : 'a; (* The "future" value when borrow will end *) 
  } 
  let function ( *_ ) x = x.current 
  let function ( ^_ ) x = x.final 
  val borrow_mut (a : 'a) : borrowed 'a 
  ensures { *result = a }

  predicate drop_fix (_ : 'a) = true
  predicate drop_uint (_ : 'a) = true
  predicate drop_int (_ : 'a) = true
  predicate drop_float (_ : 'a) = true
  predicate drop_bool (_ : 'a) = true
  predicate drop_mut_ref (b : borrowed 'a) = ^ b = * b
  predicate drop_ref (_ : 'a) = true

  scope Mod1
    type t  =
        | A
        | B
        | C

    predicate drop_t (self : t) =
      match (self) with
        | A -> True
        | B -> True
        | C -> True
        end

  end
  scope Mod2
    let cfg x (o_t_1 : Mod1.t) : bool
      =
    var _0 : bool;
    var t_1 : Mod1.t;
    {
      t_1 <- o_t_1;
      goto BB0
    }
BB0     {
      _0 <- true;
      assume { Mod1.drop_t t_1 };
      return _0
    }

  end
  let cfg main () : ()
    =
  var _0 : ();
  var _1 : bool;
  var _2 : Mod1.t;
  {
    goto BB0
  }
BB0   {
    _2 <- Mod1.B;
    _1 <- Mod2.x _2;
    goto BB1
  }
BB1   {
    assume { drop_bool _1 };
    _0 <- ();
    return _0
  }

end
