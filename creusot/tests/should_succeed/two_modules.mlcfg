module Ambient
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double

  type usize = int
  type isize = int

  type borrowed 'a = { current : 'a ; final : 'a; }
  let function ( *_ ) x = x.current
  let function ( ^_ ) x = x.final
  val borrow_mut (a : 'a) : borrowed 'a
  ensures { *result = a }

  predicate drop_fix (_ : 'a) = true
  predicate drop_uint (_ : 'a) = true
  predicate drop_int (_ : 'a) = true
  predicate drop_float (_ : 'a) = true
  predicate drop_bool (_ : 'a) = true
  predicate drop_mut_ref (b : borrowed 'a) = ^ b = * b
  predicate drop_ref (_ : 'a) = true

  scope Type
  type mod1_t  =
      | Mod1_t_A
      | Mod1_t_B
      | Mod1_t_C

  predicate drop_mod1_t (self : mod1_t) =
    match (self) with
      | Mod1_t_A -> true
      | Mod1_t_B -> true
      | Mod1_t_C -> true
      end

  end
  scope Mod2
    let rec cfg x (o_t_1 : Type.mod1_t) : bool
      =
    var _0 : bool;
    var t_1 : Type.mod1_t;
    {
      t_1 <- o_t_1;
      goto BB0
    }
    BB0 {
      _0 <- true;
      assume { Type.drop_mod1_t t_1 };
      return _0
    }


  end
  let rec cfg main () : ()
    =
  var _0 : ();
  var _1 : bool;
  var _2 : Type.mod1_t;
  {
    goto BB0
  }
  BB0 {
    _2 <- Type.Mod1_t_B;
    _1 <- Mod2.x _2;
    goto BB1
  }
  BB1 {
    assume { drop_bool _1 };
    _0 <- ();
    return _0
  }


end
