module Ambient
use Ref 
use mach.int.Int 
use mach.int.Int32
use mach.int.Int64
use mach.int.UInt32
use mach.int.UInt64
use string.Char
use floating_point.Single
use floating_point.Double
(** Generic Type for borrowed values *) 
type borrowed 'a = 
{ current : 'a ; 
final : 'a; (* The "future" value when borrow will end *) 
} 
let function ( *_ ) x = x.current 
let function ( ^_ ) x = x.final 
val borrow_mut (a : 'a) : borrowed 'a 
ensures { *result = a }
  scope Mod1
    type t  =
        | A
        | B
        | C

  end
  scope Mod2
    let cfg x (o_t_1 : Mod1.t) : bool
      =
    var _0 : bool;
    var t_1 : Mod1.t;
    {
      t_1 <- o_t_1;
      goto BB0;
    }
    BB0 {
      _0 <- true;
      _0
    }

  end
  let cfg main () : ()
    =
  var _0 : ();
  var _1 : bool;
  var _2 : t;
  {
    goto BB0;
  }
  BB0 {
    _2 <- B;
    _1 <- Mod2.x _2;
    goto BB1
  }
  BB1 {
    _0 <- ();
    _0
  }

end
