module Ambient
use Ref 
use mach.int.Int 
use mach.int.Int32
use mach.int.Int64
use mach.int.UInt32
use mach.int.UInt64
use string.Char
use floating_point.Single
use floating_point.Double
(** Generic Type for borrowed values *) 
type borrowed 'a = 
{ current : 'a ; 
final : 'a; (* The "future" value when borrow will end *) 
} 
let function ( *_ ) x = x.current 
let function ( ^_ ) x = x.final 
val borrow_mut (a : 'a) : borrowed 'a 
ensures { *result = a }
  let cfg multipleScopes () : ()
    =
  var _0 : ();
  var x_1 : int32;
  var y_2 : int32;
  var y_3 : int32;
  var _4 : int32;
  {
    goto BB0;
  }
  BB0 {
    x_1 <- 1;
    y_2 <- 2;
    y_3 <- 3;
    _4 <- y_3;
    x_1 <- _4;
    _0 <- ();
    _0
  }

  let cfg main () : ()
    =
  var _0 : ();
  {
    goto BB0;
  }
  BB0 {
    _0 <- ();
    _0
  }

end
