<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.8.15" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Alt-Ergo" version="2.4.1" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="sparse_array.mlcfg"/>
<theory name="SparseArray_Impl1_Get" proved="true">
 <goal name="get&#39;vc" expl="VC for get" proved="true">
 <proof prover="1"><result status="valid" time="0.14" steps="35208"/></proof>
 </goal>
</theory>
<theory name="SparseArray_Impl1_LemmaPermutation_Impl" proved="true">
 <goal name="lemma_permutation&#39;vc" expl="VC for lemma_permutation" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="lemma_permutation&#39;vc.0" expl="postcondition" proved="true">
  <transf name="use_th" proved="true" arg1="map.MapInjection">
   <goal name="lemma_permutation&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="pose" proved="true" arg1="f" arg2="(fun k -&gt; to_int (get1 (model2 (sparse_back self)) k))
">
    <goal name="lemma_permutation&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(surjective f (sparse_n self))
">
     <goal name="lemma_permutation&#39;vc.0.0.0.0" expl="asserted formula" proved="true">
     <transf name="remove" proved="true" arg1="zero,one,(-),(&gt;),(&lt;=),(&gt;=),abs,get,set,([&lt;-]),surjective,int32&#39;maxInt,int32&#39;minInt,min_int32,max_int32,to_int1,in_bounds1,uint64&#39;maxInt,uint64&#39;minInt,max_uint64,length1,radix,min_unsigned,in_bounds,( *_),(^_),([]&#39;),singleton,cons,snoc,(++),sparse_size,sparse_idx,sparse_n,sparse_back,sparse_values,is_elt,model,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Div_bound,Mod_bound,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,occ_empty,occ_right_no_add,occ_right_add,occ_left_no_add,occ_left_add,occ_bounds,occ_append,occ_neq,occ_exists,occ_pos,occ_eq,occ_exchange,injection_occ,to_int_in_bounds1,extensionality1,to_int_in_bounds,extensionality,zero_unsigned_is_zero,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,model_spec2,model_spec1,model_spec,H2,H1">
      <goal name="lemma_permutation&#39;vc.0.0.0.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.02" steps="39906"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="lemma_permutation&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(exists k. 0 &lt;= k &lt; sparse_n self /\ (f k) = i)
">
      <goal name="lemma_permutation&#39;vc.0.0.0.1.0" expl="asserted formula" proved="true">
      <proof prover="3"><result status="valid" time="0.95" steps="27590"/></proof>
      </goal>
      <goal name="lemma_permutation&#39;vc.0.0.0.1.1" expl="postcondition" proved="true">
      <proof prover="3"><result status="valid" time="0.02" steps="225"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SparseArray_Impl1_Set" proved="true">
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="54"/></proof>
  </goal>
  <goal name="set&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="132"/></proof>
  </goal>
  <goal name="set&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="205"/></proof>
  </goal>
  <goal name="set&#39;vc.3" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.3.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.02" steps="327"/></proof>
   </goal>
   <goal name="set&#39;vc.3.1" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="422"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set&#39;vc.4" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.4.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.02" steps="283"/></proof>
   </goal>
   <goal name="set&#39;vc.4.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.02" steps="355"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set&#39;vc.5" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.5.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="374"/></proof>
   </goal>
   <goal name="set&#39;vc.5.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="452"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="set&#39;vc.6" expl="integer overflow" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="359"/></proof>
  </goal>
  <goal name="set&#39;vc.7" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.7.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set&#39;vc.7.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.01" steps="15097"/></proof>
    </goal>
    <goal name="set&#39;vc.7.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.30" steps="629590"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set&#39;vc.7.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set&#39;vc.7.1.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.58" steps="77944"/></proof>
    </goal>
    <goal name="set&#39;vc.7.1.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.57" steps="61072"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set&#39;vc.8" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.8.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set&#39;vc.8.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.13" steps="61"/></proof>
    </goal>
    <goal name="set&#39;vc.8.0.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.02" steps="274"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set&#39;vc.8.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set&#39;vc.8.1.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.04" steps="548"/></proof>
    </goal>
    <goal name="set&#39;vc.8.1.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.05" steps="642"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set&#39;vc.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.9.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set&#39;vc.9.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.02" steps="15364"/></proof>
    </goal>
    <goal name="set&#39;vc.9.0.1" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.24" steps="675809"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set&#39;vc.9.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set&#39;vc.9.1.0" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.58" steps="80975"/></proof>
    </goal>
    <goal name="set&#39;vc.9.1.1" expl="postcondition" proved="true">
    <proof prover="1"><result status="valid" time="0.76" steps="91730"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="set&#39;vc.10" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="set&#39;vc.10.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set&#39;vc.10.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.01" steps="61"/></proof>
    </goal>
    <goal name="set&#39;vc.10.0.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.20" steps="1404"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="set&#39;vc.10.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="set&#39;vc.10.1.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.19" steps="975"/></proof>
    </goal>
    <goal name="set&#39;vc.10.1.1" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.31" steps="2642"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SparseArray_Create" proved="true">
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="1"><result status="valid" time="0.15" steps="34909"/></proof>
 </goal>
</theory>
<theory name="SparseArray_F" proved="true">
 <goal name="f&#39;vc" expl="VC for f" proved="true">
 <proof prover="3"><result status="valid" time="0.31" steps="3283"/></proof>
 </goal>
</theory>
</file>
</why3session>
