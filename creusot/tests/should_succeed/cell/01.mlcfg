
module C01_Inv_Inv_Interface
  type self
  type t
  predicate inv (x : t)
end
module C01_Inv_Inv
  type self
  type t
  predicate inv [#"../01.rs" 8 4 8 25] (x : t)
  val inv (x : t) : bool
    ensures { result = inv x }
    
end
module Core_Cell_UnsafeCell_Type
  type core_cell_unsafecell_type 't =
    | Core_Cell_UnsafeCell_Type 't
    
end
module Core_Cell_Cell_Type
  use Core_Cell_UnsafeCell_Type
  type core_cell_cell_type 't =
    | Core_Cell_Cell_Type (Core_Cell_UnsafeCell_Type.core_cell_unsafecell_type 't)
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module C01_Cell_Type
  use Core_Marker_PhantomData_Type
  use Core_Cell_Cell_Type
  type c01_cell_type 't 'i =
    | C01_Cell_Type (Core_Cell_Cell_Type.core_cell_cell_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 'i)
    
end
module C01_Impl0_Get_Interface
  type t
  type i
  use prelude.Borrow
  use C01_Cell_Type
  clone C01_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  val get [@cfg:stackify] (self : C01_Cell_Type.c01_cell_type t i) : t
    ensures { [#"../01.rs" 18 14 18 28] Inv0.inv result }
    
end
module C01_Impl0_Get
  type t
  type i
  use prelude.Borrow
  use C01_Cell_Type
  clone C01_Inv_Inv as Inv0 with type self = i, type t = t
  val get [@cfg:stackify] (self : C01_Cell_Type.c01_cell_type t i) : t
    ensures { [#"../01.rs" 18 14 18 28] Inv0.inv result }
    
end
module C01_Impl0_Set_Interface
  type t
  type i
  use prelude.Borrow
  use C01_Cell_Type
  clone C01_Inv_Inv_Interface as Inv0 with type self = i, type t = t
  val set [@cfg:stackify] (self : C01_Cell_Type.c01_cell_type t i) (v : t) : ()
    requires {[#"../01.rs" 24 15 24 24] Inv0.inv v}
    
end
module C01_Impl0_Set
  type t
  type i
  use prelude.Borrow
  use C01_Cell_Type
  clone C01_Inv_Inv as Inv0 with type self = i, type t = t
  val set [@cfg:stackify] (self : C01_Cell_Type.c01_cell_type t i) (v : t) : ()
    requires {[#"../01.rs" 24 15 24 24] Inv0.inv v}
    
end
module C01_Impl1_Inv_Interface
  use mach.int.Int
  use mach.int.UInt32
  predicate inv (x : uint32)
end
module C01_Impl1_Inv
  use mach.int.Int
  use mach.int.UInt32
  predicate inv [#"../01.rs" 34 4 34 26] (x : uint32) =
    [#"../01.rs" 35 8 35 24] mod x (2 : uint32) = (0 : uint32)
  val inv (x : uint32) : bool
    ensures { result = inv x }
    
end
module C01_Even_Type
  type c01_even_type  =
    | C01_Even_Type
    
end
module C01_Impl1
  use C01_Even_Type
  use mach.int.Int
  use mach.int.UInt32
  clone C01_Impl1_Inv as Inv0
  clone C01_Inv_Inv_Interface as Inv1 with type self = C01_Even_Type.c01_even_type, type t = uint32,
  predicate inv = Inv0.inv
end
module C01_AddsTwo_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use C01_Even_Type
  use C01_Cell_Type
  val adds_two [@cfg:stackify] (c : C01_Cell_Type.c01_cell_type uint32 (C01_Even_Type.c01_even_type)) : ()
end
module C01_AddsTwo
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  use C01_Even_Type
  use C01_Cell_Type
  clone C01_Impl1_Inv as Inv0
  clone C01_Impl0_Set_Interface as Set0 with type t = uint32, type i = C01_Even_Type.c01_even_type,
  predicate Inv0.inv = Inv0.inv
  clone C01_Impl0_Get_Interface as Get0 with type t = uint32, type i = C01_Even_Type.c01_even_type,
  predicate Inv0.inv = Inv0.inv
  let rec cfg adds_two [@cfg:stackify] [#"../01.rs" 39 0 39 36] (c : C01_Cell_Type.c01_cell_type uint32 (C01_Even_Type.c01_even_type)) : ()
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var c_1 : C01_Cell_Type.c01_cell_type uint32 (C01_Even_Type.c01_even_type);
  var v_2 : uint32;
  var _3 : C01_Cell_Type.c01_cell_type uint32 (C01_Even_Type.c01_even_type);
  var _4 : bool;
  var _5 : uint32;
  var _6 : ();
  var _7 : C01_Cell_Type.c01_cell_type uint32 (C01_Even_Type.c01_even_type);
  var _8 : uint32;
  var _9 : uint32;
  var _10 : ();
  var _11 : C01_Cell_Type.c01_cell_type uint32 (C01_Even_Type.c01_even_type);
  {
    c_1 <- c;
    goto BB0
  }
  BB0 {
    _3 <- c_1;
    v_2 <- ([#"../01.rs" 40 12 40 19] Get0.get _3);
    goto BB1
  }
  BB1 {
    _5 <- v_2;
    _4 <- ([#"../01.rs" 42 7 42 17] _5 < (100000 : uint32));
    switch (_4)
      | False -> goto BB4
      | True -> goto BB2
      end
  }
  BB2 {
    _7 <- c_1;
    _9 <- v_2;
    _8 <- ([#"../01.rs" 43 14 43 19] _9 + (2 : uint32));
    _6 <- ([#"../01.rs" 43 8 43 20] Set0.set _7 _8);
    goto BB3
  }
  BB3 {
    _0 <- ();
    goto BB6
  }
  BB4 {
    _11 <- c_1;
    _10 <- ([#"../01.rs" 45 8 45 16] Set0.set _11 (0 : uint32));
    goto BB5
  }
  BB5 {
    _0 <- ();
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
