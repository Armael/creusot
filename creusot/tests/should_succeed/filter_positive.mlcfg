
module FilterPositive_NumOfPos_Interface
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  function num_of_pos (i : int) (j : int) (t : Seq.seq int32) : int
end
module FilterPositive_NumOfPos
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  function num_of_pos [#"../filter_positive.rs" 34 0 34 49] (i : int) (j : int) (t : Seq.seq int32) : int
  axiom def : forall i : int, j : int, t : Seq.seq int32 . num_of_pos i j t = ([#"../filter_positive.rs" 35 4 43 5] if i >= j then
    0
  else
    if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos i (j - 1) t + 1 else num_of_pos i (j - 1) t
  )
  axiom num_of_pos_spec : forall i : int, j : int, t : Seq.seq int32 . true
end
module FilterPositive_NumOfPos_Impl
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  let rec ghost function num_of_pos (i : int) (j : int) (t : Seq.seq int32) : int
    variant {[#"../filter_positive.rs" 33 10 33 13] j - i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../filter_positive.rs" 35 4 43 5] if i >= j then
      0
    else
      if Int32.to_int (Seq.get t (j - 1)) > 0 then num_of_pos i (j - 1) t + 1 else num_of_pos i (j - 1) t
    
end
module FilterPositive_LemmaNumOfPosIncreasing_Interface
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  clone FilterPositive_NumOfPos_Interface as NumOfPos0 with axiom .
  function lemma_num_of_pos_increasing (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
end
module FilterPositive_LemmaNumOfPosIncreasing
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  clone FilterPositive_NumOfPos_Interface as NumOfPos0 with axiom .
  function lemma_num_of_pos_increasing [#"../filter_positive.rs" 62 0 62 67] (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
    
  axiom def : forall i : int, j : int, k : int, t : Seq.seq int32 . lemma_num_of_pos_increasing i j k t = ([#"../filter_positive.rs" 64 8 66 9] if j < k then
    lemma_num_of_pos_increasing i (j + 1) k t
  else
    ()
  )
  axiom lemma_num_of_pos_increasing_spec : forall i : int, j : int, k : int, t : Seq.seq int32 . ([#"../filter_positive.rs" 59 11 59 17] j <= k) -> ([#"../filter_positive.rs" 60 10 60 48] NumOfPos0.num_of_pos i j t <= NumOfPos0.num_of_pos i k t)
end
module FilterPositive_LemmaNumOfPosIncreasing_Impl
  use mach.int.Int
  use seq.Seq
  use mach.int.Int32
  clone FilterPositive_NumOfPos as NumOfPos0 with axiom .
  let rec ghost function lemma_num_of_pos_increasing (i : int) (j : int) (k : int) (t : Seq.seq int32) : ()
    requires {[#"../filter_positive.rs" 59 11 59 17] j <= k}
    ensures { [#"../filter_positive.rs" 60 10 60 48] NumOfPos0.num_of_pos i j t <= NumOfPos0.num_of_pos i k t }
    variant {[#"../filter_positive.rs" 61 10 61 13] k - j}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../filter_positive.rs" 64 8 66 9] if j < k then lemma_num_of_pos_increasing i (j + 1) k t else ()
end
module FilterPositive_LemmaNumOfPosStrictlyIncreasing_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone FilterPositive_NumOfPos_Interface as NumOfPos0 with axiom .
  function lemma_num_of_pos_strictly_increasing (i : int) (t : Seq.seq int32) : ()
end
module FilterPositive_LemmaNumOfPosStrictlyIncreasing
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone FilterPositive_NumOfPos_Interface as NumOfPos0 with axiom .
  function lemma_num_of_pos_strictly_increasing [#"../filter_positive.rs" 76 0 76 60] (i : int) (t : Seq.seq int32) : ()
   =
    [#"../filter_positive.rs" 72 0 72 8] ()
  axiom lemma_num_of_pos_strictly_increasing_spec : forall i : int, t : Seq.seq int32 . ([#"../filter_positive.rs" 73 11 73 32] 0 <= i /\ i < Seq.length t) -> ([#"../filter_positive.rs" 74 11 74 20] Int32.to_int (Seq.get t i) > 0) -> ([#"../filter_positive.rs" 75 10 75 49] NumOfPos0.num_of_pos 0 i t < NumOfPos0.num_of_pos 0 (i + 1) t)
end
module FilterPositive_LemmaNumOfPosStrictlyIncreasing_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone FilterPositive_NumOfPos as NumOfPos0 with axiom .
  let rec ghost function lemma_num_of_pos_strictly_increasing (i : int) (t : Seq.seq int32) : ()
    requires {[#"../filter_positive.rs" 73 11 73 32] 0 <= i /\ i < Seq.length t}
    requires {[#"../filter_positive.rs" 74 11 74 20] Int32.to_int (Seq.get t i) > 0}
    ensures { [#"../filter_positive.rs" 75 10 75 49] NumOfPos0.num_of_pos 0 i t < NumOfPos0.num_of_pos 0 (i + 1) t }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../filter_positive.rs" 72 0 72 8] ()
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type core_ptr_nonnull_nonnull_type 't =
    | Core_Ptr_NonNull_NonNull_Type opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_ptr_unique_unique_type 't =
    | Core_Ptr_Unique_Unique_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type
  type alloc_rawvec_rawvec_type 't 'a =
    | Alloc_RawVec_RawVec_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type
  type alloc_vec_vec_type 't 'a =
    | Alloc_Vec_Vec_Type (Alloc_RawVec_RawVec_Type.alloc_rawvec_rawvec_type 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type alloc_alloc_global_type  =
    | Alloc_Alloc_Global_Type
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a . Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : (int) . 0 <= i /\ i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module Alloc_Vec_FromElem
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : (int) . 0 <= i /\ i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) =
    forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Std1_Vec_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.Int32
  use mach.int.UInt64
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : (int) . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module FilterPositive_M_Interface
  use mach.int.Int
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  val m [@cfg:stackify] (t : Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
end
module FilterPositive_M
  use mach.int.Int
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = int32
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = int32
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = int32
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = int32
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = int32
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = int32
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = int32,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve1 with type t = int32, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = int32
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = int32, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere, type Output0.output = Output0.output
  clone FilterPositive_NumOfPos as NumOfPos0 with axiom .
  clone FilterPositive_LemmaNumOfPosIncreasing as LemmaNumOfPosIncreasing0 with function NumOfPos0.num_of_pos = NumOfPos0.num_of_pos,
  axiom .
  clone FilterPositive_LemmaNumOfPosStrictlyIncreasing as LemmaNumOfPosStrictlyIncreasing0 with function NumOfPos0.num_of_pos = NumOfPos0.num_of_pos,
  axiom .
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = int32, function Model0.model = Model0.model
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = int32, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = int32,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model
  let rec cfg m [@cfg:stackify] [#"../filter_positive.rs" 79 0 79 33] (t : Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var t_1 : Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _2 : ();
  var count_3 : usize;
  var i_4 : usize;
  var _5 : ();
  var _9 : ();
  var _10 : bool;
  var _11 : usize;
  var _12 : usize;
  var _13 : Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _14 : ();
  var _15 : bool;
  var _16 : int32;
  var _17 : int32;
  var _18 : Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _19 : usize;
  var _20 : ();
  var _21 : ();
  var _22 : ();
  var u_23 : Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _24 : usize;
  var _25 : ();
  var _28 : bool;
  var _29 : usize;
  var _30 : usize;
  var _31 : Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _32 : ();
  var _33 : bool;
  var _34 : int32;
  var _35 : int32;
  var _36 : Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _37 : usize;
  var _38 : ();
  var _40 : ();
  var _42 : int32;
  var _43 : int32;
  var _44 : Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _45 : usize;
  var _46 : borrowed int32;
  var _47 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _48 : usize;
  var _49 : ();
  var _50 : ();
  var _51 : ();
  {
    t_1 <- t;
    goto BB0
  }
  BB0 {
    count_3 <- (0 : usize);
    i_4 <- (0 : usize);
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant loop_bound { [#"../filter_positive.rs" 82 28 82 44] UInt64.to_int i_4 <= Seq.length (Model0.model t_1) };
    invariant count_bound { [#"../filter_positive.rs" 83 29 83 41] UInt64.to_int count_3 <= UInt64.to_int i_4 };
    invariant num { [#"../filter_positive.rs" 84 21 84 50] UInt64.to_int count_3 = NumOfPos0.num_of_pos 0 (UInt64.to_int i_4) (Model0.model t_1) };
    _11 <- i_4;
    _13 <- t_1;
    _12 <- ([#"../filter_positive.rs" 86 14 86 21] Len0.len _13);
    goto BB4
  }
  BB4 {
    _10 <- ([#"../filter_positive.rs" 86 10 86 21] _11 < _12);
    switch (_10)
      | False -> goto BB10
      | True -> goto BB5
      end
  }
  BB5 {
    _18 <- t_1;
    _19 <- i_4;
    _17 <- ([#"../filter_positive.rs" 87 11 87 15] Index0.index _18 _19);
    goto BB6
  }
  BB6 {
    _16 <- _17;
    _15 <- ([#"../filter_positive.rs" 87 11 87 19] _16 > (0 : int32));
    switch (_15)
      | False -> goto BB8
      | True -> goto BB7
      end
  }
  BB7 {
    count_3 <- ([#"../filter_positive.rs" 88 12 88 22] count_3 + (1 : usize));
    _14 <- ();
    goto BB9
  }
  BB8 {
    _14 <- ();
    goto BB9
  }
  BB9 {
    i_4 <- ([#"../filter_positive.rs" 90 8 90 14] i_4 + (1 : usize));
    _9 <- ();
    goto BB3
  }
  BB10 {
    _5 <- ();
    _24 <- count_3;
    u_23 <- ([#"../filter_positive.rs" 92 26 92 50] FromElem0.from_elem (0 : int32) _24);
    goto BB11
  }
  BB11 {
    count_3 <- (0 : usize);
    i_4 <- (0 : usize);
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    invariant num { [#"../filter_positive.rs" 97 21 97 50] UInt64.to_int count_3 = NumOfPos0.num_of_pos 0 (UInt64.to_int i_4) (Model0.model t_1) };
    invariant ulength { [#"../filter_positive.rs" 98 25 98 66] Seq.length (Model0.model u_23) = NumOfPos0.num_of_pos 0 (Seq.length (Model0.model t_1)) (Model0.model t_1) };
    _29 <- i_4;
    _31 <- t_1;
    _30 <- ([#"../filter_positive.rs" 100 14 100 21] Len0.len _31);
    goto BB15
  }
  BB15 {
    _28 <- ([#"../filter_positive.rs" 100 10 100 21] _29 < _30);
    switch (_28)
      | False -> goto BB25
      | True -> goto BB16
      end
  }
  BB16 {
    _36 <- t_1;
    _37 <- i_4;
    _35 <- ([#"../filter_positive.rs" 101 11 101 15] Index0.index _36 _37);
    goto BB17
  }
  BB17 {
    _34 <- _35;
    _33 <- ([#"../filter_positive.rs" 101 11 101 19] _34 > (0 : int32));
    switch (_33)
      | False -> goto BB23
      | True -> goto BB18
      end
  }
  BB18 {
    assert { [#"../filter_positive.rs" 104 16 104 59] let _ = LemmaNumOfPosStrictlyIncreasing0.lemma_num_of_pos_strictly_increasing (UInt64.to_int i_4) (Model0.model u_23) in NumOfPos0.num_of_pos 0 (UInt64.to_int i_4) (Model0.model t_1) < NumOfPos0.num_of_pos 0 (UInt64.to_int i_4 + 1) (Model0.model t_1) };
    goto BB19
  }
  BB19 {
    _38 <- ();
    assert { [#"../filter_positive.rs" 108 16 108 65] let _ = LemmaNumOfPosIncreasing0.lemma_num_of_pos_increasing 0 (UInt64.to_int i_4 + 1) (Seq.length (Model0.model t_1)) (Model0.model t_1) in UInt64.to_int count_3 < Seq.length (Model0.model u_23) };
    goto BB20
  }
  BB20 {
    _40 <- ();
    _44 <- t_1;
    _45 <- i_4;
    _43 <- ([#"../filter_positive.rs" 111 23 111 27] Index0.index _44 _45);
    goto BB21
  }
  BB21 {
    _42 <- _43;
    _47 <- borrow_mut u_23;
    u_23 <-  ^ _47;
    _48 <- count_3;
    _46 <- ([#"../filter_positive.rs" 111 12 111 20] IndexMut0.index_mut _47 _48);
    goto BB22
  }
  BB22 {
    _46 <- { _46 with current = _42 };
    _42 <- any int32;
    assume { Resolve0.resolve _46 };
    count_3 <- ([#"../filter_positive.rs" 112 12 112 22] count_3 + (1 : usize));
    _32 <- ();
    goto BB24
  }
  BB23 {
    _32 <- ();
    goto BB24
  }
  BB24 {
    i_4 <- ([#"../filter_positive.rs" 114 8 114 14] i_4 + (1 : usize));
    _9 <- ();
    goto BB14
  }
  BB25 {
    _25 <- ();
    assume { Resolve1.resolve _0 };
    _0 <- u_23;
    u_23 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type int32 (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    goto BB26
  }
  BB26 {
    goto BB27
  }
  BB27 {
    assume { Resolve1.resolve t_1 };
    return _0
  }
  
end
module FilterPositive_Main_Interface
  val main [@cfg:stackify] (_ : ()) : ()
    requires {[#"../filter_positive.rs" 120 11 120 16] false}
    
end
module FilterPositive_Main
  val main [@cfg:stackify] (_ : ()) : ()
    requires {[#"../filter_positive.rs" 120 11 120 16] false}
    
end
