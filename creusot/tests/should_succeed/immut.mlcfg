
module Immut_F
  use prelude.Borrow
  use prelude.UInt32
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  let rec cfg f [#"../immut.rs" 3 0 3 10] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : ()) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : uint32;
  var b : borrowed uint32;
  var _c : uint32;
  {
    goto BB0
  }
  BB0 {
    a <- ([#"../immut.rs" 4 16 4 18] [#"../immut.rs" 4 16 4 18] (10 : uint32));
    b <- Borrow.borrow_mut a;
    a <-  ^ b;
    _c <- ([#"../immut.rs" 6 19 6 20]  * b);
    _0 <- ([#"../immut.rs" 3 11 7 1] ());
    assume { resolve0 b };
    return _0
  }
  
end
