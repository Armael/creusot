module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use prelude.Prelude
  type redblacktree_color  =
    | RedBlackTree_Color_Red
    | RedBlackTree_Color_Black
    
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type redblacktree_node 'k 'v =
    | RedBlackTree_Node (redblacktree_tree 'k 'v) (redblacktree_color) 'k 'v (redblacktree_tree 'k 'v)
    with redblacktree_tree 'k 'v =
    | RedBlackTree_Tree (core_option_option (redblacktree_node 'k 'v))
    
  let function redblacktree_node_Node_left (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node a _ _ _ _ -> a
      end
  let function redblacktree_node_Node_key (self : redblacktree_node 'k 'v) : 'k = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node _ _ a _ _ -> a
      end
  let function redblacktree_node_Node_right (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node _ _ _ _ a -> a
      end
  let function redblacktree_node_Node_val (self : redblacktree_node 'k 'v) : 'v = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node _ _ _ a _ -> a
      end
  let function redblacktree_node_Node_color (self : redblacktree_node 'k 'v) : redblacktree_color
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node _ a _ _ _ -> a
      end
  let function redblacktree_tree_Tree_node (self : redblacktree_tree 'k 'v) : core_option_option (redblacktree_node 'k 'v)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Tree a -> a
      end
  type core_cmp_ordering  =
    | Core_Cmp_Ordering_Less
    | Core_Cmp_Ordering_Equal
    | Core_Cmp_Ordering_Greater
    
  type redblacktree_cpl  =
    | RedBlackTree_Cpl (redblacktree_color)
    
  let function redblacktree_cpl_CPL_0 (self : redblacktree_cpl) : redblacktree_color = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Cpl a -> a
      end
  type redblacktree_cpn 'l 'r =
    | RedBlackTree_Cpn (redblacktree_color) 'l 'r
    
  let function redblacktree_cpn_CPN_0 (self : redblacktree_cpn 'l 'r) : redblacktree_color
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Cpn a _ _ -> a
      end
  let function redblacktree_cpn_CPN_1 (self : redblacktree_cpn 'l 'r) : 'l = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Cpn _ a _ -> a
      end
  let function redblacktree_cpn_CPN_2 (self : redblacktree_cpn 'l 'r) : 'r = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Cpn _ _ a -> a
      end
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
end
module RedBlackTree_Impl17_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color
    ensures { [#"../red_black_tree.rs" 7 9 7 14] result = self }
    
end
module RedBlackTree_Impl17_Clone
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  let rec cfg clone' [@cfg:stackify] [#"../red_black_tree.rs" 7 9 7 14] (self : Type.redblacktree_color) : Type.redblacktree_color
    ensures { [#"../red_black_tree.rs" 7 9 7 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.redblacktree_color;
  var self_1 : Type.redblacktree_color;
  var _2 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Type.RedBlackTree_Color_Red -> goto BB3
      | Type.RedBlackTree_Color_Black -> goto BB1
      end
  }
  BB1 {
    _0 <- Type.RedBlackTree_Color_Black;
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- Type.RedBlackTree_Color_Red;
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module RedBlackTree_Impl0_HasMapping_Interface
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  predicate has_mapping (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v)
end
module RedBlackTree_Impl0_HasMapping
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate has_mapping [#"../red_black_tree.rs" 30 4 30 53] (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v)
    
   =
    [#"../red_black_tree.rs" 32 12 36 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> false
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> has_mapping left k v \/ has_mapping right k v \/ k = Model0.model key /\ v = val'
      end
end
module RedBlackTree_Impl0_SameMappings_Interface
  type k
  type v
  use Type
  predicate same_mappings (self : Type.redblacktree_tree k v) (o : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl0_SameMappings
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate same_mappings [#"../red_black_tree.rs" 41 4 41 43] (self : Type.redblacktree_tree k v) (o : Type.redblacktree_tree k v)
    
   =
    [#"../red_black_tree.rs" 42 8 44 9] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping self k v = HasMapping0.has_mapping o k v
end
module RedBlackTree_Impl0_ModelAcc_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
end
module RedBlackTree_Impl0_ModelAcc
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc [#"../red_black_tree.rs" 48 4 48 82] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 50 12 57 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> accu
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let accu1 = model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in model_acc right accu2
      end
end
module RedBlackTree_Impl0_ModelAccHasMapping_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_has_mapping (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl0_ModelAccHasMapping
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_has_mapping [#"../red_black_tree.rs" 64 4 64 81] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 66 12 74 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in model_acc_has_mapping right accu2 k
      end
  axiom model_acc_has_mapping_spec : forall self : Type.redblacktree_tree k v, accu : Map.map ModelTy0.modelTy (Type.core_option_option v), k : ModelTy0.modelTy . [#"../red_black_tree.rs" 62 4 63 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k \/ (exists v : (v) . Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v /\ HasMapping0.has_mapping self k v)
end
module RedBlackTree_Impl0_ModelAccHasMapping_Impl
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  let rec ghost function model_acc_has_mapping (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    ensures { [#"../red_black_tree.rs" 62 4 63 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k \/ (exists v : (v) . Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v /\ HasMapping0.has_mapping self k v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 66 12 74 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model0.model key in Map.set accu1 b' (Type.Core_Option_Option_Some val') in model_acc_has_mapping right accu2 k
      end
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Less
end
module RedBlackTree_Impl4_BstInvariantHere_Interface
  type k
  type v
  use Type
  predicate bst_invariant_here (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl4_BstInvariantHere
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate bst_invariant_here [#"../red_black_tree.rs" 174 4 174 39] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 176 12 177 88] (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_left self) k v -> LtLog0.lt_log k (Model0.model (Type.redblacktree_node_Node_key self))) /\ (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_right self) k v -> LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key self)) k)
end
module RedBlackTree_Impl5_BstInvariant_Interface
  type k
  type v
  use Type
  predicate bst_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl5_BstInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl4_BstInvariantHere_Interface as BstInvariantHere0 with type k = k, type v = v
  predicate bst_invariant [#"../red_black_tree.rs" 194 4 194 34] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 196 12 202 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> true
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left _ _ _ right = node in BstInvariantHere0.bst_invariant_here node /\ bst_invariant left /\ bst_invariant right
      end
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Type.Core_Cmp_Ordering_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Type.core_cmp_ordering . CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (x = y) = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Equal)
end
module RedBlackTree_Impl0_HasMappingModelAcc_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl0_HasMappingModelAcc
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl0_ModelAccHasMapping_Interface as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function has_mapping_model_acc [#"../red_black_tree.rs" 81 4 83 29] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 86 12 95 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
  axiom has_mapping_model_acc_spec : forall self : Type.redblacktree_tree k v, accu : Map.map ModelTy0.modelTy (Type.core_option_option v), k : ModelTy0.modelTy . ([#"../red_black_tree.rs" 79 15 79 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 80 4 80 94] forall v : (v) . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v)
end
module RedBlackTree_Impl0_HasMappingModelAcc_Impl
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  let rec ghost function has_mapping_model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    requires {[#"../red_black_tree.rs" 79 15 79 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 80 4 80 94] forall v : (v) . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 86 12 95 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model0.model key in Map.set accu1 b' (Type.Core_Option_Option_Some val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
end
module RedBlackTree_Impl3_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.redblacktree_tree k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl3_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  use map.Const
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../red_black_tree.rs" 162 4 162 35] (self : Type.redblacktree_tree k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 163 20 163 54] ModelAcc0.model_acc self (Const.const (Type.Core_Option_Option_None))
end
module RedBlackTree_Impl3_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl3
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl3_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.redblacktree_tree k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.redblacktree_tree k v,
  type modelTy = ModelTy0.modelTy
end
module RedBlackTree_Impl0_HasMappingModel_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_model (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) : ()
end
module RedBlackTree_Impl0_HasMappingModel
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  use map.Const
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMappingModelAcc_Interface as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone RedBlackTree_Impl0_ModelAccHasMapping_Interface as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_model [#"../red_black_tree.rs" 102 4 104 29] (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 107 12 107 61] let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Type.Core_Option_Option_None)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Type.Core_Option_Option_None)) k
  axiom has_mapping_model_spec : forall self : Type.redblacktree_tree k v, k : ModelTy0.modelTy . ([#"../red_black_tree.rs" 100 15 100 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 101 4 101 82] forall v : (v) . HasMapping0.has_mapping self k v = (Map.get (Model0.model self) k = Type.Core_Option_Option_Some v))
end
module RedBlackTree_Impl0_HasMappingModel_Impl
  type k
  type v
  use map.Map
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  let rec ghost function has_mapping_model (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) : ()
    requires {[#"../red_black_tree.rs" 100 15 100 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 101 4 101 82] forall v : (v) . HasMapping0.has_mapping self k v = (Map.get (Model0.model self) k = Type.Core_Option_Option_Some v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 107 12 107 61] let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Type.Core_Option_Option_None)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Type.Core_Option_Option_None)) k
end
module RedBlackTree_Impl0_HasMappingInj_Interface
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_inj (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
end
module RedBlackTree_Impl0_HasMappingInj
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  use map.Map
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMappingModel_Interface as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_inj [#"../red_black_tree.rs" 117 4 119 29] (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
    
   =
    [#"../red_black_tree.rs" 122 12 122 37] let _ = HasMappingModel0.has_mapping_model self k in match (Map.get (Model0.model self) k) with
      | Type.Core_Option_Option_None -> ()
      | Type.Core_Option_Option_Some _v -> ()
      end
  axiom has_mapping_inj_spec : forall self : Type.redblacktree_tree k v, k : ModelTy0.modelTy, v1 : v, v2 : v . ([#"../red_black_tree.rs" 113 15 113 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 114 15 114 38] HasMapping0.has_mapping self k v1) -> ([#"../red_black_tree.rs" 115 15 115 38] HasMapping0.has_mapping self k v2) -> ([#"../red_black_tree.rs" 116 14 116 22] v1 = v2)
end
module RedBlackTree_Impl0_HasMappingInj_Impl
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  let rec ghost function has_mapping_inj (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
    requires {[#"../red_black_tree.rs" 113 15 113 35] BstInvariant0.bst_invariant self}
    requires {[#"../red_black_tree.rs" 114 15 114 38] HasMapping0.has_mapping self k v1}
    requires {[#"../red_black_tree.rs" 115 15 115 38] HasMapping0.has_mapping self k v2}
    ensures { [#"../red_black_tree.rs" 116 14 116 22] v1 = v2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 122 12 122 37] let _ = HasMappingModel0.has_mapping_model self k in match (let a' = Model0.model self in Map.get a' k) with
      | Type.Core_Option_Option_None -> ()
      | Type.Core_Option_Option_Some _v -> ()
      end
end
module RedBlackTree_Impl1_HasMapping_Interface
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate has_mapping (self : Type.redblacktree_node k v) (k : ModelTy0.modelTy) (v : v)
end
module RedBlackTree_Impl1_HasMapping
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate has_mapping [#"../red_black_tree.rs" 132 4 132 53] (self : Type.redblacktree_node k v) (k : ModelTy0.modelTy) (v : v)
    
   =
    [#"../red_black_tree.rs" 133 8 136 9] HasMapping0.has_mapping (Type.redblacktree_node_Node_left self) k v \/ HasMapping0.has_mapping (Type.redblacktree_node_Node_right self) k v \/ k = Model0.model (Type.redblacktree_node_Node_key self) /\ v = Type.redblacktree_node_Node_val self
  axiom has_mapping_spec : forall self : Type.redblacktree_node k v, k : ModelTy0.modelTy, v : v . [#"../red_black_tree.rs" 130 4 131 86] forall node : (Type.redblacktree_node k v) . self = node -> has_mapping self k v = HasMapping0.has_mapping (Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node)) k v
end
module RedBlackTree_Impl1_HasMapping_Impl
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  let rec ghost function has_mapping (self : Type.redblacktree_node k v) (k : ModelTy0.modelTy) (v : v) : bool
    ensures { [#"../red_black_tree.rs" 130 4 131 86] forall node : (Type.redblacktree_node k v) . self = node -> result = HasMapping0.has_mapping (Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node)) k v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 133 8 136 9] (let a' = Type.redblacktree_node_Node_left self in HasMapping0.has_mapping a' k v) || (let a' = Type.redblacktree_node_Node_right self in HasMapping0.has_mapping a' k v) || (let b = let a' = Type.redblacktree_node_Node_key self in Model0.model a' in pure {k = b}) && (let b = Type.redblacktree_node_Node_val self in pure {v = b})
end
module RedBlackTree_Impl1_SameMappings_Interface
  type k
  type v
  use Type
  predicate same_mappings (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v)
end
module RedBlackTree_Impl1_SameMappings
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping1.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  predicate same_mappings [#"../red_black_tree.rs" 140 4 140 43] (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v)
    
   =
    [#"../red_black_tree.rs" 141 8 143 9] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping self k v = HasMapping0.has_mapping o k v
end
module RedBlackTree_Impl2_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.redblacktree_node k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl2_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../red_black_tree.rs" 151 4 151 35] (self : Type.redblacktree_node k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 152 8 154 9] ModelAcc0.model_acc (Type.redblacktree_node_Node_right self) (Map.set (Model0.model (Type.redblacktree_node_Node_left self)) (Model1.model (Type.redblacktree_node_Node_key self)) (Type.Core_Option_Option_Some (Type.redblacktree_node_Node_val self)))
end
module RedBlackTree_Impl4_BstInvariant_Interface
  type k
  type v
  use Type
  predicate bst_invariant (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl4_BstInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariantHere_Interface as BstInvariantHere0 with type k = k, type v = v
  predicate bst_invariant [#"../red_black_tree.rs" 182 4 182 34] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 183 8 185 9] BstInvariantHere0.bst_invariant_here self /\ BstInvariant0.bst_invariant (Type.redblacktree_node_Node_left self) /\ BstInvariant0.bst_invariant (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl8_Color_Interface
  type k
  type v
  use Type
  function color (self : Type.redblacktree_tree k v) : Type.redblacktree_color
end
module RedBlackTree_Impl8_Color
  type k
  type v
  use Type
  function color [#"../red_black_tree.rs" 272 4 272 27] (self : Type.redblacktree_tree k v) : Type.redblacktree_color =
    [#"../red_black_tree.rs" 274 12 277 13] match (Type.redblacktree_tree_Tree_node self) with
      | Type.Core_Option_Option_Some (Type.RedBlackTree_Node _ color _ _ _) -> color
      | _ -> Type.RedBlackTree_Color_Black
      end
end
module RedBlackTree_Impl9_ColorInvariantHere_Interface
  type k
  type v
  use Type
  predicate color_invariant_here (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl9_ColorInvariantHere
  type k
  type v
  use Type
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  predicate color_invariant_here [#"../red_black_tree.rs" 297 4 297 41] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 298 20 298 102] Color0.color (Type.redblacktree_node_Node_right self) = Type.RedBlackTree_Color_Black /\ (Type.redblacktree_node_Node_color self = Type.RedBlackTree_Color_Black \/ Color0.color (Type.redblacktree_node_Node_left self) = Type.RedBlackTree_Color_Black)
end
module RedBlackTree_Impl8_ColorInvariant_Interface
  type k
  type v
  use Type
  predicate color_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl8_ColorInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl9_ColorInvariantHere_Interface as ColorInvariantHere0 with type k = k, type v = v
  predicate color_invariant [#"../red_black_tree.rs" 282 4 282 36] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 284 12 290 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> true
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left _ _ _ right = node in ColorInvariantHere0.color_invariant_here node /\ color_invariant left /\ color_invariant right
      end
end
module RedBlackTree_Impl9_ColorInvariant_Interface
  type k
  type v
  use Type
  predicate color_invariant (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl9_ColorInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere_Interface as ColorInvariantHere0 with type k = k, type v = v
  predicate color_invariant [#"../red_black_tree.rs" 302 4 302 36] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 303 8 303 112] ColorInvariantHere0.color_invariant_here self /\ ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left self) /\ ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl6_MatchN_Interface
  type k
  type v
  use Type
  predicate match_n (self : Type.redblacktree_cpl) (node : Type.redblacktree_node k v)
end
module RedBlackTree_Impl6_MatchN
  type k
  type v
  use Type
  clone RedBlackTree_Impl9_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  predicate match_n [#"../red_black_tree.rs" 245 4 245 46] (self : Type.redblacktree_cpl) (node : Type.redblacktree_node k v)
    
   =
    [#"../red_black_tree.rs" 247 12 247 58] Type.redblacktree_node_Node_color node = Type.redblacktree_cpl_CPL_0 self /\ ColorInvariant0.color_invariant node
end
module RedBlackTree_Impl6_MatchT_Interface
  type k
  type v
  use Type
  clone RedBlackTree_Impl6_MatchN_Interface as MatchN0 with type k = k, type v = v
  predicate match_t (self : Type.redblacktree_cpl) (tree : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl6_MatchT
  type k
  type v
  use Type
  clone RedBlackTree_Impl6_MatchN_Interface as MatchN0 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  predicate match_t [#"../red_black_tree.rs" 238 4 238 46] (self : Type.redblacktree_cpl) (tree : Type.redblacktree_tree k v)
    
   =
    [#"../red_black_tree.rs" 240 12 240 60] Color0.color tree = Type.redblacktree_cpl_CPL_0 self /\ ColorInvariant0.color_invariant tree
  axiom match_t_spec : forall self : Type.redblacktree_cpl, tree : Type.redblacktree_tree k v . ([#"../red_black_tree.rs" 234 4 237 43] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Black -> match_t self tree = (forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node -> MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) node)) && ([#"../red_black_tree.rs" 229 4 233 44] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Black -> match_t self tree = (Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_None \/ (exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node /\ MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) node))) && ([#"../red_black_tree.rs" 224 4 228 41] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Red -> match_t self tree = (Type.redblacktree_tree_Tree_node tree <> Type.Core_Option_Option_None /\ (forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node -> MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) node))) && ([#"../red_black_tree.rs" 220 4 223 41] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Red -> match_t self tree = (exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node /\ MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) node))
end
module RedBlackTree_Impl6_MatchT_Impl
  type k
  type v
  use Type
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  let rec ghost function match_t (self : Type.redblacktree_cpl) (tree : Type.redblacktree_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 220 4 223 41] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Red -> result = (exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node /\ MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) node) }
    ensures { [#"../red_black_tree.rs" 224 4 228 41] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Red -> result = (Type.redblacktree_tree_Tree_node tree <> Type.Core_Option_Option_None /\ (forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node -> MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) node)) }
    ensures { [#"../red_black_tree.rs" 229 4 233 44] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Black -> result = (Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_None \/ (exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node /\ MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) node)) }
    ensures { [#"../red_black_tree.rs" 234 4 237 43] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Black -> result = (forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node -> MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) node) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 240 12 240 60] (let b = Type.redblacktree_cpl_CPL_0 self in let a = Color0.color tree in pure {a = b}) && ColorInvariant0.color_invariant tree
end
module RedBlackTree_Cp_MatchT_Interface
  type self
  type k
  type v
  use Type
  predicate match_t (self : self) (tree : Type.redblacktree_tree k v)
end
module RedBlackTree_Cp_MatchT
  type self
  type k
  type v
  use Type
  predicate match_t [#"../red_black_tree.rs" 211 4 211 47] (self : self) (tree : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl7_MatchN_Interface
  type k
  type v
  type l
  type r
  use Type
  predicate match_n (self : Type.redblacktree_cpn l r) (node : Type.redblacktree_node k v)
end
module RedBlackTree_Impl7_MatchN
  type k
  type v
  type l
  type r
  use Type
  clone RedBlackTree_Cp_MatchT_Interface as MatchT1 with type self = r, type k = k, type v = v
  clone RedBlackTree_Cp_MatchT_Interface as MatchT0 with type self = l, type k = k, type v = v
  predicate match_n [#"../red_black_tree.rs" 263 4 263 46] (self : Type.redblacktree_cpn l r) (node : Type.redblacktree_node k v)
    
   =
    [#"../red_black_tree.rs" 264 8 266 9] Type.redblacktree_node_Node_color node = Type.redblacktree_cpn_CPN_0 self /\ MatchT0.match_t (Type.redblacktree_cpn_CPN_1 self) (Type.redblacktree_node_Node_left node) /\ MatchT1.match_t (Type.redblacktree_cpn_CPN_2 self) (Type.redblacktree_node_Node_right node)
end
module RedBlackTree_Impl7_MatchT_Interface
  type k
  type v
  type l
  type r
  use Type
  predicate match_t (self : Type.redblacktree_cpn l r) (tree : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl7_MatchT
  type k
  type v
  type l
  type r
  use Type
  clone RedBlackTree_Impl7_MatchN_Interface as MatchN0 with type k = k, type v = v, type l = l, type r = r
  predicate match_t [#"../red_black_tree.rs" 255 4 255 46] (self : Type.redblacktree_cpn l r) (tree : Type.redblacktree_tree k v)
    
   =
    [#"../red_black_tree.rs" 256 8 259 9] exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node /\ MatchN0.match_n self node
end
module RedBlackTree_Impl10_Height_Interface
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  function height (self : Type.redblacktree_tree k v) : int
end
module RedBlackTree_Impl10_Height
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  function height [#"../red_black_tree.rs" 312 4 312 26] (self : Type.redblacktree_tree k v) : int =
    [#"../red_black_tree.rs" 314 12 322 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> 0
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color _ _ _)) -> match (color) with
        | Type.RedBlackTree_Color_Red -> height left
        | Type.RedBlackTree_Color_Black -> height left + 1
        end
      end
  axiom height_spec : forall self : Type.redblacktree_tree k v . [#"../red_black_tree.rs" 311 14 311 25] height self >= 0
end
module RedBlackTree_Impl10_Height_Impl
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  let rec ghost function height (self : Type.redblacktree_tree k v) : int
    ensures { [#"../red_black_tree.rs" 311 14 311 25] result >= 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 314 12 322 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> 0
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color _ _ _)) -> match (color) with
        | Type.RedBlackTree_Color_Red -> height left
        | Type.RedBlackTree_Color_Black -> height left + 1
        end
      end
end
module RedBlackTree_Impl11_HeightInvariantHere_Interface
  type k
  type v
  use Type
  predicate height_invariant_here (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl11_HeightInvariantHere
  type k
  type v
  use Type
  clone RedBlackTree_Impl10_Height_Interface as Height0 with type k = k, type v = v, axiom .
  predicate height_invariant_here [#"../red_black_tree.rs" 354 4 354 42] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 355 20 355 61] Height0.height (Type.redblacktree_node_Node_left self) = Height0.height (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl10_HeightInvariant_Interface
  type k
  type v
  use Type
  predicate height_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl10_HeightInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl11_HeightInvariantHere_Interface as HeightInvariantHere0 with type k = k, type v = v
  predicate height_invariant [#"../red_black_tree.rs" 327 4 327 37] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 329 12 335 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> true
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left _ _ _ right = node in HeightInvariantHere0.height_invariant_here node /\ height_invariant left /\ height_invariant right
      end
end
module RedBlackTree_Impl11_Height_Interface
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl10_Height_Interface as Height0 with type k = k, type v = v, axiom .
  function height (self : Type.redblacktree_node k v) : int
end
module RedBlackTree_Impl11_Height
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl10_Height_Interface as Height0 with type k = k, type v = v, axiom .
  use mach.int.Int32
  function height [#"../red_black_tree.rs" 344 4 344 26] (self : Type.redblacktree_node k v) : int =
    [#"../red_black_tree.rs" 346 12 349 13] match (Type.redblacktree_node_Node_color self) with
      | Type.RedBlackTree_Color_Red -> Height0.height (Type.redblacktree_node_Node_left self)
      | Type.RedBlackTree_Color_Black -> Height0.height (Type.redblacktree_node_Node_left self) + 1
      end
  axiom height_spec : forall self : Type.redblacktree_node k v . [#"../red_black_tree.rs" 342 4 343 77] forall node : (Type.redblacktree_node k v) . self = node -> height self = Height0.height (Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node))
end
module RedBlackTree_Impl11_Height_Impl
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  let rec ghost function height (self : Type.redblacktree_node k v) : int
    ensures { [#"../red_black_tree.rs" 342 4 343 77] forall node : (Type.redblacktree_node k v) . self = node -> result = Height0.height (Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 346 12 349 13] match (Type.redblacktree_node_Node_color self) with
      | Type.RedBlackTree_Color_Red -> let a' = Type.redblacktree_node_Node_left self in Height0.height a'
      | Type.RedBlackTree_Color_Black -> (let a' = Type.redblacktree_node_Node_left self in Height0.height a') + 1
      end
end
module RedBlackTree_Impl11_HeightInvariant_Interface
  type k
  type v
  use Type
  predicate height_invariant (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl11_HeightInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl10_HeightInvariant_Interface as HeightInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl11_HeightInvariantHere_Interface as HeightInvariantHere0 with type k = k, type v = v
  predicate height_invariant [#"../red_black_tree.rs" 359 4 359 37] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 360 8 360 115] HeightInvariantHere0.height_invariant_here self /\ HeightInvariant0.height_invariant (Type.redblacktree_node_Node_left self) /\ HeightInvariant0.height_invariant (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl12_InternalInvariant_Interface
  type k
  type v
  use Type
  predicate internal_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl12_InternalInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl10_HeightInvariant_Interface as HeightInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  predicate internal_invariant [#"../red_black_tree.rs" 371 4 371 43] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 373 12 373 59] BstInvariant0.bst_invariant self /\ HeightInvariant0.height_invariant self
end
module RedBlackTree_Impl12_Invariant_Interface
  type k
  type v
  use Type
  predicate invariant' (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl12_Invariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl12_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  predicate invariant' [#"../red_black_tree.rs" 378 4 378 34] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 380 12 380 88] InternalInvariant0.internal_invariant self /\ ColorInvariant0.color_invariant self /\ Color0.color self = Type.RedBlackTree_Color_Black
end
module RedBlackTree_Impl13_InternalInvariant_Interface
  type k
  type v
  use Type
  predicate internal_invariant (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl13_InternalInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl11_HeightInvariant_Interface as HeightInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  predicate internal_invariant [#"../red_black_tree.rs" 390 4 390 43] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 392 12 392 59] BstInvariant0.bst_invariant self /\ HeightInvariant0.height_invariant self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module RedBlackTree_Impl14_IsRed_Interface
  type k
  type v
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  val is_red [@cfg:stackify] (self : Type.redblacktree_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 400 14 400 45] result = (Color0.color self = Type.RedBlackTree_Color_Red) }
    
end
module RedBlackTree_Impl14_IsRed
  type k
  type v
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  let rec cfg is_red [@cfg:stackify] [#"../red_black_tree.rs" 401 4 401 28] (self : Type.redblacktree_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 400 14 400 45] result = (Color0.color self = Type.RedBlackTree_Color_Red) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Type.redblacktree_tree k v;
  var _2 : isize;
  var _3 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (Type.redblacktree_tree_Tree_node self_1)
      | Type.Core_Option_Option_Some _ -> goto BB2
      | _ -> goto BB5
      end
  }
  BB1 {
    _0 <- false;
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    switch (Type.redblacktree_node_Node_color (Type.core_option_option_Some_0 (Type.redblacktree_tree_Tree_node self_1)))
      | Type.RedBlackTree_Color_Red -> goto BB3
      | _ -> goto BB1
      end
  }
  BB3 {
    _0 <- true;
    goto BB4
  }
  BB4 {
    return _0
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface
  type self
  function default_log (_ : ()) : self
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog
  type self
  function default_log (_ : ()) : self
end
module Core_Mem_Take_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = DefaultLog0.default_log () }
    
end
module Core_Mem_Take
  type t
  use prelude.Prelude
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = DefaultLog0.default_log () }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {self <> Type.Core_Option_Option_None}
    ensures { Type.Core_Option_Option_Some result = self }
    
end
module Core_Option_Impl0_Unwrap
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {self <> Type.Core_Option_Option_None}
    ensures { Type.Core_Option_Option_Some result = self }
    
end
module Core_Mem_Swap_Interface
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ x =  * y }
    ensures {  ^ y =  * x }
    
end
module Core_Mem_Swap
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ x =  * y }
    ensures {  ^ y =  * x }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Std1_Option_Impl0_DefaultLog_Interface
  type t
  use Type
  function default_log (_ : ()) : Type.core_option_option t
end
module CreusotContracts_Std1_Option_Impl0_DefaultLog
  type t
  use Type
  function default_log (_ : ()) : Type.core_option_option t =
    Type.Core_Option_Option_None
end
module CreusotContracts_Std1_Option_Impl0
  type t
end
module RedBlackTree_Impl15_RotateRight_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl10_Height_Interface as Height1 with type k = k, type v = v, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl11_Height_Interface as Height0 with type k = k, type v = v,
  function Height0.height = Height1.height, axiom .
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl13_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val rotate_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 413 15 413 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 414 15 414 42] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red}
    ensures { [#"../red_black_tree.rs" 415 14 415 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 416 14 416 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 417 14 417 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 418 14 418 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) (Model0.model (Type.redblacktree_node_Node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 419 14 419 42] Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 420 14 420 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 421 4 424 36] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r /\ (Type.redblacktree_node_Node_left ( ^ self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) = (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( * self)) /\ Type.redblacktree_node_Node_key r = Type.redblacktree_node_Node_key ( * self) }
    
end
module RedBlackTree_Impl15_RotateRight
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone RedBlackTree_Impl10_Height as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl11_Height as Height0 with type k = k, type v = v, function Height0.height = Height1.height,
  axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_color
  clone Core_Mem_Swap_Interface as Swap2 with type t = Type.redblacktree_color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_node k v)
  let rec cfg rotate_right [@cfg:stackify] [#"../red_black_tree.rs" 425 4 425 30] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 413 15 413 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 414 15 414 42] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red}
    ensures { [#"../red_black_tree.rs" 415 14 415 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 416 14 416 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 417 14 417 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 418 14 418 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) (Model0.model (Type.redblacktree_node_Node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 419 14 419 42] Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 420 14 420 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 421 4 424 36] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r /\ (Type.redblacktree_node_Node_left ( ^ self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) = (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( * self)) /\ Type.redblacktree_node_Node_key r = Type.redblacktree_node_Node_key ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  ghost var old_self_2 : borrowed (Type.redblacktree_node k v);
  var _3 : ();
  var x_4 : Type.redblacktree_node k v;
  var _5 : Type.core_option_option (Type.redblacktree_node k v);
  var _6 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : ();
  var _9 : borrowed (Type.redblacktree_tree k v);
  var _10 : borrowed (Type.redblacktree_tree k v);
  var _11 : borrowed (Type.redblacktree_tree k v);
  var _12 : borrowed (Type.redblacktree_tree k v);
  var _13 : ();
  var _14 : borrowed (Type.redblacktree_node k v);
  var _15 : borrowed (Type.redblacktree_node k v);
  var _16 : borrowed (Type.redblacktree_node k v);
  var _17 : ();
  var _18 : borrowed (Type.redblacktree_color);
  var _19 : borrowed (Type.redblacktree_color);
  var _20 : borrowed (Type.redblacktree_color);
  var _21 : borrowed (Type.redblacktree_color);
  var _22 : ();
  var _23 : ();
  var _24 : Type.redblacktree_tree k v;
  var _25 : Type.core_option_option (Type.redblacktree_node k v);
  var _26 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 426 23 426 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _7 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _7)) b c d e) };
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _5 <- ([#"../red_black_tree.rs" 434 20 434 55] Take0.take _6);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _7 };
    x_4 <- ([#"../red_black_tree.rs" 434 20 434 64] Unwrap0.unwrap _5);
    goto BB3
  }
  BB3 {
    _10 <- borrow_mut (Type.redblacktree_node_Node_left ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node ( ^ _10) b c d e) };
    _9 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _9) };
    _12 <- borrow_mut (Type.redblacktree_node_Node_right x_4);
    x_4 <- (let Type.RedBlackTree_Node a b c d e = x_4 in Type.RedBlackTree_Node a b c d ( ^ _12));
    _11 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    _8 <- ([#"../red_black_tree.rs" 441 8 441 52] Swap0.swap _9 _11);
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve _10 };
    assume { Resolve2.resolve _12 };
    _14 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _14) };
    _16 <- borrow_mut x_4;
    x_4 <-  ^ _16;
    _15 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _15) };
    _13 <- ([#"../red_black_tree.rs" 447 8 447 36] Swap1.swap _14 _15);
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _16 };
    _19 <- borrow_mut (Type.redblacktree_node_Node_color ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a ( ^ _19) c d e) };
    _18 <- borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _21 <- borrow_mut (Type.redblacktree_node_Node_color x_4);
    x_4 <- (let Type.RedBlackTree_Node a b c d e = x_4 in Type.RedBlackTree_Node a ( ^ _21) c d e);
    _20 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _20) };
    _17 <- ([#"../red_black_tree.rs" 448 8 448 53] Swap2.swap _18 _20);
    goto BB6
  }
  BB6 {
    assume { Resolve4.resolve _19 };
    assume { Resolve4.resolve _21 };
    assert { [#"../red_black_tree.rs" 454 8 454 78] HasMapping0.has_mapping (Type.redblacktree_node_Node_left ( * old_self_2)) (Model0.model (Type.redblacktree_node_Node_key ( * self_1))) (Type.redblacktree_node_Node_val ( * self_1)) };
    _22 <- ();
    assert { [#"../red_black_tree.rs" 455 8 455 114] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_left x_4) k v -> HasMapping0.has_mapping (Type.redblacktree_node_Node_left ( * old_self_2)) k v };
    goto BB7
  }
  BB7 {
    _23 <- ();
    assume { Resolve5.resolve _26 };
    _26 <- x_4;
    _25 <- Type.Core_Option_Option_Some _26;
    goto BB8
  }
  BB8 {
    _24 <- Type.RedBlackTree_Tree _25;
    goto BB9
  }
  BB9 {
    assume { Resolve6.resolve (Type.redblacktree_node_Node_right ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d _24) };
    goto BB10
  }
  BB10 {
    assume { Resolve7.resolve self_1 };
    goto BB11
  }
  BB11 {
    _0 <- ();
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module RedBlackTree_Impl15_RotateLeft_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl10_Height_Interface as Height1 with type k = k, type v = v, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl11_Height_Interface as Height0 with type k = k, type v = v,
  function Height0.height = Height1.height, axiom .
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl13_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val rotate_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 464 15 464 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 465 15 465 43] Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red}
    ensures { [#"../red_black_tree.rs" 466 14 466 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 467 14 467 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 468 14 468 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 469 14 469 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 470 14 470 41] Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 471 14 471 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 472 4 475 36] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l /\ (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( ^ self)) = (Type.redblacktree_node_Node_left ( * self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) /\ Type.redblacktree_node_Node_key l = Type.redblacktree_node_Node_key ( * self) }
    
end
module RedBlackTree_Impl15_RotateLeft
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone RedBlackTree_Impl10_Height as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl11_Height as Height0 with type k = k, type v = v, function Height0.height = Height1.height,
  axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_color
  clone Core_Mem_Swap_Interface as Swap2 with type t = Type.redblacktree_color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_node k v)
  let rec cfg rotate_left [@cfg:stackify] [#"../red_black_tree.rs" 476 4 476 29] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 464 15 464 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 465 15 465 43] Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red}
    ensures { [#"../red_black_tree.rs" 466 14 466 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 467 14 467 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 468 14 468 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 469 14 469 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 470 14 470 41] Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 471 14 471 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 472 4 475 36] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l /\ (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( ^ self)) = (Type.redblacktree_node_Node_left ( * self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) /\ Type.redblacktree_node_Node_key l = Type.redblacktree_node_Node_key ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  ghost var old_self_2 : borrowed (Type.redblacktree_node k v);
  var _3 : ();
  var x_4 : Type.redblacktree_node k v;
  var _5 : Type.core_option_option (Type.redblacktree_node k v);
  var _6 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : ();
  var _9 : borrowed (Type.redblacktree_tree k v);
  var _10 : borrowed (Type.redblacktree_tree k v);
  var _11 : borrowed (Type.redblacktree_tree k v);
  var _12 : borrowed (Type.redblacktree_tree k v);
  var _13 : ();
  var _14 : borrowed (Type.redblacktree_node k v);
  var _15 : borrowed (Type.redblacktree_node k v);
  var _16 : borrowed (Type.redblacktree_node k v);
  var _17 : ();
  var _18 : borrowed (Type.redblacktree_color);
  var _19 : borrowed (Type.redblacktree_color);
  var _20 : borrowed (Type.redblacktree_color);
  var _21 : borrowed (Type.redblacktree_color);
  var _22 : ();
  var _23 : ();
  var _24 : Type.redblacktree_tree k v;
  var _25 : Type.core_option_option (Type.redblacktree_node k v);
  var _26 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 477 23 477 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _7 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _7))) };
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _5 <- ([#"../red_black_tree.rs" 478 20 478 56] Take0.take _6);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _7 };
    x_4 <- ([#"../red_black_tree.rs" 478 20 478 65] Unwrap0.unwrap _5);
    goto BB3
  }
  BB3 {
    _10 <- borrow_mut (Type.redblacktree_node_Node_right ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d ( ^ _10)) };
    _9 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _9) };
    _12 <- borrow_mut (Type.redblacktree_node_Node_left x_4);
    x_4 <- (let Type.RedBlackTree_Node a b c d e = x_4 in Type.RedBlackTree_Node ( ^ _12) b c d e);
    _11 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    _8 <- ([#"../red_black_tree.rs" 479 8 479 52] Swap0.swap _9 _11);
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve _10 };
    assume { Resolve2.resolve _12 };
    _14 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _14) };
    _16 <- borrow_mut x_4;
    x_4 <-  ^ _16;
    _15 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _15) };
    _13 <- ([#"../red_black_tree.rs" 480 8 480 36] Swap1.swap _14 _15);
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _16 };
    _19 <- borrow_mut (Type.redblacktree_node_Node_color ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a ( ^ _19) c d e) };
    _18 <- borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _21 <- borrow_mut (Type.redblacktree_node_Node_color x_4);
    x_4 <- (let Type.RedBlackTree_Node a b c d e = x_4 in Type.RedBlackTree_Node a ( ^ _21) c d e);
    _20 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _20) };
    _17 <- ([#"../red_black_tree.rs" 481 8 481 53] Swap2.swap _18 _20);
    goto BB6
  }
  BB6 {
    assume { Resolve4.resolve _19 };
    assume { Resolve4.resolve _21 };
    assert { [#"../red_black_tree.rs" 482 8 482 79] HasMapping0.has_mapping (Type.redblacktree_node_Node_right ( * old_self_2)) (Model0.model (Type.redblacktree_node_Node_key ( * self_1))) (Type.redblacktree_node_Node_val ( * self_1)) };
    _22 <- ();
    assert { [#"../red_black_tree.rs" 483 8 483 116] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_right x_4) k v -> HasMapping0.has_mapping (Type.redblacktree_node_Node_right ( * old_self_2)) k v };
    goto BB7
  }
  BB7 {
    _23 <- ();
    assume { Resolve5.resolve _26 };
    _26 <- x_4;
    _25 <- Type.Core_Option_Option_Some _26;
    goto BB8
  }
  BB8 {
    _24 <- Type.RedBlackTree_Tree _25;
    goto BB9
  }
  BB9 {
    assume { Resolve6.resolve (Type.redblacktree_node_Node_left ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node _24 b c d e) };
    goto BB10
  }
  BB10 {
    assume { Resolve7.resolve self_1 };
    goto BB11
  }
  BB11 {
    _0 <- ();
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Core_Option_Impl0_AsMut_Interface
  type t
  use prelude.Prelude
  use Type
  val as_mut [@cfg:stackify] (self : borrowed (Type.core_option_option t)) : Type.core_option_option (borrowed t)
    ensures {  * self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None /\  ^ self = Type.Core_Option_Option_None }
    ensures {  * self = Type.Core_Option_Option_None \/ (exists r : (borrowed t) . result = Type.Core_Option_Option_Some r /\  * self = Type.Core_Option_Option_Some ( * r) /\  ^ self = Type.Core_Option_Option_Some ( ^ r)) }
    
end
module Core_Option_Impl0_AsMut
  type t
  use prelude.Prelude
  use Type
  val as_mut [@cfg:stackify] (self : borrowed (Type.core_option_option t)) : Type.core_option_option (borrowed t)
    ensures {  * self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None /\  ^ self = Type.Core_Option_Option_None }
    ensures {  * self = Type.Core_Option_Option_None \/ (exists r : (borrowed t) . result = Type.Core_Option_Option_Some r /\  * self = Type.Core_Option_Option_Some ( * r) /\  ^ self = Type.Core_Option_Option_Some ( ^ r)) }
    
end
module RedBlackTree_Impl15_FlipColors_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  clone RedBlackTree_Impl10_Height_Interface as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl11_Height_Interface as Height0 with type k = k, type v = v,
  function Height0.height = Height1.height, axiom .
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl13_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val flip_colors [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 487 15 487 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 488 15 488 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 489 15 489 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 490 15 490 60] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Color0.color (Type.redblacktree_node_Node_right ( * self))}
    ensures { [#"../red_black_tree.rs" 491 14 491 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 492 14 492 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 493 14 493 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 494 14 494 40] Type.redblacktree_node_Node_key ( * self) = Type.redblacktree_node_Node_key ( ^ self) }
    ensures { [#"../red_black_tree.rs" 495 4 497 70] exists l2 : (Type.redblacktree_node k v) . exists l1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l1 /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l2 /\ Type.redblacktree_node_Node_left l1 = Type.redblacktree_node_Node_left l2 /\ Type.redblacktree_node_Node_right l1 = Type.redblacktree_node_Node_right l2 /\ Type.redblacktree_node_Node_key l1 = Type.redblacktree_node_Node_key l2 /\ Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color l2 /\ Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color l1 }
    ensures { [#"../red_black_tree.rs" 498 4 500 90] exists r2 : (Type.redblacktree_node k v) . exists r1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r1 /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r2 /\ Type.redblacktree_node_Node_left r1 = Type.redblacktree_node_Node_left r2 /\ Type.redblacktree_node_Node_right r1 = Type.redblacktree_node_Node_right r2 /\ Type.redblacktree_node_Node_key r1 = Type.redblacktree_node_Node_key r2 /\ Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color r2 /\ Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color r1 /\ Type.redblacktree_node_Node_key r1 = Type.redblacktree_node_Node_key r2 }
    
end
module RedBlackTree_Impl15_FlipColors
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Height as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping1.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone RedBlackTree_Impl11_Height as Height0 with type k = k, type v = v, function Height0.height = Height1.height,
  axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_color
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  let rec cfg flip_colors [@cfg:stackify] [#"../red_black_tree.rs" 501 4 501 29] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 487 15 487 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 488 15 488 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 489 15 489 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 490 15 490 60] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Color0.color (Type.redblacktree_node_Node_right ( * self))}
    ensures { [#"../red_black_tree.rs" 491 14 491 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 492 14 492 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 493 14 493 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 494 14 494 40] Type.redblacktree_node_Node_key ( * self) = Type.redblacktree_node_Node_key ( ^ self) }
    ensures { [#"../red_black_tree.rs" 495 4 497 70] exists l2 : (Type.redblacktree_node k v) . exists l1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l1 /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l2 /\ Type.redblacktree_node_Node_left l1 = Type.redblacktree_node_Node_left l2 /\ Type.redblacktree_node_Node_right l1 = Type.redblacktree_node_Node_right l2 /\ Type.redblacktree_node_Node_key l1 = Type.redblacktree_node_Node_key l2 /\ Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color l2 /\ Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color l1 }
    ensures { [#"../red_black_tree.rs" 498 4 500 90] exists r2 : (Type.redblacktree_node k v) . exists r1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r1 /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r2 /\ Type.redblacktree_node_Node_left r1 = Type.redblacktree_node_Node_left r2 /\ Type.redblacktree_node_Node_right r1 = Type.redblacktree_node_Node_right r2 /\ Type.redblacktree_node_Node_key r1 = Type.redblacktree_node_Node_key r2 /\ Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color r2 /\ Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color r1 /\ Type.redblacktree_node_Node_key r1 = Type.redblacktree_node_Node_key r2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : Type.redblacktree_color;
  var _3 : borrowed (Type.redblacktree_node k v);
  var _4 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _5 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _6 : ();
  var _7 : borrowed (Type.redblacktree_color);
  var _8 : borrowed (Type.redblacktree_color);
  var _9 : borrowed (Type.redblacktree_color);
  var _10 : borrowed (Type.redblacktree_color);
  var _11 : borrowed (Type.redblacktree_node k v);
  var _12 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _13 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- Type.redblacktree_node_Node_color ( * self_1);
    _5 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _5)) b c d e) };
    _4 <- ([#"../red_black_tree.rs" 502 8 502 31] AsMut0.as_mut _5);
    goto BB1
  }
  BB1 {
    _3 <- ([#"../red_black_tree.rs" 502 8 502 40] Unwrap0.unwrap _4);
    goto BB2
  }
  BB2 {
    _3 <- { _3 with current = (let Type.RedBlackTree_Node a b c d e =  * _3 in Type.RedBlackTree_Node a _2 c d e) };
    assume { Resolve0.resolve _3 };
    _8 <- borrow_mut (Type.redblacktree_node_Node_color ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a ( ^ _8) c d e) };
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    _13 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _13))) };
    _12 <- ([#"../red_black_tree.rs" 503 45 503 69] AsMut0.as_mut _13);
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    _11 <- ([#"../red_black_tree.rs" 503 45 503 78] Unwrap0.unwrap _12);
    goto BB4
  }
  BB4 {
    _10 <- borrow_mut (Type.redblacktree_node_Node_color ( * _11));
    _11 <- { _11 with current = (let Type.RedBlackTree_Node a b c d e =  * _11 in Type.RedBlackTree_Node a ( ^ _10) c d e) };
    assume { Resolve0.resolve _11 };
    _9 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _9) };
    _6 <- ([#"../red_black_tree.rs" 503 8 503 85] Swap0.swap _7 _9);
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve _8 };
    assume { Resolve2.resolve _10 };
    _0 <- ();
    return _0
  }
  
end
module RedBlackTree_Cp_MatchN_Interface
  type self
  type k
  type v
  use Type
  predicate match_n (self : self) (node : Type.redblacktree_node k v)
end
module RedBlackTree_Cp_MatchN
  type self
  type k
  type v
  use Type
  predicate match_n [#"../red_black_tree.rs" 214 4 214 47] (self : self) (node : Type.redblacktree_node k v)
end
module RedBlackTree_Impl7
  type k
  type v
  type l
  type r
  use Type
  clone RedBlackTree_Cp_MatchT as MatchT3 with type self = r, type k = k, type v = v
  clone RedBlackTree_Cp_MatchT as MatchT2 with type self = l, type k = k, type v = v
  clone RedBlackTree_Impl7_MatchN as MatchN0 with type k = k, type v = v, type l = l, type r = r,
  predicate MatchT0.match_t = MatchT2.match_t, predicate MatchT1.match_t = MatchT3.match_t
  clone RedBlackTree_Cp_MatchN_Interface as MatchN1 with type self = Type.redblacktree_cpn l r, type k = k, type v = v,
  predicate match_n = MatchN0.match_n
  clone RedBlackTree_Impl7_MatchT as MatchT0 with type k = k, type v = v, type l = l, type r = r,
  predicate MatchN0.match_n = MatchN0.match_n
  clone RedBlackTree_Cp_MatchT_Interface as MatchT1 with type self = Type.redblacktree_cpn l r, type k = k, type v = v,
  predicate match_t = MatchT0.match_t
end
module RedBlackTree_Impl6
  type k
  type v
  use Type
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Cp_MatchN_Interface as MatchN1 with type self = Type.redblacktree_cpl, type k = k, type v = v,
  predicate match_n = MatchN0.match_n
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Cp_MatchT_Interface as MatchT1 with type self = Type.redblacktree_cpl, type k = k, type v = v,
  predicate match_t = MatchT0.match_t
end
module Core_Option_Impl0_AsRef_Interface
  type t
  use Type
  use prelude.Prelude
  val as_ref [@cfg:stackify] (self : Type.core_option_option t) : Type.core_option_option t
    ensures { self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None }
    ensures { self = Type.Core_Option_Option_None \/ (exists r : (borrowed t) . result = Type.Core_Option_Option_Some ( * r) /\ self = Type.Core_Option_Option_Some ( * r)) }
    
end
module Core_Option_Impl0_AsRef
  type t
  use Type
  use prelude.Prelude
  val as_ref [@cfg:stackify] (self : Type.core_option_option t) : Type.core_option_option t
    ensures { self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None }
    ensures { self = Type.Core_Option_Option_None \/ (exists r : (borrowed t) . result = Type.Core_Option_Option_Some ( * r) /\ self = Type.Core_Option_Option_Some ( * r)) }
    
end
module RedBlackTree_Impl15_Balance_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  clone RedBlackTree_Impl10_Height_Interface as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl7_MatchN_Interface as MatchN2 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl
  clone RedBlackTree_Impl6_MatchN_Interface as MatchN1 with type k = k, type v = v
  clone RedBlackTree_Impl7_MatchN_Interface as MatchN0 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl
  clone RedBlackTree_Impl11_Height_Interface as Height0 with type k = k, type v = v,
  function Height0.height = Height1.height, axiom .
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl13_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val balance [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 506 15 506 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 507 4 508 47] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self))}
    requires {[#"../red_black_tree.rs" 509 4 510 48] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 511 4 511 110] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> false}
    ensures { [#"../red_black_tree.rs" 512 14 512 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 513 14 513 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 514 14 514 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 515 4 516 34] ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) /\ Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 517 4 518 39] MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self) -> MatchN1.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 519 4 520 63] MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * self) -> MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 521 4 522 61] MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * self) -> MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 523 4 524 39] MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * self) -> MatchN1.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( ^ self) }
    
end
module RedBlackTree_Impl15_Balance
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Height as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN1 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT1 with type k = k, type v = v, predicate MatchN0.match_n = MatchN1.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN2 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT1.match_t,
  predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl7_MatchT as MatchT0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN2.match_n
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping1.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl7_MatchN as MatchN0 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl11_Height as Height0 with type k = k, type v = v, function Height0.height = Height1.height,
  axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl15_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color0.color, function Height0.height = Height0.height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Height1.height = Height1.height
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color0.color, predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  function Height0.height = Height0.height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, function Height1.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl15_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color0.color, predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  function Height0.height = Height0.height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, function Height1.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  let rec cfg balance [@cfg:stackify] [#"../red_black_tree.rs" 525 4 525 25] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 506 15 506 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 507 4 508 47] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self))}
    requires {[#"../red_black_tree.rs" 509 4 510 48] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 511 4 511 110] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> false}
    ensures { [#"../red_black_tree.rs" 512 14 512 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 513 14 513 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 514 14 514 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 515 4 516 34] ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) /\ Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 517 4 518 39] MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self) -> MatchN1.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 519 4 520 63] MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * self) -> MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 521 4 522 61] MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * self) -> MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 523 4 524 39] MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * self) -> MatchN1.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : ();
  var _3 : bool;
  var _4 : bool;
  var _5 : Type.redblacktree_tree k v;
  var _6 : bool;
  var _7 : bool;
  var _8 : Type.redblacktree_tree k v;
  var _9 : ();
  var _10 : borrowed (Type.redblacktree_node k v);
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : Type.redblacktree_tree k v;
  var _15 : bool;
  var _16 : Type.redblacktree_tree k v;
  var _17 : Type.redblacktree_node k v;
  var _18 : Type.core_option_option (Type.redblacktree_node k v);
  var _19 : Type.core_option_option (Type.redblacktree_node k v);
  var _20 : ();
  var _21 : borrowed (Type.redblacktree_node k v);
  var _22 : bool;
  var _23 : bool;
  var _24 : Type.redblacktree_tree k v;
  var _25 : bool;
  var _26 : Type.redblacktree_tree k v;
  var _27 : ();
  var _28 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- Type.redblacktree_node_Node_right ( * self_1);
    _4 <- ([#"../red_black_tree.rs" 526 11 526 30] IsRed0.is_red _5);
    goto BB4
  }
  BB1 {
    _3 <- false;
    goto BB3
  }
  BB2 {
    _8 <- Type.redblacktree_node_Node_left ( * self_1);
    _7 <- ([#"../red_black_tree.rs" 526 35 526 53] IsRed0.is_red _8);
    goto BB5
  }
  BB3 {
    switch (_3)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB4 {
    switch (_4)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB5 {
    _6 <- not _7;
    _3 <- _6;
    goto BB3
  }
  BB6 {
    _10 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _10) };
    _9 <- ([#"../red_black_tree.rs" 527 12 527 30] RotateLeft0.rotate_left _10);
    goto BB7
  }
  BB7 {
    _2 <- ();
    goto BB9
  }
  BB8 {
    _2 <- ();
    goto BB9
  }
  BB9 {
    _14 <- Type.redblacktree_node_Node_left ( * self_1);
    _13 <- ([#"../red_black_tree.rs" 530 11 530 29] IsRed0.is_red _14);
    goto BB13
  }
  BB10 {
    _12 <- false;
    goto BB12
  }
  BB11 {
    _19 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1));
    _18 <- ([#"../red_black_tree.rs" 530 33 530 56] AsRef0.as_ref _19);
    goto BB14
  }
  BB12 {
    switch (_12)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    switch (_13)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _17 <- ([#"../red_black_tree.rs" 530 33 530 65] Unwrap0.unwrap _18);
    goto BB15
  }
  BB15 {
    _16 <- Type.redblacktree_node_Node_left _17;
    assume { Resolve0.resolve _17 };
    _15 <- ([#"../red_black_tree.rs" 530 33 530 79] IsRed0.is_red _16);
    goto BB16
  }
  BB16 {
    _12 <- _15;
    goto BB12
  }
  BB17 {
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _20 <- ([#"../red_black_tree.rs" 531 12 531 31] RotateRight0.rotate_right _21);
    goto BB18
  }
  BB18 {
    _11 <- ();
    goto BB20
  }
  BB19 {
    _11 <- ();
    goto BB20
  }
  BB20 {
    _24 <- Type.redblacktree_node_Node_left ( * self_1);
    _23 <- ([#"../red_black_tree.rs" 534 11 534 29] IsRed0.is_red _24);
    goto BB24
  }
  BB21 {
    _22 <- false;
    goto BB23
  }
  BB22 {
    _26 <- Type.redblacktree_node_Node_right ( * self_1);
    _25 <- ([#"../red_black_tree.rs" 534 33 534 52] IsRed0.is_red _26);
    goto BB25
  }
  BB23 {
    switch (_22)
      | False -> goto BB28
      | _ -> goto BB26
      end
  }
  BB24 {
    switch (_23)
      | False -> goto BB21
      | _ -> goto BB22
      end
  }
  BB25 {
    _22 <- _25;
    goto BB23
  }
  BB26 {
    _28 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _28) };
    _27 <- ([#"../red_black_tree.rs" 535 12 535 30] FlipColors0.flip_colors _28);
    goto BB27
  }
  BB27 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB28 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
module RedBlackTree_Impl15_MoveRedLeft_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Height_Interface as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl7_MatchN_Interface as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping1.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone RedBlackTree_Impl11_Height_Interface as Height0 with type k = k, type v = v,
  function Height0.height = Height1.height, axiom .
  clone RedBlackTree_Impl7_MatchN_Interface as MatchN0 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl
  clone RedBlackTree_Impl13_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val move_red_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : borrowed (Type.redblacktree_node k v)
    requires {[#"../red_black_tree.rs" 539 15 539 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 540 15 540 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 541 15 541 86] MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 542 14 542 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 543 4 545 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 546 4 546 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 547 14 547 42] Type.redblacktree_node_Node_key ( * self) = Type.redblacktree_node_Node_key ( * result) }
    ensures { [#"../red_black_tree.rs" 548 4 548 101] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 549 4 550 47] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log k (Model0.model (Type.redblacktree_node_Node_key ( * self))) -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 551 4 552 108] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 553 14 554 61] MatchN1.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * result) \/ MatchN1.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 555 4 556 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color0.color (Type.redblacktree_node_Node_right ( * result)) = Type.RedBlackTree_Color_Black -> Type.redblacktree_node_Node_color ( ^ result) = Type.RedBlackTree_Color_Black) -> ColorInvariant0.color_invariant ( ^ self) }
    
end
module RedBlackTree_Impl15_MoveRedLeft
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN2 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl6_MatchT as MatchT1 with type k = k, type v = v, predicate MatchN0.match_n = MatchN2.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT1.match_t,
  predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl7_MatchT as MatchT0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping1.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl11_Height as Height0 with type k = k, type v = v, function Height0.height = Height1.height,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN0 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl15_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color0.color, predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  function Height0.height = Height0.height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, function Height1.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color0.color, predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  function Height0.height = Height0.height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, function Height1.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl15_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color0.color, function Height0.height = Height0.height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Height1.height = Height1.height
  let rec cfg move_red_left [@cfg:stackify] [#"../red_black_tree.rs" 557 4 557 44] (self : borrowed (Type.redblacktree_node k v)) : borrowed (Type.redblacktree_node k v)
    requires {[#"../red_black_tree.rs" 539 15 539 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 540 15 540 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 541 15 541 86] MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 542 14 542 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 543 4 545 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 546 4 546 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 547 14 547 42] Type.redblacktree_node_Node_key ( * self) = Type.redblacktree_node_Node_key ( * result) }
    ensures { [#"../red_black_tree.rs" 548 4 548 101] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 549 4 550 47] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log k (Model0.model (Type.redblacktree_node_Node_key ( * self))) -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 551 4 552 108] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 553 14 554 61] MatchN1.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * result) \/ MatchN1.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 555 4 556 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color0.color (Type.redblacktree_node_Node_right ( * result)) = Type.RedBlackTree_Color_Black -> Type.redblacktree_node_Node_color ( ^ result) = Type.RedBlackTree_Color_Black) -> ColorInvariant0.color_invariant ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed (Type.redblacktree_node k v);
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : ();
  var _3 : ();
  var _4 : borrowed (Type.redblacktree_node k v);
  var _5 : ();
  var _6 : bool;
  var _7 : Type.redblacktree_tree k v;
  var _8 : borrowed (Type.redblacktree_node k v);
  var _9 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _10 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _11 : ();
  var _12 : ();
  var _13 : borrowed (Type.redblacktree_node k v);
  var _14 : borrowed (Type.redblacktree_node k v);
  var _15 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _16 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _17 : ();
  var _18 : borrowed (Type.redblacktree_node k v);
  var _19 : ();
  var _20 : borrowed (Type.redblacktree_node k v);
  var _21 : borrowed (Type.redblacktree_node k v);
  var _22 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _23 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _4) };
    _3 <- ([#"../red_black_tree.rs" 558 8 558 26] FlipColors0.flip_colors _4);
    goto BB1
  }
  BB1 {
    _10 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _10))) };
    _9 <- ([#"../red_black_tree.rs" 559 11 559 35] AsMut0.as_mut _10);
    goto BB2
  }
  BB2 {
    _8 <- ([#"../red_black_tree.rs" 559 11 559 44] Unwrap0.unwrap _9);
    goto BB3
  }
  BB3 {
    _7 <- Type.redblacktree_node_Node_left ( * _8);
    assume { Resolve0.resolve _8 };
    _6 <- ([#"../red_black_tree.rs" 559 11 559 58] IsRed0.is_red _7);
    goto BB4
  }
  BB4 {
    switch (_6)
      | False -> goto BB13
      | _ -> goto BB5
      end
  }
  BB5 {
    _16 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _16))) };
    _15 <- ([#"../red_black_tree.rs" 560 12 560 36] AsMut0.as_mut _16);
    goto BB6
  }
  BB6 {
    _14 <- ([#"../red_black_tree.rs" 560 12 560 45] Unwrap0.unwrap _15);
    goto BB7
  }
  BB7 {
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    _12 <- ([#"../red_black_tree.rs" 560 12 560 60] RotateRight0.rotate_right _13);
    goto BB8
  }
  BB8 {
    assume { Resolve0.resolve _14 };
    _18 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _18) };
    _17 <- ([#"../red_black_tree.rs" 561 12 561 30] RotateLeft0.rotate_left _18);
    goto BB9
  }
  BB9 {
    _20 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _20) };
    _19 <- ([#"../red_black_tree.rs" 562 12 562 30] FlipColors0.flip_colors _20);
    goto BB10
  }
  BB10 {
    _23 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _23)) b c d e) };
    _22 <- ([#"../red_black_tree.rs" 563 19 563 42] AsMut0.as_mut _23);
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    _21 <- ([#"../red_black_tree.rs" 563 19 563 51] Unwrap0.unwrap _22);
    goto BB12
  }
  BB12 {
    _0 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _0) };
    assume { Resolve0.resolve _21 };
    goto BB14
  }
  BB13 {
    _5 <- ();
    assume { Resolve1.resolve _0 };
    _0 <- self_1;
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module RedBlackTree_Impl15_MoveRedRight_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Height_Interface as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl7_MatchN_Interface as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping1.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone RedBlackTree_Impl11_Height_Interface as Height0 with type k = k, type v = v,
  function Height0.height = Height1.height, axiom .
  clone RedBlackTree_Impl7_MatchN_Interface as MatchN0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl)
  clone RedBlackTree_Impl13_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val move_red_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : borrowed (Type.redblacktree_node k v)
    requires {[#"../red_black_tree.rs" 568 15 568 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 569 15 569 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 570 15 570 86] MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)))) ( * self)}
    ensures { [#"../red_black_tree.rs" 571 14 571 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 572 4 574 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 575 4 575 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 576 14 576 42] Type.redblacktree_node_Node_key ( * result) = Type.redblacktree_node_Node_key ( * self) }
    ensures { [#"../red_black_tree.rs" 577 4 577 101] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 578 4 579 47] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) k -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 580 4 581 108] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 582 14 583 61] MatchN1.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * result) \/ MatchN1.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 584 4 585 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color0.color (Type.redblacktree_node_Node_left ( * result)) = Type.RedBlackTree_Color_Black -> Type.redblacktree_node_Node_color ( ^ result) = Type.RedBlackTree_Color_Black) -> ColorInvariant0.color_invariant ( ^ self) }
    
end
module RedBlackTree_Impl15_MoveRedRight
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN2 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN2.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl7_MatchT as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping1.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl11_Height as Height0 with type k = k, type v = v, function Height0.height = Height1.height,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl),
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color0.color, predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  function Height0.height = Height0.height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, function Height1.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl15_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color0.color, function Height0.height = Height0.height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Height1.height = Height1.height
  let rec cfg move_red_right [@cfg:stackify] [#"../red_black_tree.rs" 586 4 586 45] (self : borrowed (Type.redblacktree_node k v)) : borrowed (Type.redblacktree_node k v)
    requires {[#"../red_black_tree.rs" 568 15 568 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 569 15 569 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 570 15 570 86] MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)))) ( * self)}
    ensures { [#"../red_black_tree.rs" 571 14 571 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 572 4 574 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 575 4 575 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 576 14 576 42] Type.redblacktree_node_Node_key ( * result) = Type.redblacktree_node_Node_key ( * self) }
    ensures { [#"../red_black_tree.rs" 577 4 577 101] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 578 4 579 47] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) k -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 580 4 581 108] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 582 14 583 61] MatchN1.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * result) \/ MatchN1.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 584 4 585 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color0.color (Type.redblacktree_node_Node_left ( * result)) = Type.RedBlackTree_Color_Black -> Type.redblacktree_node_Node_color ( ^ result) = Type.RedBlackTree_Color_Black) -> ColorInvariant0.color_invariant ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed (Type.redblacktree_node k v);
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : ();
  var _3 : ();
  var _4 : borrowed (Type.redblacktree_node k v);
  var _5 : ();
  var _6 : bool;
  var _7 : Type.redblacktree_tree k v;
  var _8 : borrowed (Type.redblacktree_node k v);
  var _9 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _10 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _11 : ();
  var _12 : ();
  var _13 : borrowed (Type.redblacktree_node k v);
  var _14 : ();
  var _15 : borrowed (Type.redblacktree_node k v);
  var _16 : borrowed (Type.redblacktree_node k v);
  var _17 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _18 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _4) };
    _3 <- ([#"../red_black_tree.rs" 587 8 587 26] FlipColors0.flip_colors _4);
    goto BB1
  }
  BB1 {
    _10 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _10)) b c d e) };
    _9 <- ([#"../red_black_tree.rs" 588 11 588 34] AsMut0.as_mut _10);
    goto BB2
  }
  BB2 {
    _8 <- ([#"../red_black_tree.rs" 588 11 588 43] Unwrap0.unwrap _9);
    goto BB3
  }
  BB3 {
    _7 <- Type.redblacktree_node_Node_left ( * _8);
    assume { Resolve0.resolve _8 };
    _6 <- ([#"../red_black_tree.rs" 588 11 588 57] IsRed0.is_red _7);
    goto BB4
  }
  BB4 {
    switch (_6)
      | False -> goto BB10
      | _ -> goto BB5
      end
  }
  BB5 {
    _13 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _13) };
    _12 <- ([#"../red_black_tree.rs" 589 12 589 31] RotateRight0.rotate_right _13);
    goto BB6
  }
  BB6 {
    _15 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _15) };
    _14 <- ([#"../red_black_tree.rs" 590 12 590 30] FlipColors0.flip_colors _15);
    goto BB7
  }
  BB7 {
    _18 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _18))) };
    _17 <- ([#"../red_black_tree.rs" 591 19 591 43] AsMut0.as_mut _18);
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve self_1 };
    _16 <- ([#"../red_black_tree.rs" 591 19 591 52] Unwrap0.unwrap _17);
    goto BB9
  }
  BB9 {
    _0 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _0) };
    assume { Resolve0.resolve _16 };
    goto BB11
  }
  BB10 {
    _5 <- ();
    assume { Resolve1.resolve _0 };
    _0 <- self_1;
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module RedBlackTree_Impl16_New_Interface
  type k
  type v
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val new [@cfg:stackify] (_ : ()) : Type.redblacktree_tree k v
    ensures { [#"../red_black_tree.rs" 601 14 601 43] Model0.model result = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 602 14 602 32] Invariant0.invariant' result }
    
end
module RedBlackTree_Impl16_New
  type k
  type v
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  let rec cfg new [@cfg:stackify] [#"../red_black_tree.rs" 603 4 603 30] (_ : ()) : Type.redblacktree_tree k v
    ensures { [#"../red_black_tree.rs" 601 14 601 43] Model0.model result = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 602 14 602 32] Invariant0.invariant' result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.redblacktree_tree k v;
  var _1 : Type.core_option_option (Type.redblacktree_node k v);
  {
    goto BB0
  }
  BB0 {
    _1 <- Type.Core_Option_Option_None;
    _0 <- Type.RedBlackTree_Tree _1;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module Core_Cmp_Ord_Cmp_Interface
  type self
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module Core_Cmp_Ord_Cmp
  type self
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module RedBlackTree_Impl16_InsertRec_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_MatchT_Interface as MatchT0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl
  clone RedBlackTree_Impl10_Height_Interface as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl12_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val insert_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 607 15 607 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 608 15 608 40] ColorInvariant0.color_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 609 14 609 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 610 14 610 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 611 14 612 39] MatchT0.match_t (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( ^ self) /\ Color0.color ( * self) = Type.RedBlackTree_Color_Red \/ ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 613 14 613 44] HasMapping0.has_mapping ( ^ self) (Model0.model key) val' }
    ensures { [#"../red_black_tree.rs" 614 4 614 111] forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key \/ HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    
end
module RedBlackTree_Impl16_InsertRec
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl6_MatchN as MatchN1 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT1 with type k = k, type v = v, predicate MatchN0.match_n = MatchN1.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_MatchN as MatchN0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT1.match_t,
  predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl7_MatchT as MatchT0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN0.match_n
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  use mach.int.Int
  use mach.int.Int64
  use prelude.Int8
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl7_MatchN as MatchN2 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl11_Height as Height1 with type k = k, type v = v, function Height0.height = Height0.height,
  axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant1 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl15_Balance_Interface as Balance0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Height0.height = Height1.height,
  predicate MatchN0.match_n = MatchN2.match_n, predicate MatchN1.match_n = MatchN1.match_n,
  predicate MatchN2.match_n = MatchN0.match_n, function Height1.height = Height0.height
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.redblacktree_node k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model1.model,
  function Model1.model = Model0.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.core_option_option (Type.redblacktree_node k v)
  let rec cfg insert_rec [@cfg:stackify] [#"../red_black_tree.rs" 615 4 615 44] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 607 15 607 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 608 15 608 40] ColorInvariant0.color_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 609 14 609 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 610 14 610 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 611 14 612 39] MatchT0.match_t (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( ^ self) /\ Color0.color ( * self) = Type.RedBlackTree_Color_Red \/ ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 613 14 613 44] HasMapping0.has_mapping ( ^ self) (Model0.model key) val' }
    ensures { [#"../red_black_tree.rs" 614 4 614 111] forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key \/ HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var _4 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _5 : isize;
  var node_6 : borrowed (Type.redblacktree_node k v);
  var _7 : ();
  var _8 : Type.core_cmp_ordering;
  var _9 : k;
  var _10 : k;
  var _11 : k;
  var _12 : int8;
  var _13 : borrowed (Type.redblacktree_tree k v);
  var _14 : k;
  var _15 : v;
  var _16 : ();
  var _17 : v;
  var _18 : borrowed (Type.redblacktree_tree k v);
  var _19 : k;
  var _20 : v;
  var _21 : ();
  var _22 : borrowed (Type.redblacktree_node k v);
  var _23 : ();
  var _24 : Type.core_option_option (Type.redblacktree_node k v);
  var _25 : Type.redblacktree_node k v;
  var _26 : Type.redblacktree_node k v;
  var _27 : Type.redblacktree_tree k v;
  var _28 : Type.core_option_option (Type.redblacktree_node k v);
  var _29 : Type.redblacktree_color;
  var _30 : k;
  var _31 : v;
  var _32 : Type.redblacktree_tree k v;
  var _33 : Type.core_option_option (Type.redblacktree_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _4 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _4)) };
    switch ( * _4)
      | Type.Core_Option_Option_Some _ -> goto BB3
      | _ -> goto BB15
      end
  }
  BB3 {
    assume { Resolve4.resolve self_1 };
    node_6 <- borrow_mut (Type.core_option_option_Some_0 ( * _4));
    _4 <- { _4 with current = (let Type.Core_Option_Option_Some a =  * _4 in Type.Core_Option_Option_Some ( ^ node_6)) };
    assume { Resolve0.resolve _4 };
    _9 <- key_2;
    _11 <- Type.redblacktree_node_Node_key ( * node_6);
    _10 <- _11;
    assume { Resolve5.resolve _11 };
    _8 <- ([#"../red_black_tree.rs" 617 18 617 36] Cmp0.cmp _9 _10);
    goto BB4
  }
  BB4 {
    switch (_8)
      | Type.Core_Cmp_Ordering_Less -> goto BB7
      | Type.Core_Cmp_Ordering_Equal -> goto BB9
      | Type.Core_Cmp_Ordering_Greater -> goto BB5
      end
  }
  BB5 {
    _18 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_6));
    node_6 <- { node_6 with current = (let Type.RedBlackTree_Node a b c d e =  * node_6 in Type.RedBlackTree_Node a b c d ( ^ _18)) };
    assume { Resolve1.resolve _19 };
    _19 <- key_2;
    assume { Resolve2.resolve _20 };
    _20 <- val'_3;
    _7 <- ([#"../red_black_tree.rs" 623 27 623 58] insert_rec _18 _19 _20);
    goto BB12
  }
  BB6 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve val'_3 };
    assume { Resolve6.resolve node_6 };
    absurd
  }
  BB7 {
    _13 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_6));
    node_6 <- { node_6 with current = (let Type.RedBlackTree_Node a b c d e =  * node_6 in Type.RedBlackTree_Node ( ^ _13) b c d e) };
    assume { Resolve1.resolve _14 };
    _14 <- key_2;
    assume { Resolve2.resolve _15 };
    _15 <- val'_3;
    _7 <- ([#"../red_black_tree.rs" 618 24 618 54] insert_rec _13 _14 _15);
    goto BB8
  }
  BB8 {
    goto BB13
  }
  BB9 {
    assume { Resolve2.resolve _17 };
    _17 <- val'_3;
    assume { Resolve2.resolve (Type.redblacktree_node_Node_val ( * node_6)) };
    node_6 <- { node_6 with current = (let Type.RedBlackTree_Node a b c d e =  * node_6 in Type.RedBlackTree_Node a b c _17 e) };
    goto BB10
  }
  BB10 {
    assume { Resolve6.resolve node_6 };
    goto BB11
  }
  BB11 {
    _0 <- ();
    goto BB27
  }
  BB12 {
    goto BB13
  }
  BB13 {
    _22 <- borrow_mut ( * node_6);
    node_6 <- { node_6 with current = ( ^ _22) };
    _21 <- ([#"../red_black_tree.rs" 625 12 625 26] Balance0.balance _22);
    goto BB14
  }
  BB14 {
    assume { Resolve6.resolve node_6 };
    _0 <- ();
    goto BB26
  }
  BB15 {
    assume { Resolve0.resolve _4 };
    _28 <- Type.Core_Option_Option_None;
    _27 <- Type.RedBlackTree_Tree _28;
    goto BB16
  }
  BB16 {
    _29 <- Type.RedBlackTree_Color_Red;
    assume { Resolve1.resolve _30 };
    _30 <- key_2;
    assume { Resolve2.resolve _31 };
    _31 <- val'_3;
    _33 <- Type.Core_Option_Option_None;
    _32 <- Type.RedBlackTree_Tree _33;
    goto BB17
  }
  BB17 {
    _26 <- Type.RedBlackTree_Node _27 _29 _30 _31 _32;
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    _25 <- _26;
    goto BB22
  }
  BB22 {
    _24 <- Type.Core_Option_Option_Some _25;
    goto BB23
  }
  BB23 {
    assume { Resolve3.resolve (Type.redblacktree_tree_Tree_node ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree _24) };
    goto BB24
  }
  BB24 {
    assume { Resolve4.resolve self_1 };
    goto BB25
  }
  BB25 {
    _0 <- ();
    goto BB27
  }
  BB26 {
    goto BB29
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
module RedBlackTree_Impl16_Insert_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val insert [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 638 15 638 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 639 14 639 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 640 14 640 53] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_Some val') }
    
end
module RedBlackTree_Impl16_Insert
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN1 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT1 with type k = k, type v = v, predicate MatchN0.match_n = MatchN1.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT1.match_t,
  predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl7_MatchT as MatchT0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN0.match_n
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_tree k v
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl16_InsertRec_Interface as InsertRec0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Height0.height = Height0.height,
  predicate MatchT0.match_t = MatchT0.match_t, function Color0.color = Color0.color,
  function Model0.model = Model1.model, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = k
  let rec cfg insert [@cfg:stackify] [#"../red_black_tree.rs" 641 4 641 44] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 638 15 638 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 639 14 639 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 640 14 640 53] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_Some val') }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var _4 : ();
  var _5 : borrowed (Type.redblacktree_tree k v);
  var _6 : k;
  var _7 : v;
  var _8 : Type.redblacktree_color;
  var _9 : borrowed (Type.redblacktree_node k v);
  var _10 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _11 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  ghost var _12 : ();
  var _13 : ();
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _5 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _5) };
    assume { Resolve0.resolve _6 };
    _6 <- key_2;
    assume { Resolve1.resolve _7 };
    _7 <- val'_3;
    _4 <- ([#"../red_black_tree.rs" 642 8 642 33] InsertRec0.insert_rec _5 _6 _7);
    goto BB2
  }
  BB2 {
    _8 <- Type.RedBlackTree_Color_Black;
    _11 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _11)) };
    _10 <- ([#"../red_black_tree.rs" 643 8 643 26] AsMut0.as_mut _11);
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve self_1 };
    _9 <- ([#"../red_black_tree.rs" 643 8 643 35] Unwrap0.unwrap _10);
    goto BB4
  }
  BB4 {
    _9 <- { _9 with current = (let Type.RedBlackTree_Node a b c d e =  * _9 in Type.RedBlackTree_Node a _8 c d e) };
    assume { Resolve3.resolve _9 };
    _13 <- ();
    _12 <- ghost ([#"../red_black_tree.rs" 644 8 644 42] ());
    goto BB5
  }
  BB5 {
    _0 <- ();
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module Alloc_Boxed_Impl54_AsMut_Interface
  type t
  type a
  use prelude.Prelude
  val as_mut [@cfg:stackify] (self : borrowed t) : borrowed t
    ensures {  * self =  * result }
    ensures {  ^ self =  ^ result }
    
end
module Alloc_Boxed_Impl54_AsMut
  type t
  type a
  use prelude.Prelude
  val as_mut [@cfg:stackify] (self : borrowed t) : borrowed t
    ensures {  * self =  * result }
    ensures {  ^ self =  ^ result }
    
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
end
module Alloc_Boxed_Impl54
  type t
  type a
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module RedBlackTree_Impl16_DeleteMaxRec_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  clone RedBlackTree_Impl6_MatchN_Interface as MatchN0 with type k = k, type v = v
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Height_Interface as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl7_MatchT_Interface as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl
  clone RedBlackTree_Impl6_MatchT_Interface as MatchT0 with type k = k, type v = v,
  predicate MatchN0.match_n = MatchN0.match_n, axiom .
  clone RedBlackTree_Impl12_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val delete_max_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 647 15 647 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 648 15 649 62] MatchT0.match_t (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( * self) \/ MatchT1.match_t (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 650 14 650 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 651 14 651 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 652 14 652 54] HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 653 4 653 88] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log k (Model0.model (let (a, _) = result in a)) }
    ensures { [#"../red_black_tree.rs" 654 4 655 61] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (Model0.model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 656 14 656 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 657 4 657 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    
end
module RedBlackTree_Impl16_DeleteMaxRec
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl7_MatchT as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  use mach.int.Int
  use mach.int.Int64
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl7_MatchN as MatchN3 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl,
  predicate MatchT0.match_t = MatchT1.match_t, predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN2 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl),
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl11_Height as Height1 with type k = k, type v = v, function Height0.height = Height0.height,
  axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant1 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve6.resolve, predicate Resolve1.resolve = Resolve7.resolve
  clone RedBlackTree_Impl15_Balance_Interface as Balance0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Height0.height = Height1.height,
  predicate MatchN0.match_n = MatchN3.match_n, predicate MatchN1.match_n = MatchN0.match_n,
  predicate MatchN2.match_n = MatchN1.match_n, function Height1.height = Height0.height
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl15_MoveRedRight_Interface as MoveRedRight0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  predicate MatchN0.match_n = MatchN2.match_n, function Height0.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LeLog0.le_log = LeLog0.le_log,
  predicate MatchN1.match_n = MatchN1.match_n,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant, function Color0.color = Color0.color,
  function Height1.height = Height0.height, predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  function Color0.color = Color0.color, predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  function Height0.height = Height1.height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, function Height1.height = Height0.height,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Alloc_Boxed_Impl54_AsMut_Interface as AsMut1 with type t = Type.redblacktree_node k v,
  type a = Type.alloc_alloc_global
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  let rec cfg delete_max_rec [@cfg:stackify] [#"../red_black_tree.rs" 658 4 658 42] (self : borrowed (Type.redblacktree_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 647 15 647 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 648 15 649 62] MatchT0.match_t (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( * self) \/ MatchT1.match_t (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 650 14 650 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 651 14 651 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 652 14 652 54] HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 653 4 653 88] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log k (Model0.model (let (a, _) = result in a)) }
    ensures { [#"../red_black_tree.rs" 654 4 655 61] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (Model0.model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 656 14 656 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 657 4 657 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var node_2 : borrowed (Type.redblacktree_node k v);
  var _3 : borrowed (Type.redblacktree_node k v);
  var _4 : borrowed (Type.redblacktree_node k v);
  var _5 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _6 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _7 : ();
  var _8 : bool;
  var _9 : Type.redblacktree_tree k v;
  var _10 : borrowed (Type.redblacktree_node k v);
  var _11 : ();
  var _12 : isize;
  var _13 : ();
  var node_14 : Type.redblacktree_node k v;
  var _15 : Type.core_option_option (Type.redblacktree_node k v);
  var _16 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _17 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _18 : k;
  var _19 : v;
  var _20 : ();
  var _21 : bool;
  var _22 : bool;
  var _23 : bool;
  var _24 : Type.redblacktree_tree k v;
  var _25 : bool;
  var _26 : bool;
  var _27 : Type.redblacktree_tree k v;
  var _28 : Type.redblacktree_node k v;
  var _29 : Type.core_option_option (Type.redblacktree_node k v);
  var _30 : Type.core_option_option (Type.redblacktree_node k v);
  var _31 : borrowed (Type.redblacktree_node k v);
  var _32 : borrowed (Type.redblacktree_node k v);
  var _33 : borrowed (Type.redblacktree_node k v);
  var r_34 : (k, v);
  var _35 : borrowed (Type.redblacktree_tree k v);
  var _36 : ();
  var _37 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _6)) };
    _5 <- ([#"../red_black_tree.rs" 659 23 659 41] AsMut0.as_mut _6);
    goto BB1
  }
  BB1 {
    _4 <- ([#"../red_black_tree.rs" 659 23 659 50] Unwrap0.unwrap _5);
    goto BB2
  }
  BB2 {
    _3 <- borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _3) };
    node_2 <- ([#"../red_black_tree.rs" 659 23 659 59] AsMut1.as_mut _3);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _4 };
    _9 <- Type.redblacktree_node_Node_left ( * node_2);
    _8 <- ([#"../red_black_tree.rs" 660 11 660 29] IsRed0.is_red _9);
    goto BB4
  }
  BB4 {
    switch (_8)
      | False -> goto BB7
      | _ -> goto BB5
      end
  }
  BB5 {
    _10 <- borrow_mut ( * node_2);
    node_2 <- { node_2 with current = ( ^ _10) };
    _7 <- ([#"../red_black_tree.rs" 661 12 661 31] RotateRight0.rotate_right _10);
    goto BB6
  }
  BB6 {
    goto BB8
  }
  BB7 {
    _7 <- ();
    goto BB8
  }
  BB8 {
    switch (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * node_2)))
      | Type.Core_Option_Option_None -> goto BB9
      | _ -> goto BB14
      end
  }
  BB9 {
    assume { Resolve3.resolve node_2 };
    _17 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _17)) };
    assume { Resolve1.resolve self_1 };
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    _15 <- ([#"../red_black_tree.rs" 664 23 664 53] Take0.take _16);
    goto BB10
  }
  BB10 {
    assume { Resolve5.resolve _17 };
    node_14 <- ([#"../red_black_tree.rs" 664 23 664 62] Unwrap2.unwrap _15);
    goto BB11
  }
  BB11 {
    assume { Resolve6.resolve _18 };
    _18 <- Type.redblacktree_node_Node_key node_14;
    assume { Resolve7.resolve _19 };
    _19 <- Type.redblacktree_node_Node_val node_14;
    _0 <- (_18, _19);
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB29
  }
  BB14 {
    assume { Resolve1.resolve self_1 };
    _11 <- ();
    _24 <- Type.redblacktree_node_Node_right ( * node_2);
    _23 <- ([#"../red_black_tree.rs" 667 12 667 31] IsRed0.is_red _24);
    goto BB18
  }
  BB15 {
    _21 <- false;
    goto BB17
  }
  BB16 {
    _30 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * node_2));
    _29 <- ([#"../red_black_tree.rs" 667 36 667 60] AsRef0.as_ref _30);
    goto BB19
  }
  BB17 {
    switch (_21)
      | False -> goto BB24
      | _ -> goto BB22
      end
  }
  BB18 {
    _22 <- not _23;
    switch (_22)
      | False -> goto BB15
      | _ -> goto BB16
      end
  }
  BB19 {
    _28 <- ([#"../red_black_tree.rs" 667 36 667 69] Unwrap1.unwrap _29);
    goto BB20
  }
  BB20 {
    _27 <- Type.redblacktree_node_Node_left _28;
    assume { Resolve2.resolve _28 };
    _26 <- ([#"../red_black_tree.rs" 667 36 667 83] IsRed0.is_red _27);
    goto BB21
  }
  BB21 {
    _25 <- not _26;
    _21 <- _25;
    goto BB17
  }
  BB22 {
    _33 <- borrow_mut ( * node_2);
    node_2 <- { node_2 with current = ( ^ _33) };
    _32 <- ([#"../red_black_tree.rs" 668 19 668 40] MoveRedRight0.move_red_right _33);
    goto BB23
  }
  BB23 {
    assume { Resolve3.resolve node_2 };
    _31 <- borrow_mut ( * _32);
    _32 <- { _32 with current = ( ^ _31) };
    assume { Resolve3.resolve _32 };
    assume { Resolve3.resolve node_2 };
    node_2 <- _31;
    _20 <- ();
    goto BB25
  }
  BB24 {
    _20 <- ();
    goto BB25
  }
  BB25 {
    _35 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_2));
    node_2 <- { node_2 with current = (let Type.RedBlackTree_Node a b c d e =  * node_2 in Type.RedBlackTree_Node a b c d ( ^ _35)) };
    r_34 <- ([#"../red_black_tree.rs" 670 16 670 43] delete_max_rec _35);
    goto BB26
  }
  BB26 {
    _37 <- borrow_mut ( * node_2);
    node_2 <- { node_2 with current = ( ^ _37) };
    _36 <- ([#"../red_black_tree.rs" 671 8 671 22] Balance0.balance _37);
    goto BB27
  }
  BB27 {
    assume { Resolve3.resolve node_2 };
    assume { Resolve4.resolve _0 };
    _0 <- r_34;
    goto BB28
  }
  BB28 {
    goto BB30
  }
  BB29 {
    assume { Resolve8.resolve node_14 };
    goto BB30
  }
  BB30 {
    return _0
  }
  
end
module RedBlackTree_Impl16_DeleteMax_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Const
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val delete_max [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 675 15 675 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 676 14 676 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 677 4 677 83] result = Type.Core_Option_Option_None -> Model0.model ( ^ self) = Model0.model ( * self) /\ Model0.model ( * self) = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 678 4 681 48] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Type.Core_Option_Option_Some v /\ (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Type.Core_Option_Option_None \/ LeLog0.le_log k2 (Model1.model k)) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl16_DeleteMax
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Const
  use map.Map
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl0_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color
  use mach.int.Int
  use mach.int.Int64
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = k
  clone RedBlackTree_Impl7_MatchT as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN1.match_n
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve5.resolve, predicate Resolve1.resolve = Resolve6.resolve
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl16_DeleteMaxRec_Interface as DeleteMaxRec0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t,
  function Height0.height = Height0.height, function Model0.model = Model1.model,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  function Color0.color = Color0.color, predicate MatchN0.match_n = MatchN0.match_n
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  let rec cfg delete_max [@cfg:stackify] [#"../red_black_tree.rs" 682 4 682 50] (self : borrowed (Type.redblacktree_tree k v)) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 675 15 675 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 676 14 676 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 677 4 677 83] result = Type.Core_Option_Option_None -> Model0.model ( ^ self) = Model0.model ( * self) /\ Model0.model ( * self) = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 678 4 681 48] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Type.Core_Option_Option_Some v /\ (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Type.Core_Option_Option_None \/ LeLog0.le_log k2 (Model1.model k)) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Type.Core_Option_Option_None) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.core_option_option (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  ghost var old_self_2 : borrowed (Type.redblacktree_tree k v);
  var _3 : ();
  var _4 : ();
  var _5 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _6 : isize;
  var node_7 : borrowed (Type.redblacktree_node k v);
  var _8 : bool;
  var _9 : bool;
  var _10 : Type.redblacktree_tree k v;
  var _11 : Type.redblacktree_color;
  var _12 : ();
  var _13 : ();
  var r_14 : (k, v);
  var _15 : borrowed (Type.redblacktree_tree k v);
  var _16 : ();
  var _17 : bool;
  var _18 : Type.redblacktree_tree k v;
  var _19 : Type.redblacktree_color;
  var _20 : borrowed (Type.redblacktree_node k v);
  var _21 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _22 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  ghost var _23 : ();
  var _24 : ();
  var _25 : (k, v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 683 23 683 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _5 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _5)) };
    switch ( * _5)
      | Type.Core_Option_Option_Some _ -> goto BB2
      | _ -> goto BB7
      end
  }
  BB2 {
    node_7 <- borrow_mut (Type.core_option_option_Some_0 ( * _5));
    _5 <- { _5 with current = (let Type.Core_Option_Option_Some a =  * _5 in Type.Core_Option_Option_Some ( ^ node_7)) };
    assume { Resolve2.resolve _5 };
    _10 <- Type.redblacktree_node_Node_left ( * node_7);
    _9 <- ([#"../red_black_tree.rs" 685 16 685 34] IsRed0.is_red _10);
    goto BB3
  }
  BB3 {
    _8 <- not _9;
    switch (_8)
      | False -> goto BB5
      | _ -> goto BB4
      end
  }
  BB4 {
    _11 <- Type.RedBlackTree_Color_Red;
    node_7 <- { node_7 with current = (let Type.RedBlackTree_Node a b c d e =  * node_7 in Type.RedBlackTree_Node a _11 c d e) };
    assume { Resolve3.resolve node_7 };
    _4 <- ();
    goto BB6
  }
  BB5 {
    assume { Resolve3.resolve node_7 };
    _4 <- ();
    goto BB6
  }
  BB6 {
    assert { [#"../red_black_tree.rs" 691 24 691 53] SameMappings0.same_mappings ( * old_self_2) ( * self_1) };
    _13 <- ();
    _15 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _15) };
    r_14 <- ([#"../red_black_tree.rs" 692 16 692 37] DeleteMaxRec0.delete_max_rec _15);
    goto BB8
  }
  BB7 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve _5 };
    _0 <- Type.Core_Option_Option_None;
    goto BB18
  }
  BB8 {
    _18 <-  * self_1;
    _17 <- ([#"../red_black_tree.rs" 693 11 693 24] IsRed0.is_red _18);
    goto BB9
  }
  BB9 {
    switch (_17)
      | False -> goto BB13
      | _ -> goto BB10
      end
  }
  BB10 {
    _19 <- Type.RedBlackTree_Color_Black;
    _22 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _22)) };
    _21 <- ([#"../red_black_tree.rs" 694 12 694 30] AsMut0.as_mut _22);
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    _20 <- ([#"../red_black_tree.rs" 694 12 694 39] Unwrap0.unwrap _21);
    goto BB12
  }
  BB12 {
    _20 <- { _20 with current = (let Type.RedBlackTree_Node a b c d e =  * _20 in Type.RedBlackTree_Node a _19 c d e) };
    assume { Resolve3.resolve _20 };
    _16 <- ();
    goto BB14
  }
  BB13 {
    assume { Resolve1.resolve self_1 };
    _16 <- ();
    goto BB14
  }
  BB14 {
    _24 <- ();
    _23 <- ghost ([#"../red_black_tree.rs" 696 8 696 42] ());
    goto BB15
  }
  BB15 {
    assume { Resolve4.resolve _25 };
    _25 <- r_14;
    _0 <- Type.Core_Option_Option_Some _25;
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module RedBlackTree_Impl16_DeleteMinRec_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  clone RedBlackTree_Impl6_MatchN_Interface as MatchN0 with type k = k, type v = v
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Height_Interface as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl7_MatchT_Interface as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl
  clone RedBlackTree_Impl6_MatchT_Interface as MatchT0 with type k = k, type v = v,
  predicate MatchN0.match_n = MatchN0.match_n, axiom .
  clone RedBlackTree_Impl12_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val delete_min_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 700 15 700 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 701 15 702 62] MatchT0.match_t (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( * self) \/ MatchT1.match_t (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 703 14 703 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 704 14 704 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 705 14 705 54] HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 706 4 706 88] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (Model0.model (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 707 4 708 61] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (Model0.model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 709 14 709 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 710 4 710 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    
end
module RedBlackTree_Impl16_DeleteMinRec
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl7_MatchT as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  use mach.int.Int
  use mach.int.Int64
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl11_Height as Height1 with type k = k, type v = v, function Height0.height = Height0.height,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN2 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl,
  predicate MatchT0.match_t = MatchT1.match_t, predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant1 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve6.resolve, predicate Resolve1.resolve = Resolve7.resolve
  clone RedBlackTree_Impl15_Balance_Interface as Balance0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Height0.height = Height1.height,
  predicate MatchN0.match_n = MatchN2.match_n, predicate MatchN1.match_n = MatchN0.match_n,
  predicate MatchN2.match_n = MatchN1.match_n, function Height1.height = Height0.height
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl15_MoveRedLeft_Interface as MoveRedLeft0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  predicate MatchN0.match_n = MatchN2.match_n, function Height0.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LeLog0.le_log = LeLog0.le_log,
  predicate MatchN1.match_n = MatchN1.match_n,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant, function Color0.color = Color0.color,
  function Height1.height = Height0.height, predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Alloc_Boxed_Impl54_AsMut_Interface as AsMut1 with type t = Type.redblacktree_node k v,
  type a = Type.alloc_alloc_global
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  let rec cfg delete_min_rec [@cfg:stackify] [#"../red_black_tree.rs" 711 4 711 42] (self : borrowed (Type.redblacktree_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 700 15 700 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 701 15 702 62] MatchT0.match_t (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( * self) \/ MatchT1.match_t (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 703 14 703 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 704 14 704 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 705 14 705 54] HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 706 4 706 88] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (Model0.model (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 707 4 708 61] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (Model0.model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 709 14 709 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 710 4 710 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var node_2 : borrowed (Type.redblacktree_node k v);
  var _3 : borrowed (Type.redblacktree_node k v);
  var _4 : borrowed (Type.redblacktree_node k v);
  var _5 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _6 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _7 : ();
  var _8 : isize;
  var _9 : ();
  var node_10 : Type.redblacktree_node k v;
  var _11 : Type.core_option_option (Type.redblacktree_node k v);
  var _12 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _13 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _14 : k;
  var _15 : v;
  var _16 : ();
  var _17 : bool;
  var _18 : bool;
  var _19 : bool;
  var _20 : Type.redblacktree_tree k v;
  var _21 : bool;
  var _22 : bool;
  var _23 : Type.redblacktree_tree k v;
  var _24 : Type.redblacktree_node k v;
  var _25 : Type.core_option_option (Type.redblacktree_node k v);
  var _26 : Type.core_option_option (Type.redblacktree_node k v);
  var _27 : borrowed (Type.redblacktree_node k v);
  var _28 : borrowed (Type.redblacktree_node k v);
  var _29 : borrowed (Type.redblacktree_node k v);
  var r_30 : (k, v);
  var _31 : borrowed (Type.redblacktree_tree k v);
  var _32 : ();
  var _33 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _6)) };
    _5 <- ([#"../red_black_tree.rs" 712 23 712 41] AsMut0.as_mut _6);
    goto BB1
  }
  BB1 {
    _4 <- ([#"../red_black_tree.rs" 712 23 712 50] Unwrap0.unwrap _5);
    goto BB2
  }
  BB2 {
    _3 <- borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _3) };
    node_2 <- ([#"../red_black_tree.rs" 712 23 712 59] AsMut1.as_mut _3);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _4 };
    switch (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_2)))
      | Type.Core_Option_Option_None -> goto BB4
      | _ -> goto BB9
      end
  }
  BB4 {
    assume { Resolve3.resolve node_2 };
    _13 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _13)) };
    assume { Resolve1.resolve self_1 };
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    _11 <- ([#"../red_black_tree.rs" 714 23 714 53] Take0.take _12);
    goto BB5
  }
  BB5 {
    assume { Resolve5.resolve _13 };
    node_10 <- ([#"../red_black_tree.rs" 714 23 714 62] Unwrap2.unwrap _11);
    goto BB6
  }
  BB6 {
    assume { Resolve6.resolve _14 };
    _14 <- Type.redblacktree_node_Node_key node_10;
    assume { Resolve7.resolve _15 };
    _15 <- Type.redblacktree_node_Node_val node_10;
    _0 <- (_14, _15);
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB24
  }
  BB9 {
    assume { Resolve1.resolve self_1 };
    _7 <- ();
    _20 <- Type.redblacktree_node_Node_left ( * node_2);
    _19 <- ([#"../red_black_tree.rs" 717 12 717 30] IsRed0.is_red _20);
    goto BB13
  }
  BB10 {
    _17 <- false;
    goto BB12
  }
  BB11 {
    _26 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_2));
    _25 <- ([#"../red_black_tree.rs" 717 35 717 58] AsRef0.as_ref _26);
    goto BB14
  }
  BB12 {
    switch (_17)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    _18 <- not _19;
    switch (_18)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _24 <- ([#"../red_black_tree.rs" 717 35 717 67] Unwrap1.unwrap _25);
    goto BB15
  }
  BB15 {
    _23 <- Type.redblacktree_node_Node_left _24;
    assume { Resolve2.resolve _24 };
    _22 <- ([#"../red_black_tree.rs" 717 35 717 81] IsRed0.is_red _23);
    goto BB16
  }
  BB16 {
    _21 <- not _22;
    _17 <- _21;
    goto BB12
  }
  BB17 {
    _29 <- borrow_mut ( * node_2);
    node_2 <- { node_2 with current = ( ^ _29) };
    _28 <- ([#"../red_black_tree.rs" 718 19 718 39] MoveRedLeft0.move_red_left _29);
    goto BB18
  }
  BB18 {
    assume { Resolve3.resolve node_2 };
    _27 <- borrow_mut ( * _28);
    _28 <- { _28 with current = ( ^ _27) };
    assume { Resolve3.resolve _28 };
    assume { Resolve3.resolve node_2 };
    node_2 <- _27;
    _16 <- ();
    goto BB20
  }
  BB19 {
    _16 <- ();
    goto BB20
  }
  BB20 {
    _31 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_2));
    node_2 <- { node_2 with current = (let Type.RedBlackTree_Node a b c d e =  * node_2 in Type.RedBlackTree_Node ( ^ _31) b c d e) };
    r_30 <- ([#"../red_black_tree.rs" 720 16 720 42] delete_min_rec _31);
    goto BB21
  }
  BB21 {
    _33 <- borrow_mut ( * node_2);
    node_2 <- { node_2 with current = ( ^ _33) };
    _32 <- ([#"../red_black_tree.rs" 721 8 721 22] Balance0.balance _33);
    goto BB22
  }
  BB22 {
    assume { Resolve3.resolve node_2 };
    assume { Resolve4.resolve _0 };
    _0 <- r_30;
    goto BB23
  }
  BB23 {
    goto BB25
  }
  BB24 {
    assume { Resolve8.resolve node_10 };
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
module RedBlackTree_Impl16_DeleteMin_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Const
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val delete_min [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 725 15 725 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 726 14 726 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 727 4 727 83] result = Type.Core_Option_Option_None -> Model0.model ( ^ self) = Model0.model ( * self) /\ Model0.model ( * self) = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 728 4 731 48] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Type.Core_Option_Option_Some v /\ (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Type.Core_Option_Option_None \/ LeLog0.le_log (Model1.model k) k2) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl16_DeleteMin
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Const
  use map.Map
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl0_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color
  use mach.int.Int
  use mach.int.Int64
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = k
  clone RedBlackTree_Impl7_MatchT as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN1.match_n
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve5.resolve, predicate Resolve1.resolve = Resolve6.resolve
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl16_DeleteMinRec_Interface as DeleteMinRec0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t,
  function Height0.height = Height0.height, function Model0.model = Model1.model,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  function Color0.color = Color0.color, predicate MatchN0.match_n = MatchN0.match_n
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  let rec cfg delete_min [@cfg:stackify] [#"../red_black_tree.rs" 732 4 732 50] (self : borrowed (Type.redblacktree_tree k v)) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 725 15 725 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 726 14 726 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 727 4 727 83] result = Type.Core_Option_Option_None -> Model0.model ( ^ self) = Model0.model ( * self) /\ Model0.model ( * self) = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 728 4 731 48] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Type.Core_Option_Option_Some v /\ (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Type.Core_Option_Option_None \/ LeLog0.le_log (Model1.model k) k2) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Type.Core_Option_Option_None) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.core_option_option (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  ghost var old_self_2 : borrowed (Type.redblacktree_tree k v);
  var _3 : ();
  var _4 : ();
  var _5 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _6 : isize;
  var node_7 : borrowed (Type.redblacktree_node k v);
  var _8 : bool;
  var _9 : bool;
  var _10 : Type.redblacktree_tree k v;
  var _11 : Type.redblacktree_color;
  var _12 : ();
  var _13 : ();
  var r_14 : (k, v);
  var _15 : borrowed (Type.redblacktree_tree k v);
  var _16 : ();
  var _17 : bool;
  var _18 : Type.redblacktree_tree k v;
  var _19 : Type.redblacktree_color;
  var _20 : borrowed (Type.redblacktree_node k v);
  var _21 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _22 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  ghost var _23 : ();
  var _24 : ();
  var _25 : (k, v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 733 23 733 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _5 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _5)) };
    switch ( * _5)
      | Type.Core_Option_Option_Some _ -> goto BB2
      | _ -> goto BB7
      end
  }
  BB2 {
    node_7 <- borrow_mut (Type.core_option_option_Some_0 ( * _5));
    _5 <- { _5 with current = (let Type.Core_Option_Option_Some a =  * _5 in Type.Core_Option_Option_Some ( ^ node_7)) };
    assume { Resolve2.resolve _5 };
    _10 <- Type.redblacktree_node_Node_left ( * node_7);
    _9 <- ([#"../red_black_tree.rs" 735 16 735 34] IsRed0.is_red _10);
    goto BB3
  }
  BB3 {
    _8 <- not _9;
    switch (_8)
      | False -> goto BB5
      | _ -> goto BB4
      end
  }
  BB4 {
    _11 <- Type.RedBlackTree_Color_Red;
    node_7 <- { node_7 with current = (let Type.RedBlackTree_Node a b c d e =  * node_7 in Type.RedBlackTree_Node a _11 c d e) };
    assume { Resolve3.resolve node_7 };
    _4 <- ();
    goto BB6
  }
  BB5 {
    assume { Resolve3.resolve node_7 };
    _4 <- ();
    goto BB6
  }
  BB6 {
    assert { [#"../red_black_tree.rs" 741 24 741 53] SameMappings0.same_mappings ( * old_self_2) ( * self_1) };
    _13 <- ();
    _15 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _15) };
    r_14 <- ([#"../red_black_tree.rs" 742 16 742 37] DeleteMinRec0.delete_min_rec _15);
    goto BB8
  }
  BB7 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve _5 };
    _0 <- Type.Core_Option_Option_None;
    goto BB18
  }
  BB8 {
    _18 <-  * self_1;
    _17 <- ([#"../red_black_tree.rs" 743 11 743 24] IsRed0.is_red _18);
    goto BB9
  }
  BB9 {
    switch (_17)
      | False -> goto BB13
      | _ -> goto BB10
      end
  }
  BB10 {
    _19 <- Type.RedBlackTree_Color_Black;
    _22 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _22)) };
    _21 <- ([#"../red_black_tree.rs" 744 12 744 30] AsMut0.as_mut _22);
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    _20 <- ([#"../red_black_tree.rs" 744 12 744 39] Unwrap0.unwrap _21);
    goto BB12
  }
  BB12 {
    _20 <- { _20 with current = (let Type.RedBlackTree_Node a b c d e =  * _20 in Type.RedBlackTree_Node a _19 c d e) };
    assume { Resolve3.resolve _20 };
    _16 <- ();
    goto BB14
  }
  BB13 {
    assume { Resolve1.resolve self_1 };
    _16 <- ();
    goto BB14
  }
  BB14 {
    _24 <- ();
    _23 <- ghost ([#"../red_black_tree.rs" 746 8 746 42] ());
    goto BB15
  }
  BB15 {
    assume { Resolve4.resolve _25 };
    _25 <- r_14;
    _0 <- Type.Core_Option_Option_Some _25;
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Core_Option_Impl0_IsNone_Interface
  type t
  use Type
  use prelude.Prelude
  val is_none [@cfg:stackify] (self : Type.core_option_option t) : bool
    ensures { result = (self = Type.Core_Option_Option_None) }
    
end
module Core_Option_Impl0_IsNone
  type t
  use Type
  use prelude.Prelude
  val is_none [@cfg:stackify] (self : Type.core_option_option t) : bool
    ensures { result = (self = Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl16_DeleteRec_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  clone RedBlackTree_Impl6_MatchN_Interface as MatchN0 with type k = k, type v = v
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Height_Interface as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl7_MatchT_Interface as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl
  clone RedBlackTree_Impl6_MatchT_Interface as MatchT0 with type k = k, type v = v,
  predicate MatchN0.match_n = MatchN0.match_n, axiom .
  clone RedBlackTree_Impl12_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val delete_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 750 15 750 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 751 15 752 62] MatchT0.match_t (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( * self) \/ MatchT1.match_t (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 753 14 753 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 754 14 754 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 755 4 755 78] forall v : (v) . result = Type.Core_Option_Option_None -> not HasMapping0.has_mapping ( * self) (Model0.model key) v }
    ensures { [#"../red_black_tree.rs" 756 4 757 57] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Model0.model key = Model0.model k /\ HasMapping0.has_mapping ( * self) (Model0.model k) v }
    ensures { [#"../red_black_tree.rs" 758 4 758 114] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (Model0.model key <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 759 14 759 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 760 4 760 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    
end
module RedBlackTree_Impl16_DeleteRec
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone RedBlackTree_Impl3_Model as Model1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model1.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_HasMappingInj as HasMappingInj0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function HasMappingModel0.has_mapping_model = HasMappingModel0.has_mapping_model,
  function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl7_MatchT as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  use mach.int.Int
  use prelude.Int8
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl7_MatchN as MatchN3 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl,
  predicate MatchT0.match_t = MatchT1.match_t, predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN2 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl),
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl11_Height as Height1 with type k = k, type v = v, function Height0.height = Height0.height,
  axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant1 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl15_Balance_Interface as Balance0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Height0.height = Height1.height,
  predicate MatchN0.match_n = MatchN3.match_n, predicate MatchN1.match_n = MatchN0.match_n,
  predicate MatchN2.match_n = MatchN1.match_n, function Height1.height = Height0.height
  clone RedBlackTree_Impl15_MoveRedLeft_Interface as MoveRedLeft0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  predicate MatchN0.match_n = MatchN3.match_n, function Height0.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LeLog0.le_log = LeLog0.le_log,
  predicate MatchN1.match_n = MatchN1.match_n,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant, function Color0.color = Color0.color,
  function Height1.height = Height0.height, predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve12 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve6.resolve, predicate Resolve1.resolve = Resolve7.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve11 with type t = v
  clone Core_Mem_Swap_Interface as Swap1 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve10 with type t = k
  clone Core_Mem_Swap_Interface as Swap0 with type t = k
  clone RedBlackTree_Impl16_DeleteMinRec_Interface as DeleteMinRec0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t,
  function Height0.height = Height0.height, function Model0.model = Model0.model,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  function Color0.color = Color0.color, predicate MatchN0.match_n = MatchN0.match_n
  clone RedBlackTree_Impl15_MoveRedRight_Interface as MoveRedRight0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  predicate MatchN0.match_n = MatchN2.match_n, function Height0.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LeLog0.le_log = LeLog0.le_log,
  predicate MatchN1.match_n = MatchN1.match_n,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant, function Color0.color = Color0.color,
  function Height1.height = Height0.height, predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve9 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_IsNone_Interface as IsNone0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.core_option_option (k, v)
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  function Color0.color = Color0.color, predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  function Height0.height = Height1.height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, function Height1.height = Height0.height,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_tree k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model0.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Alloc_Boxed_Impl54_AsMut_Interface as AsMut1 with type t = Type.redblacktree_node k v,
  type a = Type.alloc_alloc_global
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  let rec cfg delete_rec [@cfg:stackify] [#"../red_black_tree.rs" 761 4 761 55] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 750 15 750 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 751 15 752 62] MatchT0.match_t (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( * self) \/ MatchT1.match_t (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 753 14 753 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 754 14 754 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 755 4 755 78] forall v : (v) . result = Type.Core_Option_Option_None -> not HasMapping0.has_mapping ( * self) (Model0.model key) v }
    ensures { [#"../red_black_tree.rs" 756 4 757 57] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Model0.model key = Model0.model k /\ HasMapping0.has_mapping ( * self) (Model0.model k) v }
    ensures { [#"../red_black_tree.rs" 758 4 758 114] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (Model0.model key <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 759 14 759 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 760 4 760 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.core_option_option (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var r_3 : Type.core_option_option (k, v);
  var node_4 : borrowed (Type.redblacktree_node k v);
  var _5 : borrowed (Type.redblacktree_node k v);
  var _6 : borrowed (Type.redblacktree_node k v);
  var _7 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _8 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _9 : ();
  var _10 : Type.core_cmp_ordering;
  var _11 : k;
  var _12 : k;
  var _13 : k;
  var _14 : int8;
  var _15 : ();
  var _16 : bool;
  var _17 : Type.core_option_option (Type.redblacktree_node k v);
  var _18 : ();
  var _19 : ();
  var _20 : bool;
  var _21 : bool;
  var _22 : bool;
  var _23 : Type.redblacktree_tree k v;
  var _24 : bool;
  var _25 : bool;
  var _26 : Type.redblacktree_tree k v;
  var _27 : Type.redblacktree_node k v;
  var _28 : Type.core_option_option (Type.redblacktree_node k v);
  var _29 : Type.core_option_option (Type.redblacktree_node k v);
  var _30 : borrowed (Type.redblacktree_node k v);
  var _31 : borrowed (Type.redblacktree_node k v);
  var _32 : borrowed (Type.redblacktree_node k v);
  var _33 : Type.core_option_option (k, v);
  var _34 : borrowed (Type.redblacktree_tree k v);
  var _35 : k;
  var ord_36 : Type.core_cmp_ordering;
  var _37 : bool;
  var _38 : Type.redblacktree_tree k v;
  var _39 : ();
  var _40 : borrowed (Type.redblacktree_node k v);
  var _41 : Type.core_option_option (k, v);
  var _42 : borrowed (Type.redblacktree_tree k v);
  var _43 : k;
  var _44 : ();
  var _45 : bool;
  var _46 : Type.core_option_option (Type.redblacktree_node k v);
  var _47 : ();
  var _48 : ();
  var _49 : int8;
  var _50 : ();
  var node_51 : Type.redblacktree_node k v;
  var _52 : Type.core_option_option (Type.redblacktree_node k v);
  var _53 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _54 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _55 : (k, v);
  var _56 : k;
  var _57 : v;
  var _58 : ();
  var _59 : bool;
  var _60 : bool;
  var _61 : Type.redblacktree_tree k v;
  var _62 : Type.redblacktree_node k v;
  var _63 : Type.core_option_option (Type.redblacktree_node k v);
  var _64 : Type.core_option_option (Type.redblacktree_node k v);
  var _65 : borrowed (Type.redblacktree_node k v);
  var _66 : borrowed (Type.redblacktree_node k v);
  var _67 : borrowed (Type.redblacktree_node k v);
  var _68 : int8;
  var kv_69 : (k, v);
  var _70 : borrowed (Type.redblacktree_tree k v);
  ghost var _71 : ();
  var _72 : ();
  var _73 : ();
  var _74 : borrowed k;
  var _75 : borrowed k;
  var _76 : borrowed k;
  var _77 : borrowed k;
  var _78 : ();
  var _79 : borrowed v;
  var _80 : borrowed v;
  var _81 : borrowed v;
  var _82 : borrowed v;
  var _83 : Type.core_option_option (k, v);
  var _84 : (k, v);
  var _85 : Type.core_option_option (k, v);
  var _86 : borrowed (Type.redblacktree_tree k v);
  var _87 : k;
  var _88 : ();
  var _89 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _8 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _8)) };
    _7 <- ([#"../red_black_tree.rs" 763 23 763 41] AsMut0.as_mut _8);
    goto BB1
  }
  BB1 {
    _6 <- ([#"../red_black_tree.rs" 763 23 763 50] Unwrap0.unwrap _7);
    goto BB2
  }
  BB2 {
    _5 <- borrow_mut ( * _6);
    _6 <- { _6 with current = ( ^ _5) };
    node_4 <- ([#"../red_black_tree.rs" 763 23 763 59] AsMut1.as_mut _5);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _6 };
    _11 <- key_2;
    _13 <- Type.redblacktree_node_Node_key ( * node_4);
    _12 <- _13;
    assume { Resolve1.resolve _13 };
    _10 <- ([#"../red_black_tree.rs" 764 14 764 32] Cmp0.cmp _11 _12);
    goto BB4
  }
  BB4 {
    switch (_10)
      | Type.Core_Cmp_Ordering_Less -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    ord_36 <- _10;
    _38 <- Type.redblacktree_node_Node_left ( * node_4);
    _37 <- ([#"../red_black_tree.rs" 775 19 775 37] IsRed0.is_red _38);
    goto BB24
  }
  BB6 {
    assume { Resolve2.resolve self_1 };
    _17 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_4));
    _16 <- ([#"../red_black_tree.rs" 766 19 766 43] IsNone0.is_none _17);
    goto BB7
  }
  BB7 {
    switch (_16)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve4.resolve node_4 };
    _0 <- Type.Core_Option_Option_None;
    goto BB67
  }
  BB9 {
    _15 <- ();
    _23 <- Type.redblacktree_node_Node_left ( * node_4);
    _22 <- ([#"../red_black_tree.rs" 769 20 769 38] IsRed0.is_red _23);
    goto BB13
  }
  BB10 {
    _20 <- false;
    goto BB12
  }
  BB11 {
    _29 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_4));
    _28 <- ([#"../red_black_tree.rs" 769 43 769 66] AsRef0.as_ref _29);
    goto BB14
  }
  BB12 {
    switch (_20)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    _21 <- not _22;
    switch (_21)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _27 <- ([#"../red_black_tree.rs" 769 43 769 75] Unwrap2.unwrap _28);
    goto BB15
  }
  BB15 {
    _26 <- Type.redblacktree_node_Node_left _27;
    assume { Resolve9.resolve _27 };
    _25 <- ([#"../red_black_tree.rs" 769 43 769 89] IsRed0.is_red _26);
    goto BB16
  }
  BB16 {
    _24 <- not _25;
    _20 <- _24;
    goto BB12
  }
  BB17 {
    _32 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _32) };
    _31 <- ([#"../red_black_tree.rs" 770 27 770 47] MoveRedLeft0.move_red_left _32);
    goto BB18
  }
  BB18 {
    assume { Resolve4.resolve node_4 };
    _30 <- borrow_mut ( * _31);
    _31 <- { _31 with current = ( ^ _30) };
    assume { Resolve4.resolve _31 };
    assume { Resolve4.resolve node_4 };
    node_4 <- _30;
    _19 <- ();
    goto BB20
  }
  BB19 {
    _19 <- ();
    goto BB20
  }
  BB20 {
    _34 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node ( ^ _34) b c d e) };
    _35 <- key_2;
    assume { Resolve1.resolve key_2 };
    _33 <- ([#"../red_black_tree.rs" 772 20 772 45] delete_rec _34 _35);
    goto BB21
  }
  BB21 {
    assume { Resolve3.resolve r_3 };
    r_3 <- _33;
    goto BB22
  }
  BB22 {
    _9 <- ();
    goto BB23
  }
  BB23 {
    goto BB62
  }
  BB24 {
    switch (_37)
      | False -> goto BB30
      | _ -> goto BB25
      end
  }
  BB25 {
    assume { Resolve2.resolve self_1 };
    _40 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _40) };
    _39 <- ([#"../red_black_tree.rs" 776 20 776 39] RotateRight0.rotate_right _40);
    goto BB26
  }
  BB26 {
    _42 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b c d ( ^ _42)) };
    _43 <- key_2;
    assume { Resolve1.resolve key_2 };
    _41 <- ([#"../red_black_tree.rs" 777 24 777 50] delete_rec _42 _43);
    goto BB27
  }
  BB27 {
    assume { Resolve3.resolve r_3 };
    r_3 <- _41;
    goto BB28
  }
  BB28 {
    _9 <- ();
    goto BB29
  }
  BB29 {
    goto BB61
  }
  BB30 {
    _46 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * node_4));
    _45 <- ([#"../red_black_tree.rs" 779 23 779 48] IsNone0.is_none _46);
    goto BB31
  }
  BB31 {
    switch (_45)
      | False -> goto BB40
      | _ -> goto BB32
      end
  }
  BB32 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve4.resolve node_4 };
    switch (ord_36)
      | Type.Core_Cmp_Ordering_Greater -> goto BB33
      | _ -> goto BB34
      end
  }
  BB33 {
    assume { Resolve2.resolve self_1 };
    _0 <- Type.Core_Option_Option_None;
    goto BB66
  }
  BB34 {
    _48 <- ();
    _54 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _54)) };
    assume { Resolve2.resolve self_1 };
    _53 <- borrow_mut ( * _54);
    _54 <- { _54 with current = ( ^ _53) };
    _52 <- ([#"../red_black_tree.rs" 783 35 783 65] Take0.take _53);
    goto BB35
  }
  BB35 {
    assume { Resolve5.resolve _54 };
    node_51 <- ([#"../red_black_tree.rs" 783 35 783 74] Unwrap1.unwrap _52);
    goto BB36
  }
  BB36 {
    assume { Resolve6.resolve _56 };
    _56 <- Type.redblacktree_node_Node_key node_51;
    assume { Resolve7.resolve _57 };
    _57 <- Type.redblacktree_node_Node_val node_51;
    _55 <- (_56, _57);
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    _0 <- Type.Core_Option_Option_Some _55;
    goto BB39
  }
  BB39 {
    goto BB65
  }
  BB40 {
    assume { Resolve2.resolve self_1 };
    _44 <- ();
    _64 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * node_4));
    _63 <- ([#"../red_black_tree.rs" 786 24 786 48] AsRef0.as_ref _64);
    goto BB41
  }
  BB41 {
    _62 <- ([#"../red_black_tree.rs" 786 24 786 57] Unwrap2.unwrap _63);
    goto BB42
  }
  BB42 {
    _61 <- Type.redblacktree_node_Node_left _62;
    assume { Resolve9.resolve _62 };
    _60 <- ([#"../red_black_tree.rs" 786 24 786 71] IsRed0.is_red _61);
    goto BB43
  }
  BB43 {
    _59 <- not _60;
    switch (_59)
      | False -> goto BB46
      | _ -> goto BB44
      end
  }
  BB44 {
    _67 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _67) };
    _66 <- ([#"../red_black_tree.rs" 787 31 787 52] MoveRedRight0.move_red_right _67);
    goto BB45
  }
  BB45 {
    assume { Resolve4.resolve node_4 };
    _65 <- borrow_mut ( * _66);
    _66 <- { _66 with current = ( ^ _65) };
    assume { Resolve4.resolve _66 };
    assume { Resolve4.resolve node_4 };
    node_4 <- _65;
    _58 <- ();
    goto BB47
  }
  BB46 {
    _58 <- ();
    goto BB47
  }
  BB47 {
    switch (ord_36)
      | Type.Core_Cmp_Ordering_Equal -> goto BB48
      | _ -> goto BB57
      end
  }
  BB48 {
    assume { Resolve1.resolve key_2 };
    _70 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b c d ( ^ _70)) };
    kv_69 <- ([#"../red_black_tree.rs" 790 37 790 64] DeleteMinRec0.delete_min_rec _70);
    goto BB49
  }
  BB49 {
    _72 <- ();
    _71 <- ghost ([#"../red_black_tree.rs" 791 24 791 56] ());
    goto BB50
  }
  BB50 {
    _75 <- borrow_mut (Type.redblacktree_node_Node_key ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b ( ^ _75) d e) };
    _74 <- borrow_mut ( * _75);
    _75 <- { _75 with current = ( ^ _74) };
    _77 <- borrow_mut (let (a, _) = kv_69 in a);
    kv_69 <- (let (a, b) = kv_69 in ( ^ _77, b));
    _76 <- borrow_mut ( * _77);
    _77 <- { _77 with current = ( ^ _76) };
    _73 <- ([#"../red_black_tree.rs" 792 24 792 64] Swap0.swap _74 _76);
    goto BB51
  }
  BB51 {
    assume { Resolve10.resolve _75 };
    assume { Resolve10.resolve _77 };
    _80 <- borrow_mut (Type.redblacktree_node_Node_val ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b c ( ^ _80) e) };
    _79 <- borrow_mut ( * _80);
    _80 <- { _80 with current = ( ^ _79) };
    _82 <- borrow_mut (let (_, a) = kv_69 in a);
    kv_69 <- (let (a, b) = kv_69 in (a,  ^ _82));
    _81 <- borrow_mut ( * _82);
    _82 <- { _82 with current = ( ^ _81) };
    _78 <- ([#"../red_black_tree.rs" 793 24 793 64] Swap1.swap _79 _81);
    goto BB52
  }
  BB52 {
    assume { Resolve11.resolve _80 };
    assume { Resolve11.resolve _82 };
    assume { Resolve12.resolve _84 };
    _84 <- kv_69;
    _83 <- Type.Core_Option_Option_Some _84;
    goto BB53
  }
  BB53 {
    assume { Resolve3.resolve r_3 };
    r_3 <- _83;
    goto BB54
  }
  BB54 {
    _9 <- ();
    goto BB55
  }
  BB55 {
    goto BB56
  }
  BB56 {
    goto BB61
  }
  BB57 {
    _86 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b c d ( ^ _86)) };
    _87 <- key_2;
    assume { Resolve1.resolve key_2 };
    _85 <- ([#"../red_black_tree.rs" 796 28 796 54] delete_rec _86 _87);
    goto BB58
  }
  BB58 {
    assume { Resolve3.resolve r_3 };
    r_3 <- _85;
    goto BB59
  }
  BB59 {
    _9 <- ();
    goto BB60
  }
  BB60 {
    goto BB61
  }
  BB61 {
    goto BB62
  }
  BB62 {
    _89 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _89) };
    _88 <- ([#"../red_black_tree.rs" 801 8 801 22] Balance0.balance _89);
    goto BB63
  }
  BB63 {
    assume { Resolve4.resolve node_4 };
    assume { Resolve3.resolve _0 };
    _0 <- r_3;
    goto BB64
  }
  BB64 {
    goto BB69
  }
  BB65 {
    assume { Resolve8.resolve node_51 };
    goto BB66
  }
  BB66 {
    goto BB67
  }
  BB67 {
    goto BB68
  }
  BB68 {
    goto BB69
  }
  BB69 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module RedBlackTree_Impl16_Delete_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val delete [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 805 15 805 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 806 14 806 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 807 14 807 63] (result = Type.Core_Option_Option_None) = (Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 808 4 809 46] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) /\ Model1.model k = Model1.model key -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some v }
    ensures { [#"../red_black_tree.rs" 810 14 810 49] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl16_Delete
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl3_ModelTy as ModelTy1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone CreusotContracts_Logic_Model_Impl1_Model as Model2 with type t = Type.redblacktree_tree k v,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color
  use mach.int.Int
  use mach.int.Int64
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl7_MatchT as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN1.match_n
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.core_option_option (k, v)
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl16_DeleteRec_Interface as DeleteRec0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t,
  function Height0.height = Height0.height, function Model0.model = Model1.model,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate MatchN0.match_n = MatchN0.match_n
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  let rec cfg delete [@cfg:stackify] [#"../red_black_tree.rs" 811 4 811 55] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 805 15 805 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 806 14 806 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 807 14 807 63] (result = Type.Core_Option_Option_None) = (Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 808 4 809 46] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) /\ Model1.model k = Model1.model key -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some v }
    ensures { [#"../red_black_tree.rs" 810 14 810 49] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_None) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.core_option_option (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  ghost var _3 : ();
  var _4 : ();
  ghost var old_self_5 : borrowed (Type.redblacktree_tree k v);
  var _6 : ();
  var _7 : ();
  var _8 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _9 : isize;
  var node_10 : borrowed (Type.redblacktree_node k v);
  var _11 : bool;
  var _12 : bool;
  var _13 : Type.redblacktree_tree k v;
  var _14 : Type.redblacktree_color;
  var _15 : ();
  var r_16 : Type.core_option_option (k, v);
  var _17 : borrowed (Type.redblacktree_tree k v);
  var _18 : k;
  var _19 : ();
  var _20 : ();
  var _21 : bool;
  var _22 : Type.redblacktree_tree k v;
  var _23 : Type.redblacktree_color;
  var _24 : borrowed (Type.redblacktree_node k v);
  var _25 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _26 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  ghost var _27 : ();
  var _28 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _4 <- ();
    _3 <- ghost ([#"../red_black_tree.rs" 812 8 812 42] ());
    goto BB1
  }
  BB1 {
    _6 <- ();
    old_self_5 <- ghost ([#"../red_black_tree.rs" 814 23 814 38] self_1);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve old_self_5 };
    _8 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _8)) };
    switch ( * _8)
      | Type.Core_Option_Option_Some _ -> goto BB3
      | _ -> goto BB8
      end
  }
  BB3 {
    node_10 <- borrow_mut (Type.core_option_option_Some_0 ( * _8));
    _8 <- { _8 with current = (let Type.Core_Option_Option_Some a =  * _8 in Type.Core_Option_Option_Some ( ^ node_10)) };
    assume { Resolve3.resolve _8 };
    _13 <- Type.redblacktree_node_Node_left ( * node_10);
    _12 <- ([#"../red_black_tree.rs" 816 16 816 34] IsRed0.is_red _13);
    goto BB4
  }
  BB4 {
    _11 <- not _12;
    switch (_11)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    _14 <- Type.RedBlackTree_Color_Red;
    node_10 <- { node_10 with current = (let Type.RedBlackTree_Node a b c d e =  * node_10 in Type.RedBlackTree_Node a _14 c d e) };
    assume { Resolve4.resolve node_10 };
    _7 <- ();
    goto BB7
  }
  BB6 {
    assume { Resolve4.resolve node_10 };
    _7 <- ();
    goto BB7
  }
  BB7 {
    _17 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _17) };
    _18 <- key_2;
    assume { Resolve2.resolve key_2 };
    r_16 <- ([#"../red_black_tree.rs" 822 16 822 36] DeleteRec0.delete_rec _17 _18);
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve key_2 };
    assume { Resolve3.resolve _8 };
    _0 <- Type.Core_Option_Option_None;
    goto BB18
  }
  BB9 {
    assert { [#"../red_black_tree.rs" 823 24 823 62] Model0.model ( * self_1) = Map.set (Model2.model old_self_5) (Model1.model key_2) (Type.Core_Option_Option_None) };
    _19 <- ();
    _22 <-  * self_1;
    _21 <- ([#"../red_black_tree.rs" 824 11 824 24] IsRed0.is_red _22);
    goto BB10
  }
  BB10 {
    switch (_21)
      | False -> goto BB14
      | _ -> goto BB11
      end
  }
  BB11 {
    _23 <- Type.RedBlackTree_Color_Black;
    _26 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _26)) };
    _25 <- ([#"../red_black_tree.rs" 825 12 825 30] AsMut0.as_mut _26);
    goto BB12
  }
  BB12 {
    assume { Resolve1.resolve self_1 };
    _24 <- ([#"../red_black_tree.rs" 825 12 825 39] Unwrap0.unwrap _25);
    goto BB13
  }
  BB13 {
    _24 <- { _24 with current = (let Type.RedBlackTree_Node a b c d e =  * _24 in Type.RedBlackTree_Node a _23 c d e) };
    assume { Resolve4.resolve _24 };
    _20 <- ();
    goto BB15
  }
  BB14 {
    assume { Resolve1.resolve self_1 };
    _20 <- ();
    goto BB15
  }
  BB15 {
    _28 <- ();
    _27 <- ghost ([#"../red_black_tree.rs" 827 8 827 55] match (r_16) with
      | Type.Core_Option_Option_None -> ()
      | Type.Core_Option_Option_Some _ -> ()
      end);
    goto BB16
  }
  BB16 {
    assume { Resolve5.resolve _0 };
    _0 <- r_16;
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module RedBlackTree_Impl16_Get_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get [@cfg:stackify] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
    requires {[#"../red_black_tree.rs" 831 15 831 34] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 832 4 832 83] forall v : (v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v }
    ensures { [#"../red_black_tree.rs" 833 4 833 62] result = Type.Core_Option_Option_None -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None }
    
end
module RedBlackTree_Impl16_Get
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color
  use mach.int.Int
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.redblacktree_node k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  let rec cfg get [@cfg:stackify] [#"../red_black_tree.rs" 834 4 834 44] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
    requires {[#"../red_black_tree.rs" 831 15 831 34] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 832 4 832 83] forall v : (v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v }
    ensures { [#"../red_black_tree.rs" 833 4 833 62] result = Type.Core_Option_Option_None -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.core_option_option v;
  var self_1 : Type.redblacktree_tree k v;
  var key_2 : k;
  var _3 : ();
  ghost var _4 : ();
  var _5 : ();
  var tree_6 : Type.redblacktree_tree k v;
  var _7 : ();
  var _8 : ();
  var _9 : Type.core_option_option (Type.redblacktree_node k v);
  var _10 : isize;
  var node_11 : Type.redblacktree_node k v;
  var _12 : Type.core_cmp_ordering;
  var _13 : k;
  var _14 : k;
  var _15 : k;
  var _16 : int8;
  var _17 : Type.redblacktree_tree k v;
  var _18 : Type.redblacktree_tree k v;
  var _19 : ();
  var _20 : v;
  var _21 : v;
  var _22 : Type.redblacktree_tree k v;
  var _23 : Type.redblacktree_tree k v;
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _5 <- ();
    _4 <- ghost ([#"../red_black_tree.rs" 835 8 835 42] ());
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve tree_6 };
    tree_6 <- self_1;
    assume { Resolve0.resolve self_1 };
    goto BB2
  }
  BB2 {
    invariant bst_inv { [#"../red_black_tree.rs" 838 29 838 52] BstInvariant0.bst_invariant tree_6 };
    invariant has_mapping { [#"../red_black_tree.rs" 838 8 838 54] forall v : (v) . HasMapping0.has_mapping self_1 (Model1.model key_2) v = HasMapping0.has_mapping tree_6 (Model1.model key_2) v };
    _9 <- Type.redblacktree_tree_Tree_node tree_6;
    assume { Resolve0.resolve tree_6 };
    switch (_9)
      | Type.Core_Option_Option_Some _ -> goto BB3
      | _ -> goto BB10
      end
  }
  BB3 {
    node_11 <- Type.core_option_option_Some_0 _9;
    assume { Resolve2.resolve _9 };
    _13 <- key_2;
    _15 <- Type.redblacktree_node_Node_key node_11;
    _14 <- _15;
    assume { Resolve1.resolve _15 };
    _12 <- ([#"../red_black_tree.rs" 841 18 841 36] Cmp0.cmp _13 _14);
    goto BB4
  }
  BB4 {
    switch (_12)
      | Type.Core_Cmp_Ordering_Less -> goto BB7
      | Type.Core_Cmp_Ordering_Equal -> goto BB8
      | Type.Core_Cmp_Ordering_Greater -> goto BB5
      end
  }
  BB5 {
    _23 <- Type.redblacktree_node_Node_right node_11;
    assume { Resolve3.resolve node_11 };
    _22 <- _23;
    assume { Resolve0.resolve _23 };
    assume { Resolve0.resolve tree_6 };
    tree_6 <- _22;
    _8 <- ();
    goto BB9
  }
  BB6 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_11 };
    absurd
  }
  BB7 {
    _18 <- Type.redblacktree_node_Node_left node_11;
    assume { Resolve3.resolve node_11 };
    _17 <- _18;
    assume { Resolve0.resolve _18 };
    assume { Resolve0.resolve tree_6 };
    tree_6 <- _17;
    _8 <- ();
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve key_2 };
    _21 <- Type.redblacktree_node_Node_val node_11;
    assume { Resolve3.resolve node_11 };
    _20 <- _21;
    assume { Resolve4.resolve _21 };
    _0 <- Type.Core_Option_Option_Some _20;
    goto BB11
  }
  BB9 {
    goto BB2
  }
  BB10 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _9 };
    _7 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module RedBlackTree_Impl16_GetMut_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get_mut [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    requires {[#"../red_black_tree.rs" 850 15 850 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 851 14 851 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 852 4 853 89] forall v : (borrowed v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some ( * v) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model2.model key) (Type.Core_Option_Option_Some ( ^ v)) }
    ensures { [#"../red_black_tree.rs" 854 4 854 93] result = Type.Core_Option_Option_None -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None /\ Map.get (Model0.model ( ^ self)) (Model1.model key) = Type.Core_Option_Option_None }
    
end
module RedBlackTree_Impl16_GetMut
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color
  use mach.int.Int
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_tree k v
  let rec cfg get_mut [@cfg:stackify] [#"../red_black_tree.rs" 855 4 855 56] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    requires {[#"../red_black_tree.rs" 850 15 850 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 851 14 851 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 852 4 853 89] forall v : (borrowed v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some ( * v) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model2.model key) (Type.Core_Option_Option_Some ( ^ v)) }
    ensures { [#"../red_black_tree.rs" 854 4 854 93] result = Type.Core_Option_Option_None -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None /\ Map.get (Model0.model ( ^ self)) (Model1.model key) = Type.Core_Option_Option_None }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.core_option_option (borrowed v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var _3 : ();
  ghost var _4 : ();
  var _5 : ();
  var tree_6 : borrowed (Type.redblacktree_tree k v);
  var _7 : ();
  var _8 : ();
  var _9 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _10 : isize;
  var node_11 : borrowed (Type.redblacktree_node k v);
  var _12 : Type.core_cmp_ordering;
  var _13 : k;
  var _14 : k;
  var _15 : k;
  var _16 : int8;
  var _17 : borrowed (Type.redblacktree_tree k v);
  var _18 : borrowed (Type.redblacktree_tree k v);
  var _19 : ();
  var _20 : borrowed v;
  var _21 : borrowed v;
  var _22 : borrowed (Type.redblacktree_tree k v);
  var _23 : borrowed (Type.redblacktree_tree k v);
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _5 <- ();
    _4 <- ghost ([#"../red_black_tree.rs" 856 8 856 42] ());
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve tree_6 };
    tree_6 <- self_1;
    goto BB2
  }
  BB2 {
    invariant bst_inv { [#"../red_black_tree.rs" 860 29 860 52] BstInvariant0.bst_invariant ( * tree_6) };
    invariant height_inv { [#"../red_black_tree.rs" 861 32 861 58] HeightInvariant0.height_invariant ( * tree_6) };
    invariant color_inv { [#"../red_black_tree.rs" 862 31 862 56] ColorInvariant0.color_invariant ( * tree_6) };
    invariant mapping_prof_key { [#"../red_black_tree.rs" 860 8 860 54] forall v : (v) . HasMapping0.has_mapping ( ^ tree_6) (Model2.model key_2) v = HasMapping0.has_mapping ( ^ self_1) (Model2.model key_2) v };
    invariant mapping_cur_key { [#"../red_black_tree.rs" 860 8 860 54] forall v : (v) . HasMapping0.has_mapping ( * tree_6) (Model2.model key_2) v = HasMapping0.has_mapping ( * self_1) (Model2.model key_2) v };
    invariant bst_inv_proph { [#"../red_black_tree.rs" 860 8 860 54] (forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model2.model key_2 \/ HasMapping0.has_mapping ( * tree_6) k v = HasMapping0.has_mapping ( ^ tree_6) k v) -> BstInvariant0.bst_invariant ( ^ tree_6) -> BstInvariant0.bst_invariant ( ^ self_1) };
    invariant height_inv_proph { [#"../red_black_tree.rs" 860 8 860 54] Height0.height ( * tree_6) = Height0.height ( ^ tree_6) /\ HeightInvariant0.height_invariant ( ^ tree_6) -> HeightInvariant0.height_invariant ( ^ self_1) };
    invariant color_inv_proph { [#"../red_black_tree.rs" 860 8 860 54] MatchT0.match_t (Type.RedBlackTree_Cpl (Color0.color ( * tree_6))) ( ^ tree_6) -> MatchT0.match_t (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) ( ^ self_1) };
    invariant mapping_proph { [#"../red_black_tree.rs" 860 8 860 54] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * tree_6) k v = HasMapping0.has_mapping ( ^ tree_6) k v -> HasMapping0.has_mapping ( * self_1) k v = HasMapping0.has_mapping ( ^ self_1) k v };
    _9 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * tree_6));
    tree_6 <- { tree_6 with current = (let Type.RedBlackTree_Tree a =  * tree_6 in Type.RedBlackTree_Tree ( ^ _9)) };
    assume { Resolve0.resolve tree_6 };
    switch ( * _9)
      | Type.Core_Option_Option_Some _ -> goto BB3
      | _ -> goto BB10
      end
  }
  BB3 {
    node_11 <- borrow_mut (Type.core_option_option_Some_0 ( * _9));
    _9 <- { _9 with current = (let Type.Core_Option_Option_Some a =  * _9 in Type.Core_Option_Option_Some ( ^ node_11)) };
    assume { Resolve2.resolve _9 };
    _13 <- key_2;
    _15 <- Type.redblacktree_node_Node_key ( * node_11);
    _14 <- _15;
    assume { Resolve1.resolve _15 };
    _12 <- ([#"../red_black_tree.rs" 875 18 875 36] Cmp0.cmp _13 _14);
    goto BB4
  }
  BB4 {
    switch (_12)
      | Type.Core_Cmp_Ordering_Less -> goto BB7
      | Type.Core_Cmp_Ordering_Equal -> goto BB8
      | Type.Core_Cmp_Ordering_Greater -> goto BB5
      end
  }
  BB5 {
    _23 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_11));
    node_11 <- { node_11 with current = (let Type.RedBlackTree_Node a b c d e =  * node_11 in Type.RedBlackTree_Node a b c d ( ^ _23)) };
    assume { Resolve3.resolve node_11 };
    _22 <- borrow_mut ( * _23);
    _23 <- { _23 with current = ( ^ _22) };
    assume { Resolve0.resolve _23 };
    assume { Resolve0.resolve tree_6 };
    tree_6 <- _22;
    _8 <- ();
    goto BB9
  }
  BB6 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_11 };
    absurd
  }
  BB7 {
    _18 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_11));
    node_11 <- { node_11 with current = (let Type.RedBlackTree_Node a b c d e =  * node_11 in Type.RedBlackTree_Node ( ^ _18) b c d e) };
    assume { Resolve3.resolve node_11 };
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    assume { Resolve0.resolve _18 };
    assume { Resolve0.resolve tree_6 };
    tree_6 <- _17;
    _8 <- ();
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve key_2 };
    _21 <- borrow_mut (Type.redblacktree_node_Node_val ( * node_11));
    node_11 <- { node_11 with current = (let Type.RedBlackTree_Node a b c d e =  * node_11 in Type.RedBlackTree_Node a b c ( ^ _21) e) };
    assume { Resolve3.resolve node_11 };
    _20 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _20) };
    _0 <- Type.Core_Option_Option_Some _20;
    assume { Resolve4.resolve _21 };
    goto BB11
  }
  BB9 {
    goto BB2
  }
  BB10 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _9 };
    _7 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module RedBlackTree_Impl17
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.redblacktree_color
  clone RedBlackTree_Impl17_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.redblacktree_color, val clone' = Clone0.clone'
end
module RedBlackTree_Impl18
  
end
module RedBlackTree_Impl2_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl2
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model3.model
  clone RedBlackTree_Impl3_Model as Model2 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl2_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model, function Model1.model = Model3.model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.redblacktree_node k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.redblacktree_node k v,
  type modelTy = ModelTy0.modelTy
end
