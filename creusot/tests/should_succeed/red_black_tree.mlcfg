module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type redblacktree_color  =
    | RedBlackTree_Color_Red
    | RedBlackTree_Color_Black
    
  type redblacktree_cpl  =
    | RedBlackTree_Cpl (redblacktree_color)
    
  let function redblacktree_cpl_CPL_0 (self : redblacktree_cpl) : redblacktree_color = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Cpl a -> a
      end
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type redblacktree_tree 'k 'v =
    | RedBlackTree_Tree (core_option_option (redblacktree_node 'k 'v))
    with redblacktree_node 'k 'v =
    | RedBlackTree_Node (redblacktree_tree 'k 'v) (redblacktree_color) 'k 'v (redblacktree_tree 'k 'v)
    
  let function redblacktree_tree_Tree_node (self : redblacktree_tree 'k 'v) : core_option_option (redblacktree_node 'k 'v)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Tree a -> a
      end
  let function redblacktree_node_Node_color (self : redblacktree_node 'k 'v) : redblacktree_color
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node _ a _ _ _ -> a
      end
  let function redblacktree_node_Node_right (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node _ _ _ _ a -> a
      end
  let function redblacktree_node_Node_left (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node a _ _ _ _ -> a
      end
  let function redblacktree_node_Node_key (self : redblacktree_node 'k 'v) : 'k = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node _ _ a _ _ -> a
      end
  let function redblacktree_node_Node_val (self : redblacktree_node 'k 'v) : 'v = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node _ _ _ a _ -> a
      end
  type redblacktree_cpn 'l 'r =
    | RedBlackTree_Cpn (redblacktree_color) 'l 'r
    
  let function redblacktree_cpn_CPN_0 (self : redblacktree_cpn 'l 'r) : redblacktree_color
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Cpn a _ _ -> a
      end
  let function redblacktree_cpn_CPN_1 (self : redblacktree_cpn 'l 'r) : 'l = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Cpn _ a _ -> a
      end
  let function redblacktree_cpn_CPN_2 (self : redblacktree_cpn 'l 'r) : 'r = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Cpn _ _ a -> a
      end
  type core_cmp_ordering  =
    | Core_Cmp_Ordering_Less
    | Core_Cmp_Ordering_Equal
    | Core_Cmp_Ordering_Greater
    
end
module RedBlackTree_Impl16_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color
    ensures { [#"../red_black_tree.rs" 8 9 8 14] result = self }
    
end
module RedBlackTree_Impl16_Clone
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  let rec cfg clone' [@cfg:stackify] [#"../red_black_tree.rs" 8 9 8 14] (self : Type.redblacktree_color) : Type.redblacktree_color
    ensures { [#"../red_black_tree.rs" 8 9 8 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.redblacktree_color;
  var self_1 : Type.redblacktree_color;
  var _2 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Type.RedBlackTree_Color_Red -> goto BB3
      | Type.RedBlackTree_Color_Black -> goto BB1
      end
  }
  BB1 {
    _0 <- Type.RedBlackTree_Color_Black;
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- Type.RedBlackTree_Color_Red;
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module RedBlackTree_Impl8_Color_Interface
  type k
  type v
  use Type
  function color (self : Type.redblacktree_tree k v) : Type.redblacktree_color
end
module RedBlackTree_Impl8_Color
  type k
  type v
  use Type
  function color [#"../red_black_tree.rs" 273 4 273 27] (self : Type.redblacktree_tree k v) : Type.redblacktree_color =
    [#"../red_black_tree.rs" 275 12 278 13] match (Type.redblacktree_tree_Tree_node self) with
      | Type.Core_Option_Option_Some (Type.RedBlackTree_Node _ color _ _ _) -> color
      | _ -> Type.RedBlackTree_Color_Black
      end
end
module RedBlackTree_Impl9_ColorInvariantHere_Interface
  type k
  type v
  use Type
  predicate color_invariant_here [@inline:trivial] (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl9_ColorInvariantHere
  type k
  type v
  use Type
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  predicate color_invariant_here [@inline:trivial] [#"../red_black_tree.rs" 299 4 299 41] (self : Type.redblacktree_node k v)
    
   =
    [#"../red_black_tree.rs" 300 20 300 102] Color0.color (Type.redblacktree_node_Node_right self) = Type.RedBlackTree_Color_Black /\ (Type.redblacktree_node_Node_color self = Type.RedBlackTree_Color_Black \/ Color0.color (Type.redblacktree_node_Node_left self) = Type.RedBlackTree_Color_Black)
end
module RedBlackTree_Impl8_ColorInvariant_Interface
  type k
  type v
  use Type
  predicate color_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl8_ColorInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl9_ColorInvariantHere_Interface as ColorInvariantHere0 with type k = k, type v = v
  predicate color_invariant [#"../red_black_tree.rs" 283 4 283 36] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 285 12 291 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> true
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left _ _ _ right = node in ColorInvariantHere0.color_invariant_here node /\ color_invariant left /\ color_invariant right
      end
end
module RedBlackTree_Impl9_ColorInvariant_Interface
  type k
  type v
  use Type
  predicate color_invariant [@inline:trivial] (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl9_ColorInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere_Interface as ColorInvariantHere0 with type k = k, type v = v
  predicate color_invariant [@inline:trivial] [#"../red_black_tree.rs" 305 4 305 36] (self : Type.redblacktree_node k v)
   =
    [#"../red_black_tree.rs" 306 8 306 112] ColorInvariantHere0.color_invariant_here self /\ ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left self) /\ ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl0_MatchN_Interface
  type k
  type v
  use Type
  predicate match_n [@inline:trivial] (self : Type.redblacktree_cpl) (node : Type.redblacktree_node k v)
end
module RedBlackTree_Impl0_MatchN
  type k
  type v
  use Type
  clone RedBlackTree_Impl9_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  predicate match_n [@inline:trivial] [#"../red_black_tree.rs" 53 4 53 46] (self : Type.redblacktree_cpl) (node : Type.redblacktree_node k v)
    
   =
    [#"../red_black_tree.rs" 55 12 55 58] Type.redblacktree_node_Node_color node = Type.redblacktree_cpl_CPL_0 self /\ ColorInvariant0.color_invariant node
end
module RedBlackTree_Impl0_MatchT_Interface
  type k
  type v
  use Type
  clone RedBlackTree_Impl0_MatchN_Interface as MatchN0 with type k = k, type v = v
  predicate match_t [@inline:trivial] (self : Type.redblacktree_cpl) (tree : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl0_MatchT
  type k
  type v
  use Type
  clone RedBlackTree_Impl0_MatchN_Interface as MatchN0 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  predicate match_t [@inline:trivial] [#"../red_black_tree.rs" 45 4 45 46] (self : Type.redblacktree_cpl) (tree : Type.redblacktree_tree k v)
    
   =
    [#"../red_black_tree.rs" 47 12 47 60] Color0.color tree = Type.redblacktree_cpl_CPL_0 self /\ ColorInvariant0.color_invariant tree
  axiom match_t_spec : forall self : Type.redblacktree_cpl, tree : Type.redblacktree_tree k v . ([#"../red_black_tree.rs" 41 4 44 43] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Black -> match_t self tree = (forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node -> MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) node)) && ([#"../red_black_tree.rs" 36 4 40 44] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Black -> match_t self tree = (Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_None \/ (exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node /\ MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) node))) && ([#"../red_black_tree.rs" 31 4 35 41] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Red -> match_t self tree = (Type.redblacktree_tree_Tree_node tree <> Type.Core_Option_Option_None /\ (forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node -> MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) node))) && ([#"../red_black_tree.rs" 27 4 30 41] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Red -> match_t self tree = (exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node /\ MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) node))
end
module RedBlackTree_Impl0_MatchT_Impl
  type k
  type v
  use Type
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl0_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  let rec ghost function match_t [@inline:trivial] (self : Type.redblacktree_cpl) (tree : Type.redblacktree_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 27 4 30 41] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Red -> result = (exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node /\ MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) node) }
    ensures { [#"../red_black_tree.rs" 31 4 35 41] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Red -> result = (Type.redblacktree_tree_Tree_node tree <> Type.Core_Option_Option_None /\ (forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node -> MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) node)) }
    ensures { [#"../red_black_tree.rs" 36 4 40 44] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Black -> result = (Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_None \/ (exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node /\ MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) node)) }
    ensures { [#"../red_black_tree.rs" 41 4 44 43] Type.redblacktree_cpl_CPL_0 self = Type.RedBlackTree_Color_Black -> result = (forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node -> MatchN0.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) node) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 47 12 47 60] (let b = Type.redblacktree_cpl_CPL_0 self in let a = Color0.color tree in pure {a = b}) && ColorInvariant0.color_invariant tree
end
module RedBlackTree_Cp_MatchT_Interface
  type self
  type k
  type v
  use Type
  predicate match_t (self : self) (tree : Type.redblacktree_tree k v)
end
module RedBlackTree_Cp_MatchT
  type self
  type k
  type v
  use Type
  predicate match_t [#"../red_black_tree.rs" 17 4 17 47] (self : self) (tree : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl1_MatchN_Interface
  type k
  type v
  type l
  type r
  use Type
  predicate match_n [@inline:trivial] (self : Type.redblacktree_cpn l r) (node : Type.redblacktree_node k v)
end
module RedBlackTree_Impl1_MatchN
  type k
  type v
  type l
  type r
  use Type
  clone RedBlackTree_Cp_MatchT_Interface as MatchT1 with type self = r, type k = k, type v = v
  clone RedBlackTree_Cp_MatchT_Interface as MatchT0 with type self = l, type k = k, type v = v
  predicate match_n [@inline:trivial] [#"../red_black_tree.rs" 73 4 73 46] (self : Type.redblacktree_cpn l r) (node : Type.redblacktree_node k v)
    
   =
    [#"../red_black_tree.rs" 74 8 76 9] Type.redblacktree_node_Node_color node = Type.redblacktree_cpn_CPN_0 self /\ MatchT0.match_t (Type.redblacktree_cpn_CPN_1 self) (Type.redblacktree_node_Node_left node) /\ MatchT1.match_t (Type.redblacktree_cpn_CPN_2 self) (Type.redblacktree_node_Node_right node)
end
module RedBlackTree_Impl1_MatchT_Interface
  type k
  type v
  type l
  type r
  use Type
  predicate match_t [@inline:trivial] (self : Type.redblacktree_cpn l r) (tree : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl1_MatchT
  type k
  type v
  type l
  type r
  use Type
  clone RedBlackTree_Impl1_MatchN_Interface as MatchN0 with type k = k, type v = v, type l = l, type r = r
  predicate match_t [@inline:trivial] [#"../red_black_tree.rs" 64 4 64 46] (self : Type.redblacktree_cpn l r) (tree : Type.redblacktree_tree k v)
    
   =
    [#"../red_black_tree.rs" 65 8 68 9] exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node /\ MatchN0.match_n self node
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module RedBlackTree_Impl2_HasMapping_Interface
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  predicate has_mapping (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v)
end
module RedBlackTree_Impl2_HasMapping
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate has_mapping [#"../red_black_tree.rs" 96 4 96 53] (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v)
    
   =
    [#"../red_black_tree.rs" 98 12 102 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> false
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> has_mapping left k v \/ has_mapping right k v \/ k = Model0.model key /\ v = val'
      end
end
module RedBlackTree_Impl2_SameMappings_Interface
  type k
  type v
  use Type
  predicate same_mappings (self : Type.redblacktree_tree k v) (o : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl2_SameMappings
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl2_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate same_mappings [#"../red_black_tree.rs" 107 4 107 43] (self : Type.redblacktree_tree k v) (o : Type.redblacktree_tree k v)
    
   =
    [#"../red_black_tree.rs" 108 8 110 9] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping self k v = HasMapping0.has_mapping o k v
end
module RedBlackTree_Impl2_ModelAcc_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
end
module RedBlackTree_Impl2_ModelAcc
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc [#"../red_black_tree.rs" 114 4 114 82] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 116 12 123 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> accu
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let accu1 = model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in model_acc right accu2
      end
end
module RedBlackTree_Impl2_ModelAccHasMapping_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl2_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_has_mapping (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl2_ModelAccHasMapping
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl2_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_has_mapping [#"../red_black_tree.rs" 130 4 130 81] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 132 12 140 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in model_acc_has_mapping right accu2 k
      end
  axiom model_acc_has_mapping_spec : forall self : Type.redblacktree_tree k v, accu : Map.map ModelTy0.modelTy (Type.core_option_option v), k : ModelTy0.modelTy . [#"../red_black_tree.rs" 128 4 129 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k \/ (exists v : (v) . Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v /\ HasMapping0.has_mapping self k v)
end
module RedBlackTree_Impl2_ModelAccHasMapping_Impl
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl2_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  let rec ghost function model_acc_has_mapping (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    ensures { [#"../red_black_tree.rs" 128 4 129 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k \/ (exists v : (v) . Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v /\ HasMapping0.has_mapping self k v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 132 12 140 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model0.model key in Map.set accu1 b' (Type.Core_Option_Option_Some val') in model_acc_has_mapping right accu2 k
      end
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Less
end
module RedBlackTree_Impl6_BstInvariantHere_Interface
  type k
  type v
  use Type
  predicate bst_invariant_here (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl6_BstInvariantHere
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate bst_invariant_here [#"../red_black_tree.rs" 236 4 236 39] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 238 12 239 88] (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_left self) k v -> LtLog0.lt_log k (Model0.model (Type.redblacktree_node_Node_key self))) /\ (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_right self) k v -> LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key self)) k)
end
module RedBlackTree_Impl7_BstInvariant_Interface
  type k
  type v
  use Type
  predicate bst_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl7_BstInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl6_BstInvariantHere_Interface as BstInvariantHere0 with type k = k, type v = v
  predicate bst_invariant [#"../red_black_tree.rs" 256 4 256 34] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 258 12 264 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> true
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left _ _ _ right = node in BstInvariantHere0.bst_invariant_here node /\ bst_invariant left /\ bst_invariant right
      end
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Type.Core_Cmp_Ordering_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Type.core_cmp_ordering . CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (x = y) = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Equal)
end
module RedBlackTree_Impl2_HasMappingModelAcc_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl2_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl7_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl2_HasMappingModelAcc
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl2_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl7_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_ModelAccHasMapping_Interface as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_model_acc [#"../red_black_tree.rs" 147 4 149 29] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 152 12 161 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
  axiom has_mapping_model_acc_spec : forall self : Type.redblacktree_tree k v, accu : Map.map ModelTy0.modelTy (Type.core_option_option v), k : ModelTy0.modelTy . ([#"../red_black_tree.rs" 145 15 145 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 146 4 146 94] forall v : (v) . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v)
end
module RedBlackTree_Impl2_HasMappingModelAcc_Impl
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl2_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model, axiom .
  let rec ghost function has_mapping_model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    requires {[#"../red_black_tree.rs" 145 15 145 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 146 4 146 94] forall v : (v) . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 152 12 161 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model0.model key in Map.set accu1 b' (Type.Core_Option_Option_Some val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
end
module RedBlackTree_Impl5_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.redblacktree_tree k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl5_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  use map.Const
  clone RedBlackTree_Impl2_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../red_black_tree.rs" 224 4 224 35] (self : Type.redblacktree_tree k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 225 20 225 54] ModelAcc0.model_acc self (Const.const (Type.Core_Option_Option_None))
end
module RedBlackTree_Impl5_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl5
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl2_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl5_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl5_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.redblacktree_tree k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.redblacktree_tree k v,
  type modelTy = ModelTy0.modelTy
end
module RedBlackTree_Impl2_HasMappingModel_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl5_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl7_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_model (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) : ()
end
module RedBlackTree_Impl2_HasMappingModel
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl5_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl7_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  use map.Const
  clone RedBlackTree_Impl2_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_ModelAccHasMapping_Interface as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone RedBlackTree_Impl2_HasMappingModelAcc_Interface as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_model [#"../red_black_tree.rs" 168 4 170 29] (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 173 12 173 61] let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Type.Core_Option_Option_None)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Type.Core_Option_Option_None)) k
  axiom has_mapping_model_spec : forall self : Type.redblacktree_tree k v, k : ModelTy0.modelTy . ([#"../red_black_tree.rs" 166 15 166 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 167 4 167 82] forall v : (v) . HasMapping0.has_mapping self k v = (Map.get (Model0.model self) k = Type.Core_Option_Option_Some v))
end
module RedBlackTree_Impl2_HasMappingModel_Impl
  type k
  type v
  use map.Map
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl5_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl2_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl2_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  let rec ghost function has_mapping_model (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) : ()
    requires {[#"../red_black_tree.rs" 166 15 166 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 167 4 167 82] forall v : (v) . HasMapping0.has_mapping self k v = (Map.get (Model0.model self) k = Type.Core_Option_Option_Some v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 173 12 173 61] let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Type.Core_Option_Option_None)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Type.Core_Option_Option_None)) k
end
module RedBlackTree_Impl2_HasMappingInj_Interface
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl2_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl7_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_inj (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
end
module RedBlackTree_Impl2_HasMappingInj
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl2_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl7_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  use map.Map
  clone RedBlackTree_Impl5_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMappingModel_Interface as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_inj [#"../red_black_tree.rs" 183 4 185 29] (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
    
   =
    [#"../red_black_tree.rs" 188 12 188 37] let _ = HasMappingModel0.has_mapping_model self k in match (Map.get (Model0.model self) k) with
      | Type.Core_Option_Option_None -> ()
      | Type.Core_Option_Option_Some _v -> ()
      end
  axiom has_mapping_inj_spec : forall self : Type.redblacktree_tree k v, k : ModelTy0.modelTy, v1 : v, v2 : v . ([#"../red_black_tree.rs" 179 15 179 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 180 15 180 38] HasMapping0.has_mapping self k v1) -> ([#"../red_black_tree.rs" 181 15 181 38] HasMapping0.has_mapping self k v2) -> ([#"../red_black_tree.rs" 182 14 182 22] v1 = v2)
end
module RedBlackTree_Impl2_HasMappingInj_Impl
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl5_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl2_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl2_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl2_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  let rec ghost function has_mapping_inj (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
    requires {[#"../red_black_tree.rs" 179 15 179 35] BstInvariant0.bst_invariant self}
    requires {[#"../red_black_tree.rs" 180 15 180 38] HasMapping0.has_mapping self k v1}
    requires {[#"../red_black_tree.rs" 181 15 181 38] HasMapping0.has_mapping self k v2}
    ensures { [#"../red_black_tree.rs" 182 14 182 22] v1 = v2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 188 12 188 37] let _ = HasMappingModel0.has_mapping_model self k in match (let a' = Model0.model self in Map.get a' k) with
      | Type.Core_Option_Option_None -> ()
      | Type.Core_Option_Option_Some _v -> ()
      end
end
module RedBlackTree_Impl3_SameMappings_Interface
  type k
  type v
  use Type
  predicate same_mappings (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v)
end
module RedBlackTree_Impl3_SameMappings
  type k
  type v
  use Type
  clone RedBlackTree_Impl2_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  predicate same_mappings [#"../red_black_tree.rs" 199 4 199 43] (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v)
    
   =
    [#"../red_black_tree.rs" 200 8 205 9] forall ot : (Type.redblacktree_tree k v) . forall st : (Type.redblacktree_tree k v) . match (st) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some x) -> self = x
      | _ -> false
      end /\ match (ot) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some x) -> o = x
      | _ -> false
      end -> SameMappings0.same_mappings st ot
end
module RedBlackTree_Impl4_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.redblacktree_node k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl4_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl2_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../red_black_tree.rs" 213 4 213 35] (self : Type.redblacktree_node k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 214 8 216 9] ModelAcc0.model_acc (Type.redblacktree_node_Node_right self) (Map.set (Model0.model (Type.redblacktree_node_Node_left self)) (Model1.model (Type.redblacktree_node_Node_key self)) (Type.Core_Option_Option_Some (Type.redblacktree_node_Node_val self)))
end
module RedBlackTree_Impl6_BstInvariant_Interface
  type k
  type v
  use Type
  predicate bst_invariant (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl6_BstInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl7_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_BstInvariantHere_Interface as BstInvariantHere0 with type k = k, type v = v
  predicate bst_invariant [#"../red_black_tree.rs" 244 4 244 34] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 245 8 247 9] BstInvariantHere0.bst_invariant_here self /\ BstInvariant0.bst_invariant (Type.redblacktree_node_Node_left self) /\ BstInvariant0.bst_invariant (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl11_HasHeightRec_Interface
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  predicate has_height_rec (self : Type.redblacktree_tree k v) (h : int)
end
module RedBlackTree_Impl11_HasHeightRec
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  predicate has_height_rec [#"../red_black_tree.rs" 332 4 332 43] (self : Type.redblacktree_tree k v) (h : int) =
    [#"../red_black_tree.rs" 334 12 340 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> h = 0
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color _ _ right)) -> let h = if color = Type.RedBlackTree_Color_Red then
        h
      else
        h - 1
       in has_height_rec left h /\ has_height_rec right h
      end
  axiom has_height_rec_spec : forall self : Type.redblacktree_tree k v, h : int . [#"../red_black_tree.rs" 331 4 331 33] has_height_rec self h -> h >= 0
end
module RedBlackTree_Impl11_HasHeightRec_Impl
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  let rec ghost function has_height_rec (self : Type.redblacktree_tree k v) (h : int) : bool
    ensures { [#"../red_black_tree.rs" 331 4 331 33] result -> h >= 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 334 12 340 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> pure {h = 0}
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color _ _ right)) -> let h = if pure {color = Type.RedBlackTree_Color_Red} then
        h
      else
        h - 1
       in has_height_rec left h && has_height_rec right h
      end
end
module RedBlackTree_Impl10_HasHeight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl11_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  predicate has_height (self : Type.redblacktree_node k v) (h : int)
end
module RedBlackTree_Impl10_HasHeight
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl11_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  use mach.int.Int32
  predicate has_height [#"../red_black_tree.rs" 317 4 317 39] (self : Type.redblacktree_node k v) (h : int) =
    [#"../red_black_tree.rs" 319 12 324 13] match (self) with
      | Type.RedBlackTree_Node left color _ _ right -> let h = if color = Type.RedBlackTree_Color_Red then
        h
      else
        h - 1
       in HasHeightRec0.has_height_rec left h /\ HasHeightRec0.has_height_rec right h
      end
  axiom has_height_spec : forall self : Type.redblacktree_node k v, h : int . [#"../red_black_tree.rs" 314 4 316 48] forall node : (Type.redblacktree_node k v) . forall tree : (Type.redblacktree_tree k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node /\ self = node -> has_height self h = HasHeightRec0.has_height_rec tree h
end
module RedBlackTree_Impl10_HasHeight_Impl
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  let rec ghost function has_height (self : Type.redblacktree_node k v) (h : int) : bool
    ensures { [#"../red_black_tree.rs" 314 4 316 48] forall node : (Type.redblacktree_node k v) . forall tree : (Type.redblacktree_tree k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node /\ self = node -> result = HasHeightRec0.has_height_rec tree h }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 319 12 324 13] match (self) with
      | Type.RedBlackTree_Node left color _ _ right -> let h = if pure {color = Type.RedBlackTree_Color_Red} then
        h
      else
        h - 1
       in HasHeightRec0.has_height_rec left h && HasHeightRec0.has_height_rec right h
      end
end
module RedBlackTree_Impl11_HasHeight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl11_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  predicate has_height (self : Type.redblacktree_tree k v) (h : int)
end
module RedBlackTree_Impl11_HasHeight
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl11_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  predicate has_height [#"../red_black_tree.rs" 347 4 347 39] (self : Type.redblacktree_tree k v) (h : int) =
    [#"../red_black_tree.rs" 348 8 348 30] HasHeightRec0.has_height_rec self h
  axiom has_height_spec : forall self : Type.redblacktree_tree k v, h : int . ([#"../red_black_tree.rs" 346 4 346 102] forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_Some node -> has_height self h = HasHeight0.has_height node h) && ([#"../red_black_tree.rs" 345 4 345 56] Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_None -> has_height self h = (h = 0))
end
module RedBlackTree_Impl11_HasHeight_Impl
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  let rec ghost function has_height (self : Type.redblacktree_tree k v) (h : int) : bool
    ensures { [#"../red_black_tree.rs" 345 4 345 56] Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_None -> result = (h = 0) }
    ensures { [#"../red_black_tree.rs" 346 4 346 102] forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_Some node -> result = HasHeight0.has_height node h }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 348 8 348 30] HasHeightRec0.has_height_rec self h
end
module RedBlackTree_Impl12_Invariant_Interface
  type k
  type v
  use Type
  predicate invariant' (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl12_Invariant
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl11_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl11_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl7_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  predicate invariant' [#"../red_black_tree.rs" 359 4 359 34] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 360 8 363 9] BstInvariant0.bst_invariant self /\ ColorInvariant0.color_invariant self /\ Color0.color self = Type.RedBlackTree_Color_Black /\ (exists h : (int) . HasHeight0.has_height self h)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module RedBlackTree_Impl13_IsRed_Interface
  type k
  type v
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  val is_red [@cfg:stackify] (self : Type.redblacktree_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 370 14 370 45] result = (Color0.color self = Type.RedBlackTree_Color_Red) }
    
end
module RedBlackTree_Impl13_IsRed
  type k
  type v
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  let rec cfg is_red [@cfg:stackify] [#"../red_black_tree.rs" 371 4 371 28] (self : Type.redblacktree_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 370 14 370 45] result = (Color0.color self = Type.RedBlackTree_Color_Red) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : Type.redblacktree_tree k v;
  var _2 : isize;
  var _3 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (Type.redblacktree_tree_Tree_node self_1)
      | Type.Core_Option_Option_Some _ -> goto BB2
      | _ -> goto BB5
      end
  }
  BB1 {
    _0 <- false;
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    switch (Type.redblacktree_node_Node_color (Type.core_option_option_Some_0 (Type.redblacktree_tree_Tree_node self_1)))
      | Type.RedBlackTree_Color_Red -> goto BB3
      | _ -> goto BB1
      end
  }
  BB3 {
    _0 <- true;
    goto BB4
  }
  BB4 {
    return _0
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface
  type self
  function default_log (_ : ()) : self
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog
  type self
  function default_log (_ : ()) : self
end
module Core_Mem_Take_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = DefaultLog0.default_log () }
    
end
module Core_Mem_Take
  type t
  use prelude.Prelude
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = DefaultLog0.default_log () }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module Core_Mem_Swap_Interface
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ x =  * y }
    ensures {  ^ y =  * x }
    
end
module Core_Mem_Swap
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ x =  * y }
    ensures {  ^ y =  * x }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Std1_Option_Impl0_DefaultLog_Interface
  type t
  use Type
  function default_log (_ : ()) : Type.core_option_option t
end
module CreusotContracts_Std1_Option_Impl0_DefaultLog
  type t
  use Type
  function default_log (_ : ()) : Type.core_option_option t =
    Type.Core_Option_Option_None
end
module CreusotContracts_Std1_Option_Impl0
  type t
end
module RedBlackTree_Impl14_RotateRight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl11_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl3_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl6_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val rotate_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 383 15 383 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 384 15 384 42] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red}
    ensures { [#"../red_black_tree.rs" 385 14 385 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 386 14 386 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 387 14 387 42] Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 388 14 388 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 389 4 391 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r /\ (Type.redblacktree_node_Node_left ( ^ self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) = (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( * self)) }
    ensures { [#"../red_black_tree.rs" 392 4 392 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 393 14 393 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) (Model0.model (Type.redblacktree_node_Node_key ( * self))) }
    
end
module RedBlackTree_Impl14_RotateRight
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl2_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl3_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl6_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_node k v)
  let rec cfg rotate_right [@cfg:stackify] [#"../red_black_tree.rs" 394 4 394 30] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 383 15 383 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 384 15 384 42] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red}
    ensures { [#"../red_black_tree.rs" 385 14 385 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 386 14 386 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 387 14 387 42] Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 388 14 388 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 389 4 391 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r /\ (Type.redblacktree_node_Node_left ( ^ self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) = (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( * self)) }
    ensures { [#"../red_black_tree.rs" 392 4 392 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 393 14 393 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) (Model0.model (Type.redblacktree_node_Node_key ( * self))) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  ghost var old_self_2 : borrowed (Type.redblacktree_node k v);
  var _3 : ();
  var x_4 : Type.redblacktree_node k v;
  var _5 : Type.core_option_option (Type.redblacktree_node k v);
  var _6 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : isize;
  var x_9 : Type.redblacktree_node k v;
  var _10 : ();
  var _11 : ();
  var _12 : borrowed (Type.redblacktree_tree k v);
  var _13 : borrowed (Type.redblacktree_tree k v);
  var _14 : borrowed (Type.redblacktree_tree k v);
  var _15 : borrowed (Type.redblacktree_tree k v);
  var _16 : ();
  var _17 : borrowed (Type.redblacktree_node k v);
  var _18 : borrowed (Type.redblacktree_node k v);
  var _19 : borrowed (Type.redblacktree_node k v);
  var _20 : Type.redblacktree_color;
  var _21 : Type.redblacktree_color;
  var _22 : ();
  var _23 : ();
  var _24 : Type.redblacktree_tree k v;
  var _25 : Type.core_option_option (Type.redblacktree_node k v);
  var _26 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 395 23 395 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _7 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _7)) b c d e) };
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _5 <- ([#"../red_black_tree.rs" 403 34 403 69] Take0.take _6);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _7 };
    switch (_5)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    assume { Resolve2.resolve self_1 };
    absurd
  }
  BB4 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve3.resolve _5 };
    absurd
  }
  BB5 {
    assume { Resolve4.resolve x_9 };
    x_9 <- Type.core_option_option_Some_0 _5;
    assume { Resolve4.resolve x_4 };
    x_4 <- x_9;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve3.resolve _5 };
    _13 <- borrow_mut (Type.redblacktree_node_Node_left ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node ( ^ _13) b c d e) };
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    _15 <- borrow_mut (Type.redblacktree_node_Node_right x_4);
    x_4 <- (let Type.RedBlackTree_Node a b c d e = x_4 in Type.RedBlackTree_Node a b c d ( ^ _15));
    _14 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ _14) };
    _11 <- ([#"../red_black_tree.rs" 413 8 413 52] Swap0.swap _12 _14);
    goto BB8
  }
  BB8 {
    assume { Resolve5.resolve _13 };
    assume { Resolve5.resolve _15 };
    _17 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _17) };
    _19 <- borrow_mut x_4;
    x_4 <-  ^ _19;
    _18 <- borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _16 <- ([#"../red_black_tree.rs" 419 8 419 36] Swap1.swap _17 _18);
    goto BB9
  }
  BB9 {
    assume { Resolve6.resolve _19 };
    _20 <- Type.redblacktree_node_Node_color x_4;
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a _20 c d e) };
    _21 <- Type.RedBlackTree_Color_Red;
    x_4 <- (let Type.RedBlackTree_Node a b c d e = x_4 in Type.RedBlackTree_Node a _21 c d e);
    assert { [#"../red_black_tree.rs" 427 8 427 78] HasMapping0.has_mapping (Type.redblacktree_node_Node_left ( * old_self_2)) (Model0.model (Type.redblacktree_node_Node_key ( * self_1))) (Type.redblacktree_node_Node_val ( * self_1)) };
    _22 <- ();
    assert { [#"../red_black_tree.rs" 428 8 428 114] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_left x_4) k v -> HasMapping0.has_mapping (Type.redblacktree_node_Node_left ( * old_self_2)) k v };
    goto BB10
  }
  BB10 {
    _23 <- ();
    assume { Resolve4.resolve _26 };
    _26 <- x_4;
    _25 <- Type.Core_Option_Option_Some _26;
    goto BB11
  }
  BB11 {
    _24 <- Type.RedBlackTree_Tree _25;
    goto BB12
  }
  BB12 {
    assume { Resolve7.resolve (Type.redblacktree_node_Node_right ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d _24) };
    goto BB13
  }
  BB13 {
    assume { Resolve2.resolve self_1 };
    goto BB14
  }
  BB14 {
    _0 <- ();
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module RedBlackTree_Impl14_RotateLeft_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl11_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl3_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl6_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val rotate_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 437 15 437 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 438 15 438 43] Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red}
    ensures { [#"../red_black_tree.rs" 439 14 439 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 440 14 440 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 441 14 441 41] Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 442 14 442 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 443 4 445 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l /\ (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( ^ self)) = (Type.redblacktree_node_Node_left ( * self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) }
    ensures { [#"../red_black_tree.rs" 446 4 446 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 447 14 447 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) }
    
end
module RedBlackTree_Impl14_RotateLeft
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl2_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl3_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl6_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_node k v)
  let rec cfg rotate_left [@cfg:stackify] [#"../red_black_tree.rs" 448 4 448 29] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 437 15 437 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 438 15 438 43] Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red}
    ensures { [#"../red_black_tree.rs" 439 14 439 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 440 14 440 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 441 14 441 41] Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 442 14 442 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 443 4 445 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l /\ (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( ^ self)) = (Type.redblacktree_node_Node_left ( * self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) }
    ensures { [#"../red_black_tree.rs" 446 4 446 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 447 14 447 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  ghost var old_self_2 : borrowed (Type.redblacktree_node k v);
  var _3 : ();
  var x_4 : Type.redblacktree_node k v;
  var _5 : Type.core_option_option (Type.redblacktree_node k v);
  var _6 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : isize;
  var x_9 : Type.redblacktree_node k v;
  var _10 : ();
  var _11 : ();
  var _12 : borrowed (Type.redblacktree_tree k v);
  var _13 : borrowed (Type.redblacktree_tree k v);
  var _14 : borrowed (Type.redblacktree_tree k v);
  var _15 : borrowed (Type.redblacktree_tree k v);
  var _16 : ();
  var _17 : borrowed (Type.redblacktree_node k v);
  var _18 : borrowed (Type.redblacktree_node k v);
  var _19 : borrowed (Type.redblacktree_node k v);
  var _20 : Type.redblacktree_color;
  var _21 : Type.redblacktree_color;
  var _22 : ();
  var _23 : ();
  var _24 : Type.redblacktree_tree k v;
  var _25 : Type.core_option_option (Type.redblacktree_node k v);
  var _26 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 449 23 449 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _7 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _7))) };
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _5 <- ([#"../red_black_tree.rs" 451 34 451 70] Take0.take _6);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _7 };
    switch (_5)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    assume { Resolve2.resolve self_1 };
    absurd
  }
  BB4 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve3.resolve _5 };
    absurd
  }
  BB5 {
    assume { Resolve4.resolve x_9 };
    x_9 <- Type.core_option_option_Some_0 _5;
    assume { Resolve4.resolve x_4 };
    x_4 <- x_9;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve3.resolve _5 };
    _13 <- borrow_mut (Type.redblacktree_node_Node_right ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d ( ^ _13)) };
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    _15 <- borrow_mut (Type.redblacktree_node_Node_left x_4);
    x_4 <- (let Type.RedBlackTree_Node a b c d e = x_4 in Type.RedBlackTree_Node ( ^ _15) b c d e);
    _14 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ _14) };
    _11 <- ([#"../red_black_tree.rs" 455 8 455 52] Swap0.swap _12 _14);
    goto BB8
  }
  BB8 {
    assume { Resolve5.resolve _13 };
    assume { Resolve5.resolve _15 };
    _17 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _17) };
    _19 <- borrow_mut x_4;
    x_4 <-  ^ _19;
    _18 <- borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _16 <- ([#"../red_black_tree.rs" 456 8 456 36] Swap1.swap _17 _18);
    goto BB9
  }
  BB9 {
    assume { Resolve6.resolve _19 };
    _20 <- Type.redblacktree_node_Node_color x_4;
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a _20 c d e) };
    _21 <- Type.RedBlackTree_Color_Red;
    x_4 <- (let Type.RedBlackTree_Node a b c d e = x_4 in Type.RedBlackTree_Node a _21 c d e);
    assert { [#"../red_black_tree.rs" 459 8 459 79] HasMapping0.has_mapping (Type.redblacktree_node_Node_right ( * old_self_2)) (Model0.model (Type.redblacktree_node_Node_key ( * self_1))) (Type.redblacktree_node_Node_val ( * self_1)) };
    _22 <- ();
    assert { [#"../red_black_tree.rs" 460 8 460 116] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_right x_4) k v -> HasMapping0.has_mapping (Type.redblacktree_node_Node_right ( * old_self_2)) k v };
    goto BB10
  }
  BB10 {
    _23 <- ();
    assume { Resolve4.resolve _26 };
    _26 <- x_4;
    _25 <- Type.Core_Option_Option_Some _26;
    goto BB11
  }
  BB11 {
    _24 <- Type.RedBlackTree_Tree _25;
    goto BB12
  }
  BB12 {
    assume { Resolve7.resolve (Type.redblacktree_node_Node_left ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node _24 b c d e) };
    goto BB13
  }
  BB13 {
    assume { Resolve2.resolve self_1 };
    goto BB14
  }
  BB14 {
    _0 <- ();
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module Core_Option_Impl0_AsMut_Interface
  type t
  use Type
  use prelude.Prelude
  val as_mut [@cfg:stackify] (self : borrowed (Type.core_option_option t)) : Type.core_option_option (borrowed t)
    ensures {  * self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None /\  ^ self = Type.Core_Option_Option_None }
    ensures {  * self = Type.Core_Option_Option_None \/ (exists r : (borrowed t) . result = Type.Core_Option_Option_Some r /\  * self = Type.Core_Option_Option_Some ( * r) /\  ^ self = Type.Core_Option_Option_Some ( ^ r)) }
    
end
module Core_Option_Impl0_AsMut
  type t
  use Type
  use prelude.Prelude
  val as_mut [@cfg:stackify] (self : borrowed (Type.core_option_option t)) : Type.core_option_option (borrowed t)
    ensures {  * self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None /\  ^ self = Type.Core_Option_Option_None }
    ensures {  * self = Type.Core_Option_Option_None \/ (exists r : (borrowed t) . result = Type.Core_Option_Option_Some r /\  * self = Type.Core_Option_Option_Some ( * r) /\  ^ self = Type.Core_Option_Option_Some ( ^ r)) }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {self <> Type.Core_Option_Option_None}
    ensures { Type.Core_Option_Option_Some result = self }
    
end
module Core_Option_Impl0_Unwrap
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {self <> Type.Core_Option_Option_None}
    ensures { Type.Core_Option_Option_Some result = self }
    
end
module RedBlackTree_Impl14_FlipColors_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl3_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl11_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl6_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val flip_colors [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 464 15 464 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 465 15 465 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 466 15 466 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 467 15 467 60] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Color0.color (Type.redblacktree_node_Node_right ( * self))}
    ensures { [#"../red_black_tree.rs" 468 4 468 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 469 14 469 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 470 14 470 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 471 4 473 70] exists l2 : (Type.redblacktree_node k v) . exists l1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l1 /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l2 /\ Type.redblacktree_node_Node_left l1 = Type.redblacktree_node_Node_left l2 /\ Type.redblacktree_node_Node_right l1 = Type.redblacktree_node_Node_right l2 /\ Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color l2 /\ Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color l1 }
    ensures { [#"../red_black_tree.rs" 474 4 476 70] exists r2 : (Type.redblacktree_node k v) . exists r1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r1 /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r2 /\ Type.redblacktree_node_Node_left r1 = Type.redblacktree_node_Node_left r2 /\ Type.redblacktree_node_Node_right r1 = Type.redblacktree_node_Node_right r2 /\ Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color r2 /\ Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color r1 }
    ensures { [#"../red_black_tree.rs" 477 14 477 40] Type.redblacktree_node_Node_key ( * self) = Type.redblacktree_node_Node_key ( ^ self) }
    
end
module RedBlackTree_Impl14_FlipColors
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl2_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl3_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl6_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_color
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  let rec cfg flip_colors [@cfg:stackify] [#"../red_black_tree.rs" 478 4 478 29] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 464 15 464 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 465 15 465 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 466 15 466 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 467 15 467 60] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Color0.color (Type.redblacktree_node_Node_right ( * self))}
    ensures { [#"../red_black_tree.rs" 468 4 468 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 469 14 469 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 470 14 470 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 471 4 473 70] exists l2 : (Type.redblacktree_node k v) . exists l1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l1 /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l2 /\ Type.redblacktree_node_Node_left l1 = Type.redblacktree_node_Node_left l2 /\ Type.redblacktree_node_Node_right l1 = Type.redblacktree_node_Node_right l2 /\ Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color l2 /\ Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color l1 }
    ensures { [#"../red_black_tree.rs" 474 4 476 70] exists r2 : (Type.redblacktree_node k v) . exists r1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r1 /\ Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r2 /\ Type.redblacktree_node_Node_left r1 = Type.redblacktree_node_Node_left r2 /\ Type.redblacktree_node_Node_right r1 = Type.redblacktree_node_Node_right r2 /\ Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color r2 /\ Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color r1 }
    ensures { [#"../red_black_tree.rs" 477 14 477 40] Type.redblacktree_node_Node_key ( * self) = Type.redblacktree_node_Node_key ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : Type.redblacktree_color;
  var _3 : borrowed (Type.redblacktree_node k v);
  var _4 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _5 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _6 : ();
  var _7 : borrowed (Type.redblacktree_color);
  var _8 : borrowed (Type.redblacktree_color);
  var _9 : borrowed (Type.redblacktree_color);
  var _10 : borrowed (Type.redblacktree_color);
  var _11 : borrowed (Type.redblacktree_node k v);
  var _12 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _13 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _14 : ();
  var _15 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- Type.redblacktree_node_Node_color ( * self_1);
    _5 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _5)) b c d e) };
    _4 <- ([#"../red_black_tree.rs" 479 8 479 31] AsMut0.as_mut _5);
    goto BB1
  }
  BB1 {
    _3 <- ([#"../red_black_tree.rs" 479 8 479 40] Unwrap0.unwrap _4);
    goto BB2
  }
  BB2 {
    _3 <- { _3 with current = (let Type.RedBlackTree_Node a b c d e =  * _3 in Type.RedBlackTree_Node a _2 c d e) };
    assume { Resolve0.resolve _3 };
    _8 <- borrow_mut (Type.redblacktree_node_Node_color ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a ( ^ _8) c d e) };
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    _13 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _13))) };
    _12 <- ([#"../red_black_tree.rs" 480 45 480 69] AsMut0.as_mut _13);
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    _11 <- ([#"../red_black_tree.rs" 480 45 480 78] Unwrap0.unwrap _12);
    goto BB4
  }
  BB4 {
    _10 <- borrow_mut (Type.redblacktree_node_Node_color ( * _11));
    _11 <- { _11 with current = (let Type.RedBlackTree_Node a b c d e =  * _11 in Type.RedBlackTree_Node a ( ^ _10) c d e) };
    assume { Resolve0.resolve _11 };
    _9 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _9) };
    _6 <- ([#"../red_black_tree.rs" 480 8 480 85] Swap0.swap _7 _9);
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve _8 };
    assume { Resolve2.resolve _10 };
    assert { [#"../red_black_tree.rs" 481 23 481 51] BstInvariantHere0.bst_invariant_here ( * self_1) };
    _14 <- ();
    assert { [#"../red_black_tree.rs" 482 8 482 64] SameMappings1.same_mappings (Type.redblacktree_node_Node_left ( * self_1)) (Type.redblacktree_node_Node_left ( ^ self_1)) };
    _15 <- ();
    assert { [#"../red_black_tree.rs" 483 8 483 66] SameMappings1.same_mappings (Type.redblacktree_node_Node_right ( * self_1)) (Type.redblacktree_node_Node_right ( ^ self_1)) };
    _0 <- ();
    return _0
  }
  
end
module RedBlackTree_Cp_MatchN_Interface
  type self
  type k
  type v
  use Type
  predicate match_n (self : self) (node : Type.redblacktree_node k v)
end
module RedBlackTree_Cp_MatchN
  type self
  type k
  type v
  use Type
  predicate match_n [#"../red_black_tree.rs" 20 4 20 47] (self : self) (node : Type.redblacktree_node k v)
end
module RedBlackTree_Impl1
  type k
  type v
  type l
  type r
  use Type
  clone RedBlackTree_Cp_MatchT as MatchT3 with type self = r, type k = k, type v = v
  clone RedBlackTree_Cp_MatchT as MatchT2 with type self = l, type k = k, type v = v
  clone RedBlackTree_Impl1_MatchN as MatchN0 with type k = k, type v = v, type l = l, type r = r,
  predicate MatchT0.match_t = MatchT2.match_t, predicate MatchT1.match_t = MatchT3.match_t
  clone RedBlackTree_Cp_MatchN_Interface as MatchN1 with type self = Type.redblacktree_cpn l r, type k = k, type v = v,
  predicate match_n = MatchN0.match_n
  clone RedBlackTree_Impl1_MatchT as MatchT0 with type k = k, type v = v, type l = l, type r = r,
  predicate MatchN0.match_n = MatchN0.match_n
  clone RedBlackTree_Cp_MatchT_Interface as MatchT1 with type self = Type.redblacktree_cpn l r, type k = k, type v = v,
  predicate match_t = MatchT0.match_t
end
module RedBlackTree_Impl0
  type k
  type v
  use Type
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl0_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Cp_MatchN_Interface as MatchN1 with type self = Type.redblacktree_cpl, type k = k, type v = v,
  predicate match_n = MatchN0.match_n
  clone RedBlackTree_Impl0_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Cp_MatchT_Interface as MatchT1 with type self = Type.redblacktree_cpl, type k = k, type v = v,
  predicate match_t = MatchT0.match_t
end
module Core_Option_Impl0_AsRef_Interface
  type t
  use Type
  use prelude.Prelude
  val as_ref [@cfg:stackify] (self : Type.core_option_option t) : Type.core_option_option t
    ensures { self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None }
    ensures { self = Type.Core_Option_Option_None \/ (exists r : (borrowed t) . result = Type.Core_Option_Option_Some ( * r) /\ self = Type.Core_Option_Option_Some ( * r)) }
    
end
module Core_Option_Impl0_AsRef
  type t
  use Type
  use prelude.Prelude
  val as_ref [@cfg:stackify] (self : Type.core_option_option t) : Type.core_option_option t
    ensures { self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None }
    ensures { self = Type.Core_Option_Option_None \/ (exists r : (borrowed t) . result = Type.Core_Option_Option_Some ( * r) /\ self = Type.Core_Option_Option_Some ( * r)) }
    
end
module RedBlackTree_Impl14_Balance_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl11_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl1_MatchN_Interface as MatchN2 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl
  clone RedBlackTree_Impl0_MatchN_Interface as MatchN1 with type k = k, type v = v
  clone RedBlackTree_Impl1_MatchN_Interface as MatchN0 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl
  clone RedBlackTree_Impl3_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl6_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val balance [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 486 15 486 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 487 4 488 47] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self))}
    requires {[#"../red_black_tree.rs" 489 4 490 48] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 491 4 491 110] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> false}
    ensures { [#"../red_black_tree.rs" 492 14 492 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 493 14 493 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 494 4 495 34] ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) /\ Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 496 4 497 39] MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self) -> MatchN1.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 498 4 499 63] MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * self) -> MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 500 4 501 61] MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * self) -> MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 502 4 503 39] MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * self) -> MatchN1.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 504 4 504 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
end
module RedBlackTree_Impl14_Balance
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl2_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl3_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl6_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl0_MatchN as MatchN1 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl0_MatchT as MatchT1 with type k = k, type v = v, predicate MatchN0.match_n = MatchN1.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl1_MatchN as MatchN2 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT1.match_t,
  predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl1_MatchT as MatchT0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN2.match_n
  clone RedBlackTree_Impl1_MatchN as MatchN0 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl14_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl14_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl14_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  let rec cfg balance [@cfg:stackify] [#"../red_black_tree.rs" 505 4 505 25] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 486 15 486 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 487 4 488 47] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self))}
    requires {[#"../red_black_tree.rs" 489 4 490 48] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 491 4 491 110] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red /\ Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> false}
    ensures { [#"../red_black_tree.rs" 492 14 492 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 493 14 493 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 494 4 495 34] ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) /\ Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 496 4 497 39] MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self) -> MatchN1.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 498 4 499 63] MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * self) -> MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 500 4 501 61] MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * self) -> MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 502 4 503 39] MatchN2.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( * self) -> MatchN1.match_n (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 504 4 504 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : ();
  var _3 : bool;
  var _4 : bool;
  var _5 : Type.redblacktree_tree k v;
  var _6 : bool;
  var _7 : bool;
  var _8 : Type.redblacktree_tree k v;
  var _9 : ();
  var _10 : borrowed (Type.redblacktree_node k v);
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : Type.redblacktree_tree k v;
  var _15 : bool;
  var _16 : Type.redblacktree_tree k v;
  var _17 : Type.redblacktree_node k v;
  var _18 : Type.core_option_option (Type.redblacktree_node k v);
  var _19 : Type.core_option_option (Type.redblacktree_node k v);
  var _20 : ();
  var _21 : borrowed (Type.redblacktree_node k v);
  var _22 : bool;
  var _23 : bool;
  var _24 : Type.redblacktree_tree k v;
  var _25 : bool;
  var _26 : Type.redblacktree_tree k v;
  var _27 : ();
  var _28 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- Type.redblacktree_node_Node_right ( * self_1);
    _4 <- ([#"../red_black_tree.rs" 506 11 506 30] IsRed0.is_red _5);
    goto BB4
  }
  BB1 {
    _3 <- false;
    goto BB3
  }
  BB2 {
    _8 <- Type.redblacktree_node_Node_left ( * self_1);
    _7 <- ([#"../red_black_tree.rs" 506 35 506 53] IsRed0.is_red _8);
    goto BB5
  }
  BB3 {
    switch (_3)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB4 {
    switch (_4)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB5 {
    _6 <- not _7;
    _3 <- _6;
    goto BB3
  }
  BB6 {
    _10 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _10) };
    _9 <- ([#"../red_black_tree.rs" 507 12 507 30] RotateLeft0.rotate_left _10);
    goto BB7
  }
  BB7 {
    _2 <- ();
    goto BB9
  }
  BB8 {
    _2 <- ();
    goto BB9
  }
  BB9 {
    _14 <- Type.redblacktree_node_Node_left ( * self_1);
    _13 <- ([#"../red_black_tree.rs" 510 11 510 29] IsRed0.is_red _14);
    goto BB13
  }
  BB10 {
    _12 <- false;
    goto BB12
  }
  BB11 {
    _19 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1));
    _18 <- ([#"../red_black_tree.rs" 510 33 510 56] AsRef0.as_ref _19);
    goto BB14
  }
  BB12 {
    switch (_12)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    switch (_13)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _17 <- ([#"../red_black_tree.rs" 510 33 510 65] Unwrap0.unwrap _18);
    goto BB15
  }
  BB15 {
    _16 <- Type.redblacktree_node_Node_left _17;
    assume { Resolve0.resolve _17 };
    _15 <- ([#"../red_black_tree.rs" 510 33 510 79] IsRed0.is_red _16);
    goto BB16
  }
  BB16 {
    _12 <- _15;
    goto BB12
  }
  BB17 {
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _20 <- ([#"../red_black_tree.rs" 511 12 511 31] RotateRight0.rotate_right _21);
    goto BB18
  }
  BB18 {
    _11 <- ();
    goto BB20
  }
  BB19 {
    _11 <- ();
    goto BB20
  }
  BB20 {
    _24 <- Type.redblacktree_node_Node_left ( * self_1);
    _23 <- ([#"../red_black_tree.rs" 514 11 514 29] IsRed0.is_red _24);
    goto BB24
  }
  BB21 {
    _22 <- false;
    goto BB23
  }
  BB22 {
    _26 <- Type.redblacktree_node_Node_right ( * self_1);
    _25 <- ([#"../red_black_tree.rs" 514 33 514 52] IsRed0.is_red _26);
    goto BB25
  }
  BB23 {
    switch (_22)
      | False -> goto BB28
      | _ -> goto BB26
      end
  }
  BB24 {
    switch (_23)
      | False -> goto BB21
      | _ -> goto BB22
      end
  }
  BB25 {
    _22 <- _25;
    goto BB23
  }
  BB26 {
    _28 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _28) };
    _27 <- ([#"../red_black_tree.rs" 515 12 515 30] FlipColors0.flip_colors _28);
    goto BB27
  }
  BB27 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB28 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
module RedBlackTree_Impl14_MoveRedLeft_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_MatchN_Interface as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl
  clone RedBlackTree_Impl3_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl11_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl1_MatchN_Interface as MatchN0 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl
  clone RedBlackTree_Impl6_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val move_red_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 519 15 519 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 520 15 520 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 521 15 521 86] MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 522 4 522 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 523 14 523 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 524 14 524 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 525 14 526 59] MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( ^ self) \/ MatchN1.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 527 14 527 42] LeLog0.le_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) }
    
end
module RedBlackTree_Impl14_MoveRedLeft
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl0_MatchN as MatchN2 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl0_MatchT as MatchT1 with type k = k, type v = v, predicate MatchN0.match_n = MatchN2.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl1_MatchN as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT1.match_t,
  predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl1_MatchT as MatchT0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl1_MatchN as MatchN0 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl2_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl3_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl6_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_node k v
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl14_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl14_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl14_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg move_red_left [@cfg:stackify] [#"../red_black_tree.rs" 528 4 528 31] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 519 15 519 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 520 15 520 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 521 15 521 86] MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 522 4 522 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 523 14 523 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 524 14 524 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 525 14 526 59] MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( ^ self) \/ MatchN1.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 527 14 527 42] LeLog0.le_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  ghost var old_self_2 : Type.redblacktree_node k v;
  var _3 : ();
  var _4 : ();
  var _5 : borrowed (Type.redblacktree_node k v);
  var _6 : bool;
  var _7 : Type.redblacktree_tree k v;
  var _8 : borrowed (Type.redblacktree_node k v);
  var _9 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _10 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _11 : ();
  var _12 : borrowed (Type.redblacktree_node k v);
  var _13 : borrowed (Type.redblacktree_node k v);
  var _14 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _15 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var _19 : borrowed (Type.redblacktree_node k v);
  var _20 : ();
  var _21 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 529 23 529 39]  * self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _5 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _5) };
    _4 <- ([#"../red_black_tree.rs" 530 8 530 26] FlipColors0.flip_colors _5);
    goto BB2
  }
  BB2 {
    _10 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _10))) };
    _9 <- ([#"../red_black_tree.rs" 531 11 531 35] AsMut0.as_mut _10);
    goto BB3
  }
  BB3 {
    _8 <- ([#"../red_black_tree.rs" 531 11 531 44] Unwrap0.unwrap _9);
    goto BB4
  }
  BB4 {
    _7 <- Type.redblacktree_node_Node_left ( * _8);
    assume { Resolve1.resolve _8 };
    _6 <- ([#"../red_black_tree.rs" 531 11 531 58] IsRed0.is_red _7);
    goto BB5
  }
  BB5 {
    switch (_6)
      | False -> goto BB12
      | _ -> goto BB6
      end
  }
  BB6 {
    _15 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _15))) };
    _14 <- ([#"../red_black_tree.rs" 532 12 532 36] AsMut0.as_mut _15);
    goto BB7
  }
  BB7 {
    _13 <- ([#"../red_black_tree.rs" 532 12 532 45] Unwrap0.unwrap _14);
    goto BB8
  }
  BB8 {
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    _11 <- ([#"../red_black_tree.rs" 532 12 532 60] RotateRight0.rotate_right _12);
    goto BB9
  }
  BB9 {
    assume { Resolve1.resolve _13 };
    assert { [#"../red_black_tree.rs" 533 28 533 57] SameMappings0.same_mappings old_self_2 ( * self_1) };
    _16 <- ();
    assert { [#"../red_black_tree.rs" 534 12 534 94] forall h : (int) . HasHeight0.has_height old_self_2 h -> HasHeight0.has_height ( * self_1) h };
    _17 <- ();
    _19 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _19) };
    _18 <- ([#"../red_black_tree.rs" 535 12 535 30] RotateLeft0.rotate_left _19);
    goto BB10
  }
  BB10 {
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _20 <- ([#"../red_black_tree.rs" 536 12 536 30] FlipColors0.flip_colors _21);
    goto BB11
  }
  BB11 {
    assume { Resolve2.resolve self_1 };
    _0 <- ();
    goto BB13
  }
  BB12 {
    assume { Resolve2.resolve self_1 };
    _0 <- ();
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module RedBlackTree_Impl14_MoveRedRight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl1_MatchN_Interface as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl11_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl1_MatchN_Interface as MatchN0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl)
  clone RedBlackTree_Impl6_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val move_red_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : bool
    requires {[#"../red_black_tree.rs" 540 15 540 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 541 15 541 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 542 15 542 86] MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)))) ( * self)}
    ensures { [#"../red_black_tree.rs" 543 4 543 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 544 14 544 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 545 14 545 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 546 4 547 85] not result -> LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) (Model0.model (Type.redblacktree_node_Node_key ( * self))) /\ MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 548 4 549 61] result -> Type.redblacktree_node_Node_key ( ^ self) = Type.redblacktree_node_Node_key ( * self) /\ MatchN1.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( ^ self) }
    
end
module RedBlackTree_Impl14_MoveRedRight
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl0_MatchN as MatchN2 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl0_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN2.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl1_MatchN as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl1_MatchT as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl1_MatchN as MatchN0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl),
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl2_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl3_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl6_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl14_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl14_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl14_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg move_red_right [@cfg:stackify] [#"../red_black_tree.rs" 550 4 550 40] (self : borrowed (Type.redblacktree_node k v)) : bool
    requires {[#"../red_black_tree.rs" 540 15 540 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 541 15 541 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 542 15 542 86] MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)))) ( * self)}
    ensures { [#"../red_black_tree.rs" 543 4 543 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 544 14 544 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 545 14 545 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 546 4 547 85] not result -> LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) (Model0.model (Type.redblacktree_node_Node_key ( * self))) /\ MatchN0.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 548 4 549 61] result -> Type.redblacktree_node_Node_key ( ^ self) = Type.redblacktree_node_Node_key ( * self) /\ MatchN1.match_n (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red))) ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : ();
  var _3 : ();
  var _4 : borrowed (Type.redblacktree_node k v);
  var _5 : ();
  var _6 : bool;
  var _7 : Type.redblacktree_tree k v;
  var _8 : borrowed (Type.redblacktree_node k v);
  var _9 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _10 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _11 : ();
  var _12 : ();
  var _13 : borrowed (Type.redblacktree_node k v);
  var _14 : ();
  var _15 : borrowed (Type.redblacktree_node k v);
  var _16 : ();
  var _17 : borrowed (Type.redblacktree_node k v);
  var _18 : borrowed (Type.redblacktree_node k v);
  var _19 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _20 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _4) };
    _3 <- ([#"../red_black_tree.rs" 551 8 551 26] FlipColors0.flip_colors _4);
    goto BB1
  }
  BB1 {
    _10 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _10)) b c d e) };
    _9 <- ([#"../red_black_tree.rs" 552 11 552 34] AsMut0.as_mut _10);
    goto BB2
  }
  BB2 {
    _8 <- ([#"../red_black_tree.rs" 552 11 552 43] Unwrap0.unwrap _9);
    goto BB3
  }
  BB3 {
    _7 <- Type.redblacktree_node_Node_left ( * _8);
    assume { Resolve0.resolve _8 };
    _6 <- ([#"../red_black_tree.rs" 552 11 552 57] IsRed0.is_red _7);
    goto BB4
  }
  BB4 {
    switch (_6)
      | False -> goto BB11
      | _ -> goto BB5
      end
  }
  BB5 {
    _13 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _13) };
    _12 <- ([#"../red_black_tree.rs" 553 12 553 31] RotateRight0.rotate_right _13);
    goto BB6
  }
  BB6 {
    _15 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _15) };
    _14 <- ([#"../red_black_tree.rs" 554 12 554 30] FlipColors0.flip_colors _15);
    goto BB7
  }
  BB7 {
    _20 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _20))) };
    _19 <- ([#"../red_black_tree.rs" 555 12 555 36] AsMut0.as_mut _20);
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve self_1 };
    _18 <- ([#"../red_black_tree.rs" 555 12 555 45] Unwrap0.unwrap _19);
    goto BB9
  }
  BB9 {
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _16 <- ([#"../red_black_tree.rs" 555 12 555 59] RotateLeft0.rotate_left _17);
    goto BB10
  }
  BB10 {
    assume { Resolve0.resolve _18 };
    _0 <- false;
    goto BB12
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    _5 <- ();
    _0 <- true;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module RedBlackTree_Impl15_New_Interface
  type k
  type v
  use Type
  use map.Const
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl5_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val new [@cfg:stackify] (_ : ()) : Type.redblacktree_tree k v
    ensures { [#"../red_black_tree.rs" 566 14 566 43] Model0.model result = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 567 14 567 32] Invariant0.invariant' result }
    
end
module RedBlackTree_Impl15_New
  type k
  type v
  use Type
  use map.Const
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl11_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl2_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl5_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  let rec cfg new [@cfg:stackify] [#"../red_black_tree.rs" 568 4 568 30] (_ : ()) : Type.redblacktree_tree k v
    ensures { [#"../red_black_tree.rs" 566 14 566 43] Model0.model result = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 567 14 567 32] Invariant0.invariant' result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.redblacktree_tree k v;
  var _1 : Type.core_option_option (Type.redblacktree_node k v);
  {
    goto BB0
  }
  BB0 {
    _1 <- Type.Core_Option_Option_None;
    _0 <- Type.RedBlackTree_Tree _1;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module Core_Cmp_Ord_Cmp_Interface
  type self
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module Core_Cmp_Ord_Cmp
  type self
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module RedBlackTree_Impl15_InsertRec_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl11_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl11_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl2_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl1_MatchT_Interface as MatchT0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl7_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val insert_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 572 15 572 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 573 15 573 40] ColorInvariant0.color_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 574 14 574 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 575 14 576 39] MatchT0.match_t (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( ^ self) /\ Color0.color ( * self) = Type.RedBlackTree_Color_Red \/ ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 577 14 577 44] HasMapping0.has_mapping ( ^ self) (Model0.model key) val' }
    ensures { [#"../red_black_tree.rs" 578 4 578 111] forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key \/ HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 579 4 579 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
end
module RedBlackTree_Impl15_InsertRec
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl11_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl0_MatchN as MatchN1 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl0_MatchT as MatchT1 with type k = k, type v = v, predicate MatchN0.match_n = MatchN1.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl1_MatchN as MatchN0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT1.match_t,
  predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl1_MatchT as MatchT0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN0.match_n
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model1.model,
  function Model1.model = Model0.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl3_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl6_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl1_MatchN as MatchN2 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl14_Balance_Interface as Balance0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant, function Color0.color = Color0.color,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, predicate MatchN0.match_n = MatchN2.match_n,
  predicate MatchN1.match_n = MatchN1.match_n, predicate MatchN2.match_n = MatchN0.match_n,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg insert_rec [@cfg:stackify] [#"../red_black_tree.rs" 580 4 580 44] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 572 15 572 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 573 15 573 40] ColorInvariant0.color_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 574 14 574 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 575 14 576 39] MatchT0.match_t (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Red) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( ^ self) /\ Color0.color ( * self) = Type.RedBlackTree_Color_Red \/ ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 577 14 577 44] HasMapping0.has_mapping ( ^ self) (Model0.model key) val' }
    ensures { [#"../red_black_tree.rs" 578 4 578 111] forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key \/ HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 579 4 579 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var _4 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _5 : isize;
  var _6 : ();
  var _7 : Type.core_option_option (Type.redblacktree_node k v);
  var _8 : Type.redblacktree_node k v;
  var _9 : Type.redblacktree_node k v;
  var _10 : Type.redblacktree_tree k v;
  var _11 : Type.core_option_option (Type.redblacktree_node k v);
  var _12 : Type.redblacktree_color;
  var _13 : k;
  var _14 : v;
  var _15 : Type.redblacktree_tree k v;
  var _16 : Type.core_option_option (Type.redblacktree_node k v);
  var node_17 : borrowed (Type.redblacktree_node k v);
  var _18 : ();
  var _19 : Type.core_cmp_ordering;
  var _20 : k;
  var _21 : k;
  var _22 : k;
  var _23 : int8;
  var _24 : borrowed (Type.redblacktree_tree k v);
  var _25 : k;
  var _26 : v;
  var _27 : ();
  var _28 : v;
  var _29 : borrowed (Type.redblacktree_tree k v);
  var _30 : k;
  var _31 : v;
  var _32 : ();
  var _33 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _4 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _4)) };
    switch ( * _4)
      | Type.Core_Option_Option_None -> goto BB5
      | Type.Core_Option_Option_Some _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    node_17 <- borrow_mut (Type.core_option_option_Some_0 ( * _4));
    _4 <- { _4 with current = (let Type.Core_Option_Option_Some a =  * _4 in Type.Core_Option_Option_Some ( ^ node_17)) };
    assume { Resolve3.resolve _4 };
    _20 <- key_2;
    _22 <- Type.redblacktree_node_Node_key ( * node_17);
    _21 <- _22;
    assume { Resolve4.resolve _22 };
    _19 <- ([#"../red_black_tree.rs" 593 22 593 40] Cmp0.cmp _20 _21);
    goto BB16
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve val'_3 };
    assume { Resolve3.resolve _4 };
    absurd
  }
  BB5 {
    assume { Resolve3.resolve _4 };
    _11 <- Type.Core_Option_Option_None;
    _10 <- Type.RedBlackTree_Tree _11;
    goto BB6
  }
  BB6 {
    _12 <- Type.RedBlackTree_Color_Red;
    assume { Resolve1.resolve _13 };
    _13 <- key_2;
    assume { Resolve2.resolve _14 };
    _14 <- val'_3;
    _16 <- Type.Core_Option_Option_None;
    _15 <- Type.RedBlackTree_Tree _16;
    goto BB7
  }
  BB7 {
    _9 <- Type.RedBlackTree_Node _10 _12 _13 _14 _15;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    _8 <- _9;
    goto BB12
  }
  BB12 {
    _7 <- Type.Core_Option_Option_Some _8;
    goto BB13
  }
  BB13 {
    assume { Resolve6.resolve (Type.redblacktree_tree_Tree_node ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree _7) };
    goto BB14
  }
  BB14 {
    assume { Resolve0.resolve self_1 };
    goto BB15
  }
  BB15 {
    _0 <- ();
    goto BB28
  }
  BB16 {
    switch (_19)
      | Type.Core_Cmp_Ordering_Less -> goto BB19
      | Type.Core_Cmp_Ordering_Equal -> goto BB21
      | Type.Core_Cmp_Ordering_Greater -> goto BB17
      end
  }
  BB17 {
    _29 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_17));
    node_17 <- { node_17 with current = (let Type.RedBlackTree_Node a b c d e =  * node_17 in Type.RedBlackTree_Node a b c d ( ^ _29)) };
    assume { Resolve1.resolve _30 };
    _30 <- key_2;
    assume { Resolve2.resolve _31 };
    _31 <- val'_3;
    _18 <- ([#"../red_black_tree.rs" 599 31 599 62] insert_rec _29 _30 _31);
    goto BB24
  }
  BB18 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve val'_3 };
    assume { Resolve5.resolve node_17 };
    absurd
  }
  BB19 {
    _24 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_17));
    node_17 <- { node_17 with current = (let Type.RedBlackTree_Node a b c d e =  * node_17 in Type.RedBlackTree_Node ( ^ _24) b c d e) };
    assume { Resolve1.resolve _25 };
    _25 <- key_2;
    assume { Resolve2.resolve _26 };
    _26 <- val'_3;
    _18 <- ([#"../red_black_tree.rs" 594 28 594 58] insert_rec _24 _25 _26);
    goto BB20
  }
  BB20 {
    goto BB25
  }
  BB21 {
    assume { Resolve2.resolve _28 };
    _28 <- val'_3;
    assume { Resolve2.resolve (Type.redblacktree_node_Node_val ( * node_17)) };
    node_17 <- { node_17 with current = (let Type.RedBlackTree_Node a b c d e =  * node_17 in Type.RedBlackTree_Node a b c _28 e) };
    goto BB22
  }
  BB22 {
    assume { Resolve5.resolve node_17 };
    goto BB23
  }
  BB23 {
    _0 <- ();
    goto BB28
  }
  BB24 {
    goto BB25
  }
  BB25 {
    _33 <- borrow_mut ( * node_17);
    node_17 <- { node_17 with current = ( ^ _33) };
    _32 <- ([#"../red_black_tree.rs" 601 16 601 30] Balance0.balance _33);
    goto BB26
  }
  BB26 {
    assume { Resolve5.resolve node_17 };
    _0 <- ();
    goto BB27
  }
  BB27 {
    goto BB30
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    return _0
  }
  
end
module RedBlackTree_Impl15_Insert_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val insert [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 606 15 606 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 607 14 607 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 608 14 608 53] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_Some val') }
    
end
module RedBlackTree_Impl15_Insert
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl2_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl2_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl2_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl5_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl11_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_tree k v
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl0_MatchN as MatchN1 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl0_MatchT as MatchT1 with type k = k, type v = v, predicate MatchN0.match_n = MatchN1.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl1_MatchN as MatchN0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT1.match_t,
  predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl1_MatchT as MatchT0 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN0.match_n
  clone RedBlackTree_Impl15_InsertRec_Interface as InsertRec0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate MatchT0.match_t = MatchT0.match_t, function Color0.color = Color0.color,
  function Model0.model = Model1.model, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg insert [@cfg:stackify] [#"../red_black_tree.rs" 609 4 609 44] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 606 15 606 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 607 14 607 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 608 14 608 53] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_Some val') }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var val'_3 : v;
  ghost var old_self_4 : borrowed (Type.redblacktree_tree k v);
  var _5 : ();
  var _6 : ();
  var _7 : borrowed (Type.redblacktree_tree k v);
  var _8 : k;
  var _9 : v;
  var _10 : Type.redblacktree_color;
  var _11 : borrowed (Type.redblacktree_node k v);
  var _12 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _13 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _14 : ();
  ghost var _15 : ();
  var _16 : ();
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _5 <- ();
    old_self_4 <- ghost ([#"../red_black_tree.rs" 610 23 610 38] self_1);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve old_self_4 };
    _7 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _7) };
    assume { Resolve1.resolve _8 };
    _8 <- key_2;
    assume { Resolve2.resolve _9 };
    _9 <- val'_3;
    _6 <- ([#"../red_black_tree.rs" 611 8 611 33] InsertRec0.insert_rec _7 _8 _9);
    goto BB3
  }
  BB3 {
    _10 <- Type.RedBlackTree_Color_Black;
    _13 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _13)) };
    _12 <- ([#"../red_black_tree.rs" 612 8 612 26] AsMut0.as_mut _13);
    goto BB4
  }
  BB4 {
    assume { Resolve3.resolve self_1 };
    _11 <- ([#"../red_black_tree.rs" 612 8 612 35] Unwrap0.unwrap _12);
    goto BB5
  }
  BB5 {
    _11 <- { _11 with current = (let Type.RedBlackTree_Node a b c d e =  * _11 in Type.RedBlackTree_Node a _10 c d e) };
    assume { Resolve4.resolve _11 };
    assert { [#"../red_black_tree.rs" 613 8 614 58] forall h : (int) . HasHeight0.has_height ( * old_self_4) h -> HasHeight0.has_height ( * self_1) h \/ HasHeight0.has_height ( * self_1) (h + 1) };
    _14 <- ();
    _16 <- ();
    _15 <- ghost ([#"../red_black_tree.rs" 615 8 615 42] ());
    goto BB6
  }
  BB6 {
    _0 <- ();
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module RedBlackTree_Impl15_DeleteMinRec_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl11_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl11_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl1_MatchT_Interface as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl
  clone RedBlackTree_Impl0_MatchN_Interface as MatchN0 with type k = k, type v = v
  clone RedBlackTree_Impl0_MatchT_Interface as MatchT0 with type k = k, type v = v,
  predicate MatchN0.match_n = MatchN0.match_n, axiom .
  clone RedBlackTree_Impl7_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val delete_min_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 618 15 618 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 619 15 620 62] MatchT0.match_t (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( * self) \/ MatchT1.match_t (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self)}
    requires {[#"../red_black_tree.rs" 621 4 621 53] exists h : (int) . HasHeight0.has_height ( * self) h}
    ensures { [#"../red_black_tree.rs" 622 14 622 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 623 14 623 54] HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 624 4 624 88] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (Model0.model (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 625 4 626 59] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> Model0.model (let (a, _) = result in a) = k \/ HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 627 4 628 59] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v -> Model0.model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 629 4 629 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 630 14 630 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 631 4 631 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    
end
module RedBlackTree_Impl15_DeleteMinRec
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl11_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl0_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl0_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl1_MatchN as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl1_MatchT as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN1.match_n
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve6.resolve, predicate Resolve1.resolve = Resolve7.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  clone RedBlackTree_Impl2_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl3_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl6_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl1_MatchN as MatchN2 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl,
  predicate MatchT0.match_t = MatchT1.match_t, predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl14_Balance_Interface as Balance0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant, function Color0.color = Color0.color,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, predicate MatchN0.match_n = MatchN2.match_n,
  predicate MatchN1.match_n = MatchN0.match_n, predicate MatchN2.match_n = MatchN1.match_n,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl14_MoveRedLeft_Interface as MoveRedLeft0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant, predicate MatchN0.match_n = MatchN2.match_n,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, predicate MatchN1.match_n = MatchN1.match_n,
  function Model0.model = Model0.model, predicate LeLog0.le_log = LeLog0.le_log,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg delete_min_rec [@cfg:stackify] [#"../red_black_tree.rs" 632 4 632 42] (self : borrowed (Type.redblacktree_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 618 15 618 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 619 15 620 62] MatchT0.match_t (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( * self) \/ MatchT1.match_t (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self)}
    requires {[#"../red_black_tree.rs" 621 4 621 53] exists h : (int) . HasHeight0.has_height ( * self) h}
    ensures { [#"../red_black_tree.rs" 622 14 622 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 623 14 623 54] HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 624 4 624 88] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (Model0.model (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 625 4 626 59] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> Model0.model (let (a, _) = result in a) = k \/ HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 627 4 628 59] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v -> Model0.model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 629 4 629 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 630 14 630 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 631 4 631 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  ghost var old_self_2 : borrowed (Type.redblacktree_tree k v);
  var _3 : ();
  var node_4 : borrowed (Type.redblacktree_node k v);
  var _5 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _6 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _7 : ();
  var _8 : isize;
  var _9 : ();
  var _10 : ();
  var node_11 : Type.redblacktree_node k v;
  var _12 : Type.core_option_option (Type.redblacktree_node k v);
  var _13 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _14 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _15 : k;
  var _16 : v;
  var _17 : ();
  var _18 : bool;
  var _19 : bool;
  var _20 : bool;
  var _21 : Type.redblacktree_tree k v;
  var _22 : bool;
  var _23 : bool;
  var _24 : Type.redblacktree_tree k v;
  var _25 : Type.redblacktree_node k v;
  var _26 : Type.core_option_option (Type.redblacktree_node k v);
  var _27 : Type.core_option_option (Type.redblacktree_node k v);
  var _28 : ();
  var _29 : borrowed (Type.redblacktree_node k v);
  var _30 : ();
  var r_31 : (k, v);
  var _32 : borrowed (Type.redblacktree_tree k v);
  var _33 : ();
  var _34 : ();
  var _35 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 633 23 633 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _6 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _6)) };
    _5 <- ([#"../red_black_tree.rs" 634 19 634 37] AsMut0.as_mut _6);
    goto BB2
  }
  BB2 {
    node_4 <- ([#"../red_black_tree.rs" 634 19 634 46] Unwrap0.unwrap _5);
    goto BB3
  }
  BB3 {
    switch (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_4)))
      | Type.Core_Option_Option_None -> goto BB4
      | _ -> goto BB9
      end
  }
  BB4 {
    assume { Resolve3.resolve node_4 };
    assert { [#"../red_black_tree.rs" 636 27 636 50] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * node_4)) = Type.Core_Option_Option_None };
    _10 <- ();
    _14 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _14)) };
    assume { Resolve1.resolve self_1 };
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    _12 <- ([#"../red_black_tree.rs" 637 23 637 53] Take0.take _13);
    goto BB5
  }
  BB5 {
    assume { Resolve5.resolve _14 };
    node_11 <- ([#"../red_black_tree.rs" 637 23 637 62] Unwrap2.unwrap _12);
    goto BB6
  }
  BB6 {
    assume { Resolve6.resolve _15 };
    _15 <- Type.redblacktree_node_Node_key node_11;
    assume { Resolve7.resolve _16 };
    _16 <- Type.redblacktree_node_Node_val node_11;
    _0 <- (_15, _16);
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB24
  }
  BB9 {
    assume { Resolve1.resolve self_1 };
    _7 <- ();
    _21 <- Type.redblacktree_node_Node_left ( * node_4);
    _20 <- ([#"../red_black_tree.rs" 640 12 640 30] IsRed0.is_red _21);
    goto BB13
  }
  BB10 {
    _18 <- false;
    goto BB12
  }
  BB11 {
    _27 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_4));
    _26 <- ([#"../red_black_tree.rs" 640 35 640 58] AsRef0.as_ref _27);
    goto BB14
  }
  BB12 {
    switch (_18)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    _19 <- not _20;
    switch (_19)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _25 <- ([#"../red_black_tree.rs" 640 35 640 67] Unwrap1.unwrap _26);
    goto BB15
  }
  BB15 {
    _24 <- Type.redblacktree_node_Node_left _25;
    assume { Resolve2.resolve _25 };
    _23 <- ([#"../red_black_tree.rs" 640 35 640 81] IsRed0.is_red _24);
    goto BB16
  }
  BB16 {
    _22 <- not _23;
    _18 <- _22;
    goto BB12
  }
  BB17 {
    _29 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _29) };
    _28 <- ([#"../red_black_tree.rs" 641 12 641 32] MoveRedLeft0.move_red_left _29);
    goto BB18
  }
  BB18 {
    _17 <- ();
    goto BB20
  }
  BB19 {
    _17 <- ();
    goto BB20
  }
  BB20 {
    assert { [#"../red_black_tree.rs" 643 8 643 87] forall h : (int) . HasHeight0.has_height ( * old_self_2) h -> HasHeight1.has_height ( * node_4) h };
    _30 <- ();
    _32 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node ( ^ _32) b c d e) };
    r_31 <- ([#"../red_black_tree.rs" 644 16 644 42] delete_min_rec _32);
    goto BB21
  }
  BB21 {
    assert { [#"../red_black_tree.rs" 645 8 645 87] forall h : (int) . HasHeight0.has_height ( * old_self_2) h -> HasHeight1.has_height ( * node_4) h };
    _33 <- ();
    _35 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _35) };
    _34 <- ([#"../red_black_tree.rs" 646 8 646 22] Balance0.balance _35);
    goto BB22
  }
  BB22 {
    assume { Resolve3.resolve node_4 };
    assume { Resolve4.resolve _0 };
    _0 <- r_31;
    goto BB23
  }
  BB23 {
    goto BB25
  }
  BB24 {
    assume { Resolve8.resolve node_11 };
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
module RedBlackTree_Impl15_DeleteMin_Interface
  type k
  type v
  use Type
  use map.Const
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val delete_min [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 650 15 650 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 651 14 651 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 652 4 652 83] result = Type.Core_Option_Option_None -> Model0.model ( ^ self) = Model0.model ( * self) /\ Model0.model ( * self) = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 653 4 656 48] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Type.Core_Option_Option_Some v /\ (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Type.Core_Option_Option_None \/ LeLog0.le_log (Model1.model k) k2) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl15_DeleteMin
  type k
  type v
  use Type
  use map.Const
  use map.Map
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl2_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl2_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl2_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl2_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl5_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl11_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve5.resolve, predicate Resolve1.resolve = Resolve6.resolve
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl0_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl0_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl1_MatchN as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl1_MatchT as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl15_DeleteMinRec_Interface as DeleteMinRec0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT1.match_t, predicate HasHeight0.has_height = HasHeight0.has_height,
  function Model0.model = Model1.model, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate LeLog0.le_log = LeLog0.le_log,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate MatchN0.match_n = MatchN0.match_n, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg delete_min [@cfg:stackify] [#"../red_black_tree.rs" 657 4 657 50] (self : borrowed (Type.redblacktree_tree k v)) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 650 15 650 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 651 14 651 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 652 4 652 83] result = Type.Core_Option_Option_None -> Model0.model ( ^ self) = Model0.model ( * self) /\ Model0.model ( * self) = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 653 4 656 48] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Type.Core_Option_Option_Some v /\ (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Type.Core_Option_Option_None \/ LeLog0.le_log (Model1.model k) k2) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Type.Core_Option_Option_None) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.core_option_option (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  ghost var old_self_2 : borrowed (Type.redblacktree_tree k v);
  var _3 : ();
  var _4 : ();
  var _5 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _6 : isize;
  var _7 : ();
  var node_8 : borrowed (Type.redblacktree_node k v);
  var _9 : bool;
  var _10 : bool;
  var _11 : bool;
  var _12 : Type.redblacktree_tree k v;
  var _13 : bool;
  var _14 : bool;
  var _15 : Type.redblacktree_tree k v;
  var _16 : Type.redblacktree_color;
  var _17 : ();
  var _18 : ();
  var r_19 : (k, v);
  var _20 : borrowed (Type.redblacktree_tree k v);
  var _21 : ();
  var _22 : bool;
  var _23 : Type.redblacktree_tree k v;
  var _24 : Type.redblacktree_color;
  var _25 : borrowed (Type.redblacktree_node k v);
  var _26 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _27 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _28 : ();
  ghost var _29 : ();
  var _30 : ();
  var _31 : (k, v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 658 23 658 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _5 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _5)) };
    switch ( * _5)
      | Type.Core_Option_Option_None -> goto BB4
      | Type.Core_Option_Option_Some _ -> goto BB2
      end
  }
  BB2 {
    node_8 <- borrow_mut (Type.core_option_option_Some_0 ( * _5));
    _5 <- { _5 with current = (let Type.Core_Option_Option_Some a =  * _5 in Type.Core_Option_Option_Some ( ^ node_8)) };
    assume { Resolve2.resolve _5 };
    _12 <- Type.redblacktree_node_Node_left ( * node_8);
    _11 <- ([#"../red_black_tree.rs" 662 20 662 38] IsRed0.is_red _12);
    goto BB8
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve _5 };
    absurd
  }
  BB4 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve _5 };
    _0 <- Type.Core_Option_Option_None;
    goto BB23
  }
  BB5 {
    _9 <- false;
    goto BB7
  }
  BB6 {
    _15 <- Type.redblacktree_node_Node_right ( * node_8);
    _14 <- ([#"../red_black_tree.rs" 662 43 662 62] IsRed0.is_red _15);
    goto BB9
  }
  BB7 {
    switch (_9)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB8 {
    _10 <- not _11;
    switch (_10)
      | False -> goto BB5
      | _ -> goto BB6
      end
  }
  BB9 {
    _13 <- not _14;
    _9 <- _13;
    goto BB7
  }
  BB10 {
    _16 <- Type.RedBlackTree_Color_Red;
    node_8 <- { node_8 with current = (let Type.RedBlackTree_Node a b c d e =  * node_8 in Type.RedBlackTree_Node a _16 c d e) };
    assume { Resolve3.resolve node_8 };
    _4 <- ();
    goto BB12
  }
  BB11 {
    assume { Resolve3.resolve node_8 };
    _4 <- ();
    goto BB12
  }
  BB12 {
    assert { [#"../red_black_tree.rs" 667 8 668 61] forall h : (int) . HasHeight0.has_height ( * old_self_2) h -> Color0.color ( * self_1) = Type.RedBlackTree_Color_Black \/ HasHeight0.has_height ( * self_1) (h - 1) };
    _17 <- ();
    assert { [#"../red_black_tree.rs" 669 24 669 53] SameMappings0.same_mappings ( * old_self_2) ( * self_1) };
    _18 <- ();
    _20 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _20) };
    r_19 <- ([#"../red_black_tree.rs" 670 16 670 37] DeleteMinRec0.delete_min_rec _20);
    goto BB13
  }
  BB13 {
    _23 <-  * self_1;
    _22 <- ([#"../red_black_tree.rs" 671 11 671 24] IsRed0.is_red _23);
    goto BB14
  }
  BB14 {
    switch (_22)
      | False -> goto BB18
      | _ -> goto BB15
      end
  }
  BB15 {
    _24 <- Type.RedBlackTree_Color_Black;
    _27 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _27)) };
    _26 <- ([#"../red_black_tree.rs" 672 12 672 30] AsMut0.as_mut _27);
    goto BB16
  }
  BB16 {
    assume { Resolve1.resolve self_1 };
    _25 <- ([#"../red_black_tree.rs" 672 12 672 39] Unwrap0.unwrap _26);
    goto BB17
  }
  BB17 {
    _25 <- { _25 with current = (let Type.RedBlackTree_Node a b c d e =  * _25 in Type.RedBlackTree_Node a _24 c d e) };
    assume { Resolve3.resolve _25 };
    _21 <- ();
    goto BB19
  }
  BB18 {
    assume { Resolve1.resolve self_1 };
    _21 <- ();
    goto BB19
  }
  BB19 {
    assert { [#"../red_black_tree.rs" 674 8 675 58] forall h : (int) . HasHeight0.has_height ( * old_self_2) h -> HasHeight0.has_height ( * self_1) h \/ HasHeight0.has_height ( * self_1) (h - 1) };
    _28 <- ();
    _30 <- ();
    _29 <- ghost ([#"../red_black_tree.rs" 676 8 676 42] ());
    goto BB20
  }
  BB20 {
    assume { Resolve4.resolve _31 };
    _31 <- r_19;
    _0 <- Type.Core_Option_Option_Some _31;
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    return _0
  }
  
end
module Core_Option_Impl0_IsNone_Interface
  type t
  use Type
  use prelude.Prelude
  val is_none [@cfg:stackify] (self : Type.core_option_option t) : bool
    ensures { result = (self = Type.Core_Option_Option_None) }
    
end
module Core_Option_Impl0_IsNone
  type t
  use Type
  use prelude.Prelude
  val is_none [@cfg:stackify] (self : Type.core_option_option t) : bool
    ensures { result = (self = Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl15_DeleteRec_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl2_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl11_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl11_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl1_MatchT_Interface as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl
  clone RedBlackTree_Impl0_MatchN_Interface as MatchN0 with type k = k, type v = v
  clone RedBlackTree_Impl0_MatchT_Interface as MatchT0 with type k = k, type v = v,
  predicate MatchN0.match_n = MatchN0.match_n, axiom .
  clone RedBlackTree_Impl7_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  val delete_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 680 15 680 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 681 15 682 62] MatchT0.match_t (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( * self) \/ MatchT1.match_t (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self)}
    requires {[#"../red_black_tree.rs" 683 4 683 53] exists h : (int) . HasHeight0.has_height ( * self) h}
    ensures { [#"../red_black_tree.rs" 684 14 684 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 685 4 685 78] forall v : (v) . result = Type.Core_Option_Option_None -> not HasMapping0.has_mapping ( * self) (Model0.model key) v }
    ensures { [#"../red_black_tree.rs" 686 4 687 57] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Model0.model key = Model0.model k /\ HasMapping0.has_mapping ( * self) (Model0.model k) v }
    ensures { [#"../red_black_tree.rs" 688 4 689 55] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> Model0.model key = k \/ HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 690 4 691 55] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v -> Model0.model key <> k /\ HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 692 4 692 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 693 14 693 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 694 4 694 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    
end
module RedBlackTree_Impl15_DeleteRec
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl5_Model as Model1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl2_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl2_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl2_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model1.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl2_HasMappingInj as HasMappingInj0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function HasMappingModel0.has_mapping_model = HasMappingModel0.has_mapping_model,
  function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl11_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl0_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl0_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl1_MatchN as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl1_MatchT as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN1.match_n
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve11 with type t = v
  clone Core_Mem_Swap_Interface as Swap1 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve10 with type t = k
  clone Core_Mem_Swap_Interface as Swap0 with type t = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve9 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve12 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve6.resolve, predicate Resolve1.resolve = Resolve7.resolve
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone Core_Option_Impl0_IsNone_Interface as IsNone0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.core_option_option (k, v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model0.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl3_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl6_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl14_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant, function Color0.color = Color0.color,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight1.has_height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl1_MatchN as MatchN3 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl),
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl14_MoveRedRight_Interface as MoveRedRight0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant, predicate MatchN0.match_n = MatchN3.match_n,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate MatchN1.match_n = MatchN1.match_n,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_MatchN as MatchN2 with type k = k, type v = v,
  type l = Type.redblacktree_cpn (Type.redblacktree_cpl) (Type.redblacktree_cpl), type r = Type.redblacktree_cpl,
  predicate MatchT0.match_t = MatchT1.match_t, predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl14_MoveRedLeft_Interface as MoveRedLeft0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant, predicate MatchN0.match_n = MatchN2.match_n,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, predicate MatchN1.match_n = MatchN1.match_n,
  function Model0.model = Model0.model, predicate LeLog0.le_log = LeLog0.le_log,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl14_Balance_Interface as Balance0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant, function Color0.color = Color0.color,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, predicate MatchN0.match_n = MatchN2.match_n,
  predicate MatchN1.match_n = MatchN0.match_n, predicate MatchN2.match_n = MatchN1.match_n,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl15_DeleteMinRec_Interface as DeleteMinRec0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT1.match_t, predicate HasHeight0.has_height = HasHeight0.has_height,
  function Model0.model = Model0.model, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate LeLog0.le_log = LeLog0.le_log,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate MatchN0.match_n = MatchN0.match_n, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg delete_rec [@cfg:stackify] [#"../red_black_tree.rs" 695 4 695 55] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 680 15 680 38] BstInvariant0.bst_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 681 15 682 62] MatchT0.match_t (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) ( * self) \/ MatchT1.match_t (Type.RedBlackTree_Cpn (Type.RedBlackTree_Color_Black) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Red)) (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black))) ( * self)}
    requires {[#"../red_black_tree.rs" 683 4 683 53] exists h : (int) . HasHeight0.has_height ( * self) h}
    ensures { [#"../red_black_tree.rs" 684 14 684 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 685 4 685 78] forall v : (v) . result = Type.Core_Option_Option_None -> not HasMapping0.has_mapping ( * self) (Model0.model key) v }
    ensures { [#"../red_black_tree.rs" 686 4 687 57] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Model0.model key = Model0.model k /\ HasMapping0.has_mapping ( * self) (Model0.model k) v }
    ensures { [#"../red_black_tree.rs" 688 4 689 55] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> Model0.model key = k \/ HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 690 4 691 55] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v -> Model0.model key <> k /\ HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 692 4 692 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 693 14 693 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 694 4 694 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.core_option_option (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var r_3 : Type.core_option_option (k, v);
  var node_4 : borrowed (Type.redblacktree_node k v);
  var _5 : borrowed (Type.redblacktree_node k v);
  var _6 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : ();
  var _9 : Type.core_cmp_ordering;
  var _10 : k;
  var _11 : k;
  var _12 : k;
  var _13 : int8;
  var _14 : ();
  var _15 : bool;
  var _16 : Type.core_option_option (Type.redblacktree_node k v);
  var _17 : ();
  var _18 : ();
  var _19 : bool;
  var _20 : bool;
  var _21 : bool;
  var _22 : Type.redblacktree_tree k v;
  var _23 : bool;
  var _24 : bool;
  var _25 : Type.redblacktree_tree k v;
  var _26 : Type.redblacktree_node k v;
  var _27 : Type.core_option_option (Type.redblacktree_node k v);
  var _28 : Type.core_option_option (Type.redblacktree_node k v);
  var _29 : ();
  var _30 : borrowed (Type.redblacktree_node k v);
  var _31 : Type.core_option_option (k, v);
  var _32 : borrowed (Type.redblacktree_tree k v);
  var _33 : k;
  var ord_34 : Type.core_cmp_ordering;
  var _35 : bool;
  var _36 : Type.redblacktree_tree k v;
  var _37 : ();
  var _38 : borrowed (Type.redblacktree_node k v);
  var _39 : Type.core_option_option (k, v);
  var _40 : borrowed (Type.redblacktree_tree k v);
  var _41 : k;
  var _42 : ();
  var _43 : bool;
  var _44 : Type.core_option_option (Type.redblacktree_node k v);
  var _45 : ();
  var _46 : ();
  var _47 : int8;
  var _48 : ();
  var node_49 : Type.redblacktree_node k v;
  var _50 : Type.core_option_option (Type.redblacktree_node k v);
  var _51 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _52 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _53 : (k, v);
  var _54 : k;
  var _55 : v;
  var _56 : ();
  var _57 : bool;
  var _58 : bool;
  var _59 : bool;
  var _60 : Type.redblacktree_tree k v;
  var _61 : Type.redblacktree_node k v;
  var _62 : Type.core_option_option (Type.redblacktree_node k v);
  var _63 : Type.core_option_option (Type.redblacktree_node k v);
  var _64 : bool;
  var _65 : bool;
  var _66 : borrowed (Type.redblacktree_node k v);
  var _67 : Type.core_option_option (k, v);
  var _68 : borrowed (Type.redblacktree_tree k v);
  var _69 : k;
  var _70 : int8;
  var kv_71 : (k, v);
  var _72 : borrowed (Type.redblacktree_tree k v);
  ghost var _73 : ();
  var _74 : ();
  var _75 : ();
  var _76 : borrowed k;
  var _77 : borrowed k;
  var _78 : borrowed k;
  var _79 : borrowed k;
  var _80 : ();
  var _81 : borrowed v;
  var _82 : borrowed v;
  var _83 : borrowed v;
  var _84 : borrowed v;
  var _85 : Type.core_option_option (k, v);
  var _86 : (k, v);
  var _87 : Type.core_option_option (k, v);
  var _88 : borrowed (Type.redblacktree_tree k v);
  var _89 : k;
  var _90 : ();
  var _91 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _7 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _7)) };
    _6 <- ([#"../red_black_tree.rs" 697 26 697 44] AsMut0.as_mut _7);
    goto BB1
  }
  BB1 {
    _5 <- ([#"../red_black_tree.rs" 697 26 697 53] Unwrap0.unwrap _6);
    goto BB2
  }
  BB2 {
    node_4 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ node_4) };
    assume { Resolve0.resolve _5 };
    _10 <- key_2;
    _12 <- Type.redblacktree_node_Node_key ( * node_4);
    _11 <- _12;
    assume { Resolve1.resolve _12 };
    _9 <- ([#"../red_black_tree.rs" 698 14 698 32] Cmp0.cmp _10 _11);
    goto BB3
  }
  BB3 {
    switch (_9)
      | Type.Core_Cmp_Ordering_Less -> goto BB5
      | _ -> goto BB4
      end
  }
  BB4 {
    ord_34 <- _9;
    _36 <- Type.redblacktree_node_Node_left ( * node_4);
    _35 <- ([#"../red_black_tree.rs" 709 19 709 37] IsRed0.is_red _36);
    goto BB23
  }
  BB5 {
    assume { Resolve2.resolve self_1 };
    _16 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_4));
    _15 <- ([#"../red_black_tree.rs" 700 19 700 43] IsNone0.is_none _16);
    goto BB6
  }
  BB6 {
    switch (_15)
      | False -> goto BB8
      | _ -> goto BB7
      end
  }
  BB7 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve4.resolve node_4 };
    _0 <- Type.Core_Option_Option_None;
    goto BB72
  }
  BB8 {
    _14 <- ();
    _22 <- Type.redblacktree_node_Node_left ( * node_4);
    _21 <- ([#"../red_black_tree.rs" 703 20 703 38] IsRed0.is_red _22);
    goto BB12
  }
  BB9 {
    _19 <- false;
    goto BB11
  }
  BB10 {
    _28 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_4));
    _27 <- ([#"../red_black_tree.rs" 703 43 703 66] AsRef0.as_ref _28);
    goto BB13
  }
  BB11 {
    switch (_19)
      | False -> goto BB18
      | _ -> goto BB16
      end
  }
  BB12 {
    _20 <- not _21;
    switch (_20)
      | False -> goto BB9
      | _ -> goto BB10
      end
  }
  BB13 {
    _26 <- ([#"../red_black_tree.rs" 703 43 703 75] Unwrap2.unwrap _27);
    goto BB14
  }
  BB14 {
    _25 <- Type.redblacktree_node_Node_left _26;
    assume { Resolve9.resolve _26 };
    _24 <- ([#"../red_black_tree.rs" 703 43 703 89] IsRed0.is_red _25);
    goto BB15
  }
  BB15 {
    _23 <- not _24;
    _19 <- _23;
    goto BB11
  }
  BB16 {
    _30 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _30) };
    _29 <- ([#"../red_black_tree.rs" 704 20 704 40] MoveRedLeft0.move_red_left _30);
    goto BB17
  }
  BB17 {
    _18 <- ();
    goto BB19
  }
  BB18 {
    _18 <- ();
    goto BB19
  }
  BB19 {
    _32 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node ( ^ _32) b c d e) };
    _33 <- key_2;
    assume { Resolve1.resolve key_2 };
    _31 <- ([#"../red_black_tree.rs" 706 20 706 45] delete_rec _32 _33);
    goto BB20
  }
  BB20 {
    assume { Resolve3.resolve r_3 };
    r_3 <- _31;
    goto BB21
  }
  BB21 {
    _8 <- ();
    goto BB22
  }
  BB22 {
    goto BB67
  }
  BB23 {
    switch (_35)
      | False -> goto BB29
      | _ -> goto BB24
      end
  }
  BB24 {
    assume { Resolve2.resolve self_1 };
    _38 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _38) };
    _37 <- ([#"../red_black_tree.rs" 710 20 710 39] RotateRight0.rotate_right _38);
    goto BB25
  }
  BB25 {
    _40 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b c d ( ^ _40)) };
    _41 <- key_2;
    assume { Resolve1.resolve key_2 };
    _39 <- ([#"../red_black_tree.rs" 711 24 711 50] delete_rec _40 _41);
    goto BB26
  }
  BB26 {
    assume { Resolve3.resolve r_3 };
    r_3 <- _39;
    goto BB27
  }
  BB27 {
    _8 <- ();
    goto BB28
  }
  BB28 {
    goto BB66
  }
  BB29 {
    _44 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * node_4));
    _43 <- ([#"../red_black_tree.rs" 713 23 713 48] IsNone0.is_none _44);
    goto BB30
  }
  BB30 {
    switch (_43)
      | False -> goto BB39
      | _ -> goto BB31
      end
  }
  BB31 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve4.resolve node_4 };
    switch (ord_34)
      | Type.Core_Cmp_Ordering_Greater -> goto BB32
      | _ -> goto BB33
      end
  }
  BB32 {
    assume { Resolve2.resolve self_1 };
    _0 <- Type.Core_Option_Option_None;
    goto BB71
  }
  BB33 {
    _46 <- ();
    _52 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _52)) };
    assume { Resolve2.resolve self_1 };
    _51 <- borrow_mut ( * _52);
    _52 <- { _52 with current = ( ^ _51) };
    _50 <- ([#"../red_black_tree.rs" 717 35 717 65] Take0.take _51);
    goto BB34
  }
  BB34 {
    assume { Resolve5.resolve _52 };
    node_49 <- ([#"../red_black_tree.rs" 717 35 717 74] Unwrap1.unwrap _50);
    goto BB35
  }
  BB35 {
    assume { Resolve6.resolve _54 };
    _54 <- Type.redblacktree_node_Node_key node_49;
    assume { Resolve7.resolve _55 };
    _55 <- Type.redblacktree_node_Node_val node_49;
    _53 <- (_54, _55);
    goto BB36
  }
  BB36 {
    goto BB37
  }
  BB37 {
    _0 <- Type.Core_Option_Option_Some _53;
    goto BB38
  }
  BB38 {
    goto BB70
  }
  BB39 {
    assume { Resolve2.resolve self_1 };
    _42 <- ();
    assert { [#"../red_black_tree.rs" 720 20 720 104] exists h : (int) . HasHeight0.has_height (Type.redblacktree_node_Node_left ( * node_4)) h /\ HasHeight0.has_height (Type.redblacktree_node_Node_right ( * node_4)) h };
    _56 <- ();
    _63 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * node_4));
    _62 <- ([#"../red_black_tree.rs" 721 24 721 48] AsRef0.as_ref _63);
    goto BB43
  }
  BB40 {
    _57 <- false;
    goto BB42
  }
  BB41 {
    _66 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _66) };
    _65 <- ([#"../red_black_tree.rs" 721 76 721 97] MoveRedRight0.move_red_right _66);
    goto BB46
  }
  BB42 {
    switch (_57)
      | False -> goto BB51
      | _ -> goto BB47
      end
  }
  BB43 {
    _61 <- ([#"../red_black_tree.rs" 721 24 721 57] Unwrap2.unwrap _62);
    goto BB44
  }
  BB44 {
    _60 <- Type.redblacktree_node_Node_left _61;
    assume { Resolve9.resolve _61 };
    _59 <- ([#"../red_black_tree.rs" 721 24 721 71] IsRed0.is_red _60);
    goto BB45
  }
  BB45 {
    _58 <- not _59;
    switch (_58)
      | False -> goto BB40
      | _ -> goto BB41
      end
  }
  BB46 {
    _64 <- not _65;
    _57 <- _64;
    goto BB42
  }
  BB47 {
    _68 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b c d ( ^ _68)) };
    _69 <- key_2;
    assume { Resolve1.resolve key_2 };
    _67 <- ([#"../red_black_tree.rs" 722 28 722 54] delete_rec _68 _69);
    goto BB48
  }
  BB48 {
    assume { Resolve3.resolve r_3 };
    r_3 <- _67;
    goto BB49
  }
  BB49 {
    _8 <- ();
    goto BB50
  }
  BB50 {
    goto BB65
  }
  BB51 {
    switch (ord_34)
      | Type.Core_Cmp_Ordering_Equal -> goto BB52
      | _ -> goto BB61
      end
  }
  BB52 {
    assume { Resolve1.resolve key_2 };
    _72 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b c d ( ^ _72)) };
    kv_71 <- ([#"../red_black_tree.rs" 724 37 724 64] DeleteMinRec0.delete_min_rec _72);
    goto BB53
  }
  BB53 {
    _74 <- ();
    _73 <- ghost ([#"../red_black_tree.rs" 725 24 725 56] ());
    goto BB54
  }
  BB54 {
    _77 <- borrow_mut (Type.redblacktree_node_Node_key ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b ( ^ _77) d e) };
    _76 <- borrow_mut ( * _77);
    _77 <- { _77 with current = ( ^ _76) };
    _79 <- borrow_mut (let (a, _) = kv_71 in a);
    kv_71 <- (let (a, b) = kv_71 in ( ^ _79, b));
    _78 <- borrow_mut ( * _79);
    _79 <- { _79 with current = ( ^ _78) };
    _75 <- ([#"../red_black_tree.rs" 726 24 726 64] Swap0.swap _76 _78);
    goto BB55
  }
  BB55 {
    assume { Resolve10.resolve _77 };
    assume { Resolve10.resolve _79 };
    _82 <- borrow_mut (Type.redblacktree_node_Node_val ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b c ( ^ _82) e) };
    _81 <- borrow_mut ( * _82);
    _82 <- { _82 with current = ( ^ _81) };
    _84 <- borrow_mut (let (_, a) = kv_71 in a);
    kv_71 <- (let (a, b) = kv_71 in (a,  ^ _84));
    _83 <- borrow_mut ( * _84);
    _84 <- { _84 with current = ( ^ _83) };
    _80 <- ([#"../red_black_tree.rs" 727 24 727 64] Swap1.swap _81 _83);
    goto BB56
  }
  BB56 {
    assume { Resolve11.resolve _82 };
    assume { Resolve11.resolve _84 };
    assume { Resolve12.resolve _86 };
    _86 <- kv_71;
    _85 <- Type.Core_Option_Option_Some _86;
    goto BB57
  }
  BB57 {
    assume { Resolve3.resolve r_3 };
    r_3 <- _85;
    goto BB58
  }
  BB58 {
    _8 <- ();
    goto BB59
  }
  BB59 {
    goto BB60
  }
  BB60 {
    goto BB65
  }
  BB61 {
    _88 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b c d ( ^ _88)) };
    _89 <- key_2;
    assume { Resolve1.resolve key_2 };
    _87 <- ([#"../red_black_tree.rs" 730 28 730 54] delete_rec _88 _89);
    goto BB62
  }
  BB62 {
    assume { Resolve3.resolve r_3 };
    r_3 <- _87;
    goto BB63
  }
  BB63 {
    _8 <- ();
    goto BB64
  }
  BB64 {
    goto BB65
  }
  BB65 {
    goto BB66
  }
  BB66 {
    goto BB67
  }
  BB67 {
    _91 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _91) };
    _90 <- ([#"../red_black_tree.rs" 735 8 735 22] Balance0.balance _91);
    goto BB68
  }
  BB68 {
    assume { Resolve4.resolve node_4 };
    assume { Resolve3.resolve _0 };
    _0 <- r_3;
    goto BB69
  }
  BB69 {
    goto BB74
  }
  BB70 {
    assume { Resolve8.resolve node_49 };
    goto BB71
  }
  BB71 {
    goto BB72
  }
  BB72 {
    goto BB73
  }
  BB73 {
    goto BB74
  }
  BB74 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module RedBlackTree_Impl15_Delete_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val delete [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 739 15 739 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 740 14 740 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 741 14 741 63] (result = Type.Core_Option_Option_None) = (Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 742 4 743 46] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) /\ Model1.model k = Model1.model key -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some v }
    ensures { [#"../red_black_tree.rs" 744 14 744 49] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl15_Delete
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl5_ModelTy as ModelTy1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl2_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl2_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl2_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl5_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model2 with type t = Type.redblacktree_tree k v,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl11_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.core_option_option (k, v)
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  clone RedBlackTree_Impl13_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl0_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl0_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl1_MatchN as MatchN1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl1_MatchT as MatchT1 with type k = k, type v = v, type l = Type.redblacktree_cpl,
  type r = Type.redblacktree_cpl, predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl15_DeleteRec_Interface as DeleteRec0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT1.match_t, predicate HasHeight0.has_height = HasHeight0.has_height,
  function Model0.model = Model1.model, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  function Color0.color = Color0.color, predicate MatchN0.match_n = MatchN0.match_n,
  predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg delete [@cfg:stackify] [#"../red_black_tree.rs" 745 4 745 55] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 739 15 739 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 740 14 740 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 741 14 741 63] (result = Type.Core_Option_Option_None) = (Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 742 4 743 46] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) /\ Model1.model k = Model1.model key -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some v }
    ensures { [#"../red_black_tree.rs" 744 14 744 49] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_None) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.core_option_option (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  ghost var old_self_3 : borrowed (Type.redblacktree_tree k v);
  var _4 : ();
  var _5 : ();
  var _6 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _7 : isize;
  var _8 : ();
  var node_9 : borrowed (Type.redblacktree_node k v);
  var _10 : bool;
  var _11 : bool;
  var _12 : bool;
  var _13 : Type.redblacktree_tree k v;
  var _14 : bool;
  var _15 : bool;
  var _16 : Type.redblacktree_tree k v;
  var _17 : Type.redblacktree_color;
  var _18 : ();
  var r_19 : Type.core_option_option (k, v);
  var _20 : borrowed (Type.redblacktree_tree k v);
  var _21 : k;
  var _22 : ();
  var _23 : ();
  var _24 : bool;
  var _25 : Type.redblacktree_tree k v;
  var _26 : Type.redblacktree_color;
  var _27 : borrowed (Type.redblacktree_node k v);
  var _28 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _29 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _30 : ();
  ghost var _31 : ();
  var _32 : ();
  ghost var _33 : ();
  var _34 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _4 <- ();
    old_self_3 <- ghost ([#"../red_black_tree.rs" 746 23 746 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_3 };
    _6 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _6)) };
    switch ( * _6)
      | Type.Core_Option_Option_None -> goto BB4
      | Type.Core_Option_Option_Some _ -> goto BB2
      end
  }
  BB2 {
    node_9 <- borrow_mut (Type.core_option_option_Some_0 ( * _6));
    _6 <- { _6 with current = (let Type.Core_Option_Option_Some a =  * _6 in Type.Core_Option_Option_Some ( ^ node_9)) };
    assume { Resolve3.resolve _6 };
    _13 <- Type.redblacktree_node_Node_left ( * node_9);
    _12 <- ([#"../red_black_tree.rs" 750 20 750 38] IsRed0.is_red _13);
    goto BB8
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve key_2 };
    assume { Resolve3.resolve _6 };
    absurd
  }
  BB4 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve key_2 };
    assume { Resolve3.resolve _6 };
    _0 <- Type.Core_Option_Option_None;
    goto BB23
  }
  BB5 {
    _10 <- false;
    goto BB7
  }
  BB6 {
    _16 <- Type.redblacktree_node_Node_right ( * node_9);
    _15 <- ([#"../red_black_tree.rs" 750 43 750 62] IsRed0.is_red _16);
    goto BB9
  }
  BB7 {
    switch (_10)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB8 {
    _11 <- not _12;
    switch (_11)
      | False -> goto BB5
      | _ -> goto BB6
      end
  }
  BB9 {
    _14 <- not _15;
    _10 <- _14;
    goto BB7
  }
  BB10 {
    _17 <- Type.RedBlackTree_Color_Red;
    node_9 <- { node_9 with current = (let Type.RedBlackTree_Node a b c d e =  * node_9 in Type.RedBlackTree_Node a _17 c d e) };
    assume { Resolve4.resolve node_9 };
    _5 <- ();
    goto BB12
  }
  BB11 {
    assume { Resolve4.resolve node_9 };
    _5 <- ();
    goto BB12
  }
  BB12 {
    assert { [#"../red_black_tree.rs" 756 8 757 61] forall h : (int) . HasHeight0.has_height ( * old_self_3) h -> Color0.color ( * self_1) = Type.RedBlackTree_Color_Black \/ HasHeight0.has_height ( * self_1) (h - 1) };
    _18 <- ();
    _20 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _20) };
    _21 <- key_2;
    assume { Resolve2.resolve key_2 };
    r_19 <- ([#"../red_black_tree.rs" 758 16 758 36] DeleteRec0.delete_rec _20 _21);
    goto BB13
  }
  BB13 {
    assert { [#"../red_black_tree.rs" 759 24 759 62] Model0.model ( * self_1) = Map.set (Model2.model old_self_3) (Model1.model key_2) (Type.Core_Option_Option_None) };
    _22 <- ();
    _25 <-  * self_1;
    _24 <- ([#"../red_black_tree.rs" 760 11 760 24] IsRed0.is_red _25);
    goto BB14
  }
  BB14 {
    switch (_24)
      | False -> goto BB18
      | _ -> goto BB15
      end
  }
  BB15 {
    _26 <- Type.RedBlackTree_Color_Black;
    _29 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _29)) };
    _28 <- ([#"../red_black_tree.rs" 761 12 761 30] AsMut0.as_mut _29);
    goto BB16
  }
  BB16 {
    assume { Resolve1.resolve self_1 };
    _27 <- ([#"../red_black_tree.rs" 761 12 761 39] Unwrap0.unwrap _28);
    goto BB17
  }
  BB17 {
    _27 <- { _27 with current = (let Type.RedBlackTree_Node a b c d e =  * _27 in Type.RedBlackTree_Node a _26 c d e) };
    assume { Resolve4.resolve _27 };
    _23 <- ();
    goto BB19
  }
  BB18 {
    assume { Resolve1.resolve self_1 };
    _23 <- ();
    goto BB19
  }
  BB19 {
    assert { [#"../red_black_tree.rs" 763 8 764 58] forall h : (int) . HasHeight0.has_height ( * old_self_3) h -> HasHeight0.has_height ( * self_1) h \/ HasHeight0.has_height ( * self_1) (h - 1) };
    _30 <- ();
    _32 <- ();
    _31 <- ghost ([#"../red_black_tree.rs" 765 8 765 55] match (r_19) with
      | Type.Core_Option_Option_None -> ()
      | Type.Core_Option_Option_Some _ -> ()
      end);
    goto BB20
  }
  BB20 {
    _34 <- ();
    _33 <- ghost ([#"../red_black_tree.rs" 766 8 766 42] ());
    goto BB21
  }
  BB21 {
    assume { Resolve5.resolve _0 };
    _0 <- r_19;
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    return _0
  }
  
end
module RedBlackTree_Impl15_Get_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get [@cfg:stackify] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
    requires {[#"../red_black_tree.rs" 770 15 770 34] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 771 4 771 83] forall v : (v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v }
    ensures { [#"../red_black_tree.rs" 772 4 772 62] result = Type.Core_Option_Option_None -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None }
    
end
module RedBlackTree_Impl15_Get
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl5_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl2_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl2_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl2_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl11_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg get [@cfg:stackify] [#"../red_black_tree.rs" 773 4 773 44] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
    requires {[#"../red_black_tree.rs" 770 15 770 34] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 771 4 771 83] forall v : (v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v }
    ensures { [#"../red_black_tree.rs" 772 4 772 62] result = Type.Core_Option_Option_None -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.core_option_option v;
  var self_1 : Type.redblacktree_tree k v;
  var key_2 : k;
  var _3 : ();
  ghost var _4 : ();
  var _5 : ();
  var tree_6 : Type.redblacktree_tree k v;
  var _7 : ();
  var _8 : ();
  var _9 : Type.core_option_option (Type.redblacktree_node k v);
  var _10 : isize;
  var node_11 : Type.redblacktree_node k v;
  var _12 : Type.core_cmp_ordering;
  var _13 : k;
  var _14 : k;
  var _15 : k;
  var _16 : int8;
  var _17 : Type.redblacktree_tree k v;
  var _18 : Type.redblacktree_tree k v;
  var _19 : ();
  var _20 : v;
  var _21 : v;
  var _22 : Type.redblacktree_tree k v;
  var _23 : Type.redblacktree_tree k v;
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _5 <- ();
    _4 <- ghost ([#"../red_black_tree.rs" 774 8 774 42] ());
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve tree_6 };
    tree_6 <- self_1;
    assume { Resolve0.resolve self_1 };
    goto BB2
  }
  BB2 {
    invariant bst_inv { [#"../red_black_tree.rs" 777 29 777 52] BstInvariant0.bst_invariant tree_6 };
    invariant has_mapping { [#"../red_black_tree.rs" 777 8 777 54] forall v : (v) . HasMapping0.has_mapping self_1 (Model1.model key_2) v = HasMapping0.has_mapping tree_6 (Model1.model key_2) v };
    _9 <- Type.redblacktree_tree_Tree_node tree_6;
    assume { Resolve0.resolve tree_6 };
    switch (_9)
      | Type.Core_Option_Option_Some _ -> goto BB3
      | _ -> goto BB10
      end
  }
  BB3 {
    node_11 <- Type.core_option_option_Some_0 _9;
    assume { Resolve2.resolve _9 };
    _13 <- key_2;
    _15 <- Type.redblacktree_node_Node_key node_11;
    _14 <- _15;
    assume { Resolve1.resolve _15 };
    _12 <- ([#"../red_black_tree.rs" 780 18 780 36] Cmp0.cmp _13 _14);
    goto BB4
  }
  BB4 {
    switch (_12)
      | Type.Core_Cmp_Ordering_Less -> goto BB7
      | Type.Core_Cmp_Ordering_Equal -> goto BB8
      | Type.Core_Cmp_Ordering_Greater -> goto BB5
      end
  }
  BB5 {
    _23 <- Type.redblacktree_node_Node_right node_11;
    assume { Resolve3.resolve node_11 };
    _22 <- _23;
    assume { Resolve0.resolve _23 };
    assume { Resolve0.resolve tree_6 };
    tree_6 <- _22;
    _8 <- ();
    goto BB9
  }
  BB6 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_11 };
    absurd
  }
  BB7 {
    _18 <- Type.redblacktree_node_Node_left node_11;
    assume { Resolve3.resolve node_11 };
    _17 <- _18;
    assume { Resolve0.resolve _18 };
    assume { Resolve0.resolve tree_6 };
    tree_6 <- _17;
    _8 <- ();
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve key_2 };
    _21 <- Type.redblacktree_node_Node_val node_11;
    assume { Resolve3.resolve node_11 };
    _20 <- _21;
    assume { Resolve4.resolve _21 };
    _0 <- Type.Core_Option_Option_Some _20;
    goto BB11
  }
  BB9 {
    goto BB2
  }
  BB10 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _9 };
    _7 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module RedBlackTree_Impl15_GetMut_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get_mut [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    requires {[#"../red_black_tree.rs" 789 15 789 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 790 14 790 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 791 4 792 89] forall v : (borrowed v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some ( * v) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model2.model key) (Type.Core_Option_Option_Some ( ^ v)) }
    ensures { [#"../red_black_tree.rs" 793 4 793 93] result = Type.Core_Option_Option_None -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None /\ Map.get (Model0.model ( ^ self)) (Model1.model key) = Type.Core_Option_Option_None }
    
end
module RedBlackTree_Impl15_GetMut
  type k
  type v
  use prelude.Prelude
  use Type
  use map.Map
  use mach.int.Int
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl5_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl6_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl7_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl2_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl2_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl2_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl11_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl10_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl11_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl0_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl0_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_tree k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg get_mut [@cfg:stackify] [#"../red_black_tree.rs" 794 4 794 56] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    requires {[#"../red_black_tree.rs" 789 15 789 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 790 14 790 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 791 4 792 89] forall v : (borrowed v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some ( * v) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model2.model key) (Type.Core_Option_Option_Some ( ^ v)) }
    ensures { [#"../red_black_tree.rs" 793 4 793 93] result = Type.Core_Option_Option_None -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None /\ Map.get (Model0.model ( ^ self)) (Model1.model key) = Type.Core_Option_Option_None }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Type.core_option_option (borrowed v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var _3 : ();
  ghost var _4 : ();
  var _5 : ();
  var tree_6 : borrowed (Type.redblacktree_tree k v);
  var _7 : ();
  var _8 : ();
  var _9 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _10 : isize;
  var node_11 : borrowed (Type.redblacktree_node k v);
  var _12 : Type.core_cmp_ordering;
  var _13 : k;
  var _14 : k;
  var _15 : k;
  var _16 : int8;
  var _17 : borrowed (Type.redblacktree_tree k v);
  var _18 : borrowed (Type.redblacktree_tree k v);
  var _19 : ();
  var _20 : borrowed v;
  var _21 : borrowed v;
  var _22 : borrowed (Type.redblacktree_tree k v);
  var _23 : borrowed (Type.redblacktree_tree k v);
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _5 <- ();
    _4 <- ghost ([#"../red_black_tree.rs" 795 8 795 42] ());
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve tree_6 };
    tree_6 <- self_1;
    goto BB2
  }
  BB2 {
    invariant bst_inv { [#"../red_black_tree.rs" 799 29 799 52] BstInvariant0.bst_invariant ( * tree_6) };
    invariant color_inv { [#"../red_black_tree.rs" 800 31 800 56] ColorInvariant0.color_invariant ( * tree_6) };
    invariant mapping_prof_key { [#"../red_black_tree.rs" 799 8 799 54] forall v : (v) . HasMapping0.has_mapping ( ^ tree_6) (Model2.model key_2) v = HasMapping0.has_mapping ( ^ self_1) (Model2.model key_2) v };
    invariant mapping_cur_key { [#"../red_black_tree.rs" 799 8 799 54] forall v : (v) . HasMapping0.has_mapping ( * tree_6) (Model2.model key_2) v = HasMapping0.has_mapping ( * self_1) (Model2.model key_2) v };
    invariant bst_inv_proph { [#"../red_black_tree.rs" 799 8 799 54] (forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model2.model key_2 \/ HasMapping0.has_mapping ( * tree_6) k v = HasMapping0.has_mapping ( ^ tree_6) k v) -> BstInvariant0.bst_invariant ( ^ tree_6) -> BstInvariant0.bst_invariant ( ^ self_1) };
    invariant color_inv { [#"../red_black_tree.rs" 799 8 799 54] MatchT0.match_t (Type.RedBlackTree_Cpl (Color0.color ( * tree_6))) ( ^ tree_6) -> MatchT0.match_t (Type.RedBlackTree_Cpl (Type.RedBlackTree_Color_Black)) ( ^ self_1) };
    invariant mapping_proph { [#"../red_black_tree.rs" 799 8 799 54] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * tree_6) k v = HasMapping0.has_mapping ( ^ tree_6) k v -> HasMapping0.has_mapping ( * self_1) k v = HasMapping0.has_mapping ( ^ self_1) k v };
    invariant height { [#"../red_black_tree.rs" 799 8 799 54] Color0.color ( ^ tree_6) = Color0.color ( * tree_6) /\ (forall h : (int) . HasHeight0.has_height ( * tree_6) h -> HasHeight0.has_height ( ^ tree_6) h) -> (forall h : (int) . HasHeight0.has_height ( * self_1) h -> HasHeight0.has_height ( ^ self_1) h) };
    _9 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * tree_6));
    tree_6 <- { tree_6 with current = (let Type.RedBlackTree_Tree a =  * tree_6 in Type.RedBlackTree_Tree ( ^ _9)) };
    assume { Resolve0.resolve tree_6 };
    switch ( * _9)
      | Type.Core_Option_Option_Some _ -> goto BB3
      | _ -> goto BB10
      end
  }
  BB3 {
    node_11 <- borrow_mut (Type.core_option_option_Some_0 ( * _9));
    _9 <- { _9 with current = (let Type.Core_Option_Option_Some a =  * _9 in Type.Core_Option_Option_Some ( ^ node_11)) };
    assume { Resolve2.resolve _9 };
    _13 <- key_2;
    _15 <- Type.redblacktree_node_Node_key ( * node_11);
    _14 <- _15;
    assume { Resolve1.resolve _15 };
    _12 <- ([#"../red_black_tree.rs" 812 18 812 36] Cmp0.cmp _13 _14);
    goto BB4
  }
  BB4 {
    switch (_12)
      | Type.Core_Cmp_Ordering_Less -> goto BB7
      | Type.Core_Cmp_Ordering_Equal -> goto BB8
      | Type.Core_Cmp_Ordering_Greater -> goto BB5
      end
  }
  BB5 {
    _23 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_11));
    node_11 <- { node_11 with current = (let Type.RedBlackTree_Node a b c d e =  * node_11 in Type.RedBlackTree_Node a b c d ( ^ _23)) };
    assume { Resolve3.resolve node_11 };
    _22 <- borrow_mut ( * _23);
    _23 <- { _23 with current = ( ^ _22) };
    assume { Resolve0.resolve _23 };
    assume { Resolve0.resolve tree_6 };
    tree_6 <- _22;
    _8 <- ();
    goto BB9
  }
  BB6 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_11 };
    absurd
  }
  BB7 {
    _18 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_11));
    node_11 <- { node_11 with current = (let Type.RedBlackTree_Node a b c d e =  * node_11 in Type.RedBlackTree_Node ( ^ _18) b c d e) };
    assume { Resolve3.resolve node_11 };
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    assume { Resolve0.resolve _18 };
    assume { Resolve0.resolve tree_6 };
    tree_6 <- _17;
    _8 <- ();
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve key_2 };
    _21 <- borrow_mut (Type.redblacktree_node_Node_val ( * node_11));
    node_11 <- { node_11 with current = (let Type.RedBlackTree_Node a b c d e =  * node_11 in Type.RedBlackTree_Node a b c ( ^ _21) e) };
    assume { Resolve3.resolve node_11 };
    _20 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _20) };
    _0 <- Type.Core_Option_Option_Some _20;
    assume { Resolve4.resolve _21 };
    goto BB11
  }
  BB9 {
    goto BB2
  }
  BB10 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _9 };
    _7 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module RedBlackTree_Impl16
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.redblacktree_color
  clone RedBlackTree_Impl16_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.redblacktree_color, val clone' = Clone0.clone'
end
module RedBlackTree_Impl17
  
end
module RedBlackTree_Impl4_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl4
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl2_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model3.model
  clone RedBlackTree_Impl5_Model as Model2 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl4_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model, function Model1.model = Model3.model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl4_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.redblacktree_node k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.redblacktree_node k v,
  type modelTy = ModelTy0.modelTy
end
