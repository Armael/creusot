
module RedBlackTree_Color_Type
  type t_color  =
    | C_Red
    | C_Black
    
end
module RedBlackTree_Impl17_Clone_Interface
  use prelude.Borrow
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  val clone' [@cfg:stackify] (self : RedBlackTree_Color_Type.t_color) : RedBlackTree_Color_Type.t_color
    ensures { [#"../red_black_tree.rs" 12 9 12 14] result = self }
    
end
module RedBlackTree_Impl17_Clone
  use prelude.Borrow
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use mach.int.Int
  use prelude.IntSize
  let rec cfg clone' [@cfg:stackify] [#"../red_black_tree.rs" 12 9 12 14] (self : RedBlackTree_Color_Type.t_color) : RedBlackTree_Color_Type.t_color
    ensures { [#"../red_black_tree.rs" 12 9 12 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : RedBlackTree_Color_Type.t_color;
  var self_1 : RedBlackTree_Color_Type.t_color;
  var _3 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | RedBlackTree_Color_Type.C_Red -> goto BB3
      | RedBlackTree_Color_Type.C_Black -> goto BB1
      end
  }
  BB1 {
    _0 <- RedBlackTree_Color_Type.C_Black;
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- RedBlackTree_Color_Type.C_Red;
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_box 't 'a =
    | C_Box (Core_Ptr_Unique_Unique_Type.t_unique 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  type t_node 'k 'v =
    | C_Node (t_tree 'k 'v) (RedBlackTree_Color_Type.t_color) 'k 'v (t_tree 'k 'v)
    with t_tree 'k 'v =
    | C_Tree (Core_Option_Option_Type.t_option (t_node 'k 'v))
    
  let function node_left (self : t_node 'k 'v) : t_tree 'k 'v = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node a _ _ _ _ -> a
      end
  let function node_key (self : t_node 'k 'v) : 'k = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node _ _ a _ _ -> a
      end
  let function node_right (self : t_node 'k 'v) : t_tree 'k 'v = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node _ _ _ _ a -> a
      end
  let function node_val (self : t_node 'k 'v) : 'v = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node _ _ _ a _ -> a
      end
  let function node_color (self : t_node 'k 'v) : RedBlackTree_Color_Type.t_color = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Node _ a _ _ _ -> a
      end
  let function tree_node (self : t_tree 'k 'v) : Core_Option_Option_Type.t_option (t_node 'k 'v)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Tree a -> a
      end
end
module CreusotContracts_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module RedBlackTree_Impl0_HasMapping_Stub
  type k
  type v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate has_mapping (self : RedBlackTree_Node_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v : v)
end
module RedBlackTree_Impl0_HasMapping_Interface
  type k
  type v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate has_mapping (self : RedBlackTree_Node_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v : v)
end
module RedBlackTree_Impl0_HasMapping
  type k
  type v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate has_mapping [#"../red_black_tree.rs" 35 4 35 57] (self : RedBlackTree_Node_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v : v)
    
   =
    [#"../red_black_tree.rs" 37 12 41 13] match (self) with
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_None) -> false
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> has_mapping left k v \/ has_mapping right k v \/ k = DeepModel0.deep_model key /\ v = val'
      end
  val has_mapping (self : RedBlackTree_Node_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v : v) : bool
    ensures { result = has_mapping self k v }
    
end
module RedBlackTree_Impl0_SameMappings_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate same_mappings (self : RedBlackTree_Node_Type.t_tree k v) (o : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl0_SameMappings_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate same_mappings (self : RedBlackTree_Node_Type.t_tree k v) (o : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl0_SameMappings
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  predicate same_mappings [#"../red_black_tree.rs" 46 4 46 43] (self : RedBlackTree_Node_Type.t_tree k v) (o : RedBlackTree_Node_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 47 8 49 9] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping self k v = HasMapping0.has_mapping o k v
  val same_mappings (self : RedBlackTree_Node_Type.t_tree k v) (o : RedBlackTree_Node_Type.t_tree k v) : bool
    ensures { result = same_mappings self o }
    
end
module RedBlackTree_Impl0_ModelAcc_Stub
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  function model_acc (self : RedBlackTree_Node_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module RedBlackTree_Impl0_ModelAcc_Interface
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  function model_acc (self : RedBlackTree_Node_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module RedBlackTree_Impl0_ModelAcc
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function model_acc [#"../red_black_tree.rs" 53 4 56 47] (self : RedBlackTree_Node_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 58 12 65 13] match (self) with
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_None) -> accu
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let accu1 = model_acc left accu in let accu2 = Map.set accu1 (DeepModel0.deep_model key) (Core_Option_Option_Type.C_Some val') in model_acc right accu2
      end
  val model_acc (self : RedBlackTree_Node_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    ensures { result = model_acc self accu }
    
end
module RedBlackTree_Impl0_ModelAccHasMapping_Stub
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function model_acc_has_mapping (self : RedBlackTree_Node_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    
end
module RedBlackTree_Impl0_ModelAccHasMapping_Interface
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function model_acc_has_mapping (self : RedBlackTree_Node_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    
  axiom model_acc_has_mapping_spec : forall self : RedBlackTree_Node_Type.t_tree k v, accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v), k : DeepModelTy0.deepModelTy . [#"../red_black_tree.rs" 70 4 71 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k \/ (exists v : v . Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.C_Some v /\ HasMapping0.has_mapping self k v)
end
module RedBlackTree_Impl0_ModelAccHasMapping
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function model_acc_has_mapping [#"../red_black_tree.rs" 72 4 76 5] (self : RedBlackTree_Node_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    
   =
    [#"../red_black_tree.rs" 78 12 86 13] match (self) with
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (DeepModel0.deep_model key) (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping right accu2 k
      end
  val model_acc_has_mapping (self : RedBlackTree_Node_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    ensures { result = model_acc_has_mapping self accu k }
    
  axiom model_acc_has_mapping_spec : forall self : RedBlackTree_Node_Type.t_tree k v, accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v), k : DeepModelTy0.deepModelTy . [#"../red_black_tree.rs" 70 4 71 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k \/ (exists v : v . Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.C_Some v /\ HasMapping0.has_mapping self k v)
end
module RedBlackTree_Impl0_ModelAccHasMapping_Impl
  type k
  type v
  use map.Map
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  let rec ghost function model_acc_has_mapping (self : RedBlackTree_Node_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    ensures { [#"../red_black_tree.rs" 70 4 71 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k \/ (exists v : v . Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.C_Some v /\ HasMapping0.has_mapping self k v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 78 12 86 13] match (self) with
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = DeepModel0.deep_model key in Map.set accu1 b' (Core_Option_Option_Type.C_Some val') in model_acc_has_mapping right accu2 k
      end
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate lt_log (self : self) (o : self) =
    [#"../red_black_tree.rs" 495 101 496 13] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Less
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module RedBlackTree_Impl4_BstInvariantHere_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate bst_invariant_here (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl4_BstInvariantHere_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate bst_invariant_here (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl4_BstInvariantHere
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  predicate bst_invariant_here [#"../red_black_tree.rs" 186 4 186 39] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 188 12 189 104] (forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping (RedBlackTree_Node_Type.node_left self) k v -> LtLog0.lt_log k (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key self))) /\ (forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping (RedBlackTree_Node_Type.node_right self) k v -> LtLog0.lt_log (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key self)) k)
  val bst_invariant_here (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant_here self }
    
end
module RedBlackTree_Impl5_BstInvariant_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate bst_invariant (self : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl5_BstInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate bst_invariant (self : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl5_BstInvariant
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl4_BstInvariantHere_Stub as BstInvariantHere0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate bst_invariant [#"../red_black_tree.rs" 206 4 206 34] (self : RedBlackTree_Node_Type.t_tree k v) =
    [#"../red_black_tree.rs" 208 12 214 13] match (self) with
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in BstInvariantHere0.bst_invariant_here node /\ bst_invariant left /\ bst_invariant right
      end
  val bst_invariant (self : RedBlackTree_Node_Type.t_tree k v) : bool
    ensures { result = bst_invariant self }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate le_log (self : self) (o : self) =
    [#"../red_black_tree.rs" 493 10 493 46] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . [#"../red_black_tree.rs" 494 26 494 76] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = self
  function cmp_le_log (x : self) (y : self) : ()
  val cmp_le_log (x : self) (y : self) : ()
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : self, y : self . [#"../red_black_tree.rs" 494 26 494 76] LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . [#"../red_black_tree.rs" 497 4 499 44] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  val cmp_lt_log (x : self) (y : self) : ()
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : self, y : self . [#"../red_black_tree.rs" 497 4 499 44] LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate ge_log (self : self) (o : self) =
    [#"../red_black_tree.rs" 502 28 502 61] CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Less
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . [#"../red_black_tree.rs" 503 33 504 35] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with
    type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  val cmp_ge_log (x : self) (y : self) : ()
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : self, y : self . [#"../red_black_tree.rs" 503 33 504 35] GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  predicate gt_log (self : self) (o : self) =
    [#"../red_black_tree.rs" 507 11 507 47] CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Greater
  val gt_log (self : self) (o : self) : bool
    ensures { result = gt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . [#"../red_black_tree.rs" 507 82 508 15] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with
    type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  val cmp_gt_log (x : self) (y : self) : ()
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : self, y : self . [#"../red_black_tree.rs" 507 82 508 15] GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . [#"../red_black_tree.rs" 509 1 509 32] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function refl (x : self) : ()
  val refl (x : self) : ()
    ensures { result = refl x }
    
  axiom refl_spec : forall x : self . [#"../red_black_tree.rs" 509 1 509 32] CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../red_black_tree.rs" 510 13 510 30] CmpLog0.cmp_log x y = o) -> ([#"../red_black_tree.rs" 510 48 510 65] CmpLog0.cmp_log y z = o) -> ([#"../red_black_tree.rs" 510 82 510 99] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../red_black_tree.rs" 510 13 510 30] CmpLog0.cmp_log x y = o}
    requires {[#"../red_black_tree.rs" 510 48 510 65] CmpLog0.cmp_log y z = o}
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . ([#"../red_black_tree.rs" 510 13 510 30] CmpLog0.cmp_log x y = o) -> ([#"../red_black_tree.rs" 510 48 510 65] CmpLog0.cmp_log y z = o) -> ([#"../red_black_tree.rs" 510 82 510 99] CmpLog0.cmp_log x z = o)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . ([#"../red_black_tree.rs" 511 64 512 14] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../red_black_tree.rs" 512 31 512 64] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym1 (x : self) (y : self) : ()
  val antisym1 (x : self) (y : self) : ()
    requires {[#"../red_black_tree.rs" 511 64 512 14] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : self, y : self . ([#"../red_black_tree.rs" 511 64 512 14] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less) -> ([#"../red_black_tree.rs" 512 31 512 64] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . ([#"../red_black_tree.rs" 514 6 514 39] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../red_black_tree.rs" 514 56 515 25] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function antisym2 (x : self) (y : self) : ()
  val antisym2 (x : self) (y : self) : ()
    requires {[#"../red_black_tree.rs" 514 6 514 39] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : self, y : self . ([#"../red_black_tree.rs" 514 6 514 39] CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater) -> ([#"../red_black_tree.rs" 514 56 515 25] CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . [#"../red_black_tree.rs" 516 2 518 40] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = self
  function eq_cmp (x : self) (y : self) : ()
  val eq_cmp (x : self) (y : self) : ()
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : self, y : self . [#"../red_black_tree.rs" 516 2 518 40] (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module RedBlackTree_Impl0_HasMappingModelAcc_Stub
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  function has_mapping_model_acc (self : RedBlackTree_Node_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    
end
module RedBlackTree_Impl0_HasMappingModelAcc_Interface
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  function has_mapping_model_acc (self : RedBlackTree_Node_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    
  axiom has_mapping_model_acc_spec : forall self : RedBlackTree_Node_Type.t_tree k v, accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v), k : DeepModelTy0.deepModelTy . ([#"../red_black_tree.rs" 91 15 91 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 92 4 92 94] forall v : v . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.C_Some v)
end
module RedBlackTree_Impl0_HasMappingModelAcc
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl0_ModelAccHasMapping_Stub as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function has_mapping_model_acc [#"../red_black_tree.rs" 93 4 95 33] (self : RedBlackTree_Node_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    
   =
    [#"../red_black_tree.rs" 98 12 107 13] match (self) with
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (DeepModel0.deep_model key) (Core_Option_Option_Type.C_Some val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
  val has_mapping_model_acc (self : RedBlackTree_Node_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    requires {[#"../red_black_tree.rs" 91 15 91 35] BstInvariant0.bst_invariant self}
    ensures { result = has_mapping_model_acc self accu k }
    
  axiom has_mapping_model_acc_spec : forall self : RedBlackTree_Node_Type.t_tree k v, accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v), k : DeepModelTy0.deepModelTy . ([#"../red_black_tree.rs" 91 15 91 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 92 4 92 94] forall v : v . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.C_Some v)
end
module RedBlackTree_Impl0_HasMappingModelAcc_Impl
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  let rec ghost function has_mapping_model_acc (self : RedBlackTree_Node_Type.t_tree k v) (accu : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)) (k : DeepModelTy0.deepModelTy) : ()
    requires {[#"../red_black_tree.rs" 91 15 91 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 92 4 92 94] forall v : v . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.C_Some v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 98 12 107 13] match (self) with
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_None) -> ()
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = DeepModel0.deep_model key in Map.set accu1 b' (Core_Option_Option_Type.C_Some val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
end
module RedBlackTree_Impl3_ShallowModel_Stub
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  function shallow_model (self : RedBlackTree_Node_Type.t_tree k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module RedBlackTree_Impl3_ShallowModel_Interface
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  function shallow_model (self : RedBlackTree_Node_Type.t_tree k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module RedBlackTree_Impl3_ShallowModel
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use map.Const
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function shallow_model [#"../red_black_tree.rs" 174 4 174 50] (self : RedBlackTree_Node_Type.t_tree k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 175 20 175 54] ModelAcc0.model_acc self (Const.const (Core_Option_Option_Type.C_None))
  val shallow_model (self : RedBlackTree_Node_Type.t_tree k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model self }
    
end
module RedBlackTree_Impl0_HasMappingModel_Stub
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  function has_mapping_model (self : RedBlackTree_Node_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) : ()
end
module RedBlackTree_Impl0_HasMappingModel_Interface
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  function has_mapping_model (self : RedBlackTree_Node_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) : ()
  axiom has_mapping_model_spec : forall self : RedBlackTree_Node_Type.t_tree k v, k : DeepModelTy0.deepModelTy . ([#"../red_black_tree.rs" 112 15 112 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 113 4 113 82] forall v : v . HasMapping0.has_mapping self k v = (Map.get (ShallowModel0.shallow_model self) k = Core_Option_Option_Type.C_Some v))
end
module RedBlackTree_Impl0_HasMappingModel
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  use map.Const
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMappingModelAcc_Stub as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  clone RedBlackTree_Impl0_ModelAccHasMapping_Stub as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  function has_mapping_model [#"../red_black_tree.rs" 114 4 116 33] (self : RedBlackTree_Node_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) : ()
    
   =
    [#"../red_black_tree.rs" 119 12 119 61] let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Core_Option_Option_Type.C_None)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Core_Option_Option_Type.C_None)) k
  val has_mapping_model (self : RedBlackTree_Node_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) : ()
    requires {[#"../red_black_tree.rs" 112 15 112 35] BstInvariant0.bst_invariant self}
    ensures { result = has_mapping_model self k }
    
  axiom has_mapping_model_spec : forall self : RedBlackTree_Node_Type.t_tree k v, k : DeepModelTy0.deepModelTy . ([#"../red_black_tree.rs" 112 15 112 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 113 4 113 82] forall v : v . HasMapping0.has_mapping self k v = (Map.get (ShallowModel0.shallow_model self) k = Core_Option_Option_Type.C_Some v))
end
module RedBlackTree_Impl0_HasMappingModel_Impl
  type k
  type v
  use map.Map
  use map.Const
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  let rec ghost function has_mapping_model (self : RedBlackTree_Node_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) : ()
    requires {[#"../red_black_tree.rs" 112 15 112 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 113 4 113 82] forall v : v . HasMapping0.has_mapping self k v = (Map.get (ShallowModel0.shallow_model self) k = Core_Option_Option_Type.C_Some v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 119 12 119 61] let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Core_Option_Option_Type.C_None)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Core_Option_Option_Type.C_None)) k
end
module RedBlackTree_Impl0_HasMappingInj_Stub
  type k
  type v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  function has_mapping_inj (self : RedBlackTree_Node_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v1 : v) (v2 : v) : ()
    
end
module RedBlackTree_Impl0_HasMappingInj_Interface
  type k
  type v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  function has_mapping_inj (self : RedBlackTree_Node_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v1 : v) (v2 : v) : ()
    
  axiom has_mapping_inj_spec : forall self : RedBlackTree_Node_Type.t_tree k v, k : DeepModelTy0.deepModelTy, v1 : v, v2 : v . ([#"../red_black_tree.rs" 125 15 125 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 126 15 126 38] HasMapping0.has_mapping self k v1) -> ([#"../red_black_tree.rs" 127 15 127 38] HasMapping0.has_mapping self k v2) -> ([#"../red_black_tree.rs" 128 14 128 22] v1 = v2)
end
module RedBlackTree_Impl0_HasMappingInj
  type k
  type v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMappingModel_Stub as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  function has_mapping_inj [#"../red_black_tree.rs" 129 4 131 33] (self : RedBlackTree_Node_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v1 : v) (v2 : v) : ()
    
   =
    [#"../red_black_tree.rs" 134 12 134 37] let _ = HasMappingModel0.has_mapping_model self k in match (Map.get (ShallowModel0.shallow_model self) k) with
      | Core_Option_Option_Type.C_None -> ()
      | Core_Option_Option_Type.C_Some _v -> ()
      end
  val has_mapping_inj (self : RedBlackTree_Node_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v1 : v) (v2 : v) : ()
    requires {[#"../red_black_tree.rs" 125 15 125 35] BstInvariant0.bst_invariant self}
    requires {[#"../red_black_tree.rs" 126 15 126 38] HasMapping0.has_mapping self k v1}
    requires {[#"../red_black_tree.rs" 127 15 127 38] HasMapping0.has_mapping self k v2}
    ensures { result = has_mapping_inj self k v1 v2 }
    
  axiom has_mapping_inj_spec : forall self : RedBlackTree_Node_Type.t_tree k v, k : DeepModelTy0.deepModelTy, v1 : v, v2 : v . ([#"../red_black_tree.rs" 125 15 125 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 126 15 126 38] HasMapping0.has_mapping self k v1) -> ([#"../red_black_tree.rs" 127 15 127 38] HasMapping0.has_mapping self k v2) -> ([#"../red_black_tree.rs" 128 14 128 22] v1 = v2)
end
module RedBlackTree_Impl0_HasMappingInj_Impl
  type k
  type v
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  let rec ghost function has_mapping_inj (self : RedBlackTree_Node_Type.t_tree k v) (k : DeepModelTy0.deepModelTy) (v1 : v) (v2 : v) : ()
    requires {[#"../red_black_tree.rs" 125 15 125 35] BstInvariant0.bst_invariant self}
    requires {[#"../red_black_tree.rs" 126 15 126 38] HasMapping0.has_mapping self k v1}
    requires {[#"../red_black_tree.rs" 127 15 127 38] HasMapping0.has_mapping self k v2}
    ensures { [#"../red_black_tree.rs" 128 14 128 22] v1 = v2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 134 12 134 37] let _ = HasMappingModel0.has_mapping_model self k in match (let a' = ShallowModel0.shallow_model self in Map.get a' k) with
      | Core_Option_Option_Type.C_None -> ()
      | Core_Option_Option_Type.C_Some _v -> ()
      end
end
module RedBlackTree_Impl1_HasMapping_Stub
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate has_mapping (self : RedBlackTree_Node_Type.t_node k v) (k : DeepModelTy0.deepModelTy) (v : v)
end
module RedBlackTree_Impl1_HasMapping_Interface
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate has_mapping (self : RedBlackTree_Node_Type.t_node k v) (k : DeepModelTy0.deepModelTy) (v : v)
  axiom has_mapping_spec : forall self : RedBlackTree_Node_Type.t_node k v, k : DeepModelTy0.deepModelTy, v : v . [#"../red_black_tree.rs" 142 4 143 86] forall node : RedBlackTree_Node_Type.t_node k v . self = node -> has_mapping self k v = HasMapping0.has_mapping (RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v
end
module RedBlackTree_Impl1_HasMapping
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  predicate has_mapping [#"../red_black_tree.rs" 144 4 144 57] (self : RedBlackTree_Node_Type.t_node k v) (k : DeepModelTy0.deepModelTy) (v : v)
    
   =
    [#"../red_black_tree.rs" 145 8 148 9] HasMapping0.has_mapping (RedBlackTree_Node_Type.node_left self) k v \/ HasMapping0.has_mapping (RedBlackTree_Node_Type.node_right self) k v \/ k = DeepModel0.deep_model (RedBlackTree_Node_Type.node_key self) /\ v = RedBlackTree_Node_Type.node_val self
  val has_mapping (self : RedBlackTree_Node_Type.t_node k v) (k : DeepModelTy0.deepModelTy) (v : v) : bool
    ensures { result = has_mapping self k v }
    
  axiom has_mapping_spec : forall self : RedBlackTree_Node_Type.t_node k v, k : DeepModelTy0.deepModelTy, v : v . [#"../red_black_tree.rs" 142 4 143 86] forall node : RedBlackTree_Node_Type.t_node k v . self = node -> has_mapping self k v = HasMapping0.has_mapping (RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v
end
module RedBlackTree_Impl1_HasMapping_Impl
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  let rec ghost predicate has_mapping (self : RedBlackTree_Node_Type.t_node k v) (k : DeepModelTy0.deepModelTy) (v : v)
    ensures { [#"../red_black_tree.rs" 142 4 143 86] forall node : RedBlackTree_Node_Type.t_node k v . self = node -> result = HasMapping0.has_mapping (RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some node)) k v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 145 8 148 9] HasMapping0.has_mapping (RedBlackTree_Node_Type.node_left self) k v || HasMapping0.has_mapping (RedBlackTree_Node_Type.node_right self) k v || (let b = DeepModel0.deep_model (RedBlackTree_Node_Type.node_key self) in pure {k = b}) && pure {v = RedBlackTree_Node_Type.node_val self}
end
module RedBlackTree_Impl1_SameMappings_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate same_mappings (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl1_SameMappings_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate same_mappings (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl1_SameMappings
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl1_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  predicate same_mappings [#"../red_black_tree.rs" 152 4 152 43] (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 153 8 155 9] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping self k v = HasMapping0.has_mapping o k v
  val same_mappings (self : RedBlackTree_Node_Type.t_node k v) (o : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = same_mappings self o }
    
end
module RedBlackTree_Impl2_ShallowModel_Stub
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  function shallow_model (self : RedBlackTree_Node_Type.t_node k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module RedBlackTree_Impl2_ShallowModel_Interface
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  function shallow_model (self : RedBlackTree_Node_Type.t_node k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
end
module RedBlackTree_Impl2_ShallowModel
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_ModelAcc_Stub as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function shallow_model [#"../red_black_tree.rs" 163 4 163 50] (self : RedBlackTree_Node_Type.t_node k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    
   =
    [#"../red_black_tree.rs" 164 8 166 9] ModelAcc0.model_acc (RedBlackTree_Node_Type.node_right self) (Map.set (ShallowModel0.shallow_model (RedBlackTree_Node_Type.node_left self)) (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key self)) (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.node_val self)))
  val shallow_model (self : RedBlackTree_Node_Type.t_node k v) : Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
    ensures { result = shallow_model self }
    
end
module RedBlackTree_Impl4_BstInvariant_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate bst_invariant (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl4_BstInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate bst_invariant (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl4_BstInvariant
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl4_BstInvariantHere_Stub as BstInvariantHere0 with
    type k = k,
    type v = v
  predicate bst_invariant [#"../red_black_tree.rs" 194 4 194 34] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 195 8 197 9] BstInvariantHere0.bst_invariant_here self /\ BstInvariant0.bst_invariant (RedBlackTree_Node_Type.node_left self) /\ BstInvariant0.bst_invariant (RedBlackTree_Node_Type.node_right self)
  val bst_invariant (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = bst_invariant self }
    
end
module RedBlackTree_Cpl_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  type t_cpl  =
    | C_CPL (RedBlackTree_Color_Type.t_color)
    
  let function cpl_0 (self : t_cpl) : RedBlackTree_Color_Type.t_color = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_CPL a -> a
      end
end
module RedBlackTree_Impl8_Color_Stub
  type k
  type v
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  function color (self : RedBlackTree_Node_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
end
module RedBlackTree_Impl8_Color_Interface
  type k
  type v
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  function color (self : RedBlackTree_Node_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
end
module RedBlackTree_Impl8_Color
  type k
  type v
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  function color [#"../red_black_tree.rs" 284 4 284 27] (self : RedBlackTree_Node_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    
   =
    [#"../red_black_tree.rs" 286 12 289 13] match (RedBlackTree_Node_Type.tree_node self) with
      | Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.C_Black
      end
  val color (self : RedBlackTree_Node_Type.t_tree k v) : RedBlackTree_Color_Type.t_color
    ensures { result = color self }
    
end
module RedBlackTree_Impl9_ColorInvariantHere_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate color_invariant_here (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl9_ColorInvariantHere_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate color_invariant_here (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl9_ColorInvariantHere
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Stub as Color0 with
    type k = k,
    type v = v
  predicate color_invariant_here [#"../red_black_tree.rs" 309 4 309 41] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 310 20 310 102] Color0.color (RedBlackTree_Node_Type.node_right self) = RedBlackTree_Color_Type.C_Black /\ (RedBlackTree_Node_Type.node_color self = RedBlackTree_Color_Type.C_Black \/ Color0.color (RedBlackTree_Node_Type.node_left self) = RedBlackTree_Color_Type.C_Black)
  val color_invariant_here (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant_here self }
    
end
module RedBlackTree_Impl8_ColorInvariant_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate color_invariant (self : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl8_ColorInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate color_invariant (self : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl8_ColorInvariant
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl9_ColorInvariantHere_Stub as ColorInvariantHere0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate color_invariant [#"../red_black_tree.rs" 294 4 294 36] (self : RedBlackTree_Node_Type.t_tree k v) =
    [#"../red_black_tree.rs" 296 12 302 13] match (self) with
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in ColorInvariantHere0.color_invariant_here node /\ color_invariant left /\ color_invariant right
      end
  val color_invariant (self : RedBlackTree_Node_Type.t_tree k v) : bool
    ensures { result = color_invariant self }
    
end
module RedBlackTree_Impl9_ColorInvariant_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate color_invariant (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl9_ColorInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate color_invariant (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl9_ColorInvariant
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl8_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere_Stub as ColorInvariantHere0 with
    type k = k,
    type v = v
  predicate color_invariant [#"../red_black_tree.rs" 314 4 314 36] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 315 8 315 112] ColorInvariantHere0.color_invariant_here self /\ ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_left self) /\ ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_right self)
  val color_invariant (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = color_invariant self }
    
end
module RedBlackTree_Impl6_MatchN_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  predicate match_n (self : RedBlackTree_Cpl_Type.t_cpl) (node : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl6_MatchN_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  predicate match_n (self : RedBlackTree_Cpl_Type.t_cpl) (node : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl6_MatchN
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl9_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  predicate match_n [#"../red_black_tree.rs" 257 4 257 46] (self : RedBlackTree_Cpl_Type.t_cpl) (node : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 259 12 259 58] RedBlackTree_Node_Type.node_color node = RedBlackTree_Cpl_Type.cpl_0 self /\ ColorInvariant0.color_invariant node
  val match_n (self : RedBlackTree_Cpl_Type.t_cpl) (node : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = match_n self node }
    
end
module RedBlackTree_Impl6_MatchT_Stub
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN_Stub as MatchN0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  predicate match_t (self : RedBlackTree_Cpl_Type.t_cpl) (tree : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl6_MatchT_Interface
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN_Stub as MatchN0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  predicate match_t (self : RedBlackTree_Cpl_Type.t_cpl) (tree : RedBlackTree_Node_Type.t_tree k v)
  axiom match_t_spec : forall self : RedBlackTree_Cpl_Type.t_cpl, tree : RedBlackTree_Node_Type.t_tree k v . ([#"../red_black_tree.rs" 246 4 249 43] RedBlackTree_Cpl_Type.cpl_0 self = RedBlackTree_Color_Type.C_Black -> match_t self tree = (forall node : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_Some node -> MatchN0.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) node)) && ([#"../red_black_tree.rs" 241 4 245 44] RedBlackTree_Cpl_Type.cpl_0 self = RedBlackTree_Color_Type.C_Black -> match_t self tree = (RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_None \/ (exists node : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ MatchN0.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) node))) && ([#"../red_black_tree.rs" 236 4 240 41] RedBlackTree_Cpl_Type.cpl_0 self = RedBlackTree_Color_Type.C_Red -> match_t self tree = (RedBlackTree_Node_Type.tree_node tree <> Core_Option_Option_Type.C_None /\ (forall node : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_Some node -> MatchN0.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) node))) && ([#"../red_black_tree.rs" 232 4 235 41] RedBlackTree_Cpl_Type.cpl_0 self = RedBlackTree_Color_Type.C_Red -> match_t self tree = (exists node : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ MatchN0.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) node))
end
module RedBlackTree_Impl6_MatchT
  type k
  type v
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN_Stub as MatchN0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_Color_Stub as Color1 with
    type k = k,
    type v = v
  predicate match_t [#"../red_black_tree.rs" 250 4 250 46] (self : RedBlackTree_Cpl_Type.t_cpl) (tree : RedBlackTree_Node_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 252 12 252 60] Color1.color tree = RedBlackTree_Cpl_Type.cpl_0 self /\ ColorInvariant0.color_invariant tree
  val match_t (self : RedBlackTree_Cpl_Type.t_cpl) (tree : RedBlackTree_Node_Type.t_tree k v) : bool
    ensures { result = match_t self tree }
    
  axiom match_t_spec : forall self : RedBlackTree_Cpl_Type.t_cpl, tree : RedBlackTree_Node_Type.t_tree k v . ([#"../red_black_tree.rs" 246 4 249 43] RedBlackTree_Cpl_Type.cpl_0 self = RedBlackTree_Color_Type.C_Black -> match_t self tree = (forall node : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_Some node -> MatchN0.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) node)) && ([#"../red_black_tree.rs" 241 4 245 44] RedBlackTree_Cpl_Type.cpl_0 self = RedBlackTree_Color_Type.C_Black -> match_t self tree = (RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_None \/ (exists node : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ MatchN0.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) node))) && ([#"../red_black_tree.rs" 236 4 240 41] RedBlackTree_Cpl_Type.cpl_0 self = RedBlackTree_Color_Type.C_Red -> match_t self tree = (RedBlackTree_Node_Type.tree_node tree <> Core_Option_Option_Type.C_None /\ (forall node : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_Some node -> MatchN0.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) node))) && ([#"../red_black_tree.rs" 232 4 235 41] RedBlackTree_Cpl_Type.cpl_0 self = RedBlackTree_Color_Type.C_Red -> match_t self tree = (exists node : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ MatchN0.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) node))
end
module RedBlackTree_Impl6_MatchT_Impl
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  let rec ghost predicate match_t (self : RedBlackTree_Cpl_Type.t_cpl) (tree : RedBlackTree_Node_Type.t_tree k v)
    ensures { [#"../red_black_tree.rs" 232 4 235 41] RedBlackTree_Cpl_Type.cpl_0 self = RedBlackTree_Color_Type.C_Red -> result = (exists node : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ MatchN0.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) node) }
    ensures { [#"../red_black_tree.rs" 236 4 240 41] RedBlackTree_Cpl_Type.cpl_0 self = RedBlackTree_Color_Type.C_Red -> result = (RedBlackTree_Node_Type.tree_node tree <> Core_Option_Option_Type.C_None /\ (forall node : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_Some node -> MatchN0.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) node)) }
    ensures { [#"../red_black_tree.rs" 241 4 245 44] RedBlackTree_Cpl_Type.cpl_0 self = RedBlackTree_Color_Type.C_Black -> result = (RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_None \/ (exists node : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ MatchN0.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) node)) }
    ensures { [#"../red_black_tree.rs" 246 4 249 43] RedBlackTree_Cpl_Type.cpl_0 self = RedBlackTree_Color_Type.C_Black -> result = (forall node : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_Some node -> MatchN0.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) node) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 252 12 252 60] (let a = Color1.color tree in pure {a = RedBlackTree_Cpl_Type.cpl_0 self}) && ColorInvariant0.color_invariant tree
end
module RedBlackTree_Cpn_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  type t_cpn 'l 'r =
    | C_CPN (RedBlackTree_Color_Type.t_color) 'l 'r
    
  let function cpn_0 (self : t_cpn 'l 'r) : RedBlackTree_Color_Type.t_color = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_CPN a _ _ -> a
      end
  let function cpn_1 (self : t_cpn 'l 'r) : 'l = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_CPN _ a _ -> a
      end
  let function cpn_2 (self : t_cpn 'l 'r) : 'r = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_CPN _ _ a -> a
      end
end
module RedBlackTree_Cp_MatchT_Stub
  type self
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate match_t (self : self) (tree : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Cp_MatchT_Interface
  type self
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate match_t (self : self) (tree : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Cp_MatchT
  type self
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate match_t [#"../red_black_tree.rs" 223 4 223 47] (self : self) (tree : RedBlackTree_Node_Type.t_tree k v)
  val match_t (self : self) (tree : RedBlackTree_Node_Type.t_tree k v) : bool
    ensures { result = match_t self tree }
    
end
module RedBlackTree_Impl7_MatchN_Stub
  type k
  type v
  type l
  type r
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  predicate match_n (self : RedBlackTree_Cpn_Type.t_cpn l r) (node : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl7_MatchN_Interface
  type k
  type v
  type l
  type r
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  predicate match_n (self : RedBlackTree_Cpn_Type.t_cpn l r) (node : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl7_MatchN
  type k
  type v
  type l
  type r
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Cp_MatchT_Stub as MatchT1 with
    type self = r,
    type k = k,
    type v = v
  clone RedBlackTree_Cp_MatchT_Stub as MatchT0 with
    type self = l,
    type k = k,
    type v = v
  predicate match_n [#"../red_black_tree.rs" 275 4 275 46] (self : RedBlackTree_Cpn_Type.t_cpn l r) (node : RedBlackTree_Node_Type.t_node k v)
    
   =
    [#"../red_black_tree.rs" 276 8 278 9] RedBlackTree_Node_Type.node_color node = RedBlackTree_Cpn_Type.cpn_0 self /\ MatchT0.match_t (RedBlackTree_Cpn_Type.cpn_1 self) (RedBlackTree_Node_Type.node_left node) /\ MatchT1.match_t (RedBlackTree_Cpn_Type.cpn_2 self) (RedBlackTree_Node_Type.node_right node)
  val match_n (self : RedBlackTree_Cpn_Type.t_cpn l r) (node : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = match_n self node }
    
end
module RedBlackTree_Impl7_MatchT_Stub
  type k
  type v
  type l
  type r
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  predicate match_t (self : RedBlackTree_Cpn_Type.t_cpn l r) (tree : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl7_MatchT_Interface
  type k
  type v
  type l
  type r
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  predicate match_t (self : RedBlackTree_Cpn_Type.t_cpn l r) (tree : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl7_MatchT
  type k
  type v
  type l
  type r
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl7_MatchN_Stub as MatchN0 with
    type k = k,
    type v = v,
    type l = l,
    type r = r
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate match_t [#"../red_black_tree.rs" 267 4 267 46] (self : RedBlackTree_Cpn_Type.t_cpn l r) (tree : RedBlackTree_Node_Type.t_tree k v)
    
   =
    [#"../red_black_tree.rs" 268 8 271 9] exists node : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node tree = Core_Option_Option_Type.C_Some node /\ MatchN0.match_n self node
  val match_t (self : RedBlackTree_Cpn_Type.t_cpn l r) (tree : RedBlackTree_Node_Type.t_tree k v) : bool
    ensures { result = match_t self tree }
    
end
module RedBlackTree_Impl10_Height_Stub
  type k
  type v
  use mach.int.Int
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  function height (self : RedBlackTree_Node_Type.t_tree k v) : int
end
module RedBlackTree_Impl10_Height_Interface
  type k
  type v
  use mach.int.Int
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  function height (self : RedBlackTree_Node_Type.t_tree k v) : int
  axiom height_spec : forall self : RedBlackTree_Node_Type.t_tree k v . [#"../red_black_tree.rs" 323 14 323 25] height self >= 0
end
module RedBlackTree_Impl10_Height
  type k
  type v
  use mach.int.Int
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  function height [#"../red_black_tree.rs" 324 4 324 26] (self : RedBlackTree_Node_Type.t_tree k v) : int =
    [#"../red_black_tree.rs" 326 12 334 13] match (self) with
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match (color) with
        | RedBlackTree_Color_Type.C_Red -> height left
        | RedBlackTree_Color_Type.C_Black -> height left + 1
        end
      end
  val height (self : RedBlackTree_Node_Type.t_tree k v) : int
    ensures { result = height self }
    
  axiom height_spec : forall self : RedBlackTree_Node_Type.t_tree k v . [#"../red_black_tree.rs" 323 14 323 25] height self >= 0
end
module RedBlackTree_Impl10_Height_Impl
  type k
  type v
  use mach.int.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec ghost function height (self : RedBlackTree_Node_Type.t_tree k v) : int
    ensures { [#"../red_black_tree.rs" 323 14 323 25] result >= 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 326 12 334 13] match (self) with
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_None) -> 0
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some (RedBlackTree_Node_Type.C_Node left color _ _ _)) -> match (color) with
        | RedBlackTree_Color_Type.C_Red -> height left
        | RedBlackTree_Color_Type.C_Black -> height left + 1
        end
      end
end
module RedBlackTree_Impl11_HeightInvariantHere_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate height_invariant_here (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl11_HeightInvariantHere_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate height_invariant_here (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl11_HeightInvariantHere
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  predicate height_invariant_here [#"../red_black_tree.rs" 366 4 366 42] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 367 20 367 61] Height0.height (RedBlackTree_Node_Type.node_left self) = Height0.height (RedBlackTree_Node_Type.node_right self)
  val height_invariant_here (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant_here self }
    
end
module RedBlackTree_Impl10_HeightInvariant_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate height_invariant (self : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl10_HeightInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate height_invariant (self : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl10_HeightInvariant
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl11_HeightInvariantHere_Stub as HeightInvariantHere0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate height_invariant [#"../red_black_tree.rs" 339 4 339 37] (self : RedBlackTree_Node_Type.t_tree k v) =
    [#"../red_black_tree.rs" 341 12 347 13] match (self) with
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_None) -> true
      | RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some node) -> let RedBlackTree_Node_Type.C_Node left _ _ _ right = node in HeightInvariantHere0.height_invariant_here node /\ height_invariant left /\ height_invariant right
      end
  val height_invariant (self : RedBlackTree_Node_Type.t_tree k v) : bool
    ensures { result = height_invariant self }
    
end
module RedBlackTree_Impl11_Height_Stub
  type k
  type v
  use mach.int.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl10_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  function height (self : RedBlackTree_Node_Type.t_node k v) : int
end
module RedBlackTree_Impl11_Height_Interface
  type k
  type v
  use mach.int.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl10_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  function height (self : RedBlackTree_Node_Type.t_node k v) : int
  axiom height_spec : forall self : RedBlackTree_Node_Type.t_node k v . [#"../red_black_tree.rs" 354 4 355 77] forall node : RedBlackTree_Node_Type.t_node k v . self = node -> height self = Height0.height (RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some node))
end
module RedBlackTree_Impl11_Height
  type k
  type v
  use mach.int.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl10_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  function height [#"../red_black_tree.rs" 356 4 356 26] (self : RedBlackTree_Node_Type.t_node k v) : int =
    [#"../red_black_tree.rs" 358 12 361 13] match (RedBlackTree_Node_Type.node_color self) with
      | RedBlackTree_Color_Type.C_Red -> Height0.height (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> Height0.height (RedBlackTree_Node_Type.node_left self) + 1
      end
  val height (self : RedBlackTree_Node_Type.t_node k v) : int
    ensures { result = height self }
    
  axiom height_spec : forall self : RedBlackTree_Node_Type.t_node k v . [#"../red_black_tree.rs" 354 4 355 77] forall node : RedBlackTree_Node_Type.t_node k v . self = node -> height self = Height0.height (RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some node))
end
module RedBlackTree_Impl11_Height_Impl
  type k
  type v
  use mach.int.Int
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  let rec ghost function height (self : RedBlackTree_Node_Type.t_node k v) : int
    ensures { [#"../red_black_tree.rs" 354 4 355 77] forall node : RedBlackTree_Node_Type.t_node k v . self = node -> result = Height0.height (RedBlackTree_Node_Type.C_Tree (Core_Option_Option_Type.C_Some node)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 358 12 361 13] match (RedBlackTree_Node_Type.node_color self) with
      | RedBlackTree_Color_Type.C_Red -> Height0.height (RedBlackTree_Node_Type.node_left self)
      | RedBlackTree_Color_Type.C_Black -> Height0.height (RedBlackTree_Node_Type.node_left self) + 1
      end
end
module RedBlackTree_Impl11_HeightInvariant_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate height_invariant (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl11_HeightInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate height_invariant (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl11_HeightInvariant
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_HeightInvariant_Stub as HeightInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl11_HeightInvariantHere_Stub as HeightInvariantHere0 with
    type k = k,
    type v = v
  predicate height_invariant [#"../red_black_tree.rs" 371 4 371 37] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 372 8 372 115] HeightInvariantHere0.height_invariant_here self /\ HeightInvariant0.height_invariant (RedBlackTree_Node_Type.node_left self) /\ HeightInvariant0.height_invariant (RedBlackTree_Node_Type.node_right self)
  val height_invariant (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = height_invariant self }
    
end
module RedBlackTree_Impl12_InternalInvariant_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate internal_invariant (self : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl12_InternalInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate internal_invariant (self : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl12_InternalInvariant
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_HeightInvariant_Stub as HeightInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl5_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  predicate internal_invariant [#"../red_black_tree.rs" 383 4 383 43] (self : RedBlackTree_Node_Type.t_tree k v) =
    [#"../red_black_tree.rs" 385 12 385 59] BstInvariant0.bst_invariant self /\ HeightInvariant0.height_invariant self
  val internal_invariant (self : RedBlackTree_Node_Type.t_tree k v) : bool
    ensures { result = internal_invariant self }
    
end
module RedBlackTree_Impl12_Invariant_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate invariant' (self : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl12_Invariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate invariant' (self : RedBlackTree_Node_Type.t_tree k v)
end
module RedBlackTree_Impl12_Invariant
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Stub as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl12_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  predicate invariant' [#"../red_black_tree.rs" 390 4 390 34] (self : RedBlackTree_Node_Type.t_tree k v) =
    [#"../red_black_tree.rs" 392 12 392 88] InternalInvariant0.internal_invariant self /\ ColorInvariant0.color_invariant self /\ Color0.color self = RedBlackTree_Color_Type.C_Black
  val invariant' (self : RedBlackTree_Node_Type.t_tree k v) : bool
    ensures { result = invariant' self }
    
end
module RedBlackTree_Impl13_InternalInvariant_Stub
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate internal_invariant (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl13_InternalInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  predicate internal_invariant (self : RedBlackTree_Node_Type.t_node k v)
end
module RedBlackTree_Impl13_InternalInvariant
  type k
  type v
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl11_HeightInvariant_Stub as HeightInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl4_BstInvariant_Stub as BstInvariant0 with
    type k = k,
    type v = v
  predicate internal_invariant [#"../red_black_tree.rs" 402 4 402 43] (self : RedBlackTree_Node_Type.t_node k v) =
    [#"../red_black_tree.rs" 404 12 404 59] BstInvariant0.bst_invariant self /\ HeightInvariant0.height_invariant self
  val internal_invariant (self : RedBlackTree_Node_Type.t_node k v) : bool
    ensures { result = internal_invariant self }
    
end
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module RedBlackTree_Impl14_IsRed_Interface
  type k
  type v
  use prelude.Borrow
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Stub as Color0 with
    type k = k,
    type v = v
  val is_red [@cfg:stackify] (self : RedBlackTree_Node_Type.t_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 412 14 412 45] result = (Color0.color self = RedBlackTree_Color_Type.C_Red) }
    
end
module RedBlackTree_Impl14_IsRed
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color as Color0 with
    type k = k,
    type v = v
  use mach.int.Int
  use prelude.IntSize
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve0 with
    type self = RedBlackTree_Node_Type.t_tree k v
  let rec cfg is_red [@cfg:stackify] [#"../red_black_tree.rs" 413 4 413 28] (self : RedBlackTree_Node_Type.t_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 412 14 412 45] result = (Color0.color self = RedBlackTree_Color_Type.C_Red) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : RedBlackTree_Node_Type.t_tree k v;
  var _3 : isize;
  var _4 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (RedBlackTree_Node_Type.tree_node self_1)
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      | _ -> goto BB5
      end
  }
  BB1 {
    _0 <- ([#"../red_black_tree.rs" 416 17 416 22] false);
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    switch (RedBlackTree_Node_Type.node_color (Core_Option_Option_Type.some_0 (RedBlackTree_Node_Type.tree_node self_1)))
      | RedBlackTree_Color_Type.C_Red -> goto BB3
      | _ -> goto BB1
      end
  }
  BB3 {
    _0 <- ([#"../red_black_tree.rs" 415 49 415 53] true);
    goto BB4
  }
  BB4 {
    return _0
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  
end
module CreusotContracts_Std1_Default_Default_IsDefault_Stub
  type self
  predicate is_default (self : self)
end
module CreusotContracts_Std1_Default_Default_IsDefault_Interface
  type self
  predicate is_default (self : self)
end
module CreusotContracts_Std1_Default_Default_IsDefault
  type self
  predicate is_default (self : self)
  val is_default (self : self) : bool
    ensures { result = is_default self }
    
end
module Core_Mem_Take_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Std1_Default_Default_IsDefault_Stub as IsDefault0 with
    type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures { IsDefault0.is_default ( ^ dest) }
    
end
module Core_Mem_Take
  type t
  use prelude.Borrow
  clone CreusotContracts_Std1_Default_Default_IsDefault_Interface as IsDefault0 with
    type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures { IsDefault0.is_default ( ^ dest) }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  val unwrap [@cfg:stackify] (self : Core_Option_Option_Type.t_option t) : t
    requires {self <> Core_Option_Option_Type.C_None}
    ensures { Core_Option_Option_Type.C_Some result = self }
    
end
module Core_Option_Impl0_Unwrap
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  val unwrap [@cfg:stackify] (self : Core_Option_Option_Type.t_option t) : t
    requires {self <> Core_Option_Option_Type.C_None}
    ensures { Core_Option_Option_Type.C_Some result = self }
    
end
module Core_Mem_Swap_Interface
  type t
  use prelude.Borrow
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ x =  * y }
    ensures {  ^ y =  * x }
    
end
module Core_Mem_Swap
  type t
  use prelude.Borrow
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ x =  * y }
    ensures {  ^ y =  * x }
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Option_Impl0_IsDefault_Stub
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate is_default (self : Core_Option_Option_Type.t_option t)
end
module CreusotContracts_Std1_Option_Impl0_IsDefault_Interface
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate is_default (self : Core_Option_Option_Type.t_option t)
end
module CreusotContracts_Std1_Option_Impl0_IsDefault
  type t
  use Core_Option_Option_Type as Core_Option_Option_Type
  predicate is_default (self : Core_Option_Option_Type.t_option t) =
    self = Core_Option_Option_Type.C_None
  val is_default (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = is_default self }
    
end
module RedBlackTree_Impl15_RotateRight_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone RedBlackTree_Impl10_Height_Stub as Height1 with
    type k = k,
    type v = v,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl11_Height_Stub as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings_Stub as SameMappings0 with
    type k = k,
    type v = v
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Stub as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl13_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val rotate_right [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 425 15 425 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 426 15 426 42] Color0.color (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red}
    ensures { [#"../red_black_tree.rs" 427 14 427 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 428 14 428 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 429 14 429 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 430 14 430 65] LtLog0.lt_log (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( ^ self))) (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 431 14 431 42] Color0.color (RedBlackTree_Node_Type.node_right ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 432 14 432 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 433 4 436 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l /\ RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r /\ (RedBlackTree_Node_Type.node_left ( ^ self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( * self)) /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key ( * self) }
    
end
module RedBlackTree_Impl15_RotateRight
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl10_Height as Height1 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl11_Height as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone RedBlackTree_Impl8_Color as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  use prelude.Ghost
  clone CreusotContracts_Std1_Option_Impl0_IsDefault as IsDefault0 with
    type t = RedBlackTree_Node_Type.t_node k v
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve7 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve6 with
    type self = RedBlackTree_Node_Type.t_tree k v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve5 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = RedBlackTree_Color_Type.t_color
  clone Core_Mem_Swap_Interface as Swap2 with
    type t = RedBlackTree_Color_Type.t_color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Mem_Swap_Interface as Swap1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Node_Type.t_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with
    type t = RedBlackTree_Node_Type.t_tree k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone Core_Mem_Take_Interface as Take0 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v),
    predicate IsDefault0.is_default = IsDefault0.is_default
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v))
  let rec cfg rotate_right [@cfg:stackify] [#"../red_black_tree.rs" 437 4 437 30] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 425 15 425 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 426 15 426 42] Color0.color (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red}
    ensures { [#"../red_black_tree.rs" 427 14 427 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 428 14 428 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 429 14 429 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 430 14 430 65] LtLog0.lt_log (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( ^ self))) (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 431 14 431 42] Color0.color (RedBlackTree_Node_Type.node_right ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 432 14 432 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 433 4 436 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l /\ RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r /\ (RedBlackTree_Node_Type.node_left ( ^ self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) = (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( * self)) /\ RedBlackTree_Node_Type.node_key r = RedBlackTree_Node_Type.node_key ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var old_self_11 : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _13 : ();
  var x_14 : RedBlackTree_Node_Type.t_node k v;
  var _15 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _16 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _17 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _18 : ();
  var _19 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _20 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _21 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _22 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _23 : ();
  var _24 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _25 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _27 : ();
  var _28 : borrowed (RedBlackTree_Color_Type.t_color);
  var _29 : borrowed (RedBlackTree_Color_Type.t_color);
  var _30 : borrowed (RedBlackTree_Color_Type.t_color);
  var _31 : borrowed (RedBlackTree_Color_Type.t_color);
  var _32 : ();
  var _34 : ();
  var _36 : RedBlackTree_Node_Type.t_tree k v;
  var _37 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _38 : RedBlackTree_Node_Type.t_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _13 <- ();
    old_self_11 <- ([#"../red_black_tree.rs" 438 23 438 38] Ghost.new self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_11 };
    _17 <- borrow_mut (RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node (let RedBlackTree_Node_Type.C_Tree a = RedBlackTree_Node_Type.node_left ( * self_1) in RedBlackTree_Node_Type.C_Tree ( ^ _17)) b c d e) };
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    _15 <- ([#"../red_black_tree.rs" 446 20 446 55] Take0.take _16);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _17 };
    x_14 <- ([#"../red_black_tree.rs" 446 20 446 64] Unwrap0.unwrap _15);
    goto BB3
  }
  BB3 {
    _20 <- borrow_mut (RedBlackTree_Node_Type.node_left ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node ( ^ _20) b c d e) };
    _19 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _19) };
    _22 <- borrow_mut (RedBlackTree_Node_Type.node_right x_14);
    x_14 <- (let RedBlackTree_Node_Type.C_Node a b c d e = x_14 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _22));
    _21 <- borrow_mut ( * _22);
    _22 <- { _22 with current = ( ^ _21) };
    _18 <- ([#"../red_black_tree.rs" 453 8 453 52] Swap0.swap _19 _21);
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve _20 };
    assume { Resolve2.resolve _22 };
    _24 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _24) };
    _26 <- borrow_mut x_14;
    x_14 <-  ^ _26;
    _25 <- borrow_mut ( * _26);
    _26 <- { _26 with current = ( ^ _25) };
    _23 <- ([#"../red_black_tree.rs" 459 8 459 36] Swap1.swap _24 _25);
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _26 };
    _29 <- borrow_mut (RedBlackTree_Node_Type.node_color ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a ( ^ _29) c d e) };
    _28 <- borrow_mut ( * _29);
    _29 <- { _29 with current = ( ^ _28) };
    _31 <- borrow_mut (RedBlackTree_Node_Type.node_color x_14);
    x_14 <- (let RedBlackTree_Node_Type.C_Node a b c d e = x_14 in RedBlackTree_Node_Type.C_Node a ( ^ _31) c d e);
    _30 <- borrow_mut ( * _31);
    _31 <- { _31 with current = ( ^ _30) };
    _27 <- ([#"../red_black_tree.rs" 460 8 460 53] Swap2.swap _28 _30);
    goto BB6
  }
  BB6 {
    assume { Resolve4.resolve _29 };
    assume { Resolve4.resolve _31 };
    assert { [#"../red_black_tree.rs" 466 8 466 90] HasMapping1.has_mapping (RedBlackTree_Node_Type.node_left ( * Ghost.inner old_self_11)) (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self_1))) (RedBlackTree_Node_Type.node_val ( * self_1)) };
    _32 <- ();
    assert { [#"../red_black_tree.rs" 467 8 467 118] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping1.has_mapping (RedBlackTree_Node_Type.node_left x_14) k v -> HasMapping1.has_mapping (RedBlackTree_Node_Type.node_left ( * Ghost.inner old_self_11)) k v };
    goto BB7
  }
  BB7 {
    _34 <- ();
    assume { Resolve5.resolve _38 };
    _38 <- x_14;
    x_14 <- any RedBlackTree_Node_Type.t_node k v;
    _37 <- Core_Option_Option_Type.C_Some _38;
    goto BB8
  }
  BB8 {
    _36 <- RedBlackTree_Node_Type.C_Tree _37;
    goto BB9
  }
  BB9 {
    assume { Resolve6.resolve (RedBlackTree_Node_Type.node_right ( * self_1)) };
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a b c d _36) };
    goto BB10
  }
  BB10 {
    assume { Resolve7.resolve self_1 };
    goto BB11
  }
  BB11 {
    _0 <- ();
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module RedBlackTree_Impl15_RotateLeft_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone RedBlackTree_Impl10_Height_Stub as Height1 with
    type k = k,
    type v = v,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl11_Height_Stub as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings_Stub as SameMappings0 with
    type k = k,
    type v = v
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Stub as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl13_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val rotate_left [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 476 15 476 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 477 15 477 43] Color0.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red}
    ensures { [#"../red_black_tree.rs" 478 14 478 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 479 14 479 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 480 14 480 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 481 14 481 65] LtLog0.lt_log (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 482 14 482 41] Color0.color (RedBlackTree_Node_Type.node_left ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 483 14 483 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 484 4 487 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r /\ RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l /\ (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( ^ self)) = (RedBlackTree_Node_Type.node_left ( * self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) /\ RedBlackTree_Node_Type.node_key l = RedBlackTree_Node_Type.node_key ( * self) }
    
end
module RedBlackTree_Impl15_RotateLeft
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl10_Height as Height1 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl11_Height as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone RedBlackTree_Impl8_Color as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  use prelude.Ghost
  clone CreusotContracts_Std1_Option_Impl0_IsDefault as IsDefault0 with
    type t = RedBlackTree_Node_Type.t_node k v
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve7 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve6 with
    type self = RedBlackTree_Node_Type.t_tree k v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve5 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = RedBlackTree_Color_Type.t_color
  clone Core_Mem_Swap_Interface as Swap2 with
    type t = RedBlackTree_Color_Type.t_color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Mem_Swap_Interface as Swap1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Node_Type.t_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with
    type t = RedBlackTree_Node_Type.t_tree k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone Core_Mem_Take_Interface as Take0 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v),
    predicate IsDefault0.is_default = IsDefault0.is_default
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v))
  let rec cfg rotate_left [@cfg:stackify] [#"../red_black_tree.rs" 488 4 488 29] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 476 15 476 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 477 15 477 43] Color0.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red}
    ensures { [#"../red_black_tree.rs" 478 14 478 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 479 14 479 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 480 14 480 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 481 14 481 65] LtLog0.lt_log (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 482 14 482 41] Color0.color (RedBlackTree_Node_Type.node_left ( ^ self)) = RedBlackTree_Color_Type.C_Red }
    ensures { [#"../red_black_tree.rs" 483 14 483 44] RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 484 4 487 36] exists r : RedBlackTree_Node_Type.t_node k v . exists l : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r /\ RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l /\ (RedBlackTree_Node_Type.node_left l, RedBlackTree_Node_Type.node_right l, RedBlackTree_Node_Type.node_right ( ^ self)) = (RedBlackTree_Node_Type.node_left ( * self), RedBlackTree_Node_Type.node_left r, RedBlackTree_Node_Type.node_right r) /\ RedBlackTree_Node_Type.node_key l = RedBlackTree_Node_Type.node_key ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var old_self_11 : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _13 : ();
  var x_14 : RedBlackTree_Node_Type.t_node k v;
  var _15 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _16 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _17 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _18 : ();
  var _19 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _20 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _21 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _22 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _23 : ();
  var _24 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _25 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _27 : ();
  var _28 : borrowed (RedBlackTree_Color_Type.t_color);
  var _29 : borrowed (RedBlackTree_Color_Type.t_color);
  var _30 : borrowed (RedBlackTree_Color_Type.t_color);
  var _31 : borrowed (RedBlackTree_Color_Type.t_color);
  var _32 : ();
  var _34 : ();
  var _36 : RedBlackTree_Node_Type.t_tree k v;
  var _37 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _38 : RedBlackTree_Node_Type.t_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _13 <- ();
    old_self_11 <- ([#"../red_black_tree.rs" 489 23 489 38] Ghost.new self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_11 };
    _17 <- borrow_mut (RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a b c d (let RedBlackTree_Node_Type.C_Tree a = RedBlackTree_Node_Type.node_right ( * self_1) in RedBlackTree_Node_Type.C_Tree ( ^ _17))) };
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    _15 <- ([#"../red_black_tree.rs" 490 20 490 56] Take0.take _16);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _17 };
    x_14 <- ([#"../red_black_tree.rs" 490 20 490 65] Unwrap0.unwrap _15);
    goto BB3
  }
  BB3 {
    _20 <- borrow_mut (RedBlackTree_Node_Type.node_right ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _20)) };
    _19 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _19) };
    _22 <- borrow_mut (RedBlackTree_Node_Type.node_left x_14);
    x_14 <- (let RedBlackTree_Node_Type.C_Node a b c d e = x_14 in RedBlackTree_Node_Type.C_Node ( ^ _22) b c d e);
    _21 <- borrow_mut ( * _22);
    _22 <- { _22 with current = ( ^ _21) };
    _18 <- ([#"../red_black_tree.rs" 491 8 491 52] Swap0.swap _19 _21);
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve _20 };
    assume { Resolve2.resolve _22 };
    _24 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _24) };
    _26 <- borrow_mut x_14;
    x_14 <-  ^ _26;
    _25 <- borrow_mut ( * _26);
    _26 <- { _26 with current = ( ^ _25) };
    _23 <- ([#"../red_black_tree.rs" 492 8 492 36] Swap1.swap _24 _25);
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _26 };
    _29 <- borrow_mut (RedBlackTree_Node_Type.node_color ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a ( ^ _29) c d e) };
    _28 <- borrow_mut ( * _29);
    _29 <- { _29 with current = ( ^ _28) };
    _31 <- borrow_mut (RedBlackTree_Node_Type.node_color x_14);
    x_14 <- (let RedBlackTree_Node_Type.C_Node a b c d e = x_14 in RedBlackTree_Node_Type.C_Node a ( ^ _31) c d e);
    _30 <- borrow_mut ( * _31);
    _31 <- { _31 with current = ( ^ _30) };
    _27 <- ([#"../red_black_tree.rs" 493 8 493 53] Swap2.swap _28 _30);
    goto BB6
  }
  BB6 {
    assume { Resolve4.resolve _29 };
    assume { Resolve4.resolve _31 };
    assert { [#"../red_black_tree.rs" 494 8 494 91] HasMapping1.has_mapping (RedBlackTree_Node_Type.node_right ( * Ghost.inner old_self_11)) (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self_1))) (RedBlackTree_Node_Type.node_val ( * self_1)) };
    _32 <- ();
    assert { [#"../red_black_tree.rs" 495 8 495 120] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping1.has_mapping (RedBlackTree_Node_Type.node_right x_14) k v -> HasMapping1.has_mapping (RedBlackTree_Node_Type.node_right ( * Ghost.inner old_self_11)) k v };
    goto BB7
  }
  BB7 {
    _34 <- ();
    assume { Resolve5.resolve _38 };
    _38 <- x_14;
    x_14 <- any RedBlackTree_Node_Type.t_node k v;
    _37 <- Core_Option_Option_Type.C_Some _38;
    goto BB8
  }
  BB8 {
    _36 <- RedBlackTree_Node_Type.C_Tree _37;
    goto BB9
  }
  BB9 {
    assume { Resolve6.resolve (RedBlackTree_Node_Type.node_left ( * self_1)) };
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node _36 b c d e) };
    goto BB10
  }
  BB10 {
    assume { Resolve7.resolve self_1 };
    goto BB11
  }
  BB11 {
    _0 <- ();
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Core_Option_Impl0_AsMut_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val as_mut [@cfg:stackify] (self : borrowed (Core_Option_Option_Type.t_option t)) : Core_Option_Option_Type.t_option (borrowed t)
    ensures {  * self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None /\  ^ self = Core_Option_Option_Type.C_None }
    ensures {  * self = Core_Option_Option_Type.C_None \/ (exists r : borrowed t . result = Core_Option_Option_Type.C_Some r /\  * self = Core_Option_Option_Type.C_Some ( * r) /\  ^ self = Core_Option_Option_Type.C_Some ( ^ r)) }
    
end
module Core_Option_Impl0_AsMut
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val as_mut [@cfg:stackify] (self : borrowed (Core_Option_Option_Type.t_option t)) : Core_Option_Option_Type.t_option (borrowed t)
    ensures {  * self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None /\  ^ self = Core_Option_Option_Type.C_None }
    ensures {  * self = Core_Option_Option_Type.C_None \/ (exists r : borrowed t . result = Core_Option_Option_Type.C_Some r /\  * self = Core_Option_Option_Type.C_Some ( * r) /\  ^ self = Core_Option_Option_Type.C_Some ( ^ r)) }
    
end
module RedBlackTree_Impl15_FlipColors_Interface
  type k
  type v
  use prelude.Borrow
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_Height_Stub as Height1 with
    type k = k,
    type v = v,
    axiom .
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl1_SameMappings_Stub as SameMappings0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl11_Height_Stub as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl8_Color_Stub as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl13_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val flip_colors [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 499 15 499 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 500 15 500 40] RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 501 15 501 41] RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 502 15 502 60] Color0.color (RedBlackTree_Node_Type.node_left ( * self)) = Color0.color (RedBlackTree_Node_Type.node_right ( * self))}
    ensures { [#"../red_black_tree.rs" 503 14 503 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 504 14 504 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 505 14 505 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 506 14 506 40] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( ^ self) }
    ensures { [#"../red_black_tree.rs" 507 4 509 70] exists l2 : RedBlackTree_Node_Type.t_node k v . exists l1 : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l1 /\ RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l2 /\ RedBlackTree_Node_Type.node_left l1 = RedBlackTree_Node_Type.node_left l2 /\ RedBlackTree_Node_Type.node_right l1 = RedBlackTree_Node_Type.node_right l2 /\ RedBlackTree_Node_Type.node_key l1 = RedBlackTree_Node_Type.node_key l2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color l2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color l1 }
    ensures { [#"../red_black_tree.rs" 510 4 512 90] exists r2 : RedBlackTree_Node_Type.t_node k v . exists r1 : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r1 /\ RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r2 /\ RedBlackTree_Node_Type.node_left r1 = RedBlackTree_Node_Type.node_left r2 /\ RedBlackTree_Node_Type.node_right r1 = RedBlackTree_Node_Type.node_right r2 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color r2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color r1 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 }
    
end
module RedBlackTree_Impl15_FlipColors
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl10_Height as Height1 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone RedBlackTree_Impl11_Height as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl8_Color as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Color_Type.t_color
  clone Core_Mem_Swap_Interface as Swap0 with
    type t = RedBlackTree_Color_Type.t_color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  let rec cfg flip_colors [@cfg:stackify] [#"../red_black_tree.rs" 513 4 513 29] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 499 15 499 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 500 15 500 40] RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 501 15 501 41] RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 502 15 502 60] Color0.color (RedBlackTree_Node_Type.node_left ( * self)) = Color0.color (RedBlackTree_Node_Type.node_right ( * self))}
    ensures { [#"../red_black_tree.rs" 503 14 503 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 504 14 504 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 505 14 505 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 506 14 506 40] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( ^ self) }
    ensures { [#"../red_black_tree.rs" 507 4 509 70] exists l2 : RedBlackTree_Node_Type.t_node k v . exists l1 : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) = Core_Option_Option_Type.C_Some l1 /\ RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( ^ self)) = Core_Option_Option_Type.C_Some l2 /\ RedBlackTree_Node_Type.node_left l1 = RedBlackTree_Node_Type.node_left l2 /\ RedBlackTree_Node_Type.node_right l1 = RedBlackTree_Node_Type.node_right l2 /\ RedBlackTree_Node_Type.node_key l1 = RedBlackTree_Node_Type.node_key l2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color l2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color l1 }
    ensures { [#"../red_black_tree.rs" 510 4 512 90] exists r2 : RedBlackTree_Node_Type.t_node k v . exists r1 : RedBlackTree_Node_Type.t_node k v . RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) = Core_Option_Option_Type.C_Some r1 /\ RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( ^ self)) = Core_Option_Option_Type.C_Some r2 /\ RedBlackTree_Node_Type.node_left r1 = RedBlackTree_Node_Type.node_left r2 /\ RedBlackTree_Node_Type.node_right r1 = RedBlackTree_Node_Type.node_right r2 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 /\ RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Node_Type.node_color r2 /\ RedBlackTree_Node_Type.node_color ( ^ self) = RedBlackTree_Node_Type.node_color r1 /\ RedBlackTree_Node_Type.node_key r1 = RedBlackTree_Node_Type.node_key r2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _12 : RedBlackTree_Color_Type.t_color;
  var _13 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _15 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _16 : ();
  var _17 : borrowed (RedBlackTree_Color_Type.t_color);
  var _18 : borrowed (RedBlackTree_Color_Type.t_color);
  var _19 : borrowed (RedBlackTree_Color_Type.t_color);
  var _20 : borrowed (RedBlackTree_Color_Type.t_color);
  var _21 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _22 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _23 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _12 <- RedBlackTree_Node_Type.node_color ( * self_1);
    _15 <- borrow_mut (RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node (let RedBlackTree_Node_Type.C_Tree a = RedBlackTree_Node_Type.node_left ( * self_1) in RedBlackTree_Node_Type.C_Tree ( ^ _15)) b c d e) };
    _14 <- ([#"../red_black_tree.rs" 514 8 514 31] AsMut0.as_mut _15);
    goto BB1
  }
  BB1 {
    _13 <- ([#"../red_black_tree.rs" 514 8 514 40] Unwrap0.unwrap _14);
    goto BB2
  }
  BB2 {
    _13 <- { _13 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * _13 in RedBlackTree_Node_Type.C_Node a _12 c d e) };
    _12 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve0.resolve _13 };
    _18 <- borrow_mut (RedBlackTree_Node_Type.node_color ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a ( ^ _18) c d e) };
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _23 <- borrow_mut (RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a b c d (let RedBlackTree_Node_Type.C_Tree a = RedBlackTree_Node_Type.node_right ( * self_1) in RedBlackTree_Node_Type.C_Tree ( ^ _23))) };
    _22 <- ([#"../red_black_tree.rs" 515 45 515 69] AsMut0.as_mut _23);
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    _21 <- ([#"../red_black_tree.rs" 515 45 515 78] Unwrap0.unwrap _22);
    goto BB4
  }
  BB4 {
    _20 <- borrow_mut (RedBlackTree_Node_Type.node_color ( * _21));
    _21 <- { _21 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * _21 in RedBlackTree_Node_Type.C_Node a ( ^ _20) c d e) };
    assume { Resolve0.resolve _21 };
    _19 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _19) };
    _16 <- ([#"../red_black_tree.rs" 515 8 515 85] Swap0.swap _17 _19);
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve _18 };
    assume { Resolve2.resolve _20 };
    _0 <- ();
    return _0
  }
  
end
module Core_Option_Impl0_AsRef_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val as_ref [@cfg:stackify] (self : Core_Option_Option_Type.t_option t) : Core_Option_Option_Type.t_option t
    ensures { self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None }
    ensures { self = Core_Option_Option_Type.C_None \/ (exists r : t . result = Core_Option_Option_Type.C_Some r /\ self = Core_Option_Option_Type.C_Some r) }
    
end
module Core_Option_Impl0_AsRef
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val as_ref [@cfg:stackify] (self : Core_Option_Option_Type.t_option t) : Core_Option_Option_Type.t_option t
    ensures { self = Core_Option_Option_Type.C_None -> result = Core_Option_Option_Type.C_None }
    ensures { self = Core_Option_Option_Type.C_None \/ (exists r : t . result = Core_Option_Option_Type.C_Some r /\ self = Core_Option_Option_Type.C_Some r) }
    
end
module RedBlackTree_Impl15_Balance_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl10_Height_Stub as Height1 with
    type k = k,
    type v = v,
    axiom .
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN_Stub as MatchN2 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl
  clone RedBlackTree_Impl6_MatchN_Stub as MatchN1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl7_MatchN_Stub as MatchN0 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpn_Type.t_cpn (RedBlackTree_Cpl_Type.t_cpl) (RedBlackTree_Cpl_Type.t_cpl),
    type r = RedBlackTree_Cpl_Type.t_cpl
  clone RedBlackTree_Impl11_Height_Stub as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings_Stub as SameMappings0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Stub as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl13_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val balance [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 518 15 518 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 519 4 520 47] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_left ( * self))}
    requires {[#"../red_black_tree.rs" 521 4 522 48] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red -> ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_right ( * self))}
    requires {[#"../red_black_tree.rs" 523 4 523 110] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> false}
    ensures { [#"../red_black_tree.rs" 524 14 524 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 525 14 525 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 526 14 526 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 527 4 528 34] ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_left ( * self)) /\ Color1.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 529 4 530 39] MatchN0.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self) -> MatchN1.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 531 4 532 63] MatchN2.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> MatchN2.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 533 4 534 61] MatchN2.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> MatchN2.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 535 4 536 39] MatchN2.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> MatchN1.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    
end
module RedBlackTree_Impl15_Balance
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl10_Height as Height1 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl8_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN1 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT1 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN1.match_n,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    axiom .
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN2 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT1.match_t,
    predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl7_MatchT as MatchT0 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchN0.match_n = MatchN2.match_n
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl7_MatchN as MatchN0 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpn_Type.t_cpn (RedBlackTree_Cpl_Type.t_cpl) (RedBlackTree_Cpl_Type.t_cpl),
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl11_Height as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl15_FlipColors_Interface as FlipColors0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    function Height0.height = Height0.height,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height1.height = Height1.height
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function Height1.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve0 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl15_RotateLeft_Interface as RotateLeft0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function Height1.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  let rec cfg balance [@cfg:stackify] [#"../red_black_tree.rs" 537 4 537 25] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : ()
    requires {[#"../red_black_tree.rs" 518 15 518 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 519 4 520 47] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_left ( * self))}
    requires {[#"../red_black_tree.rs" 521 4 522 48] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red -> ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_right ( * self))}
    requires {[#"../red_black_tree.rs" 523 4 523 110] RedBlackTree_Node_Type.node_color ( * self) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Red /\ Color1.color (RedBlackTree_Node_Type.node_left ( * self)) = RedBlackTree_Color_Type.C_Red -> false}
    ensures { [#"../red_black_tree.rs" 524 14 524 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 525 14 525 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 526 14 526 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 527 4 528 34] ColorInvariant0.color_invariant (RedBlackTree_Node_Type.node_left ( * self)) /\ Color1.color (RedBlackTree_Node_Type.node_right ( * self)) = RedBlackTree_Color_Type.C_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 529 4 530 39] MatchN0.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self) -> MatchN1.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 531 4 532 63] MatchN2.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> MatchN2.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 533 4 534 61] MatchN2.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> MatchN2.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 535 4 536 39] MatchN2.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * self) -> MatchN1.match_n (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : ();
  var _15 : bool;
  var _16 : bool;
  var _17 : RedBlackTree_Node_Type.t_tree k v;
  var _18 : bool;
  var _19 : bool;
  var _20 : RedBlackTree_Node_Type.t_tree k v;
  var _21 : ();
  var _22 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _23 : ();
  var _24 : bool;
  var _25 : bool;
  var _26 : RedBlackTree_Node_Type.t_tree k v;
  var _27 : bool;
  var _28 : RedBlackTree_Node_Type.t_tree k v;
  var _29 : RedBlackTree_Node_Type.t_node k v;
  var _30 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _31 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _32 : ();
  var _33 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _34 : bool;
  var _35 : bool;
  var _36 : RedBlackTree_Node_Type.t_tree k v;
  var _37 : bool;
  var _38 : RedBlackTree_Node_Type.t_tree k v;
  var _39 : ();
  var _40 : borrowed (RedBlackTree_Node_Type.t_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _17 <- RedBlackTree_Node_Type.node_right ( * self_1);
    _16 <- ([#"../red_black_tree.rs" 538 11 538 30] IsRed0.is_red _17);
    goto BB4
  }
  BB1 {
    _15 <- ([#"../red_black_tree.rs" 538 11 538 53] false);
    goto BB3
  }
  BB2 {
    _20 <- RedBlackTree_Node_Type.node_left ( * self_1);
    _19 <- ([#"../red_black_tree.rs" 538 35 538 53] IsRed0.is_red _20);
    goto BB5
  }
  BB3 {
    switch (_15)
      | False -> goto BB8
      | True -> goto BB6
      end
  }
  BB4 {
    switch (_16)
      | False -> goto BB1
      | True -> goto BB2
      end
  }
  BB5 {
    _18 <- not _19;
    _15 <- _18;
    _18 <- any bool;
    goto BB3
  }
  BB6 {
    _22 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _22) };
    _21 <- ([#"../red_black_tree.rs" 539 12 539 30] RotateLeft0.rotate_left _22);
    goto BB7
  }
  BB7 {
    _14 <- ();
    goto BB9
  }
  BB8 {
    _14 <- ();
    goto BB9
  }
  BB9 {
    _26 <- RedBlackTree_Node_Type.node_left ( * self_1);
    _25 <- ([#"../red_black_tree.rs" 542 11 542 29] IsRed0.is_red _26);
    goto BB13
  }
  BB10 {
    _24 <- ([#"../red_black_tree.rs" 542 11 542 79] false);
    goto BB12
  }
  BB11 {
    _31 <- RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self_1));
    _30 <- ([#"../red_black_tree.rs" 542 33 542 56] AsRef0.as_ref _31);
    goto BB14
  }
  BB12 {
    switch (_24)
      | False -> goto BB19
      | True -> goto BB17
      end
  }
  BB13 {
    switch (_25)
      | False -> goto BB10
      | True -> goto BB11
      end
  }
  BB14 {
    _29 <- ([#"../red_black_tree.rs" 542 33 542 65] Unwrap0.unwrap _30);
    goto BB15
  }
  BB15 {
    _28 <- RedBlackTree_Node_Type.node_left _29;
    assume { Resolve0.resolve _29 };
    _27 <- ([#"../red_black_tree.rs" 542 33 542 79] IsRed0.is_red _28);
    goto BB16
  }
  BB16 {
    _24 <- _27;
    _27 <- any bool;
    goto BB12
  }
  BB17 {
    _33 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _33) };
    _32 <- ([#"../red_black_tree.rs" 543 12 543 31] RotateRight0.rotate_right _33);
    goto BB18
  }
  BB18 {
    _23 <- ();
    goto BB20
  }
  BB19 {
    _23 <- ();
    goto BB20
  }
  BB20 {
    _36 <- RedBlackTree_Node_Type.node_left ( * self_1);
    _35 <- ([#"../red_black_tree.rs" 546 11 546 29] IsRed0.is_red _36);
    goto BB24
  }
  BB21 {
    _34 <- ([#"../red_black_tree.rs" 546 11 546 52] false);
    goto BB23
  }
  BB22 {
    _38 <- RedBlackTree_Node_Type.node_right ( * self_1);
    _37 <- ([#"../red_black_tree.rs" 546 33 546 52] IsRed0.is_red _38);
    goto BB25
  }
  BB23 {
    switch (_34)
      | False -> goto BB28
      | True -> goto BB26
      end
  }
  BB24 {
    switch (_35)
      | False -> goto BB21
      | True -> goto BB22
      end
  }
  BB25 {
    _34 <- _37;
    _37 <- any bool;
    goto BB23
  }
  BB26 {
    _40 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _40) };
    _39 <- ([#"../red_black_tree.rs" 547 12 547 30] FlipColors0.flip_colors _40);
    goto BB27
  }
  BB27 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB28 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
module RedBlackTree_Impl15_MoveRedLeft_Interface
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl10_Height_Stub as Height1 with
    type k = k,
    type v = v,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Stub as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN_Stub as MatchN1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl1_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  clone RedBlackTree_Impl11_Height_Stub as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl7_MatchN_Stub as MatchN0 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpn_Type.t_cpn (RedBlackTree_Cpl_Type.t_cpl) (RedBlackTree_Cpl_Type.t_cpl),
    type r = RedBlackTree_Cpl_Type.t_cpl
  clone RedBlackTree_Impl13_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val move_red_left [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../red_black_tree.rs" 551 15 551 41] RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 552 15 552 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 553 15 553 86] MatchN0.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 554 14 554 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 555 4 557 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 558 4 558 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 559 14 559 42] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( * result) }
    ensures { [#"../red_black_tree.rs" 560 4 560 105] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 561 4 562 47] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log k (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 563 4 564 108] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 565 14 566 61] MatchN1.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * result) \/ MatchN1.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 567 4 568 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color1.color (RedBlackTree_Node_Type.node_right ( * result)) = RedBlackTree_Color_Type.C_Black -> RedBlackTree_Node_Type.node_color ( ^ result) = RedBlackTree_Color_Type.C_Black) -> ColorInvariant0.color_invariant ( ^ self) }
    
end
module RedBlackTree_Impl15_MoveRedLeft
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN2 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height1 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone RedBlackTree_Impl6_MatchT as MatchT1 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN2.match_n,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    axiom .
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT1.match_t,
    predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl7_MatchT as MatchT0 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl11_Height as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN0 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpn_Type.t_cpn (RedBlackTree_Cpl_Type.t_cpl) (RedBlackTree_Cpl_Type.t_cpl),
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl15_RotateLeft_Interface as RotateLeft0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function Height1.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function Height1.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl15_FlipColors_Interface as FlipColors0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    function Height0.height = Height0.height,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height1.height = Height1.height
  let rec cfg move_red_left [@cfg:stackify] [#"../red_black_tree.rs" 569 4 569 44] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../red_black_tree.rs" 551 15 551 41] RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 552 15 552 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 553 15 553 86] MatchN0.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 554 14 554 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 555 4 557 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 558 4 558 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 559 14 559 42] RedBlackTree_Node_Type.node_key ( * self) = RedBlackTree_Node_Type.node_key ( * result) }
    ensures { [#"../red_black_tree.rs" 560 4 560 105] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 561 4 562 47] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log k (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 563 4 564 108] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 565 14 566 61] MatchN1.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * result) \/ MatchN1.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 567 4 568 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color1.color (RedBlackTree_Node_Type.node_right ( * result)) = RedBlackTree_Color_Type.C_Black -> RedBlackTree_Node_Type.node_color ( ^ result) = RedBlackTree_Color_Type.C_Black) -> ColorInvariant0.color_invariant ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var self_1 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _2 : ();
  var _15 : ();
  var _16 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _17 : ();
  var _18 : bool;
  var _19 : RedBlackTree_Node_Type.t_tree k v;
  var _20 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _21 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _22 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _23 : ();
  var _24 : ();
  var _25 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _27 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _28 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _29 : ();
  var _30 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _31 : ();
  var _32 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _33 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _34 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _35 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _16 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _16) };
    _15 <- ([#"../red_black_tree.rs" 570 8 570 26] FlipColors0.flip_colors _16);
    goto BB1
  }
  BB1 {
    _22 <- borrow_mut (RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a b c d (let RedBlackTree_Node_Type.C_Tree a = RedBlackTree_Node_Type.node_right ( * self_1) in RedBlackTree_Node_Type.C_Tree ( ^ _22))) };
    _21 <- ([#"../red_black_tree.rs" 571 11 571 35] AsMut0.as_mut _22);
    goto BB2
  }
  BB2 {
    _20 <- ([#"../red_black_tree.rs" 571 11 571 44] Unwrap0.unwrap _21);
    goto BB3
  }
  BB3 {
    _19 <- RedBlackTree_Node_Type.node_left ( * _20);
    assume { Resolve0.resolve _20 };
    _18 <- ([#"../red_black_tree.rs" 571 11 571 58] IsRed0.is_red _19);
    goto BB4
  }
  BB4 {
    switch (_18)
      | False -> goto BB13
      | True -> goto BB5
      end
  }
  BB5 {
    _28 <- borrow_mut (RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a b c d (let RedBlackTree_Node_Type.C_Tree a = RedBlackTree_Node_Type.node_right ( * self_1) in RedBlackTree_Node_Type.C_Tree ( ^ _28))) };
    _27 <- ([#"../red_black_tree.rs" 572 12 572 36] AsMut0.as_mut _28);
    goto BB6
  }
  BB6 {
    _26 <- ([#"../red_black_tree.rs" 572 12 572 45] Unwrap0.unwrap _27);
    goto BB7
  }
  BB7 {
    _25 <- borrow_mut ( * _26);
    _26 <- { _26 with current = ( ^ _25) };
    _24 <- ([#"../red_black_tree.rs" 572 12 572 60] RotateRight0.rotate_right _25);
    goto BB8
  }
  BB8 {
    assume { Resolve0.resolve _26 };
    _30 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _30) };
    _29 <- ([#"../red_black_tree.rs" 573 12 573 30] RotateLeft0.rotate_left _30);
    goto BB9
  }
  BB9 {
    _32 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _32) };
    _31 <- ([#"../red_black_tree.rs" 574 12 574 30] FlipColors0.flip_colors _32);
    goto BB10
  }
  BB10 {
    _35 <- borrow_mut (RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node (let RedBlackTree_Node_Type.C_Tree a = RedBlackTree_Node_Type.node_left ( * self_1) in RedBlackTree_Node_Type.C_Tree ( ^ _35)) b c d e) };
    _34 <- ([#"../red_black_tree.rs" 575 19 575 42] AsMut0.as_mut _35);
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    _33 <- ([#"../red_black_tree.rs" 575 19 575 51] Unwrap0.unwrap _34);
    goto BB12
  }
  BB12 {
    _0 <- borrow_mut ( * _33);
    _33 <- { _33 with current = ( ^ _0) };
    assume { Resolve0.resolve _33 };
    goto BB14
  }
  BB13 {
    _17 <- ();
    assume { Resolve1.resolve _0 };
    _0 <- self_1;
    self_1 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module RedBlackTree_Impl15_MoveRedRight_Interface
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl10_Height_Stub as Height1 with
    type k = k,
    type v = v,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Stub as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN_Stub as MatchN1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl1_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  clone RedBlackTree_Impl11_Height_Stub as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl7_MatchN_Stub as MatchN0 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpn_Type.t_cpn (RedBlackTree_Cpl_Type.t_cpl) (RedBlackTree_Cpl_Type.t_cpl)
  clone RedBlackTree_Impl13_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val move_red_right [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../red_black_tree.rs" 580 15 580 40] RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 581 15 581 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 582 15 582 86] MatchN0.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)))) ( * self)}
    ensures { [#"../red_black_tree.rs" 583 14 583 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 584 4 586 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 587 4 587 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 588 14 588 42] RedBlackTree_Node_Type.node_key ( * result) = RedBlackTree_Node_Type.node_key ( * self) }
    ensures { [#"../red_black_tree.rs" 589 4 589 105] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 590 4 591 47] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) k -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 592 4 593 108] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 594 14 595 61] MatchN1.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) \/ MatchN1.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 596 4 597 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color1.color (RedBlackTree_Node_Type.node_left ( * result)) = RedBlackTree_Color_Type.C_Black -> RedBlackTree_Node_Type.node_color ( ^ result) = RedBlackTree_Color_Type.C_Black) -> ColorInvariant0.color_invariant ( ^ self) }
    
end
module RedBlackTree_Impl15_MoveRedRight
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN2 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height1 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN2.match_n,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    axiom .
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl7_MatchT as MatchT1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl11_Height as Height0 with
    type k = k,
    type v = v,
    function Height0.height = Height1.height,
    axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN0 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpn_Type.t_cpn (RedBlackTree_Cpl_Type.t_cpl) (RedBlackTree_Cpl_Type.t_cpl),
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function Height1.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl15_FlipColors_Interface as FlipColors0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    function Color0.color = Color1.color,
    function Height0.height = Height0.height,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height1.height = Height1.height
  let rec cfg move_red_right [@cfg:stackify] [#"../red_black_tree.rs" 598 4 598 45] (self : borrowed (RedBlackTree_Node_Type.t_node k v)) : borrowed (RedBlackTree_Node_Type.t_node k v)
    requires {[#"../red_black_tree.rs" 580 15 580 40] RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self)) <> Core_Option_Option_Type.C_None}
    requires {[#"../red_black_tree.rs" 581 15 581 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 582 15 582 86] MatchN0.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)))) ( * self)}
    ensures { [#"../red_black_tree.rs" 583 14 583 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 584 4 586 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 587 4 587 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 588 14 588 42] RedBlackTree_Node_Type.node_key ( * result) = RedBlackTree_Node_Type.node_key ( * self) }
    ensures { [#"../red_black_tree.rs" 589 4 589 105] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 590 4 591 47] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log (DeepModel0.deep_model (RedBlackTree_Node_Type.node_key ( * self))) k -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 592 4 593 108] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 594 14 595 61] MatchN1.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) \/ MatchN1.match_n (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red))) ( * result) }
    ensures { [#"../red_black_tree.rs" 596 4 597 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color1.color (RedBlackTree_Node_Type.node_left ( * result)) = RedBlackTree_Color_Type.C_Black -> RedBlackTree_Node_Type.node_color ( ^ result) = RedBlackTree_Color_Type.C_Black) -> ColorInvariant0.color_invariant ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var self_1 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _2 : ();
  var _15 : ();
  var _16 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _17 : ();
  var _18 : bool;
  var _19 : RedBlackTree_Node_Type.t_tree k v;
  var _20 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _21 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _22 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _23 : ();
  var _24 : ();
  var _25 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _26 : ();
  var _27 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _28 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _29 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _30 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _16 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _16) };
    _15 <- ([#"../red_black_tree.rs" 599 8 599 26] FlipColors0.flip_colors _16);
    goto BB1
  }
  BB1 {
    _22 <- borrow_mut (RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node (let RedBlackTree_Node_Type.C_Tree a = RedBlackTree_Node_Type.node_left ( * self_1) in RedBlackTree_Node_Type.C_Tree ( ^ _22)) b c d e) };
    _21 <- ([#"../red_black_tree.rs" 600 11 600 34] AsMut0.as_mut _22);
    goto BB2
  }
  BB2 {
    _20 <- ([#"../red_black_tree.rs" 600 11 600 43] Unwrap0.unwrap _21);
    goto BB3
  }
  BB3 {
    _19 <- RedBlackTree_Node_Type.node_left ( * _20);
    assume { Resolve0.resolve _20 };
    _18 <- ([#"../red_black_tree.rs" 600 11 600 57] IsRed0.is_red _19);
    goto BB4
  }
  BB4 {
    switch (_18)
      | False -> goto BB10
      | True -> goto BB5
      end
  }
  BB5 {
    _25 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _25) };
    _24 <- ([#"../red_black_tree.rs" 601 12 601 31] RotateRight0.rotate_right _25);
    goto BB6
  }
  BB6 {
    _27 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _27) };
    _26 <- ([#"../red_black_tree.rs" 602 12 602 30] FlipColors0.flip_colors _27);
    goto BB7
  }
  BB7 {
    _30 <- borrow_mut (RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * self_1 in RedBlackTree_Node_Type.C_Node a b c d (let RedBlackTree_Node_Type.C_Tree a = RedBlackTree_Node_Type.node_right ( * self_1) in RedBlackTree_Node_Type.C_Tree ( ^ _30))) };
    _29 <- ([#"../red_black_tree.rs" 603 19 603 43] AsMut0.as_mut _30);
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve self_1 };
    _28 <- ([#"../red_black_tree.rs" 603 19 603 52] Unwrap0.unwrap _29);
    goto BB9
  }
  BB9 {
    _0 <- borrow_mut ( * _28);
    _28 <- { _28 with current = ( ^ _0) };
    assume { Resolve0.resolve _28 };
    goto BB11
  }
  BB10 {
    _17 <- ();
    assume { Resolve1.resolve _0 };
    _0 <- self_1;
    self_1 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module RedBlackTree_Impl16_New_Interface
  type k
  type v
  use map.Const
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl12_Invariant_Stub as Invariant0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val new [@cfg:stackify] (_1' : ()) : RedBlackTree_Node_Type.t_tree k v
    ensures { [#"../red_black_tree.rs" 613 14 613 43] ShallowModel0.shallow_model result = Const.const (Core_Option_Option_Type.C_None) }
    ensures { [#"../red_black_tree.rs" 614 14 614 32] Invariant0.invariant' result }
    
end
module RedBlackTree_Impl16_New
  type k
  type v
  use map.Const
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl8_Color as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl12_Invariant as Invariant0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color0.color = Color0.color
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  let rec cfg new [@cfg:stackify] [#"../red_black_tree.rs" 615 4 615 30] (_1' : ()) : RedBlackTree_Node_Type.t_tree k v
    ensures { [#"../red_black_tree.rs" 613 14 613 43] ShallowModel0.shallow_model result = Const.const (Core_Option_Option_Type.C_None) }
    ensures { [#"../red_black_tree.rs" 614 14 614 32] Invariant0.invariant' result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : RedBlackTree_Node_Type.t_tree k v;
  var _3 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  {
    goto BB0
  }
  BB0 {
    _3 <- Core_Option_Option_Type.C_None;
    _0 <- RedBlackTree_Node_Type.C_Tree _3;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module Core_Cmp_Ord_Cmp_Interface
  type self
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { [#"../red_black_tree.rs" 751 9 753 33] result = CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other) }
    
end
module Core_Cmp_Ord_Cmp
  type self
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { [#"../red_black_tree.rs" 751 9 753 33] result = CmpLog0.cmp_log (DeepModel0.deep_model self) (DeepModel0.deep_model other) }
    
end
module RedBlackTree_Impl16_InsertRec_Interface
  type k
  type v
  use prelude.Borrow
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Stub as Color1 with
    type k = k,
    type v = v
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchT_Stub as MatchT0 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl
  clone RedBlackTree_Impl10_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl8_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl12_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val insert_rec [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 619 15 619 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 620 15 620 40] ColorInvariant0.color_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 621 14 621 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 622 14 622 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 623 14 624 39] MatchT0.match_t (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) /\ Color1.color ( * self) = RedBlackTree_Color_Type.C_Red \/ ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 625 14 625 56] HasMapping0.has_mapping ( ^ self) (DeepModel0.deep_model key) val' }
    ensures { [#"../red_black_tree.rs" 626 4 626 127] forall v : v . forall k : DeepModelTy0.deepModelTy . k = DeepModel0.deep_model key \/ HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    
end
module RedBlackTree_Impl16_InsertRec
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN1 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT1 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN1.match_n,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    axiom .
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN0 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT1.match_t,
    predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl7_MatchT as MatchT0 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchN0.match_n = MatchN0.match_n
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  use mach.int.Int
  use prelude.IntSize
  use prelude.Int8
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl7_MatchN as MatchN2 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpn_Type.t_cpn (RedBlackTree_Cpl_Type.t_cpl) (RedBlackTree_Cpl_Type.t_cpl),
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl11_Height as Height1 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve6 with
    type self = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone RedBlackTree_Impl15_Balance_Interface as Balance0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height1.height,
    predicate MatchN0.match_n = MatchN2.match_n,
    predicate MatchN1.match_n = MatchN1.match_n,
    predicate MatchN2.match_n = MatchN0.match_n,
    function Height1.height = Height0.height
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve4 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve3 with
    type self = k
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with
    type self = k,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve2 with
    type self = k
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = RedBlackTree_Node_Type.t_tree k v
  let rec cfg insert_rec [@cfg:stackify] [#"../red_black_tree.rs" 627 4 627 44] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 619 15 619 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 620 15 620 40] ColorInvariant0.color_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 621 14 621 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 622 14 622 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 623 14 624 39] MatchT0.match_t (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Red) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( ^ self) /\ Color1.color ( * self) = RedBlackTree_Color_Type.C_Red \/ ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 625 14 625 56] HasMapping0.has_mapping ( ^ self) (DeepModel0.deep_model key) val' }
    ensures { [#"../red_black_tree.rs" 626 4 626 127] forall v : v . forall k : DeepModelTy0.deepModelTy . k = DeepModel0.deep_model key \/ HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var _11 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _12 : isize;
  var node_13 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : ();
  var _15 : Core_Cmp_Ordering_Type.t_ordering;
  var _16 : k;
  var _17 : k;
  var _18 : k;
  var _19 : int8;
  var _20 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _21 : k;
  var _22 : v;
  var _23 : ();
  var _24 : v;
  var _25 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _26 : k;
  var _27 : v;
  var _28 : ();
  var _29 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _30 : ();
  var _31 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _32 : RedBlackTree_Node_Type.t_node k v;
  var _33 : RedBlackTree_Node_Type.t_node k v;
  var _34 : RedBlackTree_Node_Type.t_tree k v;
  var _35 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _36 : RedBlackTree_Color_Type.t_color;
  var _37 : k;
  var _38 : v;
  var _39 : RedBlackTree_Node_Type.t_tree k v;
  var _40 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _11 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree ( ^ _11)) };
    switch ( * _11)
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      | _ -> goto BB15
      end
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    node_13 <- borrow_mut (Core_Option_Option_Type.some_0 ( * _11));
    _11 <- { _11 with current = (let Core_Option_Option_Type.C_Some a =  * _11 in Core_Option_Option_Type.C_Some ( ^ node_13)) };
    assume { Resolve1.resolve _11 };
    _16 <- key_2;
    _18 <- RedBlackTree_Node_Type.node_key ( * node_13);
    _17 <- _18;
    assume { Resolve2.resolve _18 };
    _15 <- ([#"../red_black_tree.rs" 629 18 629 36] Cmp0.cmp _16 _17);
    goto BB4
  }
  BB4 {
    switch (_15)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB7
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB9
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB5
      end
  }
  BB5 {
    _25 <- borrow_mut (RedBlackTree_Node_Type.node_right ( * node_13));
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_13 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _25)) };
    assume { Resolve3.resolve _26 };
    _26 <- key_2;
    key_2 <- any k;
    assume { Resolve4.resolve _27 };
    _27 <- val'_3;
    val'_3 <- any v;
    _14 <- ([#"../red_black_tree.rs" 635 27 635 58] insert_rec _25 _26 _27);
    goto BB12
  }
  BB6 {
    assume { Resolve3.resolve key_2 };
    assume { Resolve4.resolve val'_3 };
    assume { Resolve5.resolve node_13 };
    absurd
  }
  BB7 {
    _20 <- borrow_mut (RedBlackTree_Node_Type.node_left ( * node_13));
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_13 in RedBlackTree_Node_Type.C_Node ( ^ _20) b c d e) };
    assume { Resolve3.resolve _21 };
    _21 <- key_2;
    key_2 <- any k;
    assume { Resolve4.resolve _22 };
    _22 <- val'_3;
    val'_3 <- any v;
    _14 <- ([#"../red_black_tree.rs" 630 24 630 54] insert_rec _20 _21 _22);
    goto BB8
  }
  BB8 {
    goto BB13
  }
  BB9 {
    assume { Resolve4.resolve _24 };
    _24 <- val'_3;
    val'_3 <- any v;
    assume { Resolve4.resolve (RedBlackTree_Node_Type.node_val ( * node_13)) };
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_13 in RedBlackTree_Node_Type.C_Node a b c _24 e) };
    goto BB10
  }
  BB10 {
    assume { Resolve5.resolve node_13 };
    goto BB11
  }
  BB11 {
    _0 <- ();
    goto BB27
  }
  BB12 {
    goto BB13
  }
  BB13 {
    _29 <- borrow_mut ( * node_13);
    node_13 <- { node_13 with current = ( ^ _29) };
    _28 <- ([#"../red_black_tree.rs" 637 12 637 26] Balance0.balance _29);
    goto BB14
  }
  BB14 {
    assume { Resolve5.resolve node_13 };
    _0 <- ();
    goto BB26
  }
  BB15 {
    assume { Resolve1.resolve _11 };
    _35 <- Core_Option_Option_Type.C_None;
    _34 <- RedBlackTree_Node_Type.C_Tree _35;
    goto BB16
  }
  BB16 {
    _36 <- RedBlackTree_Color_Type.C_Red;
    assume { Resolve3.resolve _37 };
    _37 <- key_2;
    key_2 <- any k;
    assume { Resolve4.resolve _38 };
    _38 <- val'_3;
    val'_3 <- any v;
    _40 <- Core_Option_Option_Type.C_None;
    _39 <- RedBlackTree_Node_Type.C_Tree _40;
    goto BB17
  }
  BB17 {
    _33 <- RedBlackTree_Node_Type.C_Node _34 _36 _37 _38 _39;
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    _32 <- _33;
    goto BB22
  }
  BB22 {
    _31 <- Core_Option_Option_Type.C_Some _32;
    goto BB23
  }
  BB23 {
    assume { Resolve6.resolve (RedBlackTree_Node_Type.tree_node ( * self_1)) };
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree _31) };
    goto BB24
  }
  BB24 {
    assume { Resolve0.resolve self_1 };
    goto BB25
  }
  BB25 {
    _0 <- ();
    goto BB27
  }
  BB26 {
    goto BB29
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
module CreusotContracts_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module RedBlackTree_Impl3_ShallowModelTy_Type
  type k
  type v
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  type shallowModelTy  =
    Map.map DeepModelTy0.deepModelTy (Core_Option_Option_Type.t_option v)
end
module RedBlackTree_Impl16_Insert_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone RedBlackTree_Impl3_ShallowModelTy_Type as ShallowModelTy0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = RedBlackTree_Node_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl12_Invariant_Stub as Invariant0 with
    type k = k,
    type v = v
  val insert [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 650 15 650 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 651 14 651 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 652 14 652 64] ShallowModel0.shallow_model ( ^ self) = Map.set (ShallowModel1.shallow_model self) (DeepModel0.deep_model key) (Core_Option_Option_Type.C_Some val') }
    
end
module RedBlackTree_Impl16_Insert
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl8_Color as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl3_ShallowModelTy_Type as ShallowModelTy0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = RedBlackTree_Node_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone RedBlackTree_Impl12_Invariant as Invariant0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color0.color = Color0.color
  use prelude.Ghost
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN1 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT1 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN1.match_n,
    function Color1.color = Color0.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    axiom .
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN0 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT1.match_t,
    predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  clone RedBlackTree_Impl7_MatchT as MatchT0 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchN0.match_n = MatchN0.match_n
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Node_Type.t_tree k v
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl16_InsertRec_Interface as InsertRec0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Height0.height = Height0.height,
    predicate MatchT0.match_t = MatchT0.match_t,
    function Color1.color = Color0.color,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve0 with
    type self = k
  let rec cfg insert [@cfg:stackify] [#"../red_black_tree.rs" 653 4 653 44] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 650 15 650 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 651 14 651 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 652 14 652 64] ShallowModel0.shallow_model ( ^ self) = Map.set (ShallowModel1.shallow_model self) (DeepModel0.deep_model key) (Core_Option_Option_Type.C_Some val') }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var _7 : ();
  var _8 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _9 : k;
  var _10 : v;
  var _11 : RedBlackTree_Color_Type.t_color;
  var _12 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _13 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _14 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _15 : Ghost.ghost_ty ();
  var _18 : ();
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _8 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _8) };
    assume { Resolve0.resolve _9 };
    _9 <- key_2;
    key_2 <- any k;
    assume { Resolve1.resolve _10 };
    _10 <- val'_3;
    val'_3 <- any v;
    _7 <- ([#"../red_black_tree.rs" 654 8 654 33] InsertRec0.insert_rec _8 _9 _10);
    goto BB2
  }
  BB2 {
    _11 <- RedBlackTree_Color_Type.C_Black;
    _14 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree ( ^ _14)) };
    _13 <- ([#"../red_black_tree.rs" 655 8 655 26] AsMut0.as_mut _14);
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve self_1 };
    _12 <- ([#"../red_black_tree.rs" 655 8 655 35] Unwrap0.unwrap _13);
    goto BB4
  }
  BB4 {
    _12 <- { _12 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * _12 in RedBlackTree_Node_Type.C_Node a _11 c d e) };
    _11 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve3.resolve _12 };
    _18 <- ();
    _15 <- ([#"../red_black_tree.rs" 656 8 656 42] Ghost.new ());
    goto BB5
  }
  BB5 {
    _0 <- ();
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module Alloc_Boxed_Impl54_AsMut_Interface
  type t
  type a
  use prelude.Borrow
  val as_mut [@cfg:stackify] (self : borrowed t) : borrowed t
    ensures { [#"../red_black_tree.rs" 696 41 697 13]  * self =  * result }
    ensures { [#"../red_black_tree.rs" 698 5 698 22]  ^ self =  ^ result }
    
end
module Alloc_Boxed_Impl54_AsMut
  type t
  type a
  use prelude.Borrow
  val as_mut [@cfg:stackify] (self : borrowed t) : borrowed t
    ensures { [#"../red_black_tree.rs" 696 41 697 13]  * self =  * result }
    ensures { [#"../red_black_tree.rs" 698 5 698 22]  ^ self =  ^ result }
    
end
module CreusotContracts_Resolve_Impl0_Resolve_Stub
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve1 with
    type self = t2
  clone CreusotContracts_Resolve_Resolve_Resolve_Stub as Resolve0 with
    type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
  val resolve (self : (t1, t2)) : bool
    ensures { result = resolve self }
    
end
module RedBlackTree_Impl16_DeleteMaxRec_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN_Stub as MatchN0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Stub as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl10_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchT_Stub as MatchT1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl
  clone RedBlackTree_Impl6_MatchT_Stub as MatchT0 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN0.match_n,
    axiom .
  clone RedBlackTree_Impl12_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val delete_max_rec [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 659 15 659 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 660 15 661 62] MatchT0.match_t (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ MatchT1.match_t (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 662 14 662 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 663 14 663 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 664 14 664 66] HasMapping0.has_mapping ( * self) (DeepModel0.deep_model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 665 4 665 104] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log k (DeepModel0.deep_model (let (a, _) = result in a)) }
    ensures { [#"../red_black_tree.rs" 666 4 667 73] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (DeepModel0.deep_model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 668 14 668 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 669 4 669 69] Color1.color ( * self) = RedBlackTree_Color_Type.C_Black -> Color1.color ( ^ self) = RedBlackTree_Color_Type.C_Black }
    
end
module RedBlackTree_Impl16_DeleteMaxRec
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    axiom .
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl7_MatchT as MatchT1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  use mach.int.Int
  use prelude.IntSize
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl7_MatchN as MatchN3 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpn_Type.t_cpn (RedBlackTree_Cpl_Type.t_cpl) (RedBlackTree_Cpl_Type.t_cpl),
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT1.match_t,
    predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN2 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpn_Type.t_cpn (RedBlackTree_Cpl_Type.t_cpl) (RedBlackTree_Cpl_Type.t_cpl),
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT1.match_t
  clone CreusotContracts_Std1_Option_Impl0_IsDefault as IsDefault0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl11_Height as Height1 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve8 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve5 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve4 with
    type self = k
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve7 with
    type t1 = k,
    type t2 = v,
    predicate Resolve0.resolve = Resolve4.resolve,
    predicate Resolve1.resolve = Resolve5.resolve
  clone RedBlackTree_Impl15_Balance_Interface as Balance0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height1.height,
    predicate MatchN0.match_n = MatchN3.match_n,
    predicate MatchN1.match_n = MatchN0.match_n,
    predicate MatchN2.match_n = MatchN1.match_n,
    function Height1.height = Height0.height
  clone RedBlackTree_Impl15_MoveRedRight_Interface as MoveRedRight0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    predicate MatchN0.match_n = MatchN2.match_n,
    function Height0.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate MatchN1.match_n = MatchN1.match_n,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    function Color1.color = Color1.color,
    function Height1.height = Height0.height,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve6 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone Core_Mem_Take_Interface as Take0 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v),
    predicate IsDefault0.is_default = IsDefault0.is_default
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Node_Type.t_tree k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Color0.color = Color1.color,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height1.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function Height1.height = Height0.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Alloc_Boxed_Impl54_AsMut_Interface as AsMut1 with
    type t = RedBlackTree_Node_Type.t_node k v,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  let rec cfg delete_max_rec [@cfg:stackify] [#"../red_black_tree.rs" 670 4 670 42] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 659 15 659 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 660 15 661 62] MatchT0.match_t (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ MatchT1.match_t (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 662 14 662 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 663 14 663 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 664 14 664 66] HasMapping0.has_mapping ( * self) (DeepModel0.deep_model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 665 4 665 104] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log k (DeepModel0.deep_model (let (a, _) = result in a)) }
    ensures { [#"../red_black_tree.rs" 666 4 667 73] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (DeepModel0.deep_model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 668 14 668 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 669 4 669 69] Color1.color ( * self) = RedBlackTree_Color_Type.C_Black -> Color1.color ( ^ self) = RedBlackTree_Color_Type.C_Black }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (k, v);
  var self_1 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var node_11 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _12 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _13 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _15 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _16 : ();
  var _17 : bool;
  var _18 : RedBlackTree_Node_Type.t_tree k v;
  var _19 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _20 : ();
  var _21 : isize;
  var _22 : ();
  var node_23 : RedBlackTree_Node_Type.t_node k v;
  var _24 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _25 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _26 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _27 : k;
  var _28 : v;
  var _29 : ();
  var _30 : bool;
  var _31 : bool;
  var _32 : bool;
  var _33 : RedBlackTree_Node_Type.t_tree k v;
  var _34 : bool;
  var _35 : bool;
  var _36 : RedBlackTree_Node_Type.t_tree k v;
  var _37 : RedBlackTree_Node_Type.t_node k v;
  var _38 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _39 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _40 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _41 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _42 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var r_43 : (k, v);
  var _44 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _45 : ();
  var _46 : borrowed (RedBlackTree_Node_Type.t_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _15 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree ( ^ _15)) };
    _14 <- ([#"../red_black_tree.rs" 671 23 671 41] AsMut0.as_mut _15);
    goto BB1
  }
  BB1 {
    _13 <- ([#"../red_black_tree.rs" 671 23 671 50] Unwrap0.unwrap _14);
    goto BB2
  }
  BB2 {
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    node_11 <- ([#"../red_black_tree.rs" 671 23 671 59] AsMut1.as_mut _12);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _13 };
    _18 <- RedBlackTree_Node_Type.node_left ( * node_11);
    _17 <- ([#"../red_black_tree.rs" 672 11 672 29] IsRed0.is_red _18);
    goto BB4
  }
  BB4 {
    switch (_17)
      | False -> goto BB7
      | True -> goto BB5
      end
  }
  BB5 {
    _19 <- borrow_mut ( * node_11);
    node_11 <- { node_11 with current = ( ^ _19) };
    _16 <- ([#"../red_black_tree.rs" 673 12 673 31] RotateRight0.rotate_right _19);
    goto BB6
  }
  BB6 {
    goto BB8
  }
  BB7 {
    _16 <- ();
    goto BB8
  }
  BB8 {
    switch (RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * node_11)))
      | Core_Option_Option_Type.C_None -> goto BB9
      | _ -> goto BB14
      end
  }
  BB9 {
    assume { Resolve1.resolve node_11 };
    _26 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree ( ^ _26)) };
    assume { Resolve2.resolve self_1 };
    _25 <- borrow_mut ( * _26);
    _26 <- { _26 with current = ( ^ _25) };
    _24 <- ([#"../red_black_tree.rs" 676 23 676 53] Take0.take _25);
    goto BB10
  }
  BB10 {
    assume { Resolve3.resolve _26 };
    node_23 <- ([#"../red_black_tree.rs" 676 23 676 62] Unwrap1.unwrap _24);
    goto BB11
  }
  BB11 {
    assume { Resolve4.resolve _27 };
    _27 <- RedBlackTree_Node_Type.node_key node_23;
    node_23 <- (let RedBlackTree_Node_Type.C_Node a b c d e = node_23 in RedBlackTree_Node_Type.C_Node a b (any k) d e);
    assume { Resolve5.resolve _28 };
    _28 <- RedBlackTree_Node_Type.node_val node_23;
    node_23 <- (let RedBlackTree_Node_Type.C_Node a b c d e = node_23 in RedBlackTree_Node_Type.C_Node a b c (any v) e);
    _0 <- (_27, _28);
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB29
  }
  BB14 {
    assume { Resolve2.resolve self_1 };
    _20 <- ();
    _33 <- RedBlackTree_Node_Type.node_right ( * node_11);
    _32 <- ([#"../red_black_tree.rs" 679 12 679 31] IsRed0.is_red _33);
    goto BB18
  }
  BB15 {
    _30 <- ([#"../red_black_tree.rs" 679 11 679 83] false);
    goto BB17
  }
  BB16 {
    _39 <- RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * node_11));
    _38 <- ([#"../red_black_tree.rs" 679 36 679 60] AsRef0.as_ref _39);
    goto BB19
  }
  BB17 {
    switch (_30)
      | False -> goto BB24
      | True -> goto BB22
      end
  }
  BB18 {
    _31 <- not _32;
    switch (_31)
      | False -> goto BB15
      | True -> goto BB16
      end
  }
  BB19 {
    _37 <- ([#"../red_black_tree.rs" 679 36 679 69] Unwrap2.unwrap _38);
    goto BB20
  }
  BB20 {
    _36 <- RedBlackTree_Node_Type.node_left _37;
    assume { Resolve6.resolve _37 };
    _35 <- ([#"../red_black_tree.rs" 679 36 679 83] IsRed0.is_red _36);
    goto BB21
  }
  BB21 {
    _34 <- not _35;
    _30 <- _34;
    _34 <- any bool;
    goto BB17
  }
  BB22 {
    _42 <- borrow_mut ( * node_11);
    node_11 <- { node_11 with current = ( ^ _42) };
    _41 <- ([#"../red_black_tree.rs" 680 19 680 40] MoveRedRight0.move_red_right _42);
    goto BB23
  }
  BB23 {
    assume { Resolve1.resolve node_11 };
    _40 <- borrow_mut ( * _41);
    _41 <- { _41 with current = ( ^ _40) };
    assume { Resolve1.resolve _41 };
    assume { Resolve1.resolve node_11 };
    node_11 <- _40;
    _40 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    _29 <- ();
    goto BB25
  }
  BB24 {
    _29 <- ();
    goto BB25
  }
  BB25 {
    _44 <- borrow_mut (RedBlackTree_Node_Type.node_right ( * node_11));
    node_11 <- { node_11 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_11 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _44)) };
    r_43 <- ([#"../red_black_tree.rs" 682 16 682 43] delete_max_rec _44);
    goto BB26
  }
  BB26 {
    _46 <- borrow_mut ( * node_11);
    node_11 <- { node_11 with current = ( ^ _46) };
    _45 <- ([#"../red_black_tree.rs" 683 8 683 22] Balance0.balance _46);
    goto BB27
  }
  BB27 {
    assume { Resolve1.resolve node_11 };
    assume { Resolve7.resolve _0 };
    _0 <- r_43;
    r_43 <- any (k, v);
    goto BB28
  }
  BB28 {
    goto BB30
  }
  BB29 {
    assume { Resolve8.resolve node_23 };
    goto BB30
  }
  BB30 {
    return _0
  }
  
end
module RedBlackTree_Impl16_DeleteMax_Interface
  type k
  type v
  use prelude.Borrow
  use map.Const
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone RedBlackTree_Impl3_ShallowModelTy_Type as ShallowModelTy0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = RedBlackTree_Node_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl12_Invariant_Stub as Invariant0 with
    type k = k,
    type v = v
  val delete_max [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 687 15 687 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 688 14 688 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 689 4 689 81] result = Core_Option_Option_Type.C_None -> ShallowModel0.shallow_model ( ^ self) = ShallowModel1.shallow_model self /\ ShallowModel1.shallow_model self = Const.const (Core_Option_Option_Type.C_None) }
    ensures { [#"../red_black_tree.rs" 690 4 693 59] forall v : v . forall k : k . result = Core_Option_Option_Type.C_Some (k, v) -> Map.get (ShallowModel1.shallow_model self) (DeepModel0.deep_model k) = Core_Option_Option_Type.C_Some v /\ (forall k2 : DeepModelTy0.deepModelTy . Map.get (ShallowModel1.shallow_model self) k2 = Core_Option_Option_Type.C_None \/ LeLog0.le_log k2 (DeepModel0.deep_model k)) /\ ShallowModel0.shallow_model ( ^ self) = Map.set (ShallowModel1.shallow_model self) (DeepModel0.deep_model k) (Core_Option_Option_Type.C_None) }
    
end
module RedBlackTree_Impl16_DeleteMax
  type k
  type v
  use prelude.Borrow
  use map.Const
  use map.Map
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl8_Color as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone RedBlackTree_Impl3_ShallowModelTy_Type as ShallowModelTy0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = RedBlackTree_Node_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone RedBlackTree_Impl12_Invariant as Invariant0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color0.color = Color0.color
  use prelude.Ghost
  use mach.int.Int
  use prelude.IntSize
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Color1.color = Color0.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    axiom .
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT0.match_t
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve6 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve5 with
    type self = k
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  clone RedBlackTree_Impl7_MatchT as MatchT1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchN0.match_n = MatchN1.match_n
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve4 with
    type t1 = k,
    type t2 = v,
    predicate Resolve0.resolve = Resolve5.resolve,
    predicate Resolve1.resolve = Resolve6.resolve
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = RedBlackTree_Node_Type.t_tree k v
  clone RedBlackTree_Impl16_DeleteMaxRec_Interface as DeleteMaxRec0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT1.match_t,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color1.color = Color0.color,
    predicate MatchN0.match_n = MatchN0.match_n
  clone RedBlackTree_Impl0_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color0.color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_tree k v))
  let rec cfg delete_max [@cfg:stackify] [#"../red_black_tree.rs" 694 4 694 50] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 687 15 687 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 688 14 688 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 689 4 689 81] result = Core_Option_Option_Type.C_None -> ShallowModel0.shallow_model ( ^ self) = ShallowModel1.shallow_model self /\ ShallowModel1.shallow_model self = Const.const (Core_Option_Option_Type.C_None) }
    ensures { [#"../red_black_tree.rs" 690 4 693 59] forall v : v . forall k : k . result = Core_Option_Option_Type.C_Some (k, v) -> Map.get (ShallowModel1.shallow_model self) (DeepModel0.deep_model k) = Core_Option_Option_Type.C_Some v /\ (forall k2 : DeepModelTy0.deepModelTy . Map.get (ShallowModel1.shallow_model self) k2 = Core_Option_Option_Type.C_None \/ LeLog0.le_log k2 (DeepModel0.deep_model k)) /\ ShallowModel0.shallow_model ( ^ self) = Map.set (ShallowModel1.shallow_model self) (DeepModel0.deep_model k) (Core_Option_Option_Type.C_None) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (k, v);
  var self_1 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var old_self_6 : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_tree k v));
  var _8 : ();
  var _9 : ();
  var _10 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _11 : isize;
  var node_12 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _13 : bool;
  var _14 : bool;
  var _15 : RedBlackTree_Node_Type.t_tree k v;
  var _16 : RedBlackTree_Color_Type.t_color;
  var _17 : ();
  var _18 : ();
  var r_20 : (k, v);
  var _21 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _22 : ();
  var _23 : bool;
  var _24 : RedBlackTree_Node_Type.t_tree k v;
  var _25 : RedBlackTree_Color_Type.t_color;
  var _26 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _27 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _28 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _29 : Ghost.ghost_ty ();
  var _32 : ();
  var _33 : (k, v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _8 <- ();
    old_self_6 <- ([#"../red_black_tree.rs" 695 23 695 38] Ghost.new self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_6 };
    _10 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree ( ^ _10)) };
    switch ( * _10)
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      | _ -> goto BB7
      end
  }
  BB2 {
    node_12 <- borrow_mut (Core_Option_Option_Type.some_0 ( * _10));
    _10 <- { _10 with current = (let Core_Option_Option_Type.C_Some a =  * _10 in Core_Option_Option_Type.C_Some ( ^ node_12)) };
    assume { Resolve1.resolve _10 };
    _15 <- RedBlackTree_Node_Type.node_left ( * node_12);
    _14 <- ([#"../red_black_tree.rs" 697 16 697 34] IsRed0.is_red _15);
    goto BB3
  }
  BB3 {
    _13 <- not _14;
    switch (_13)
      | False -> goto BB5
      | True -> goto BB4
      end
  }
  BB4 {
    _16 <- RedBlackTree_Color_Type.C_Red;
    node_12 <- { node_12 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_12 in RedBlackTree_Node_Type.C_Node a _16 c d e) };
    _16 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve2.resolve node_12 };
    _9 <- ();
    goto BB6
  }
  BB5 {
    assume { Resolve2.resolve node_12 };
    _9 <- ();
    goto BB6
  }
  BB6 {
    assert { [#"../red_black_tree.rs" 703 24 703 53] SameMappings0.same_mappings ( * Ghost.inner old_self_6) ( * self_1) };
    _18 <- ();
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    r_20 <- ([#"../red_black_tree.rs" 704 16 704 37] DeleteMaxRec0.delete_max_rec _21);
    goto BB8
  }
  BB7 {
    assume { Resolve3.resolve self_1 };
    assume { Resolve1.resolve _10 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB18
  }
  BB8 {
    _24 <-  * self_1;
    _23 <- ([#"../red_black_tree.rs" 705 11 705 24] IsRed0.is_red _24);
    goto BB9
  }
  BB9 {
    switch (_23)
      | False -> goto BB13
      | True -> goto BB10
      end
  }
  BB10 {
    _25 <- RedBlackTree_Color_Type.C_Black;
    _28 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree ( ^ _28)) };
    _27 <- ([#"../red_black_tree.rs" 706 12 706 30] AsMut0.as_mut _28);
    goto BB11
  }
  BB11 {
    assume { Resolve3.resolve self_1 };
    _26 <- ([#"../red_black_tree.rs" 706 12 706 39] Unwrap0.unwrap _27);
    goto BB12
  }
  BB12 {
    _26 <- { _26 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * _26 in RedBlackTree_Node_Type.C_Node a _25 c d e) };
    _25 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve2.resolve _26 };
    _22 <- ();
    goto BB14
  }
  BB13 {
    assume { Resolve3.resolve self_1 };
    _22 <- ();
    goto BB14
  }
  BB14 {
    _32 <- ();
    _29 <- ([#"../red_black_tree.rs" 708 8 708 42] Ghost.new ());
    goto BB15
  }
  BB15 {
    assume { Resolve4.resolve _33 };
    _33 <- r_20;
    r_20 <- any (k, v);
    _0 <- Core_Option_Option_Type.C_Some _33;
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module RedBlackTree_Impl16_DeleteMinRec_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN_Stub as MatchN0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Stub as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl10_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchT_Stub as MatchT1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl
  clone RedBlackTree_Impl6_MatchT_Stub as MatchT0 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN0.match_n,
    axiom .
  clone RedBlackTree_Impl12_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val delete_min_rec [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 712 15 712 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 713 15 714 62] MatchT0.match_t (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ MatchT1.match_t (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 715 14 715 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 716 14 716 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 717 14 717 66] HasMapping0.has_mapping ( * self) (DeepModel0.deep_model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 718 4 718 104] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (DeepModel0.deep_model (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 719 4 720 73] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (DeepModel0.deep_model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 721 14 721 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 722 4 722 69] Color1.color ( * self) = RedBlackTree_Color_Type.C_Black -> Color1.color ( ^ self) = RedBlackTree_Color_Type.C_Black }
    
end
module RedBlackTree_Impl16_DeleteMinRec
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    axiom .
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl7_MatchT as MatchT1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  use mach.int.Int
  use prelude.IntSize
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl11_Height as Height1 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height,
    axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN2 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpn_Type.t_cpn (RedBlackTree_Cpl_Type.t_cpl) (RedBlackTree_Cpl_Type.t_cpl),
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT1.match_t,
    predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone CreusotContracts_Std1_Option_Impl0_IsDefault as IsDefault0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve8 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve5 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve4 with
    type self = k
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve7 with
    type t1 = k,
    type t2 = v,
    predicate Resolve0.resolve = Resolve4.resolve,
    predicate Resolve1.resolve = Resolve5.resolve
  clone RedBlackTree_Impl15_Balance_Interface as Balance0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height1.height,
    predicate MatchN0.match_n = MatchN2.match_n,
    predicate MatchN1.match_n = MatchN0.match_n,
    predicate MatchN2.match_n = MatchN1.match_n,
    function Height1.height = Height0.height
  clone RedBlackTree_Impl15_MoveRedLeft_Interface as MoveRedLeft0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    predicate MatchN0.match_n = MatchN2.match_n,
    function Height0.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate MatchN1.match_n = MatchN1.match_n,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    function Color1.color = Color1.color,
    function Height1.height = Height0.height,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve6 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone Core_Mem_Take_Interface as Take0 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v),
    predicate IsDefault0.is_default = IsDefault0.is_default
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Node_Type.t_tree k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Alloc_Boxed_Impl54_AsMut_Interface as AsMut1 with
    type t = RedBlackTree_Node_Type.t_node k v,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  let rec cfg delete_min_rec [@cfg:stackify] [#"../red_black_tree.rs" 723 4 723 42] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 712 15 712 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 713 15 714 62] MatchT0.match_t (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ MatchT1.match_t (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 715 14 715 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 716 14 716 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 717 14 717 66] HasMapping0.has_mapping ( * self) (DeepModel0.deep_model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 718 4 718 104] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (DeepModel0.deep_model (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 719 4 720 73] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (DeepModel0.deep_model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 721 14 721 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 722 4 722 69] Color1.color ( * self) = RedBlackTree_Color_Type.C_Black -> Color1.color ( ^ self) = RedBlackTree_Color_Type.C_Black }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (k, v);
  var self_1 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var node_11 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _12 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _13 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _15 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _16 : ();
  var _17 : isize;
  var _18 : ();
  var node_19 : RedBlackTree_Node_Type.t_node k v;
  var _20 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _21 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _22 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _23 : k;
  var _24 : v;
  var _25 : ();
  var _26 : bool;
  var _27 : bool;
  var _28 : bool;
  var _29 : RedBlackTree_Node_Type.t_tree k v;
  var _30 : bool;
  var _31 : bool;
  var _32 : RedBlackTree_Node_Type.t_tree k v;
  var _33 : RedBlackTree_Node_Type.t_node k v;
  var _34 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _35 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _36 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _37 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _38 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var r_39 : (k, v);
  var _40 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _41 : ();
  var _42 : borrowed (RedBlackTree_Node_Type.t_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _15 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree ( ^ _15)) };
    _14 <- ([#"../red_black_tree.rs" 724 23 724 41] AsMut0.as_mut _15);
    goto BB1
  }
  BB1 {
    _13 <- ([#"../red_black_tree.rs" 724 23 724 50] Unwrap0.unwrap _14);
    goto BB2
  }
  BB2 {
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    node_11 <- ([#"../red_black_tree.rs" 724 23 724 59] AsMut1.as_mut _12);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _13 };
    switch (RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * node_11)))
      | Core_Option_Option_Type.C_None -> goto BB4
      | _ -> goto BB9
      end
  }
  BB4 {
    assume { Resolve1.resolve node_11 };
    _22 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree ( ^ _22)) };
    assume { Resolve2.resolve self_1 };
    _21 <- borrow_mut ( * _22);
    _22 <- { _22 with current = ( ^ _21) };
    _20 <- ([#"../red_black_tree.rs" 726 23 726 53] Take0.take _21);
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _22 };
    node_19 <- ([#"../red_black_tree.rs" 726 23 726 62] Unwrap1.unwrap _20);
    goto BB6
  }
  BB6 {
    assume { Resolve4.resolve _23 };
    _23 <- RedBlackTree_Node_Type.node_key node_19;
    node_19 <- (let RedBlackTree_Node_Type.C_Node a b c d e = node_19 in RedBlackTree_Node_Type.C_Node a b (any k) d e);
    assume { Resolve5.resolve _24 };
    _24 <- RedBlackTree_Node_Type.node_val node_19;
    node_19 <- (let RedBlackTree_Node_Type.C_Node a b c d e = node_19 in RedBlackTree_Node_Type.C_Node a b c (any v) e);
    _0 <- (_23, _24);
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB24
  }
  BB9 {
    assume { Resolve2.resolve self_1 };
    _16 <- ();
    _29 <- RedBlackTree_Node_Type.node_left ( * node_11);
    _28 <- ([#"../red_black_tree.rs" 729 12 729 30] IsRed0.is_red _29);
    goto BB13
  }
  BB10 {
    _26 <- ([#"../red_black_tree.rs" 729 11 729 81] false);
    goto BB12
  }
  BB11 {
    _35 <- RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * node_11));
    _34 <- ([#"../red_black_tree.rs" 729 35 729 58] AsRef0.as_ref _35);
    goto BB14
  }
  BB12 {
    switch (_26)
      | False -> goto BB19
      | True -> goto BB17
      end
  }
  BB13 {
    _27 <- not _28;
    switch (_27)
      | False -> goto BB10
      | True -> goto BB11
      end
  }
  BB14 {
    _33 <- ([#"../red_black_tree.rs" 729 35 729 67] Unwrap2.unwrap _34);
    goto BB15
  }
  BB15 {
    _32 <- RedBlackTree_Node_Type.node_left _33;
    assume { Resolve6.resolve _33 };
    _31 <- ([#"../red_black_tree.rs" 729 35 729 81] IsRed0.is_red _32);
    goto BB16
  }
  BB16 {
    _30 <- not _31;
    _26 <- _30;
    _30 <- any bool;
    goto BB12
  }
  BB17 {
    _38 <- borrow_mut ( * node_11);
    node_11 <- { node_11 with current = ( ^ _38) };
    _37 <- ([#"../red_black_tree.rs" 730 19 730 39] MoveRedLeft0.move_red_left _38);
    goto BB18
  }
  BB18 {
    assume { Resolve1.resolve node_11 };
    _36 <- borrow_mut ( * _37);
    _37 <- { _37 with current = ( ^ _36) };
    assume { Resolve1.resolve _37 };
    assume { Resolve1.resolve node_11 };
    node_11 <- _36;
    _36 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    _25 <- ();
    goto BB20
  }
  BB19 {
    _25 <- ();
    goto BB20
  }
  BB20 {
    _40 <- borrow_mut (RedBlackTree_Node_Type.node_left ( * node_11));
    node_11 <- { node_11 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_11 in RedBlackTree_Node_Type.C_Node ( ^ _40) b c d e) };
    r_39 <- ([#"../red_black_tree.rs" 732 16 732 42] delete_min_rec _40);
    goto BB21
  }
  BB21 {
    _42 <- borrow_mut ( * node_11);
    node_11 <- { node_11 with current = ( ^ _42) };
    _41 <- ([#"../red_black_tree.rs" 733 8 733 22] Balance0.balance _42);
    goto BB22
  }
  BB22 {
    assume { Resolve1.resolve node_11 };
    assume { Resolve7.resolve _0 };
    _0 <- r_39;
    r_39 <- any (k, v);
    goto BB23
  }
  BB23 {
    goto BB25
  }
  BB24 {
    assume { Resolve8.resolve node_19 };
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
module RedBlackTree_Impl16_DeleteMin_Interface
  type k
  type v
  use prelude.Borrow
  use map.Const
  use map.Map
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone RedBlackTree_Impl3_ShallowModelTy_Type as ShallowModelTy0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel1 with
    type t = RedBlackTree_Node_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl12_Invariant_Stub as Invariant0 with
    type k = k,
    type v = v
  val delete_min [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 737 15 737 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 738 14 738 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 739 4 739 81] result = Core_Option_Option_Type.C_None -> ShallowModel0.shallow_model ( ^ self) = ShallowModel1.shallow_model self /\ ShallowModel1.shallow_model self = Const.const (Core_Option_Option_Type.C_None) }
    ensures { [#"../red_black_tree.rs" 740 4 743 59] forall v : v . forall k : k . result = Core_Option_Option_Type.C_Some (k, v) -> Map.get (ShallowModel1.shallow_model self) (DeepModel0.deep_model k) = Core_Option_Option_Type.C_Some v /\ (forall k2 : DeepModelTy0.deepModelTy . Map.get (ShallowModel1.shallow_model self) k2 = Core_Option_Option_Type.C_None \/ LeLog0.le_log (DeepModel0.deep_model k) k2) /\ ShallowModel0.shallow_model ( ^ self) = Map.set (ShallowModel1.shallow_model self) (DeepModel0.deep_model k) (Core_Option_Option_Type.C_None) }
    
end
module RedBlackTree_Impl16_DeleteMin
  type k
  type v
  use prelude.Borrow
  use map.Const
  use map.Map
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel0 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl8_Color as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone RedBlackTree_Impl3_ShallowModelTy_Type as ShallowModelTy0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel1 with
    type t = RedBlackTree_Node_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone RedBlackTree_Impl12_Invariant as Invariant0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color0.color = Color0.color
  use prelude.Ghost
  use mach.int.Int
  use prelude.IntSize
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Color1.color = Color0.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    axiom .
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT0.match_t
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve6 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve5 with
    type self = k
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  clone RedBlackTree_Impl7_MatchT as MatchT1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchN0.match_n = MatchN1.match_n
  use prelude.Ghost
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve4 with
    type t1 = k,
    type t2 = v,
    predicate Resolve0.resolve = Resolve5.resolve,
    predicate Resolve1.resolve = Resolve6.resolve
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = RedBlackTree_Node_Type.t_tree k v
  clone RedBlackTree_Impl16_DeleteMinRec_Interface as DeleteMinRec0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT1.match_t,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color1.color = Color0.color,
    predicate MatchN0.match_n = MatchN0.match_n
  clone RedBlackTree_Impl0_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color0.color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_tree k v))
  let rec cfg delete_min [@cfg:stackify] [#"../red_black_tree.rs" 744 4 744 50] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 737 15 737 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 738 14 738 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 739 4 739 81] result = Core_Option_Option_Type.C_None -> ShallowModel0.shallow_model ( ^ self) = ShallowModel1.shallow_model self /\ ShallowModel1.shallow_model self = Const.const (Core_Option_Option_Type.C_None) }
    ensures { [#"../red_black_tree.rs" 740 4 743 59] forall v : v . forall k : k . result = Core_Option_Option_Type.C_Some (k, v) -> Map.get (ShallowModel1.shallow_model self) (DeepModel0.deep_model k) = Core_Option_Option_Type.C_Some v /\ (forall k2 : DeepModelTy0.deepModelTy . Map.get (ShallowModel1.shallow_model self) k2 = Core_Option_Option_Type.C_None \/ LeLog0.le_log (DeepModel0.deep_model k) k2) /\ ShallowModel0.shallow_model ( ^ self) = Map.set (ShallowModel1.shallow_model self) (DeepModel0.deep_model k) (Core_Option_Option_Type.C_None) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (k, v);
  var self_1 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var old_self_6 : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_tree k v));
  var _8 : ();
  var _9 : ();
  var _10 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _11 : isize;
  var node_12 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _13 : bool;
  var _14 : bool;
  var _15 : RedBlackTree_Node_Type.t_tree k v;
  var _16 : RedBlackTree_Color_Type.t_color;
  var _17 : ();
  var _18 : ();
  var r_20 : (k, v);
  var _21 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _22 : ();
  var _23 : bool;
  var _24 : RedBlackTree_Node_Type.t_tree k v;
  var _25 : RedBlackTree_Color_Type.t_color;
  var _26 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _27 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _28 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _29 : Ghost.ghost_ty ();
  var _32 : ();
  var _33 : (k, v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _8 <- ();
    old_self_6 <- ([#"../red_black_tree.rs" 745 23 745 38] Ghost.new self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_6 };
    _10 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree ( ^ _10)) };
    switch ( * _10)
      | Core_Option_Option_Type.C_Some _ -> goto BB2
      | _ -> goto BB7
      end
  }
  BB2 {
    node_12 <- borrow_mut (Core_Option_Option_Type.some_0 ( * _10));
    _10 <- { _10 with current = (let Core_Option_Option_Type.C_Some a =  * _10 in Core_Option_Option_Type.C_Some ( ^ node_12)) };
    assume { Resolve1.resolve _10 };
    _15 <- RedBlackTree_Node_Type.node_left ( * node_12);
    _14 <- ([#"../red_black_tree.rs" 747 16 747 34] IsRed0.is_red _15);
    goto BB3
  }
  BB3 {
    _13 <- not _14;
    switch (_13)
      | False -> goto BB5
      | True -> goto BB4
      end
  }
  BB4 {
    _16 <- RedBlackTree_Color_Type.C_Red;
    node_12 <- { node_12 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_12 in RedBlackTree_Node_Type.C_Node a _16 c d e) };
    _16 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve2.resolve node_12 };
    _9 <- ();
    goto BB6
  }
  BB5 {
    assume { Resolve2.resolve node_12 };
    _9 <- ();
    goto BB6
  }
  BB6 {
    assert { [#"../red_black_tree.rs" 753 24 753 53] SameMappings0.same_mappings ( * Ghost.inner old_self_6) ( * self_1) };
    _18 <- ();
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    r_20 <- ([#"../red_black_tree.rs" 754 16 754 37] DeleteMinRec0.delete_min_rec _21);
    goto BB8
  }
  BB7 {
    assume { Resolve3.resolve self_1 };
    assume { Resolve1.resolve _10 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB18
  }
  BB8 {
    _24 <-  * self_1;
    _23 <- ([#"../red_black_tree.rs" 755 11 755 24] IsRed0.is_red _24);
    goto BB9
  }
  BB9 {
    switch (_23)
      | False -> goto BB13
      | True -> goto BB10
      end
  }
  BB10 {
    _25 <- RedBlackTree_Color_Type.C_Black;
    _28 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree ( ^ _28)) };
    _27 <- ([#"../red_black_tree.rs" 756 12 756 30] AsMut0.as_mut _28);
    goto BB11
  }
  BB11 {
    assume { Resolve3.resolve self_1 };
    _26 <- ([#"../red_black_tree.rs" 756 12 756 39] Unwrap0.unwrap _27);
    goto BB12
  }
  BB12 {
    _26 <- { _26 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * _26 in RedBlackTree_Node_Type.C_Node a _25 c d e) };
    _25 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve2.resolve _26 };
    _22 <- ();
    goto BB14
  }
  BB13 {
    assume { Resolve3.resolve self_1 };
    _22 <- ();
    goto BB14
  }
  BB14 {
    _32 <- ();
    _29 <- ([#"../red_black_tree.rs" 758 8 758 42] Ghost.new ());
    goto BB15
  }
  BB15 {
    assume { Resolve4.resolve _33 };
    _33 <- r_20;
    r_20 <- any (k, v);
    _0 <- Core_Option_Option_Type.C_Some _33;
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module CreusotContracts_Model_Impl0_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Model_Impl0_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = t
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel0 with
    type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Core_Option_Impl0_IsNone_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val is_none [@cfg:stackify] (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = (self = Core_Option_Option_Type.C_None) }
    
end
module Core_Option_Impl0_IsNone
  type t
  use prelude.Borrow
  use Core_Option_Option_Type as Core_Option_Option_Type
  val is_none [@cfg:stackify] (self : Core_Option_Option_Type.t_option t) : bool
    ensures { result = (self = Core_Option_Option_Type.C_None) }
    
end
module RedBlackTree_Impl16_DeleteRec_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN_Stub as MatchN0 with
    type k = k,
    type v = v
  use Core_Option_Option_Type as Core_Option_Option_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Stub as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Stub as ColorInvariant0 with
    type k = k,
    type v = v
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel1 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping_Stub as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl10_Height_Stub as Height0 with
    type k = k,
    type v = v,
    axiom .
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchT_Stub as MatchT1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl
  clone RedBlackTree_Impl6_MatchT_Stub as MatchT0 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN0.match_n,
    axiom .
  clone RedBlackTree_Impl12_InternalInvariant_Stub as InternalInvariant0 with
    type k = k,
    type v = v
  val delete_rec [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 762 15 762 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 763 15 764 62] MatchT0.match_t (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ MatchT1.match_t (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 765 14 765 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 766 14 766 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 767 4 767 89] forall v : v . result = Core_Option_Option_Type.C_None -> not HasMapping0.has_mapping ( * self) (DeepModel0.deep_model key) v }
    ensures { [#"../red_black_tree.rs" 768 4 769 92] forall v : v . forall k : k . result = Core_Option_Option_Type.C_Some (k, v) -> DeepModel0.deep_model key = DeepModel1.deep_model k /\ HasMapping0.has_mapping ( * self) (DeepModel1.deep_model k) v }
    ensures { [#"../red_black_tree.rs" 770 4 770 129] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (DeepModel0.deep_model key <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 771 14 771 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 772 4 772 69] Color1.color ( * self) = RedBlackTree_Color_Type.C_Black -> Color1.color ( ^ self) = RedBlackTree_Color_Type.C_Black }
    
end
module RedBlackTree_Impl16_DeleteRec
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel1 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    axiom .
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl7_MatchT as MatchT1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  use mach.int.Int
  use prelude.Int8
  use prelude.Ghost
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant1 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN3 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpn_Type.t_cpn (RedBlackTree_Cpl_Type.t_cpl) (RedBlackTree_Cpl_Type.t_cpl),
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT1.match_t
  clone CreusotContracts_Std1_Option_Impl0_IsDefault as IsDefault0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with
    type k = k,
    type v = v,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl11_Height as Height1 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height,
    axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN2 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpn_Type.t_cpn (RedBlackTree_Cpl_Type.t_cpl) (RedBlackTree_Cpl_Type.t_cpl),
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT1.match_t,
    predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant1 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve12 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl15_Balance_Interface as Balance0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Color1.color = Color1.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height1.height,
    predicate MatchN0.match_n = MatchN2.match_n,
    predicate MatchN1.match_n = MatchN0.match_n,
    predicate MatchN2.match_n = MatchN1.match_n,
    function Height1.height = Height0.height
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve8 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve7 with
    type self = k
  clone CreusotContracts_Resolve_Impl0_Resolve as Resolve11 with
    type t1 = k,
    type t2 = v,
    predicate Resolve0.resolve = Resolve7.resolve,
    predicate Resolve1.resolve = Resolve8.resolve
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve10 with
    type t = v
  clone Core_Mem_Swap_Interface as Swap1 with
    type t = v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve9 with
    type t = k
  clone Core_Mem_Swap_Interface as Swap0 with
    type t = k
  clone RedBlackTree_Impl0_HasMappingInj as HasMappingInj0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function HasMappingModel0.has_mapping_model = HasMappingModel0.has_mapping_model,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    axiom .
  clone RedBlackTree_Impl16_DeleteMinRec_Interface as DeleteMinRec0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT1.match_t,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color1.color = Color1.color,
    predicate MatchN0.match_n = MatchN0.match_n
  clone RedBlackTree_Impl15_MoveRedRight_Interface as MoveRedRight0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    predicate MatchN0.match_n = MatchN3.match_n,
    function Height0.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate MatchN1.match_n = MatchN1.match_n,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    function Color1.color = Color1.color,
    function Height1.height = Height0.height,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve6 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone Core_Mem_Take_Interface as Take0 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v),
    predicate IsDefault0.is_default = IsDefault0.is_default
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    function Color0.color = Color1.color,
    predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
    function Height0.height = Height1.height,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function Height1.height = Height0.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve5 with
    type self = Core_Option_Option_Type.t_option (k, v)
  clone RedBlackTree_Impl15_MoveRedLeft_Interface as MoveRedLeft0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
    predicate MatchN0.match_n = MatchN2.match_n,
    function Height0.height = Height1.height,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate LeLog0.le_log = LeLog0.le_log,
    predicate MatchN1.match_n = MatchN1.match_n,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
    function Color1.color = Color1.color,
    function Height1.height = Height0.height,
    predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve4 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve3 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Option_Impl0_IsNone_Interface as IsNone0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Node_Type.t_tree k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color1.color
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with
    type self = k,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = k
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Alloc_Boxed_Impl54_AsMut_Interface as AsMut1 with
    type t = RedBlackTree_Node_Type.t_node k v,
    type a = Alloc_Alloc_Global_Type.t_global
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  let rec cfg delete_rec [@cfg:stackify] [#"../red_black_tree.rs" 773 4 773 55] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 762 15 762 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 763 15 764 62] MatchT0.match_t (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) ( * self) \/ MatchT1.match_t (RedBlackTree_Cpn_Type.C_CPN (RedBlackTree_Color_Type.C_Black) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Red)) (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black))) ( * self)}
    ensures { [#"../red_black_tree.rs" 765 14 765 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 766 14 766 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 767 4 767 89] forall v : v . result = Core_Option_Option_Type.C_None -> not HasMapping0.has_mapping ( * self) (DeepModel0.deep_model key) v }
    ensures { [#"../red_black_tree.rs" 768 4 769 92] forall v : v . forall k : k . result = Core_Option_Option_Type.C_Some (k, v) -> DeepModel0.deep_model key = DeepModel1.deep_model k /\ HasMapping0.has_mapping ( * self) (DeepModel1.deep_model k) v }
    ensures { [#"../red_black_tree.rs" 770 4 770 129] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( ^ self) k v = (DeepModel0.deep_model key <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 771 14 771 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 772 4 772 69] Color1.color ( * self) = RedBlackTree_Color_Type.C_Black -> Color1.color ( ^ self) = RedBlackTree_Color_Type.C_Black }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (k, v);
  var self_1 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var key_2 : k;
  var r_12 : Core_Option_Option_Type.t_option (k, v);
  var node_13 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _14 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _15 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _16 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _17 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _18 : ();
  var _19 : Core_Cmp_Ordering_Type.t_ordering;
  var _20 : k;
  var _21 : k;
  var _22 : k;
  var _23 : int8;
  var _24 : ();
  var _25 : bool;
  var _26 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _27 : ();
  var _28 : ();
  var _29 : bool;
  var _30 : bool;
  var _31 : bool;
  var _32 : RedBlackTree_Node_Type.t_tree k v;
  var _33 : bool;
  var _34 : bool;
  var _35 : RedBlackTree_Node_Type.t_tree k v;
  var _36 : RedBlackTree_Node_Type.t_node k v;
  var _37 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _38 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _39 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _40 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _41 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _42 : Core_Option_Option_Type.t_option (k, v);
  var _43 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _44 : k;
  var ord_45 : Core_Cmp_Ordering_Type.t_ordering;
  var _46 : bool;
  var _47 : RedBlackTree_Node_Type.t_tree k v;
  var _48 : ();
  var _49 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _50 : Core_Option_Option_Type.t_option (k, v);
  var _51 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _52 : k;
  var _53 : ();
  var _54 : bool;
  var _55 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _56 : ();
  var _57 : ();
  var _58 : int8;
  var _59 : ();
  var node_60 : RedBlackTree_Node_Type.t_node k v;
  var _61 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _62 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _63 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _64 : (k, v);
  var _65 : k;
  var _66 : v;
  var _67 : ();
  var _68 : bool;
  var _69 : bool;
  var _70 : RedBlackTree_Node_Type.t_tree k v;
  var _71 : RedBlackTree_Node_Type.t_node k v;
  var _72 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _73 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _74 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _75 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _76 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _77 : int8;
  var kv_78 : (k, v);
  var _79 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _80 : Ghost.ghost_ty ();
  var _83 : ();
  var _84 : ();
  var _85 : borrowed k;
  var _86 : borrowed k;
  var _87 : borrowed k;
  var _88 : borrowed k;
  var _89 : ();
  var _90 : borrowed v;
  var _91 : borrowed v;
  var _92 : borrowed v;
  var _93 : borrowed v;
  var _94 : Core_Option_Option_Type.t_option (k, v);
  var _95 : (k, v);
  var _96 : Core_Option_Option_Type.t_option (k, v);
  var _97 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _98 : k;
  var _99 : ();
  var _100 : borrowed (RedBlackTree_Node_Type.t_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _17 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree ( ^ _17)) };
    _16 <- ([#"../red_black_tree.rs" 775 23 775 41] AsMut0.as_mut _17);
    goto BB1
  }
  BB1 {
    _15 <- ([#"../red_black_tree.rs" 775 23 775 50] Unwrap0.unwrap _16);
    goto BB2
  }
  BB2 {
    _14 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ _14) };
    node_13 <- ([#"../red_black_tree.rs" 775 23 775 59] AsMut1.as_mut _14);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _15 };
    _20 <- key_2;
    _22 <- RedBlackTree_Node_Type.node_key ( * node_13);
    _21 <- _22;
    assume { Resolve1.resolve _22 };
    _19 <- ([#"../red_black_tree.rs" 776 14 776 32] Cmp0.cmp _20 _21);
    goto BB4
  }
  BB4 {
    switch (_19)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    ord_45 <- _19;
    _47 <- RedBlackTree_Node_Type.node_left ( * node_13);
    _46 <- ([#"../red_black_tree.rs" 787 19 787 37] IsRed0.is_red _47);
    goto BB24
  }
  BB6 {
    assume { Resolve2.resolve self_1 };
    _26 <- RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * node_13));
    _25 <- ([#"../red_black_tree.rs" 778 19 778 43] IsNone0.is_none _26);
    goto BB7
  }
  BB7 {
    switch (_25)
      | False -> goto BB9
      | True -> goto BB8
      end
  }
  BB8 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_13 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB67
  }
  BB9 {
    _24 <- ();
    _32 <- RedBlackTree_Node_Type.node_left ( * node_13);
    _31 <- ([#"../red_black_tree.rs" 781 20 781 38] IsRed0.is_red _32);
    goto BB13
  }
  BB10 {
    _29 <- ([#"../red_black_tree.rs" 781 19 781 89] false);
    goto BB12
  }
  BB11 {
    _38 <- RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_left ( * node_13));
    _37 <- ([#"../red_black_tree.rs" 781 43 781 66] AsRef0.as_ref _38);
    goto BB14
  }
  BB12 {
    switch (_29)
      | False -> goto BB19
      | True -> goto BB17
      end
  }
  BB13 {
    _30 <- not _31;
    switch (_30)
      | False -> goto BB10
      | True -> goto BB11
      end
  }
  BB14 {
    _36 <- ([#"../red_black_tree.rs" 781 43 781 75] Unwrap1.unwrap _37);
    goto BB15
  }
  BB15 {
    _35 <- RedBlackTree_Node_Type.node_left _36;
    assume { Resolve4.resolve _36 };
    _34 <- ([#"../red_black_tree.rs" 781 43 781 89] IsRed0.is_red _35);
    goto BB16
  }
  BB16 {
    _33 <- not _34;
    _29 <- _33;
    _33 <- any bool;
    goto BB12
  }
  BB17 {
    _41 <- borrow_mut ( * node_13);
    node_13 <- { node_13 with current = ( ^ _41) };
    _40 <- ([#"../red_black_tree.rs" 782 27 782 47] MoveRedLeft0.move_red_left _41);
    goto BB18
  }
  BB18 {
    assume { Resolve3.resolve node_13 };
    _39 <- borrow_mut ( * _40);
    _40 <- { _40 with current = ( ^ _39) };
    assume { Resolve3.resolve _40 };
    assume { Resolve3.resolve node_13 };
    node_13 <- _39;
    _39 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    _28 <- ();
    goto BB20
  }
  BB19 {
    _28 <- ();
    goto BB20
  }
  BB20 {
    _43 <- borrow_mut (RedBlackTree_Node_Type.node_left ( * node_13));
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_13 in RedBlackTree_Node_Type.C_Node ( ^ _43) b c d e) };
    _44 <- key_2;
    assume { Resolve1.resolve key_2 };
    _42 <- ([#"../red_black_tree.rs" 784 20 784 45] delete_rec _43 _44);
    goto BB21
  }
  BB21 {
    assume { Resolve5.resolve r_12 };
    r_12 <- _42;
    goto BB22
  }
  BB22 {
    _18 <- ();
    goto BB23
  }
  BB23 {
    goto BB62
  }
  BB24 {
    switch (_46)
      | False -> goto BB30
      | True -> goto BB25
      end
  }
  BB25 {
    assume { Resolve2.resolve self_1 };
    _49 <- borrow_mut ( * node_13);
    node_13 <- { node_13 with current = ( ^ _49) };
    _48 <- ([#"../red_black_tree.rs" 788 20 788 39] RotateRight0.rotate_right _49);
    goto BB26
  }
  BB26 {
    _51 <- borrow_mut (RedBlackTree_Node_Type.node_right ( * node_13));
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_13 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _51)) };
    _52 <- key_2;
    assume { Resolve1.resolve key_2 };
    _50 <- ([#"../red_black_tree.rs" 789 24 789 50] delete_rec _51 _52);
    goto BB27
  }
  BB27 {
    assume { Resolve5.resolve r_12 };
    r_12 <- _50;
    goto BB28
  }
  BB28 {
    _18 <- ();
    goto BB29
  }
  BB29 {
    goto BB61
  }
  BB30 {
    _55 <- RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * node_13));
    _54 <- ([#"../red_black_tree.rs" 791 23 791 48] IsNone0.is_none _55);
    goto BB31
  }
  BB31 {
    switch (_54)
      | False -> goto BB40
      | True -> goto BB32
      end
  }
  BB32 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_13 };
    switch (ord_45)
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB33
      | _ -> goto BB34
      end
  }
  BB33 {
    assume { Resolve2.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB66
  }
  BB34 {
    _57 <- ();
    _63 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree ( ^ _63)) };
    assume { Resolve2.resolve self_1 };
    _62 <- borrow_mut ( * _63);
    _63 <- { _63 with current = ( ^ _62) };
    _61 <- ([#"../red_black_tree.rs" 795 35 795 65] Take0.take _62);
    goto BB35
  }
  BB35 {
    assume { Resolve6.resolve _63 };
    node_60 <- ([#"../red_black_tree.rs" 795 35 795 74] Unwrap2.unwrap _61);
    goto BB36
  }
  BB36 {
    assume { Resolve7.resolve _65 };
    _65 <- RedBlackTree_Node_Type.node_key node_60;
    node_60 <- (let RedBlackTree_Node_Type.C_Node a b c d e = node_60 in RedBlackTree_Node_Type.C_Node a b (any k) d e);
    assume { Resolve8.resolve _66 };
    _66 <- RedBlackTree_Node_Type.node_val node_60;
    node_60 <- (let RedBlackTree_Node_Type.C_Node a b c d e = node_60 in RedBlackTree_Node_Type.C_Node a b c (any v) e);
    _64 <- (_65, _66);
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    _0 <- Core_Option_Option_Type.C_Some _64;
    goto BB39
  }
  BB39 {
    goto BB65
  }
  BB40 {
    assume { Resolve2.resolve self_1 };
    _53 <- ();
    _73 <- RedBlackTree_Node_Type.tree_node (RedBlackTree_Node_Type.node_right ( * node_13));
    _72 <- ([#"../red_black_tree.rs" 798 24 798 48] AsRef0.as_ref _73);
    goto BB41
  }
  BB41 {
    _71 <- ([#"../red_black_tree.rs" 798 24 798 57] Unwrap1.unwrap _72);
    goto BB42
  }
  BB42 {
    _70 <- RedBlackTree_Node_Type.node_left _71;
    assume { Resolve4.resolve _71 };
    _69 <- ([#"../red_black_tree.rs" 798 24 798 71] IsRed0.is_red _70);
    goto BB43
  }
  BB43 {
    _68 <- not _69;
    switch (_68)
      | False -> goto BB46
      | True -> goto BB44
      end
  }
  BB44 {
    _76 <- borrow_mut ( * node_13);
    node_13 <- { node_13 with current = ( ^ _76) };
    _75 <- ([#"../red_black_tree.rs" 799 31 799 52] MoveRedRight0.move_red_right _76);
    goto BB45
  }
  BB45 {
    assume { Resolve3.resolve node_13 };
    _74 <- borrow_mut ( * _75);
    _75 <- { _75 with current = ( ^ _74) };
    assume { Resolve3.resolve _75 };
    assume { Resolve3.resolve node_13 };
    node_13 <- _74;
    _74 <- any borrowed (RedBlackTree_Node_Type.t_node k v);
    _67 <- ();
    goto BB47
  }
  BB46 {
    _67 <- ();
    goto BB47
  }
  BB47 {
    switch (ord_45)
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB48
      | _ -> goto BB57
      end
  }
  BB48 {
    assume { Resolve1.resolve key_2 };
    _79 <- borrow_mut (RedBlackTree_Node_Type.node_right ( * node_13));
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_13 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _79)) };
    kv_78 <- ([#"../red_black_tree.rs" 802 37 802 64] DeleteMinRec0.delete_min_rec _79);
    goto BB49
  }
  BB49 {
    _83 <- ();
    _80 <- ([#"../red_black_tree.rs" 803 24 803 56] Ghost.new ());
    goto BB50
  }
  BB50 {
    _86 <- borrow_mut (RedBlackTree_Node_Type.node_key ( * node_13));
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_13 in RedBlackTree_Node_Type.C_Node a b ( ^ _86) d e) };
    _85 <- borrow_mut ( * _86);
    _86 <- { _86 with current = ( ^ _85) };
    _88 <- borrow_mut (let (a, _) = kv_78 in a);
    kv_78 <- (let (a, b) = kv_78 in ( ^ _88, b));
    _87 <- borrow_mut ( * _88);
    _88 <- { _88 with current = ( ^ _87) };
    _84 <- ([#"../red_black_tree.rs" 804 24 804 64] Swap0.swap _85 _87);
    goto BB51
  }
  BB51 {
    assume { Resolve9.resolve _86 };
    assume { Resolve9.resolve _88 };
    _91 <- borrow_mut (RedBlackTree_Node_Type.node_val ( * node_13));
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_13 in RedBlackTree_Node_Type.C_Node a b c ( ^ _91) e) };
    _90 <- borrow_mut ( * _91);
    _91 <- { _91 with current = ( ^ _90) };
    _93 <- borrow_mut (let (_, a) = kv_78 in a);
    kv_78 <- (let (a, b) = kv_78 in (a,  ^ _93));
    _92 <- borrow_mut ( * _93);
    _93 <- { _93 with current = ( ^ _92) };
    _89 <- ([#"../red_black_tree.rs" 805 24 805 64] Swap1.swap _90 _92);
    goto BB52
  }
  BB52 {
    assume { Resolve10.resolve _91 };
    assume { Resolve10.resolve _93 };
    assume { Resolve11.resolve _95 };
    _95 <- kv_78;
    kv_78 <- any (k, v);
    _94 <- Core_Option_Option_Type.C_Some _95;
    goto BB53
  }
  BB53 {
    assume { Resolve5.resolve r_12 };
    r_12 <- _94;
    goto BB54
  }
  BB54 {
    _18 <- ();
    goto BB55
  }
  BB55 {
    goto BB56
  }
  BB56 {
    goto BB61
  }
  BB57 {
    _97 <- borrow_mut (RedBlackTree_Node_Type.node_right ( * node_13));
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_13 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _97)) };
    _98 <- key_2;
    assume { Resolve1.resolve key_2 };
    _96 <- ([#"../red_black_tree.rs" 808 28 808 54] delete_rec _97 _98);
    goto BB58
  }
  BB58 {
    assume { Resolve5.resolve r_12 };
    r_12 <- _96;
    goto BB59
  }
  BB59 {
    _18 <- ();
    goto BB60
  }
  BB60 {
    goto BB61
  }
  BB61 {
    goto BB62
  }
  BB62 {
    _100 <- borrow_mut ( * node_13);
    node_13 <- { node_13 with current = ( ^ _100) };
    _99 <- ([#"../red_black_tree.rs" 813 8 813 22] Balance0.balance _100);
    goto BB63
  }
  BB63 {
    assume { Resolve3.resolve node_13 };
    assume { Resolve5.resolve _0 };
    _0 <- r_12;
    r_12 <- any Core_Option_Option_Type.t_option (k, v);
    goto BB64
  }
  BB64 {
    goto BB69
  }
  BB65 {
    assume { Resolve12.resolve node_60 };
    goto BB66
  }
  BB66 {
    goto BB67
  }
  BB67 {
    goto BB68
  }
  BB68 {
    goto BB69
  }
  BB69 {
    return _0
  }
  
end
module CreusotContracts_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with
    type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model (Ghost.inner self)
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Model_Impl3_ShallowModelTy_Type
  type t
  clone CreusotContracts_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with
    type self = t
  type shallowModelTy  =
    ShallowModelTy0.shallowModelTy
end
module RedBlackTree_Impl16_Delete_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl3_ShallowModelTy_Type as ShallowModelTy0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_DeepModel_DeepModel_Stub as DeepModel1 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = RedBlackTree_Node_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone RedBlackTree_Impl12_Invariant_Stub as Invariant0 with
    type k = k,
    type v = v
  val delete [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 817 15 817 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 818 14 818 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 819 14 819 73] (result = Core_Option_Option_Type.C_None) = (Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None) }
    ensures { [#"../red_black_tree.rs" 820 4 821 56] forall v : v . forall k : k . result = Core_Option_Option_Type.C_Some (k, v) /\ DeepModel1.deep_model k = DeepModel0.deep_model key -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some v }
    ensures { [#"../red_black_tree.rs" 822 14 822 59] ShallowModel1.shallow_model ( ^ self) = Map.set (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) (Core_Option_Option_Type.C_None) }
    
end
module RedBlackTree_Impl16_Delete
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel1 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl8_Color as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl3_ShallowModelTy_Type as ShallowModelTy0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = RedBlackTree_Node_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone RedBlackTree_Impl12_Invariant as Invariant0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color0.color = Color0.color
  use prelude.Ghost
  use mach.int.Int
  use prelude.IntSize
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Color1.color = Color0.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    axiom .
  use RedBlackTree_Cpn_Type as RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT0.match_t
  clone CreusotContracts_Model_Impl3_ShallowModelTy_Type as ShallowModelTy1 with
    type t = RedBlackTree_Node_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel3 with
    type t = borrowed (RedBlackTree_Node_Type.t_tree k v),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone RedBlackTree_Impl7_MatchT as MatchT1 with
    type k = k,
    type v = v,
    type l = RedBlackTree_Cpl_Type.t_cpl,
    type r = RedBlackTree_Cpl_Type.t_cpl,
    predicate MatchN0.match_n = MatchN1.match_n
  use prelude.Ghost
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve5 with
    type self = Core_Option_Option_Type.t_option (k, v)
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with
    type t = borrowed (RedBlackTree_Node_Type.t_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone CreusotContracts_Ghost_Impl1_ShallowModel as ShallowModel2 with
    type t = borrowed (RedBlackTree_Node_Type.t_tree k v),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = RedBlackTree_Node_Type.t_tree k v
  clone RedBlackTree_Impl16_DeleteRec_Interface as DeleteRec0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate MatchT0.match_t = MatchT0.match_t,
    predicate MatchT1.match_t = MatchT1.match_t,
    function Height0.height = Height0.height,
    function DeepModel0.deep_model = DeepModel0.deep_model,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel1.deep_model = DeepModel1.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color1.color = Color0.color,
    predicate MatchN0.match_n = MatchN0.match_n
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve3 with
    type self = k
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with
    type k = k,
    type v = v,
    function Color0.color = Color0.color
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_tree k v))
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  let rec cfg delete [@cfg:stackify] [#"../red_black_tree.rs" 823 4 823 55] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (k, v)
    requires {[#"../red_black_tree.rs" 817 15 817 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 818 14 818 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 819 14 819 73] (result = Core_Option_Option_Type.C_None) = (Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None) }
    ensures { [#"../red_black_tree.rs" 820 4 821 56] forall v : v . forall k : k . result = Core_Option_Option_Type.C_Some (k, v) /\ DeepModel1.deep_model k = DeepModel0.deep_model key -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some v }
    ensures { [#"../red_black_tree.rs" 822 14 822 59] ShallowModel1.shallow_model ( ^ self) = Map.set (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) (Core_Option_Option_Type.C_None) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (k, v);
  var self_1 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var key_2 : k;
  var _8 : Ghost.ghost_ty ();
  var _11 : ();
  var old_self_12 : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_tree k v));
  var _14 : ();
  var _15 : ();
  var _16 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _17 : isize;
  var node_18 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _19 : bool;
  var _20 : bool;
  var _21 : RedBlackTree_Node_Type.t_tree k v;
  var _22 : RedBlackTree_Color_Type.t_color;
  var _23 : ();
  var r_24 : Core_Option_Option_Type.t_option (k, v);
  var _25 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _26 : k;
  var _27 : ();
  var _29 : ();
  var _30 : bool;
  var _31 : RedBlackTree_Node_Type.t_tree k v;
  var _32 : RedBlackTree_Color_Type.t_color;
  var _33 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _34 : Core_Option_Option_Type.t_option (borrowed (RedBlackTree_Node_Type.t_node k v));
  var _35 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _36 : Ghost.ghost_ty ();
  var _39 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _11 <- ();
    _8 <- ([#"../red_black_tree.rs" 824 8 824 42] Ghost.new ());
    goto BB1
  }
  BB1 {
    _14 <- ();
    old_self_12 <- ([#"../red_black_tree.rs" 826 23 826 38] Ghost.new self_1);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve old_self_12 };
    _16 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree ( ^ _16)) };
    switch ( * _16)
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      | _ -> goto BB8
      end
  }
  BB3 {
    node_18 <- borrow_mut (Core_Option_Option_Type.some_0 ( * _16));
    _16 <- { _16 with current = (let Core_Option_Option_Type.C_Some a =  * _16 in Core_Option_Option_Type.C_Some ( ^ node_18)) };
    assume { Resolve1.resolve _16 };
    _21 <- RedBlackTree_Node_Type.node_left ( * node_18);
    _20 <- ([#"../red_black_tree.rs" 828 16 828 34] IsRed0.is_red _21);
    goto BB4
  }
  BB4 {
    _19 <- not _20;
    switch (_19)
      | False -> goto BB6
      | True -> goto BB5
      end
  }
  BB5 {
    _22 <- RedBlackTree_Color_Type.C_Red;
    node_18 <- { node_18 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_18 in RedBlackTree_Node_Type.C_Node a _22 c d e) };
    _22 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve2.resolve node_18 };
    _15 <- ();
    goto BB7
  }
  BB6 {
    assume { Resolve2.resolve node_18 };
    _15 <- ();
    goto BB7
  }
  BB7 {
    _25 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _25) };
    _26 <- key_2;
    assume { Resolve3.resolve key_2 };
    r_24 <- ([#"../red_black_tree.rs" 834 16 834 36] DeleteRec0.delete_rec _25 _26);
    goto BB9
  }
  BB8 {
    assume { Resolve4.resolve self_1 };
    assume { Resolve3.resolve key_2 };
    assume { Resolve1.resolve _16 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB18
  }
  BB9 {
    assert { [#"../red_black_tree.rs" 835 24 835 72] ShallowModel0.shallow_model self_1 = Map.set (ShallowModel2.shallow_model old_self_12) (DeepModel0.deep_model key_2) (Core_Option_Option_Type.C_None) };
    _27 <- ();
    _31 <-  * self_1;
    _30 <- ([#"../red_black_tree.rs" 836 11 836 24] IsRed0.is_red _31);
    goto BB10
  }
  BB10 {
    switch (_30)
      | False -> goto BB14
      | True -> goto BB11
      end
  }
  BB11 {
    _32 <- RedBlackTree_Color_Type.C_Black;
    _35 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.C_Tree a =  * self_1 in RedBlackTree_Node_Type.C_Tree ( ^ _35)) };
    _34 <- ([#"../red_black_tree.rs" 837 12 837 30] AsMut0.as_mut _35);
    goto BB12
  }
  BB12 {
    assume { Resolve4.resolve self_1 };
    _33 <- ([#"../red_black_tree.rs" 837 12 837 39] Unwrap0.unwrap _34);
    goto BB13
  }
  BB13 {
    _33 <- { _33 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * _33 in RedBlackTree_Node_Type.C_Node a _32 c d e) };
    _32 <- any RedBlackTree_Color_Type.t_color;
    assume { Resolve2.resolve _33 };
    _29 <- ();
    goto BB15
  }
  BB14 {
    assume { Resolve4.resolve self_1 };
    _29 <- ();
    goto BB15
  }
  BB15 {
    _39 <- ();
    _36 <- ([#"../red_black_tree.rs" 839 8 839 55] Ghost.new (match (r_24) with
      | Core_Option_Option_Type.C_None -> ()
      | Core_Option_Option_Type.C_Some _ -> ()
      end));
    goto BB16
  }
  BB16 {
    assume { Resolve5.resolve _0 };
    _0 <- r_24;
    r_24 <- any Core_Option_Option_Type.t_option (k, v);
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module RedBlackTree_Impl16_Get_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl3_ShallowModelTy_Type as ShallowModelTy0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = RedBlackTree_Node_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone RedBlackTree_Impl12_Invariant_Stub as Invariant0 with
    type k = k,
    type v = v
  val get [@cfg:stackify] (self : RedBlackTree_Node_Type.t_tree k v) (key : k) : Core_Option_Option_Type.t_option v
    requires {[#"../red_black_tree.rs" 843 15 843 34] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 844 4 844 93] forall v : v . result = Core_Option_Option_Type.C_Some v -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some v }
    ensures { [#"../red_black_tree.rs" 845 4 845 72] result = Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None }
    
end
module RedBlackTree_Impl16_Get
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel1 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl8_Color as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl3_ShallowModelTy_Type as ShallowModelTy0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Model_Impl1_ShallowModel as ShallowModel0 with
    type t = RedBlackTree_Node_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone RedBlackTree_Impl12_Invariant as Invariant0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color0.color = Color0.color
  use prelude.Ghost
  use mach.int.Int
  use prelude.IntSize
  use prelude.Int8
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve4 with
    type self = v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve3 with
    type self = RedBlackTree_Node_Type.t_node k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with
    type self = k,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve2 with
    type self = k
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve1 with
    type self = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve0 with
    type self = RedBlackTree_Node_Type.t_tree k v
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  let rec cfg get [@cfg:stackify] [#"../red_black_tree.rs" 846 4 846 44] (self : RedBlackTree_Node_Type.t_tree k v) (key : k) : Core_Option_Option_Type.t_option v
    requires {[#"../red_black_tree.rs" 843 15 843 34] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 844 4 844 93] forall v : v . result = Core_Option_Option_Type.C_Some v -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some v }
    ensures { [#"../red_black_tree.rs" 845 4 845 72] result = Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option v;
  var self_1 : RedBlackTree_Node_Type.t_tree k v;
  var key_2 : k;
  var _3 : ();
  var _7 : Ghost.ghost_ty ();
  var _10 : ();
  var tree_11 : RedBlackTree_Node_Type.t_tree k v;
  var _12 : ();
  var _15 : ();
  var _16 : Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v);
  var _17 : isize;
  var node_18 : RedBlackTree_Node_Type.t_node k v;
  var _19 : Core_Cmp_Ordering_Type.t_ordering;
  var _20 : k;
  var _21 : k;
  var _22 : k;
  var _23 : int8;
  var _24 : RedBlackTree_Node_Type.t_tree k v;
  var _25 : RedBlackTree_Node_Type.t_tree k v;
  var _26 : ();
  var _27 : v;
  var _28 : v;
  var _29 : RedBlackTree_Node_Type.t_tree k v;
  var _30 : RedBlackTree_Node_Type.t_tree k v;
  var _31 : ();
  var _32 : ();
  var _33 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _10 <- ();
    _7 <- ([#"../red_black_tree.rs" 847 8 847 42] Ghost.new ());
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve tree_11 };
    tree_11 <- self_1;
    assume { Resolve0.resolve self_1 };
    goto BB2
  }
  BB2 {
    invariant bst_inv { [#"../red_black_tree.rs" 850 29 850 52] BstInvariant0.bst_invariant tree_11 };
    invariant has_mapping { [#"../red_black_tree.rs" 850 8 850 54] forall v : v . HasMapping0.has_mapping self_1 (DeepModel0.deep_model key_2) v = HasMapping0.has_mapping tree_11 (DeepModel0.deep_model key_2) v };
    _16 <- RedBlackTree_Node_Type.tree_node tree_11;
    assume { Resolve0.resolve tree_11 };
    switch (_16)
      | Core_Option_Option_Type.C_Some _ -> goto BB3
      | _ -> goto BB10
      end
  }
  BB3 {
    node_18 <- Core_Option_Option_Type.some_0 _16;
    assume { Resolve1.resolve _16 };
    _20 <- key_2;
    _22 <- RedBlackTree_Node_Type.node_key node_18;
    _21 <- _22;
    assume { Resolve2.resolve _22 };
    _19 <- ([#"../red_black_tree.rs" 853 18 853 36] Cmp0.cmp _20 _21);
    goto BB4
  }
  BB4 {
    switch (_19)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB7
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB8
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB5
      end
  }
  BB5 {
    _30 <- RedBlackTree_Node_Type.node_right node_18;
    assume { Resolve3.resolve node_18 };
    _29 <- _30;
    assume { Resolve0.resolve _30 };
    assume { Resolve0.resolve tree_11 };
    tree_11 <- _29;
    _29 <- any RedBlackTree_Node_Type.t_tree k v;
    _15 <- ();
    goto BB9
  }
  BB6 {
    assume { Resolve2.resolve key_2 };
    assume { Resolve3.resolve node_18 };
    absurd
  }
  BB7 {
    _25 <- RedBlackTree_Node_Type.node_left node_18;
    assume { Resolve3.resolve node_18 };
    _24 <- _25;
    assume { Resolve0.resolve _25 };
    assume { Resolve0.resolve tree_11 };
    tree_11 <- _24;
    _24 <- any RedBlackTree_Node_Type.t_tree k v;
    _15 <- ();
    goto BB9
  }
  BB8 {
    assume { Resolve2.resolve key_2 };
    _28 <- RedBlackTree_Node_Type.node_val node_18;
    assume { Resolve3.resolve node_18 };
    _27 <- _28;
    assume { Resolve4.resolve _28 };
    _0 <- Core_Option_Option_Type.C_Some _27;
    goto BB11
  }
  BB9 {
    goto BB2
  }
  BB10 {
    assume { Resolve2.resolve key_2 };
    assume { Resolve1.resolve _16 };
    _12 <- ();
    _0 <- Core_Option_Option_Type.C_None;
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module RedBlackTree_Impl16_GetMut_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl3_ShallowModelTy_Type as ShallowModelTy0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  clone RedBlackTree_Impl3_ShallowModel_Stub as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl0_DeepModel_Stub as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Model_Impl3_ShallowModel_Stub as ShallowModel0 with
    type t = RedBlackTree_Node_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone RedBlackTree_Impl12_Invariant_Stub as Invariant0 with
    type k = k,
    type v = v
  val get_mut [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (borrowed v)
    requires {[#"../red_black_tree.rs" 862 15 862 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 863 14 863 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 864 4 865 110] forall v : borrowed v . result = Core_Option_Option_Type.C_Some v -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some ( * v) /\ ShallowModel1.shallow_model ( ^ self) = Map.set (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) (Core_Option_Option_Type.C_Some ( ^ v)) }
    ensures { [#"../red_black_tree.rs" 866 4 866 114] result = Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None /\ Map.get (ShallowModel1.shallow_model ( ^ self)) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None }
    
end
module RedBlackTree_Impl16_GetMut
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with
    type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with
    type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with
    type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with
    type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with
    type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type as RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type as Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone RedBlackTree_Impl10_Height as Height0 with
    type k = k,
    type v = v,
    axiom .
  clone CreusotContracts_Model_DeepModel_DeepModel_Interface as DeepModel1 with
    type self = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with
    type k = k,
    type v = v,
    function Height0.height = Height0.height
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl8_Color as Color0 with
    type k = k,
    type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with
    type k = k,
    type v = v,
    function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with
    type k = k,
    type v = v,
    predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone RedBlackTree_Impl3_ShallowModelTy_Type as ShallowModelTy0 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_ShallowModel as ShallowModel1 with
    type k = k,
    type v = v,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone CreusotContracts_Model_Impl0_DeepModel as DeepModel0 with
    type t = k,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model
  clone CreusotContracts_Model_Impl3_ShallowModel as ShallowModel0 with
    type t = RedBlackTree_Node_Type.t_tree k v,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone RedBlackTree_Impl12_Invariant as Invariant0 with
    type k = k,
    type v = v,
    predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    function Color0.color = Color0.color
  use prelude.Ghost
  use mach.int.Int
  use prelude.IntSize
  use prelude.Int8
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with
    type k = k,
    type v = v,
    predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type as RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with
    type k = k,
    type v = v,
    predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  use prelude.Ghost
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with
    type k = k,
    type v = v,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve5 with
    type t = v
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve4 with
    type t = RedBlackTree_Node_Type.t_node k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with
    type self = k,
    function DeepModel0.deep_model = DeepModel1.deep_model,
    function CmpLog0.cmp_log = CmpLog0.cmp_log,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve3 with
    type self = k
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve2 with
    type t = Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v)
  clone RedBlackTree_Impl6_MatchT as MatchT0 with
    type k = k,
    type v = v,
    predicate MatchN0.match_n = MatchN0.match_n,
    function Color1.color = Color0.color,
    predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve1 with
    type t = RedBlackTree_Node_Type.t_tree k v
  clone CreusotContracts_Resolve_Resolve_Resolve as Resolve0 with
    type self = Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_tree k v))
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with
    type k = k,
    type v = v,
    predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
    predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
    function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
    function ModelAcc0.model_acc = ModelAcc0.model_acc,
    axiom .
  let rec cfg get_mut [@cfg:stackify] [#"../red_black_tree.rs" 867 4 867 56] (self : borrowed (RedBlackTree_Node_Type.t_tree k v)) (key : k) : Core_Option_Option_Type.t_option (borrowed v)
    requires {[#"../red_black_tree.rs" 862 15 862 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 863 14 863 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 864 4 865 110] forall v : borrowed v . result = Core_Option_Option_Type.C_Some v -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_Some ( * v) /\ ShallowModel1.shallow_model ( ^ self) = Map.set (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) (Core_Option_Option_Type.C_Some ( ^ v)) }
    ensures { [#"../red_black_tree.rs" 866 4 866 114] result = Core_Option_Option_Type.C_None -> Map.get (ShallowModel0.shallow_model self) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None /\ Map.get (ShallowModel1.shallow_model ( ^ self)) (DeepModel0.deep_model key) = Core_Option_Option_Type.C_None }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option (borrowed v);
  var self_1 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var key_2 : k;
  var _3 : ();
  var _8 : Ghost.ghost_ty ();
  var _11 : ();
  var old_self_12 : Ghost.ghost_ty (borrowed (RedBlackTree_Node_Type.t_tree k v));
  var _14 : ();
  var tree_15 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _16 : ();
  var _26 : ();
  var _27 : borrowed (Core_Option_Option_Type.t_option (RedBlackTree_Node_Type.t_node k v));
  var _28 : isize;
  var node_29 : borrowed (RedBlackTree_Node_Type.t_node k v);
  var _30 : Core_Cmp_Ordering_Type.t_ordering;
  var _31 : k;
  var _32 : k;
  var _33 : k;
  var _34 : int8;
  var _35 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _36 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _37 : ();
  var _38 : borrowed v;
  var _39 : borrowed v;
  var _40 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _41 : borrowed (RedBlackTree_Node_Type.t_tree k v);
  var _42 : ();
  var _43 : ();
  var _44 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _11 <- ();
    _8 <- ([#"../red_black_tree.rs" 868 8 868 42] Ghost.new ());
    goto BB1
  }
  BB1 {
    _14 <- ();
    old_self_12 <- ([#"../red_black_tree.rs" 870 23 870 38] Ghost.new self_1);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve old_self_12 };
    assume { Resolve1.resolve tree_15 };
    tree_15 <- self_1;
    self_1 <- any borrowed (RedBlackTree_Node_Type.t_tree k v);
    goto BB3
  }
  BB3 {
    invariant bst_inv { [#"../red_black_tree.rs" 873 29 873 52] BstInvariant0.bst_invariant ( * tree_15) };
    invariant height_inv { [#"../red_black_tree.rs" 874 32 874 58] HeightInvariant0.height_invariant ( * tree_15) };
    invariant color_inv { [#"../red_black_tree.rs" 875 31 875 56] ColorInvariant0.color_invariant ( * tree_15) };
    invariant mapping_prof_key { [#"../red_black_tree.rs" 873 8 873 54] forall v : v . HasMapping0.has_mapping ( ^ tree_15) (DeepModel0.deep_model key_2) v = HasMapping0.has_mapping ( ^ Ghost.inner old_self_12) (DeepModel0.deep_model key_2) v };
    invariant mapping_cur_key { [#"../red_black_tree.rs" 873 8 873 54] forall v : v . HasMapping0.has_mapping ( * tree_15) (DeepModel0.deep_model key_2) v = HasMapping0.has_mapping ( * Ghost.inner old_self_12) (DeepModel0.deep_model key_2) v };
    invariant bst_inv_proph { [#"../red_black_tree.rs" 873 8 873 54] (forall v : v . forall k : DeepModelTy0.deepModelTy . k = DeepModel0.deep_model key_2 \/ HasMapping0.has_mapping ( * tree_15) k v = HasMapping0.has_mapping ( ^ tree_15) k v) -> BstInvariant0.bst_invariant ( ^ tree_15) -> BstInvariant0.bst_invariant ( ^ Ghost.inner old_self_12) };
    invariant height_inv_proph { [#"../red_black_tree.rs" 873 8 873 54] Height0.height ( * tree_15) = Height0.height ( ^ tree_15) /\ HeightInvariant0.height_invariant ( ^ tree_15) -> HeightInvariant0.height_invariant ( ^ Ghost.inner old_self_12) };
    invariant color_inv_proph { [#"../red_black_tree.rs" 873 8 873 54] MatchT0.match_t (RedBlackTree_Cpl_Type.C_CPL (Color0.color ( * tree_15))) ( ^ tree_15) -> MatchT0.match_t (RedBlackTree_Cpl_Type.C_CPL (RedBlackTree_Color_Type.C_Black)) ( ^ Ghost.inner old_self_12) };
    invariant mapping_proph { [#"../red_black_tree.rs" 873 8 873 54] forall v : v . forall k : DeepModelTy0.deepModelTy . HasMapping0.has_mapping ( * tree_15) k v = HasMapping0.has_mapping ( ^ tree_15) k v -> HasMapping0.has_mapping ( * Ghost.inner old_self_12) k v = HasMapping0.has_mapping ( ^ Ghost.inner old_self_12) k v };
    _27 <- borrow_mut (RedBlackTree_Node_Type.tree_node ( * tree_15));
    tree_15 <- { tree_15 with current = (let RedBlackTree_Node_Type.C_Tree a =  * tree_15 in RedBlackTree_Node_Type.C_Tree ( ^ _27)) };
    assume { Resolve1.resolve tree_15 };
    switch ( * _27)
      | Core_Option_Option_Type.C_Some _ -> goto BB4
      | _ -> goto BB11
      end
  }
  BB4 {
    node_29 <- borrow_mut (Core_Option_Option_Type.some_0 ( * _27));
    _27 <- { _27 with current = (let Core_Option_Option_Type.C_Some a =  * _27 in Core_Option_Option_Type.C_Some ( ^ node_29)) };
    assume { Resolve2.resolve _27 };
    _31 <- key_2;
    _33 <- RedBlackTree_Node_Type.node_key ( * node_29);
    _32 <- _33;
    assume { Resolve3.resolve _33 };
    _30 <- ([#"../red_black_tree.rs" 888 18 888 36] Cmp0.cmp _31 _32);
    goto BB5
  }
  BB5 {
    switch (_30)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB8
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB9
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB6
      end
  }
  BB6 {
    _41 <- borrow_mut (RedBlackTree_Node_Type.node_right ( * node_29));
    node_29 <- { node_29 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_29 in RedBlackTree_Node_Type.C_Node a b c d ( ^ _41)) };
    assume { Resolve4.resolve node_29 };
    _40 <- borrow_mut ( * _41);
    _41 <- { _41 with current = ( ^ _40) };
    assume { Resolve1.resolve _41 };
    assume { Resolve1.resolve tree_15 };
    tree_15 <- _40;
    _40 <- any borrowed (RedBlackTree_Node_Type.t_tree k v);
    _26 <- ();
    goto BB10
  }
  BB7 {
    assume { Resolve3.resolve key_2 };
    assume { Resolve4.resolve node_29 };
    absurd
  }
  BB8 {
    _36 <- borrow_mut (RedBlackTree_Node_Type.node_left ( * node_29));
    node_29 <- { node_29 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_29 in RedBlackTree_Node_Type.C_Node ( ^ _36) b c d e) };
    assume { Resolve4.resolve node_29 };
    _35 <- borrow_mut ( * _36);
    _36 <- { _36 with current = ( ^ _35) };
    assume { Resolve1.resolve _36 };
    assume { Resolve1.resolve tree_15 };
    tree_15 <- _35;
    _35 <- any borrowed (RedBlackTree_Node_Type.t_tree k v);
    _26 <- ();
    goto BB10
  }
  BB9 {
    assume { Resolve3.resolve key_2 };
    _39 <- borrow_mut (RedBlackTree_Node_Type.node_val ( * node_29));
    node_29 <- { node_29 with current = (let RedBlackTree_Node_Type.C_Node a b c d e =  * node_29 in RedBlackTree_Node_Type.C_Node a b c ( ^ _39) e) };
    assume { Resolve4.resolve node_29 };
    _38 <- borrow_mut ( * _39);
    _39 <- { _39 with current = ( ^ _38) };
    _0 <- Core_Option_Option_Type.C_Some _38;
    assume { Resolve5.resolve _39 };
    goto BB12
  }
  BB10 {
    goto BB3
  }
  BB11 {
    assume { Resolve3.resolve key_2 };
    assume { Resolve2.resolve _27 };
    _16 <- ();
    _0 <- Core_Option_Option_Type.C_None;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { [#"../red_black_tree.rs" 705 21 717 24] result = self }
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { [#"../red_black_tree.rs" 705 21 717 24] result = self }
    
end
module RedBlackTree_Impl17
  use RedBlackTree_Color_Type as RedBlackTree_Color_Type
  clone RedBlackTree_Impl17_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with
    type self = RedBlackTree_Color_Type.t_color,
    val clone' = Clone0.clone'
end
module RedBlackTree_Impl18
  
end
module RedBlackTree_Impl2
  type k
  type v
end
module RedBlackTree_Impl3
  type k
  type v
end
module RedBlackTree_Impl6
  type k
  type v
end
module RedBlackTree_Impl7
  type k
  type v
  type l
  type r
end
