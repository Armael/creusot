module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type redblacktree_color  =
    | RedBlackTree_Color_Red
    | RedBlackTree_Color_Black
    
  type core_option_option 't =
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  let function core_option_option_Some_0 (self : core_option_option 't) : 't =
    match (self) with
      | Core_Option_Option_None -> any 't
      | Core_Option_Option_Some a -> a
      end
  type redblacktree_node 'k 'v =
    | RedBlackTree_Node (redblacktree_tree 'k 'v) (redblacktree_color) 'k 'v (redblacktree_tree 'k 'v)
    with redblacktree_tree 'k 'v =
    | RedBlackTree_Tree (core_option_option (redblacktree_node 'k 'v))
    
  let function redblacktree_node_Node_left (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v =
    match (self) with
      | RedBlackTree_Node a _ _ _ _ -> a
      end
  let function redblacktree_node_Node_key (self : redblacktree_node 'k 'v) : 'k =
    match (self) with
      | RedBlackTree_Node _ _ a _ _ -> a
      end
  let function redblacktree_node_Node_right (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v =
    match (self) with
      | RedBlackTree_Node _ _ _ _ a -> a
      end
  let function redblacktree_node_Node_val (self : redblacktree_node 'k 'v) : 'v =
    match (self) with
      | RedBlackTree_Node _ _ _ a _ -> a
      end
  let function redblacktree_node_Node_color (self : redblacktree_node 'k 'v) : redblacktree_color =
    match (self) with
      | RedBlackTree_Node _ a _ _ _ -> a
      end
  let function redblacktree_tree_Tree_node (self : redblacktree_tree 'k 'v) : core_option_option (redblacktree_node 'k 'v)
    
   =
    match (self) with
      | RedBlackTree_Tree a -> a
      end
  type core_cmp_ordering  =
    | Core_Cmp_Ordering_Less
    | Core_Cmp_Ordering_Equal
    | Core_Cmp_Ordering_Greater
    
end
module RedBlackTree_Impl14_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color
end
module RedBlackTree_Impl14_Clone
  use prelude.Prelude
  use Type
  let rec cfg clone' [@cfg:stackify] [#"../red_black_tree.rs" 8 9 14] (self : Type.redblacktree_color) : Type.redblacktree_color
    
   =
  var _0 : Type.redblacktree_color;
  var self_1 : Type.redblacktree_color;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module RedBlackTree_Impl0_HasMapping_Interface
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  predicate has_mapping (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v)
end
module RedBlackTree_Impl0_HasMapping
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate has_mapping [#"../red_black_tree.rs" 31 4 53] (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> false
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> has_mapping left k v || has_mapping right k v || k = Model0.model key && v = val'
      end
end
module RedBlackTree_Impl0_SameMappings_Interface
  type k
  type v
  use Type
  predicate same_mappings (self : Type.redblacktree_tree k v) (o : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl0_SameMappings
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate same_mappings [#"../red_black_tree.rs" 42 4 43] (self : Type.redblacktree_tree k v) (o : Type.redblacktree_tree k v)
    
   =
    [#"../red_black_tree.rs" 43 8 9] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping self k v = HasMapping0.has_mapping o k v
end
module RedBlackTree_Impl0_ModelAcc_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
end
module RedBlackTree_Impl0_ModelAcc
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc [#"../red_black_tree.rs" 49 4 82] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 51 12 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> accu
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let accu1 = model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in model_acc right accu2
      end
end
module RedBlackTree_Impl0_ModelAccHasMapping_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_has_mapping (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl0_ModelAccHasMapping
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_has_mapping [#"../red_black_tree.rs" 65 4 81] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 67 12 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in model_acc_has_mapping right accu2 k
      end
  axiom model_acc_has_mapping_spec : forall self : Type.redblacktree_tree k v, accu : Map.map ModelTy0.modelTy (Type.core_option_option v), k : ModelTy0.modelTy . [#"../red_black_tree.rs" 63 4 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k || (exists v : (v) . Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v && HasMapping0.has_mapping self k v)
end
module RedBlackTree_Impl0_ModelAccHasMapping_Impl
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  let rec ghost function model_acc_has_mapping (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    ensures { [#"../red_black_tree.rs" 63 4 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k || (exists v : (v) . Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v && HasMapping0.has_mapping self k v) }
    
   =
    [#"../red_black_tree.rs" 67 12 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model0.model key in Map.set accu1 b' (Type.Core_Option_Option_Some val') in model_acc_has_mapping right accu2 k
      end
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Less
end
module RedBlackTree_Impl4_BstInvariantHere_Interface
  type k
  type v
  use Type
  predicate bst_invariant_here (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl4_BstInvariantHere
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate bst_invariant_here [#"../red_black_tree.rs" 170 4 39] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 172 12 88] (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_left self) k v -> LtLog0.lt_log k (Model0.model (Type.redblacktree_node_Node_key self))) && (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_right self) k v -> LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key self)) k)
end
module RedBlackTree_Impl5_BstInvariant_Interface
  type k
  type v
  use Type
  predicate bst_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl5_BstInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl4_BstInvariantHere_Interface as BstInvariantHere0 with type k = k, type v = v
  predicate bst_invariant [#"../red_black_tree.rs" 190 4 34] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 192 12 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> true
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left _ _ _ right = node in BstInvariantHere0.bst_invariant_here node && bst_invariant left && bst_invariant right
      end
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Type.Core_Cmp_Ordering_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Type.core_cmp_ordering . CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (x = y) = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Equal)
end
module RedBlackTree_Impl0_HasMappingModelAcc_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl0_HasMappingModelAcc
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAccHasMapping_Interface as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_model_acc [#"../red_black_tree.rs" 82 4 29] (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 87 12 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
  axiom has_mapping_model_acc_spec : forall self : Type.redblacktree_tree k v, accu : Map.map ModelTy0.modelTy (Type.core_option_option v), k : ModelTy0.modelTy . ([#"../red_black_tree.rs" 80 15 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 81 4 94] forall v : (v) . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v)
end
module RedBlackTree_Impl0_HasMappingModelAcc_Impl
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model, axiom .
  let rec ghost function has_mapping_model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (k : ModelTy0.modelTy) : ()
    requires {[#"../red_black_tree.rs" 80 15 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 81 4 94] forall v : (v) . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Type.Core_Option_Option_Some v }
    
   =
    [#"../red_black_tree.rs" 87 12 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model0.model key in Map.set accu1 b' (Type.Core_Option_Option_Some val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
end
module RedBlackTree_Impl3_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.redblacktree_tree k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl3_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  use map.Const
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../red_black_tree.rs" 158 4 35] (self : Type.redblacktree_tree k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 159 20 54] ModelAcc0.model_acc self (Const.const (Type.Core_Option_Option_None))
end
module RedBlackTree_Impl3_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl3
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl3_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.redblacktree_tree k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.redblacktree_tree k v,
  type modelTy = ModelTy0.modelTy
end
module RedBlackTree_Impl0_HasMappingModel_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_model (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) : ()
end
module RedBlackTree_Impl0_HasMappingModel
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  use map.Const
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAccHasMapping_Interface as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc_Interface as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_model [#"../red_black_tree.rs" 103 4 29] (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 108 12 61] let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Type.Core_Option_Option_None)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Type.Core_Option_Option_None)) k
  axiom has_mapping_model_spec : forall self : Type.redblacktree_tree k v, k : ModelTy0.modelTy . ([#"../red_black_tree.rs" 101 15 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 102 4 82] forall v : (v) . HasMapping0.has_mapping self k v = (Map.get (Model0.model self) k = Type.Core_Option_Option_Some v))
end
module RedBlackTree_Impl0_HasMappingModel_Impl
  type k
  type v
  use map.Map
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  let rec ghost function has_mapping_model (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) : ()
    requires {[#"../red_black_tree.rs" 101 15 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 102 4 82] forall v : (v) . HasMapping0.has_mapping self k v = (Map.get (Model0.model self) k = Type.Core_Option_Option_Some v) }
    
   =
    [#"../red_black_tree.rs" 108 12 61] let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Type.Core_Option_Option_None)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Type.Core_Option_Option_None)) k
end
module RedBlackTree_Impl0_HasMappingInj_Interface
  type k
  type v
  use Type
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function has_mapping_inj (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
end
module RedBlackTree_Impl0_HasMappingInj
  type k
  type v
  use Type
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  use map.Map
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMappingModel_Interface as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_inj [#"../red_black_tree.rs" 118 4 29] (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
    
   =
    [#"../red_black_tree.rs" 122 8 9] if Map.get (Model0.model self) k = Type.Core_Option_Option_Some v1 && Map.get (Model0.model self) k = Type.Core_Option_Option_Some v2 then
      ()
    else
      HasMappingModel0.has_mapping_model self k
    
  axiom has_mapping_inj_spec : forall self : Type.redblacktree_tree k v, k : ModelTy0.modelTy, v1 : v, v2 : v . ([#"../red_black_tree.rs" 116 15 38] HasMapping0.has_mapping self k v2) -> ([#"../red_black_tree.rs" 115 15 38] HasMapping0.has_mapping self k v1) -> ([#"../red_black_tree.rs" 114 15 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 117 14 22] v1 = v2)
end
module RedBlackTree_Impl0_HasMappingInj_Impl
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  let rec ghost function has_mapping_inj (self : Type.redblacktree_tree k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
    requires {[#"../red_black_tree.rs" 116 15 38] HasMapping0.has_mapping self k v2}
    requires {[#"../red_black_tree.rs" 115 15 38] HasMapping0.has_mapping self k v1}
    requires {[#"../red_black_tree.rs" 114 15 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 117 14 22] v1 = v2 }
    
   =
    [#"../red_black_tree.rs" 122 8 9] if (let a = let a' = Model0.model self in Map.get a' k in pure {a = Type.Core_Option_Option_Some v1}) && (let a = let a' = Model0.model self in Map.get a' k in pure {a = Type.Core_Option_Option_Some v2}) then
      ()
    else
      HasMappingModel0.has_mapping_model self k
    
end
module RedBlackTree_Impl1_SameMappings_Interface
  type k
  type v
  use Type
  predicate same_mappings (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v)
end
module RedBlackTree_Impl1_SameMappings
  type k
  type v
  use Type
  clone RedBlackTree_Impl0_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  predicate same_mappings [#"../red_black_tree.rs" 133 4 43] (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v)
    
   =
    [#"../red_black_tree.rs" 134 8 9] forall ot : (Type.redblacktree_tree k v) . forall st : (Type.redblacktree_tree k v) . match (st) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some x) -> self = x
      | _ -> false
      end && match (ot) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some x) -> o = x
      | _ -> false
      end -> SameMappings0.same_mappings st ot
end
module RedBlackTree_Impl2_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.redblacktree_node k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl2_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../red_black_tree.rs" 147 4 35] (self : Type.redblacktree_node k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   =
    [#"../red_black_tree.rs" 148 8 9] ModelAcc0.model_acc (Type.redblacktree_node_Node_right self) (Map.set (Model0.model (Type.redblacktree_node_Node_left self)) (Model1.model (Type.redblacktree_node_Node_key self)) (Type.Core_Option_Option_Some (Type.redblacktree_node_Node_val self)))
end
module RedBlackTree_Impl4_BstInvariant_Interface
  type k
  type v
  use Type
  predicate bst_invariant (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl4_BstInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariantHere_Interface as BstInvariantHere0 with type k = k, type v = v
  predicate bst_invariant [#"../red_black_tree.rs" 178 4 34] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 179 8 9] BstInvariantHere0.bst_invariant_here self && BstInvariant0.bst_invariant (Type.redblacktree_node_Node_left self) && BstInvariant0.bst_invariant (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl6_Color_Interface
  type k
  type v
  use Type
  function color (self : Type.redblacktree_tree k v) : Type.redblacktree_color
end
module RedBlackTree_Impl6_Color
  type k
  type v
  use Type
  function color [#"../red_black_tree.rs" 207 4 27] (self : Type.redblacktree_tree k v) : Type.redblacktree_color =
    [#"../red_black_tree.rs" 208 8 9] match (Type.redblacktree_tree_Tree_node self) with
      | Type.Core_Option_Option_Some (Type.RedBlackTree_Node _ color _ _ _) -> color
      | _ -> Type.RedBlackTree_Color_Black
      end
end
module RedBlackTree_Impl7_ColorInvariantHere_Interface
  type k
  type v
  use Type
  predicate color_invariant_here (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl7_ColorInvariantHere
  type k
  type v
  use Type
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  predicate color_invariant_here [#"../red_black_tree.rs" 230 4 41] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 231 20 101] Color0.color (Type.redblacktree_node_Node_right self) = Type.RedBlackTree_Color_Black && (Type.redblacktree_node_Node_color self = Type.RedBlackTree_Color_Red -> Color0.color (Type.redblacktree_node_Node_left self) = Type.RedBlackTree_Color_Black)
end
module RedBlackTree_Impl6_ColorInvariant_Interface
  type k
  type v
  use Type
  predicate color_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl6_ColorInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl7_ColorInvariantHere_Interface as ColorInvariantHere0 with type k = k, type v = v
  predicate color_invariant [#"../red_black_tree.rs" 215 4 36] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 217 12 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> true
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left _ _ _ right = node in ColorInvariantHere0.color_invariant_here node && color_invariant left && color_invariant right
      end
end
module RedBlackTree_Impl7_ColorInvariant_Interface
  type k
  type v
  use Type
  predicate color_invariant (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl7_ColorInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere_Interface as ColorInvariantHere0 with type k = k, type v = v
  predicate color_invariant [#"../red_black_tree.rs" 235 4 36] (self : Type.redblacktree_node k v) =
    [#"../red_black_tree.rs" 234 4 16] ColorInvariantHere0.color_invariant_here self && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left self) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl9_HasHeightRec_Interface
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  predicate has_height_rec (self : Type.redblacktree_tree k v) (h : int)
end
module RedBlackTree_Impl9_HasHeightRec
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  predicate has_height_rec [#"../red_black_tree.rs" 262 4 43] (self : Type.redblacktree_tree k v) (h : int) =
    [#"../red_black_tree.rs" 264 12 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> h = 0
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color _ _ right)) -> let h = if color = Type.RedBlackTree_Color_Red then
        h
      else
        h - 1
       in has_height_rec left h && has_height_rec right h
      end
  axiom has_height_rec_spec : forall self : Type.redblacktree_tree k v, h : int . [#"../red_black_tree.rs" 261 4 33] has_height_rec self h -> h >= 0
end
module RedBlackTree_Impl9_HasHeightRec_Impl
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Type
  let rec ghost function has_height_rec (self : Type.redblacktree_tree k v) (h : int) : bool
    ensures { [#"../red_black_tree.rs" 261 4 33] result -> h >= 0 }
    
   =
    [#"../red_black_tree.rs" 264 12 13] match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> pure {h = 0}
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some (Type.RedBlackTree_Node left color _ _ right)) -> let h = if pure {color = Type.RedBlackTree_Color_Red} then
        h
      else
        h - 1
       in has_height_rec left h && has_height_rec right h
      end
end
module RedBlackTree_Impl8_HasHeight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  predicate has_height (self : Type.redblacktree_node k v) (h : int)
end
module RedBlackTree_Impl8_HasHeight
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  use mach.int.Int32
  predicate has_height [#"../red_black_tree.rs" 247 4 39] (self : Type.redblacktree_node k v) (h : int) =
    [#"../red_black_tree.rs" 249 12 13] match (self) with
      | Type.RedBlackTree_Node left color _ _ right -> let h = if color = Type.RedBlackTree_Color_Red then
        h
      else
        h - 1
       in HasHeightRec0.has_height_rec left h && HasHeightRec0.has_height_rec right h
      end
  axiom has_height_spec : forall self : Type.redblacktree_node k v, h : int . [#"../red_black_tree.rs" 244 4 48] forall node : (Type.redblacktree_node k v) . forall tree : (Type.redblacktree_tree k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node && self = node -> has_height self h = HasHeightRec0.has_height_rec tree h
end
module RedBlackTree_Impl8_HasHeight_Impl
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  let rec ghost function has_height (self : Type.redblacktree_node k v) (h : int) : bool
    ensures { [#"../red_black_tree.rs" 244 4 48] forall node : (Type.redblacktree_node k v) . forall tree : (Type.redblacktree_tree k v) . Type.redblacktree_tree_Tree_node tree = Type.Core_Option_Option_Some node && self = node -> result = HasHeightRec0.has_height_rec tree h }
    
   =
    [#"../red_black_tree.rs" 249 12 13] match (self) with
      | Type.RedBlackTree_Node left color _ _ right -> let h = if pure {color = Type.RedBlackTree_Color_Red} then
        h
      else
        h - 1
       in HasHeightRec0.has_height_rec left h && HasHeightRec0.has_height_rec right h
      end
end
module RedBlackTree_Impl9_HasHeight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  predicate has_height (self : Type.redblacktree_tree k v) (h : int)
end
module RedBlackTree_Impl9_HasHeight
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  predicate has_height [#"../red_black_tree.rs" 277 4 39] (self : Type.redblacktree_tree k v) (h : int) =
    [#"../red_black_tree.rs" 278 8 30] HasHeightRec0.has_height_rec self h
  axiom has_height_spec : forall self : Type.redblacktree_tree k v, h : int . ([#"../red_black_tree.rs" 275 4 56] Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_None -> has_height self h = (h = 0)) && ([#"../red_black_tree.rs" 276 4 102] forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_Some node -> has_height self h = HasHeight0.has_height node h)
end
module RedBlackTree_Impl9_HasHeight_Impl
  type k
  type v
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  let rec ghost function has_height (self : Type.redblacktree_tree k v) (h : int) : bool
    ensures { [#"../red_black_tree.rs" 276 4 102] forall node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_Some node -> result = HasHeight0.has_height node h }
    ensures { [#"../red_black_tree.rs" 275 4 56] Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_None -> result = (h = 0) }
    
   =
    [#"../red_black_tree.rs" 278 8 30] HasHeightRec0.has_height_rec self h
end
module RedBlackTree_Impl10_Invariant_Interface
  type k
  type v
  use Type
  predicate invariant' (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl10_Invariant
  type k
  type v
  use Type
  use mach.int.Int
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  predicate invariant' [#"../red_black_tree.rs" 289 4 34] (self : Type.redblacktree_tree k v) =
    [#"../red_black_tree.rs" 290 8 9] BstInvariant0.bst_invariant self && ColorInvariant0.color_invariant self && Color0.color self = Type.RedBlackTree_Color_Black && (exists h : (int) . HasHeight0.has_height self h)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module RedBlackTree_Impl11_IsRed_Interface
  type k
  type v
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val is_red [@cfg:stackify] (self : Type.redblacktree_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 300 14 45] result = (Color0.color self = Type.RedBlackTree_Color_Red) }
    
end
module RedBlackTree_Impl11_IsRed
  type k
  type v
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  let rec cfg is_red [@cfg:stackify] [#"../red_black_tree.rs" 301 4 28] (self : Type.redblacktree_tree k v) : bool
    ensures { [#"../red_black_tree.rs" 300 14 45] result = (Color0.color self = Type.RedBlackTree_Color_Red) }
    
   =
  var _0 : bool;
  var self_1 : Type.redblacktree_tree k v;
  var _2 : isize;
  var _3 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (Type.redblacktree_tree_Tree_node self_1)
      | Type.Core_Option_Option_Some _ -> goto BB2
      | _ -> goto BB5
      end
  }
  BB1 {
    _0 <- false;
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    switch (Type.redblacktree_node_Node_color (Type.core_option_option_Some_0 (Type.redblacktree_tree_Tree_node self_1)))
      | Type.RedBlackTree_Color_Red -> goto BB3
      | _ -> goto BB1
      end
  }
  BB3 {
    _0 <- true;
    goto BB4
  }
  BB4 {
    return _0
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface
  type self
  function default_log (_ : ()) : self
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog
  type self
  function default_log (_ : ()) : self
end
module Core_Mem_Take_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures {  ^ dest = DefaultLog0.default_log () }
    ensures { result =  * dest }
    
end
module Core_Mem_Take
  type t
  use prelude.Prelude
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures {  ^ dest = DefaultLog0.default_log () }
    ensures { result =  * dest }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module Core_Mem_Swap_Interface
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ y =  * x }
    ensures {  ^ x =  * y }
    
end
module Core_Mem_Swap
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ y =  * x }
    ensures {  ^ x =  * y }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Std1_Option_Impl0_DefaultLog_Interface
  type t
  use Type
  function default_log (_ : ()) : Type.core_option_option t
end
module CreusotContracts_Std1_Option_Impl0_DefaultLog
  type t
  use Type
  function default_log (_ : ()) : Type.core_option_option t =
    Type.Core_Option_Option_None
end
module CreusotContracts_Std1_Option_Impl0
  type t
end
module RedBlackTree_Impl12_RotateRight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val rotate_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 314 15 42] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red}
    requires {[#"../red_black_tree.rs" 313 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 323 14 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) (Model0.model (Type.redblacktree_node_Node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 322 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 319 4 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r && (Type.redblacktree_node_Node_left ( ^ self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) = (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( * self)) }
    ensures { [#"../red_black_tree.rs" 318 14 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 317 14 42] Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 316 14 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 315 14 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    
end
module RedBlackTree_Impl12_RotateRight
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_node k v)
  let rec cfg rotate_right [@cfg:stackify] [#"../red_black_tree.rs" 324 4 30] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 314 15 42] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red}
    requires {[#"../red_black_tree.rs" 313 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 323 14 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) (Model0.model (Type.redblacktree_node_Node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 322 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 319 4 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r && (Type.redblacktree_node_Node_left ( ^ self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) = (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( * self)) }
    ensures { [#"../red_black_tree.rs" 318 14 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 317 14 42] Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 316 14 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 315 14 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  ghost var old_self_2 : borrowed (Type.redblacktree_node k v);
  var _3 : ();
  var x_4 : Type.redblacktree_node k v;
  var _5 : Type.core_option_option (Type.redblacktree_node k v);
  var _6 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : isize;
  var x_9 : Type.redblacktree_node k v;
  var _10 : ();
  var _11 : ();
  var _12 : borrowed (Type.redblacktree_tree k v);
  var _13 : borrowed (Type.redblacktree_tree k v);
  var _14 : borrowed (Type.redblacktree_tree k v);
  var _15 : borrowed (Type.redblacktree_tree k v);
  var _16 : ();
  var _17 : borrowed (Type.redblacktree_node k v);
  var _18 : borrowed (Type.redblacktree_node k v);
  var _19 : borrowed (Type.redblacktree_node k v);
  var _20 : Type.redblacktree_color;
  var _21 : Type.redblacktree_color;
  var _22 : ();
  var _23 : ();
  var _24 : Type.redblacktree_tree k v;
  var _25 : Type.core_option_option (Type.redblacktree_node k v);
  var _26 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 325 23 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _7 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _7)) b c d e) };
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _5 <- ([#"../red_black_tree.rs" 333 34 69] Take0.take _6);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _7 };
    switch (_5)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    assume { Resolve2.resolve self_1 };
    absurd
  }
  BB4 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve3.resolve _5 };
    absurd
  }
  BB5 {
    assume { Resolve4.resolve x_9 };
    x_9 <- Type.core_option_option_Some_0 _5;
    assume { Resolve4.resolve x_4 };
    x_4 <- x_9;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve3.resolve _5 };
    _13 <- borrow_mut (Type.redblacktree_node_Node_left ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node ( ^ _13) b c d e) };
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    _15 <- borrow_mut (Type.redblacktree_node_Node_right x_4);
    x_4 <- (let Type.RedBlackTree_Node a b c d e = x_4 in Type.RedBlackTree_Node a b c d ( ^ _15));
    _14 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ _14) };
    _11 <- ([#"../red_black_tree.rs" 343 8 52] Swap0.swap _12 _14);
    goto BB8
  }
  BB8 {
    assume { Resolve5.resolve _13 };
    assume { Resolve5.resolve _15 };
    _17 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _17) };
    _19 <- borrow_mut x_4;
    x_4 <-  ^ _19;
    _18 <- borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _16 <- ([#"../red_black_tree.rs" 349 8 36] Swap1.swap _17 _18);
    goto BB9
  }
  BB9 {
    assume { Resolve6.resolve _19 };
    _20 <- Type.redblacktree_node_Node_color x_4;
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a _20 c d e) };
    _21 <- Type.RedBlackTree_Color_Red;
    x_4 <- (let Type.RedBlackTree_Node a b c d e = x_4 in Type.RedBlackTree_Node a _21 c d e);
    assert { [#"../red_black_tree.rs" 357 8 78] HasMapping0.has_mapping (Type.redblacktree_node_Node_left ( * old_self_2)) (Model0.model (Type.redblacktree_node_Node_key ( * self_1))) (Type.redblacktree_node_Node_val ( * self_1)) };
    _22 <- ();
    assert { [#"../red_black_tree.rs" 358 8 114] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_left x_4) k v -> HasMapping0.has_mapping (Type.redblacktree_node_Node_left ( * old_self_2)) k v };
    goto BB10
  }
  BB10 {
    _23 <- ();
    assume { Resolve4.resolve _26 };
    _26 <- x_4;
    _25 <- Type.Core_Option_Option_Some _26;
    goto BB11
  }
  BB11 {
    _24 <- Type.RedBlackTree_Tree _25;
    goto BB12
  }
  BB12 {
    assume { Resolve7.resolve (Type.redblacktree_node_Node_right ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d _24) };
    goto BB13
  }
  BB13 {
    assume { Resolve2.resolve self_1 };
    goto BB14
  }
  BB14 {
    _0 <- ();
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module RedBlackTree_Impl12_RotateLeft_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val rotate_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 368 15 43] Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red}
    requires {[#"../red_black_tree.rs" 367 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 377 14 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 376 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 373 4 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l && (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( ^ self)) = (Type.redblacktree_node_Node_left ( * self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) }
    ensures { [#"../red_black_tree.rs" 372 14 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 371 14 41] Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 370 14 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 369 14 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    
end
module RedBlackTree_Impl12_RotateLeft
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_node k v)
  let rec cfg rotate_left [@cfg:stackify] [#"../red_black_tree.rs" 378 4 29] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 368 15 43] Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red}
    requires {[#"../red_black_tree.rs" 367 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 377 14 41] LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 376 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 373 4 83] exists r : (Type.redblacktree_node k v) . exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l && (Type.redblacktree_node_Node_left l, Type.redblacktree_node_Node_right l, Type.redblacktree_node_Node_right ( ^ self)) = (Type.redblacktree_node_Node_left ( * self), Type.redblacktree_node_Node_left r, Type.redblacktree_node_Node_right r) }
    ensures { [#"../red_black_tree.rs" 372 14 44] Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 371 14 41] Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 370 14 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 369 14 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  ghost var old_self_2 : borrowed (Type.redblacktree_node k v);
  var _3 : ();
  var x_4 : Type.redblacktree_node k v;
  var _5 : Type.core_option_option (Type.redblacktree_node k v);
  var _6 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : isize;
  var x_9 : Type.redblacktree_node k v;
  var _10 : ();
  var _11 : ();
  var _12 : borrowed (Type.redblacktree_tree k v);
  var _13 : borrowed (Type.redblacktree_tree k v);
  var _14 : borrowed (Type.redblacktree_tree k v);
  var _15 : borrowed (Type.redblacktree_tree k v);
  var _16 : ();
  var _17 : borrowed (Type.redblacktree_node k v);
  var _18 : borrowed (Type.redblacktree_node k v);
  var _19 : borrowed (Type.redblacktree_node k v);
  var _20 : Type.redblacktree_color;
  var _21 : Type.redblacktree_color;
  var _22 : ();
  var _23 : ();
  var _24 : Type.redblacktree_tree k v;
  var _25 : Type.core_option_option (Type.redblacktree_node k v);
  var _26 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 379 23 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _7 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _7))) };
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _5 <- ([#"../red_black_tree.rs" 381 34 70] Take0.take _6);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _7 };
    switch (_5)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    assume { Resolve2.resolve self_1 };
    absurd
  }
  BB4 {
    assume { Resolve2.resolve self_1 };
    assume { Resolve3.resolve _5 };
    absurd
  }
  BB5 {
    assume { Resolve4.resolve x_9 };
    x_9 <- Type.core_option_option_Some_0 _5;
    assume { Resolve4.resolve x_4 };
    x_4 <- x_9;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve3.resolve _5 };
    _13 <- borrow_mut (Type.redblacktree_node_Node_right ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d ( ^ _13)) };
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    _15 <- borrow_mut (Type.redblacktree_node_Node_left x_4);
    x_4 <- (let Type.RedBlackTree_Node a b c d e = x_4 in Type.RedBlackTree_Node ( ^ _15) b c d e);
    _14 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ _14) };
    _11 <- ([#"../red_black_tree.rs" 385 8 52] Swap0.swap _12 _14);
    goto BB8
  }
  BB8 {
    assume { Resolve5.resolve _13 };
    assume { Resolve5.resolve _15 };
    _17 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _17) };
    _19 <- borrow_mut x_4;
    x_4 <-  ^ _19;
    _18 <- borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _16 <- ([#"../red_black_tree.rs" 386 8 36] Swap1.swap _17 _18);
    goto BB9
  }
  BB9 {
    assume { Resolve6.resolve _19 };
    _20 <- Type.redblacktree_node_Node_color x_4;
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a _20 c d e) };
    _21 <- Type.RedBlackTree_Color_Red;
    x_4 <- (let Type.RedBlackTree_Node a b c d e = x_4 in Type.RedBlackTree_Node a _21 c d e);
    assert { [#"../red_black_tree.rs" 389 8 79] HasMapping0.has_mapping (Type.redblacktree_node_Node_right ( * old_self_2)) (Model0.model (Type.redblacktree_node_Node_key ( * self_1))) (Type.redblacktree_node_Node_val ( * self_1)) };
    _22 <- ();
    assert { [#"../red_black_tree.rs" 390 8 116] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (Type.redblacktree_node_Node_right x_4) k v -> HasMapping0.has_mapping (Type.redblacktree_node_Node_right ( * old_self_2)) k v };
    goto BB10
  }
  BB10 {
    _23 <- ();
    assume { Resolve4.resolve _26 };
    _26 <- x_4;
    _25 <- Type.Core_Option_Option_Some _26;
    goto BB11
  }
  BB11 {
    _24 <- Type.RedBlackTree_Tree _25;
    goto BB12
  }
  BB12 {
    assume { Resolve7.resolve (Type.redblacktree_node_Node_left ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node _24 b c d e) };
    goto BB13
  }
  BB13 {
    assume { Resolve2.resolve self_1 };
    goto BB14
  }
  BB14 {
    _0 <- ();
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module Core_Option_Impl0_AsMut_Interface
  type t
  use Type
  use prelude.Prelude
  val as_mut [@cfg:stackify] (self : borrowed (Type.core_option_option t)) : Type.core_option_option (borrowed t)
    ensures {  * self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some r &&  * self = Type.Core_Option_Option_Some ( * r) &&  ^ self = Type.Core_Option_Option_Some ( ^ r)) }
    ensures {  * self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None &&  ^ self = Type.Core_Option_Option_None }
    
end
module Core_Option_Impl0_AsMut
  type t
  use Type
  use prelude.Prelude
  val as_mut [@cfg:stackify] (self : borrowed (Type.core_option_option t)) : Type.core_option_option (borrowed t)
    ensures {  * self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some r &&  * self = Type.Core_Option_Option_Some ( * r) &&  ^ self = Type.Core_Option_Option_Some ( ^ r)) }
    ensures {  * self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None &&  ^ self = Type.Core_Option_Option_None }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {self <> Type.Core_Option_Option_None}
    ensures { Type.Core_Option_Option_Some result = self }
    
end
module Core_Option_Impl0_Unwrap
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {self <> Type.Core_Option_Option_None}
    ensures { Type.Core_Option_Option_Some result = self }
    
end
module RedBlackTree_Impl12_FlipColors_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val flip_colors [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 397 15 60] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Color0.color (Type.redblacktree_node_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 396 15 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 395 15 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 394 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 407 14 40] Type.redblacktree_node_Node_key ( * self) = Type.redblacktree_node_Node_key ( ^ self) }
    ensures { [#"../red_black_tree.rs" 404 4 70] exists r2 : (Type.redblacktree_node k v) . exists r1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r1 && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r2 && Type.redblacktree_node_Node_left r1 = Type.redblacktree_node_Node_left r2 && Type.redblacktree_node_Node_right r1 = Type.redblacktree_node_Node_right r2 && Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color r2 && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color r1 }
    ensures { [#"../red_black_tree.rs" 401 4 70] exists l2 : (Type.redblacktree_node k v) . exists l1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l1 && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l2 && Type.redblacktree_node_Node_left l1 = Type.redblacktree_node_Node_left l2 && Type.redblacktree_node_Node_right l1 = Type.redblacktree_node_Node_right l2 && Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color l2 && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color l1 }
    ensures { [#"../red_black_tree.rs" 400 14 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 399 14 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 398 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
end
module RedBlackTree_Impl12_FlipColors
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_color
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  let rec cfg flip_colors [@cfg:stackify] [#"../red_black_tree.rs" 408 4 29] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 397 15 60] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Color0.color (Type.redblacktree_node_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 396 15 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 395 15 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 394 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 407 14 40] Type.redblacktree_node_Node_key ( * self) = Type.redblacktree_node_Node_key ( ^ self) }
    ensures { [#"../red_black_tree.rs" 404 4 70] exists r2 : (Type.redblacktree_node k v) . exists r1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r1 && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r2 && Type.redblacktree_node_Node_left r1 = Type.redblacktree_node_Node_left r2 && Type.redblacktree_node_Node_right r1 = Type.redblacktree_node_Node_right r2 && Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color r2 && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color r1 }
    ensures { [#"../red_black_tree.rs" 401 4 70] exists l2 : (Type.redblacktree_node k v) . exists l1 : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l1 && Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l2 && Type.redblacktree_node_Node_left l1 = Type.redblacktree_node_Node_left l2 && Type.redblacktree_node_Node_right l1 = Type.redblacktree_node_Node_right l2 && Type.redblacktree_node_Node_color ( * self) = Type.redblacktree_node_Node_color l2 && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color l1 }
    ensures { [#"../red_black_tree.rs" 400 14 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 399 14 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 398 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : Type.redblacktree_color;
  var _3 : borrowed (Type.redblacktree_node k v);
  var _4 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _5 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _6 : ();
  var _7 : borrowed (Type.redblacktree_color);
  var _8 : borrowed (Type.redblacktree_color);
  var _9 : borrowed (Type.redblacktree_color);
  var _10 : borrowed (Type.redblacktree_color);
  var _11 : borrowed (Type.redblacktree_node k v);
  var _12 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _13 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _14 : ();
  var _15 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- Type.redblacktree_node_Node_color ( * self_1);
    _5 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _5)) b c d e) };
    _4 <- ([#"../red_black_tree.rs" 409 8 31] AsMut0.as_mut _5);
    goto BB1
  }
  BB1 {
    _3 <- ([#"../red_black_tree.rs" 409 8 40] Unwrap0.unwrap _4);
    goto BB2
  }
  BB2 {
    _3 <- { _3 with current = (let Type.RedBlackTree_Node a b c d e =  * _3 in Type.RedBlackTree_Node a _2 c d e) };
    assume { Resolve0.resolve _3 };
    _8 <- borrow_mut (Type.redblacktree_node_Node_color ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a ( ^ _8) c d e) };
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    _13 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _13))) };
    _12 <- ([#"../red_black_tree.rs" 410 45 69] AsMut0.as_mut _13);
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    _11 <- ([#"../red_black_tree.rs" 410 45 78] Unwrap0.unwrap _12);
    goto BB4
  }
  BB4 {
    _10 <- borrow_mut (Type.redblacktree_node_Node_color ( * _11));
    _11 <- { _11 with current = (let Type.RedBlackTree_Node a b c d e =  * _11 in Type.RedBlackTree_Node a ( ^ _10) c d e) };
    assume { Resolve0.resolve _11 };
    _9 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _9) };
    _6 <- ([#"../red_black_tree.rs" 410 8 85] Swap0.swap _7 _9);
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve _8 };
    assume { Resolve2.resolve _10 };
    assert { [#"../red_black_tree.rs" 411 8 64] SameMappings1.same_mappings (Type.redblacktree_node_Node_left ( * self_1)) (Type.redblacktree_node_Node_left ( ^ self_1)) };
    _14 <- ();
    assert { [#"../red_black_tree.rs" 412 8 66] SameMappings1.same_mappings (Type.redblacktree_node_Node_right ( * self_1)) (Type.redblacktree_node_Node_right ( ^ self_1)) };
    _15 <- ();
    assert { [#"../red_black_tree.rs" 413 23 51] BstInvariantHere0.bst_invariant_here ( * self_1) };
    _0 <- ();
    return _0
  }
  
end
module Core_Option_Impl0_AsRef_Interface
  type t
  use Type
  use prelude.Prelude
  val as_ref [@cfg:stackify] (self : Type.core_option_option t) : Type.core_option_option t
    ensures { self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some ( * r) && self = Type.Core_Option_Option_Some ( * r)) }
    ensures { self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None }
    
end
module Core_Option_Impl0_AsRef
  type t
  use Type
  use prelude.Prelude
  val as_ref [@cfg:stackify] (self : Type.core_option_option t) : Type.core_option_option t
    ensures { self = Type.Core_Option_Option_None || (exists r : (borrowed t) . result = Type.Core_Option_Option_Some ( * r) && self = Type.Core_Option_Option_Some ( * r)) }
    ensures { self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None }
    
end
module RedBlackTree_Impl12_Balance_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariant_Interface as ColorInvariant1 with type k = k, type v = v
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val balance [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 421 4 110] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> false}
    requires {[#"../red_black_tree.rs" 419 4 48] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 417 4 47] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self))}
    requires {[#"../red_black_tree.rs" 416 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 441 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 437 4 65] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 432 4 46] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 426 4 65] forall l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && Type.redblacktree_node_Node_color l = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left l) && Color0.color (Type.redblacktree_node_Node_right l) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right l) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 424 4 34] ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 423 14 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 422 14 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    
end
module RedBlackTree_Impl12_Balance
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl12_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl12_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl12_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  let rec cfg balance [@cfg:stackify] [#"../red_black_tree.rs" 442 4 25] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 421 4 110] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> false}
    requires {[#"../red_black_tree.rs" 419 4 48] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 417 4 47] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self))}
    requires {[#"../red_black_tree.rs" 416 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 441 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 437 4 65] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 432 4 46] Color0.color (Type.redblacktree_node_Node_left ( * self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) && Type.redblacktree_node_Node_color ( ^ self) = Type.redblacktree_node_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 426 4 65] forall l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Black && Type.redblacktree_node_Node_color l = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Red && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left l) && Color0.color (Type.redblacktree_node_Node_right l) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right l) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right ( * self)) -> Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 424 4 34] ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left ( * self)) && Color0.color (Type.redblacktree_node_Node_right ( * self)) = Type.RedBlackTree_Color_Black ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 423 14 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 422 14 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : ();
  var _3 : bool;
  var _4 : bool;
  var _5 : Type.redblacktree_tree k v;
  var _6 : bool;
  var _7 : bool;
  var _8 : Type.redblacktree_tree k v;
  var _9 : ();
  var _10 : borrowed (Type.redblacktree_node k v);
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : Type.redblacktree_tree k v;
  var _15 : bool;
  var _16 : Type.redblacktree_tree k v;
  var _17 : Type.redblacktree_node k v;
  var _18 : Type.core_option_option (Type.redblacktree_node k v);
  var _19 : Type.core_option_option (Type.redblacktree_node k v);
  var _20 : ();
  var _21 : borrowed (Type.redblacktree_node k v);
  var _22 : bool;
  var _23 : bool;
  var _24 : Type.redblacktree_tree k v;
  var _25 : bool;
  var _26 : Type.redblacktree_tree k v;
  var _27 : ();
  var _28 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- Type.redblacktree_node_Node_right ( * self_1);
    _4 <- ([#"../red_black_tree.rs" 443 11 30] IsRed0.is_red _5);
    goto BB4
  }
  BB1 {
    _3 <- false;
    goto BB3
  }
  BB2 {
    _8 <- Type.redblacktree_node_Node_left ( * self_1);
    _7 <- ([#"../red_black_tree.rs" 443 35 53] IsRed0.is_red _8);
    goto BB5
  }
  BB3 {
    switch (_3)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB4 {
    switch (_4)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB5 {
    _6 <- not _7;
    _3 <- _6;
    goto BB3
  }
  BB6 {
    _10 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _10) };
    _9 <- ([#"../red_black_tree.rs" 445 12 30] RotateLeft0.rotate_left _10);
    goto BB7
  }
  BB7 {
    _2 <- ();
    goto BB9
  }
  BB8 {
    _2 <- ();
    goto BB9
  }
  BB9 {
    _14 <- Type.redblacktree_node_Node_left ( * self_1);
    _13 <- ([#"../red_black_tree.rs" 449 11 29] IsRed0.is_red _14);
    goto BB13
  }
  BB10 {
    _12 <- false;
    goto BB12
  }
  BB11 {
    _19 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1));
    _18 <- ([#"../red_black_tree.rs" 449 33 56] AsRef0.as_ref _19);
    goto BB14
  }
  BB12 {
    switch (_12)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    switch (_13)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _17 <- ([#"../red_black_tree.rs" 449 33 65] Unwrap0.unwrap _18);
    goto BB15
  }
  BB15 {
    _16 <- Type.redblacktree_node_Node_left _17;
    assume { Resolve0.resolve _17 };
    _15 <- ([#"../red_black_tree.rs" 449 33 79] IsRed0.is_red _16);
    goto BB16
  }
  BB16 {
    _12 <- _15;
    goto BB12
  }
  BB17 {
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _20 <- ([#"../red_black_tree.rs" 450 12 31] RotateRight0.rotate_right _21);
    goto BB18
  }
  BB18 {
    _11 <- ();
    goto BB20
  }
  BB19 {
    _11 <- ();
    goto BB20
  }
  BB20 {
    _24 <- Type.redblacktree_node_Node_left ( * self_1);
    _23 <- ([#"../red_black_tree.rs" 453 11 29] IsRed0.is_red _24);
    goto BB24
  }
  BB21 {
    _22 <- false;
    goto BB23
  }
  BB22 {
    _26 <- Type.redblacktree_node_Node_right ( * self_1);
    _25 <- ([#"../red_black_tree.rs" 453 33 52] IsRed0.is_red _26);
    goto BB25
  }
  BB23 {
    switch (_22)
      | False -> goto BB28
      | _ -> goto BB26
      end
  }
  BB24 {
    switch (_23)
      | False -> goto BB21
      | _ -> goto BB22
      end
  }
  BB25 {
    _22 <- _25;
    goto BB23
  }
  BB26 {
    _28 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _28) };
    _27 <- ([#"../red_black_tree.rs" 454 12 30] FlipColors0.flip_colors _28);
    goto BB27
  }
  BB27 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB28 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
module RedBlackTree_Impl12_MoveRedLeft_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant1 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val move_red_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 462 15 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 461 4 93] exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Black}
    requires {[#"../red_black_tree.rs" 460 15 35] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red}
    requires {[#"../red_black_tree.rs" 459 15 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 458 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 472 14 42] LeLog0.le_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 469 4 79] Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Black -> Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 466 4 90] Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant ( ^ self) && (exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Red) }
    ensures { [#"../red_black_tree.rs" 465 14 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 464 14 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 463 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
end
module RedBlackTree_Impl12_MoveRedLeft
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_node k v)
  clone RedBlackTree_Impl12_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl12_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl12_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg move_red_left [@cfg:stackify] [#"../red_black_tree.rs" 475 4 31] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {[#"../red_black_tree.rs" 462 15 41] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 461 4 93] exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_Some l && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Black}
    requires {[#"../red_black_tree.rs" 460 15 35] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red}
    requires {[#"../red_black_tree.rs" 459 15 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 458 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 472 14 42] LeLog0.le_log (Model0.model (Type.redblacktree_node_Node_key ( * self))) (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 469 4 79] Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Black -> Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red && ColorInvariant1.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 466 4 90] Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red -> ColorInvariant0.color_invariant ( ^ self) && (exists l : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( ^ self)) = Type.Core_Option_Option_Some l && Color0.color (Type.redblacktree_node_Node_left l) = Type.RedBlackTree_Color_Red) }
    ensures { [#"../red_black_tree.rs" 465 14 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 464 14 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 463 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  ghost var old_self_2 : borrowed (Type.redblacktree_node k v);
  var _3 : ();
  var _4 : ();
  var _5 : borrowed (Type.redblacktree_node k v);
  var _6 : bool;
  var _7 : Type.redblacktree_tree k v;
  var _8 : borrowed (Type.redblacktree_node k v);
  var _9 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _10 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _11 : ();
  var _12 : borrowed (Type.redblacktree_node k v);
  var _13 : borrowed (Type.redblacktree_node k v);
  var _14 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _15 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var _19 : borrowed (Type.redblacktree_node k v);
  var _20 : ();
  var _21 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 476 23 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _5 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _5) };
    _4 <- ([#"../red_black_tree.rs" 477 8 26] FlipColors0.flip_colors _5);
    goto BB2
  }
  BB2 {
    _10 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _10))) };
    _9 <- ([#"../red_black_tree.rs" 478 11 35] AsMut0.as_mut _10);
    goto BB3
  }
  BB3 {
    _8 <- ([#"../red_black_tree.rs" 478 11 44] Unwrap0.unwrap _9);
    goto BB4
  }
  BB4 {
    _7 <- Type.redblacktree_node_Node_left ( * _8);
    assume { Resolve1.resolve _8 };
    _6 <- ([#"../red_black_tree.rs" 478 11 58] IsRed0.is_red _7);
    goto BB5
  }
  BB5 {
    switch (_6)
      | False -> goto BB12
      | _ -> goto BB6
      end
  }
  BB6 {
    _15 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _15))) };
    _14 <- ([#"../red_black_tree.rs" 479 12 36] AsMut0.as_mut _15);
    goto BB7
  }
  BB7 {
    _13 <- ([#"../red_black_tree.rs" 479 12 45] Unwrap0.unwrap _14);
    goto BB8
  }
  BB8 {
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    _11 <- ([#"../red_black_tree.rs" 479 12 60] RotateRight0.rotate_right _12);
    goto BB9
  }
  BB9 {
    assume { Resolve1.resolve _13 };
    assert { [#"../red_black_tree.rs" 480 28 57] SameMappings0.same_mappings ( * old_self_2) ( * self_1) };
    _16 <- ();
    assert { [#"../red_black_tree.rs" 481 12 94] forall h : (int) . HasHeight0.has_height ( * old_self_2) h -> HasHeight0.has_height ( * self_1) h };
    _17 <- ();
    _19 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _19) };
    _18 <- ([#"../red_black_tree.rs" 482 12 30] RotateLeft0.rotate_left _19);
    goto BB10
  }
  BB10 {
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _20 <- ([#"../red_black_tree.rs" 483 12 30] FlipColors0.flip_colors _21);
    goto BB11
  }
  BB11 {
    assume { Resolve2.resolve self_1 };
    _0 <- ();
    goto BB13
  }
  BB12 {
    assume { Resolve2.resolve self_1 };
    _0 <- ();
    goto BB13
  }
  BB13 {
    return _0
  }
  
end
module RedBlackTree_Impl12_MoveRedRight_Interface
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant1 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  val move_red_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : bool
    requires {[#"../red_black_tree.rs" 491 4 94] exists r : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r && Color0.color (Type.redblacktree_node_Node_left r) = Type.RedBlackTree_Color_Black}
    requires {[#"../red_black_tree.rs" 490 15 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 489 15 35] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red}
    requires {[#"../red_black_tree.rs" 488 15 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 487 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 500 4 75] result -> Type.redblacktree_node_Node_key ( ^ self) = Type.redblacktree_node_Node_key ( * self) && Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 497 4 91] not result -> LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) (Model0.model (Type.redblacktree_node_Node_key ( * self))) && Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Black && (exists r : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r && Color0.color (Type.redblacktree_node_Node_left r) = Type.RedBlackTree_Color_Red) }
    ensures { [#"../red_black_tree.rs" 496 4 47] ColorInvariant1.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 495 4 46] ColorInvariant1.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 494 14 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 493 14 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 492 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
end
module RedBlackTree_Impl12_MoveRedRight
  type k
  type v
  use Type
  use mach.int.Int
  use prelude.Prelude
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl12_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl12_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl12_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight0.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg move_red_right [@cfg:stackify] [#"../red_black_tree.rs" 504 4 40] (self : borrowed (Type.redblacktree_node k v)) : bool
    requires {[#"../red_black_tree.rs" 491 4 94] exists r : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_Some r && Color0.color (Type.redblacktree_node_Node_left r) = Type.RedBlackTree_Color_Black}
    requires {[#"../red_black_tree.rs" 490 15 40] Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) <> Type.Core_Option_Option_None}
    requires {[#"../red_black_tree.rs" 489 15 35] Type.redblacktree_node_Node_color ( * self) = Type.RedBlackTree_Color_Red}
    requires {[#"../red_black_tree.rs" 488 15 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 487 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 500 4 75] result -> Type.redblacktree_node_Node_key ( ^ self) = Type.redblacktree_node_Node_key ( * self) && Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Red }
    ensures { [#"../red_black_tree.rs" 497 4 91] not result -> LtLog0.lt_log (Model0.model (Type.redblacktree_node_Node_key ( ^ self))) (Model0.model (Type.redblacktree_node_Node_key ( * self))) && Type.redblacktree_node_Node_color ( ^ self) = Type.RedBlackTree_Color_Red && Color0.color (Type.redblacktree_node_Node_left ( ^ self)) = Type.RedBlackTree_Color_Black && Color0.color (Type.redblacktree_node_Node_right ( ^ self)) = Type.RedBlackTree_Color_Black && (exists r : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( ^ self)) = Type.Core_Option_Option_Some r && Color0.color (Type.redblacktree_node_Node_left r) = Type.RedBlackTree_Color_Red) }
    ensures { [#"../red_black_tree.rs" 496 4 47] ColorInvariant1.color_invariant (Type.redblacktree_node_Node_right ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 495 4 46] ColorInvariant1.color_invariant (Type.redblacktree_node_Node_left ( ^ self)) }
    ensures { [#"../red_black_tree.rs" 494 14 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 493 14 37] BstInvariant0.bst_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 492 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    
   =
  var _0 : bool;
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : ();
  var _3 : borrowed (Type.redblacktree_node k v);
  var _4 : ();
  var _5 : bool;
  var _6 : Type.redblacktree_tree k v;
  var _7 : borrowed (Type.redblacktree_node k v);
  var _8 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _9 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _10 : ();
  var _11 : borrowed (Type.redblacktree_node k v);
  var _12 : ();
  var _13 : borrowed (Type.redblacktree_node k v);
  var _14 : ();
  var _15 : borrowed (Type.redblacktree_node k v);
  var _16 : borrowed (Type.redblacktree_node k v);
  var _17 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _18 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _19 : ();
  var _20 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _3) };
    _2 <- ([#"../red_black_tree.rs" 505 8 26] FlipColors0.flip_colors _3);
    goto BB1
  }
  BB1 {
    _9 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _9)) b c d e) };
    _8 <- ([#"../red_black_tree.rs" 508 11 34] AsMut0.as_mut _9);
    goto BB2
  }
  BB2 {
    _7 <- ([#"../red_black_tree.rs" 508 11 43] Unwrap0.unwrap _8);
    goto BB3
  }
  BB3 {
    _6 <- Type.redblacktree_node_Node_left ( * _7);
    assume { Resolve0.resolve _7 };
    _5 <- ([#"../red_black_tree.rs" 508 11 57] IsRed0.is_red _6);
    goto BB4
  }
  BB4 {
    switch (_5)
      | False -> goto BB11
      | _ -> goto BB5
      end
  }
  BB5 {
    _11 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _11) };
    _10 <- ([#"../red_black_tree.rs" 510 12 31] RotateRight0.rotate_right _11);
    goto BB6
  }
  BB6 {
    _13 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _13) };
    _12 <- ([#"../red_black_tree.rs" 512 12 30] FlipColors0.flip_colors _13);
    goto BB7
  }
  BB7 {
    _18 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _18))) };
    _17 <- ([#"../red_black_tree.rs" 514 12 36] AsMut0.as_mut _18);
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve self_1 };
    _16 <- ([#"../red_black_tree.rs" 514 12 45] Unwrap0.unwrap _17);
    goto BB9
  }
  BB9 {
    _15 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _15) };
    _14 <- ([#"../red_black_tree.rs" 514 12 59] RotateLeft0.rotate_left _15);
    goto BB10
  }
  BB10 {
    assume { Resolve0.resolve _16 };
    _0 <- false;
    goto BB12
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    _4 <- ();
    _0 <- true;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module RedBlackTree_Impl13_New_Interface
  type k
  type v
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val new [@cfg:stackify] (_ : ()) : Type.redblacktree_tree k v
    ensures { [#"../red_black_tree.rs" 528 14 32] Invariant0.invariant' result }
    ensures { [#"../red_black_tree.rs" 527 14 43] Model0.model result = Const.const (Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl13_New
  type k
  type v
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg new [@cfg:stackify] [#"../red_black_tree.rs" 529 4 30] (_ : ()) : Type.redblacktree_tree k v
    ensures { [#"../red_black_tree.rs" 528 14 32] Invariant0.invariant' result }
    ensures { [#"../red_black_tree.rs" 527 14 43] Model0.model result = Const.const (Type.Core_Option_Option_None) }
    
   =
  var _0 : Type.redblacktree_tree k v;
  var _1 : Type.core_option_option (Type.redblacktree_node k v);
  {
    goto BB0
  }
  BB0 {
    _1 <- Type.Core_Option_Option_None;
    _0 <- Type.RedBlackTree_Tree _1;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module Core_Cmp_Ord_Cmp_Interface
  type self
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module Core_Cmp_Ord_Cmp
  type self
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module RedBlackTree_Impl13_InsertRec_Interface
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  val insert_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 534 15 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 533 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 541 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 540 4 111] forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key || HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 539 14 44] HasMapping0.has_mapping ( ^ self) (Model0.model key) val' }
    ensures { [#"../red_black_tree.rs" 538 4 70] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 536 4 75] exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( ^ self) = Type.Core_Option_Option_Some node && Color0.color (Type.redblacktree_node_Node_right node) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left node) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right node) }
    ensures { [#"../red_black_tree.rs" 535 14 37] BstInvariant0.bst_invariant ( ^ self) }
    
end
module RedBlackTree_Impl13_InsertRec
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_tree k v
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model1.model,
  function Model1.model = Model0.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl12_Balance_Interface as Balance0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate ColorInvariant1.color_invariant = ColorInvariant1.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg insert_rec [@cfg:stackify] [#"../red_black_tree.rs" 542 4 44] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 534 15 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 533 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 541 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 540 4 111] forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key || HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 539 14 44] HasMapping0.has_mapping ( ^ self) (Model0.model key) val' }
    ensures { [#"../red_black_tree.rs" 538 4 70] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 536 4 75] exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( ^ self) = Type.Core_Option_Option_Some node && Color0.color (Type.redblacktree_node_Node_right node) = Type.RedBlackTree_Color_Black && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_left node) && ColorInvariant0.color_invariant (Type.redblacktree_node_Node_right node) }
    ensures { [#"../red_black_tree.rs" 535 14 37] BstInvariant0.bst_invariant ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var _4 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _5 : isize;
  var _6 : ();
  var _7 : Type.core_option_option (Type.redblacktree_node k v);
  var _8 : Type.redblacktree_node k v;
  var _9 : Type.redblacktree_node k v;
  var _10 : Type.redblacktree_tree k v;
  var _11 : Type.core_option_option (Type.redblacktree_node k v);
  var _12 : Type.redblacktree_color;
  var _13 : k;
  var _14 : v;
  var _15 : Type.redblacktree_tree k v;
  var _16 : Type.core_option_option (Type.redblacktree_node k v);
  var node_17 : borrowed (Type.redblacktree_node k v);
  var _18 : ();
  var _19 : Type.core_cmp_ordering;
  var _20 : k;
  var _21 : k;
  var _22 : k;
  var _23 : int8;
  var _24 : borrowed (Type.redblacktree_tree k v);
  var _25 : k;
  var _26 : v;
  var _27 : ();
  var _28 : v;
  var _29 : borrowed (Type.redblacktree_tree k v);
  var _30 : k;
  var _31 : v;
  var _32 : ();
  var _33 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _4 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _4)) };
    switch ( * _4)
      | Type.Core_Option_Option_None -> goto BB5
      | Type.Core_Option_Option_Some _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    node_17 <- borrow_mut (Type.core_option_option_Some_0 ( * _4));
    _4 <- { _4 with current = (let Type.Core_Option_Option_Some a =  * _4 in Type.Core_Option_Option_Some ( ^ node_17)) };
    assume { Resolve3.resolve _4 };
    _20 <- key_2;
    _22 <- Type.redblacktree_node_Node_key ( * node_17);
    _21 <- _22;
    assume { Resolve4.resolve _22 };
    _19 <- ([#"../red_black_tree.rs" 555 22 40] Cmp0.cmp _20 _21);
    goto BB16
  }
  BB4 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve val'_3 };
    assume { Resolve3.resolve _4 };
    absurd
  }
  BB5 {
    assume { Resolve3.resolve _4 };
    _11 <- Type.Core_Option_Option_None;
    _10 <- Type.RedBlackTree_Tree _11;
    goto BB6
  }
  BB6 {
    _12 <- Type.RedBlackTree_Color_Red;
    assume { Resolve1.resolve _13 };
    _13 <- key_2;
    assume { Resolve2.resolve _14 };
    _14 <- val'_3;
    _16 <- Type.Core_Option_Option_None;
    _15 <- Type.RedBlackTree_Tree _16;
    goto BB7
  }
  BB7 {
    _9 <- Type.RedBlackTree_Node _10 _12 _13 _14 _15;
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    _8 <- _9;
    goto BB12
  }
  BB12 {
    _7 <- Type.Core_Option_Option_Some _8;
    goto BB13
  }
  BB13 {
    assume { Resolve6.resolve (Type.redblacktree_tree_Tree_node ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree _7) };
    goto BB14
  }
  BB14 {
    assume { Resolve0.resolve self_1 };
    goto BB15
  }
  BB15 {
    _0 <- ();
    goto BB28
  }
  BB16 {
    switch (_19)
      | Type.Core_Cmp_Ordering_Less -> goto BB19
      | Type.Core_Cmp_Ordering_Equal -> goto BB21
      | Type.Core_Cmp_Ordering_Greater -> goto BB17
      end
  }
  BB17 {
    _29 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_17));
    node_17 <- { node_17 with current = (let Type.RedBlackTree_Node a b c d e =  * node_17 in Type.RedBlackTree_Node a b c d ( ^ _29)) };
    assume { Resolve1.resolve _30 };
    _30 <- key_2;
    assume { Resolve2.resolve _31 };
    _31 <- val'_3;
    _18 <- ([#"../red_black_tree.rs" 561 31 62] insert_rec _29 _30 _31);
    goto BB24
  }
  BB18 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve val'_3 };
    assume { Resolve5.resolve node_17 };
    absurd
  }
  BB19 {
    _24 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_17));
    node_17 <- { node_17 with current = (let Type.RedBlackTree_Node a b c d e =  * node_17 in Type.RedBlackTree_Node ( ^ _24) b c d e) };
    assume { Resolve1.resolve _25 };
    _25 <- key_2;
    assume { Resolve2.resolve _26 };
    _26 <- val'_3;
    _18 <- ([#"../red_black_tree.rs" 556 28 58] insert_rec _24 _25 _26);
    goto BB20
  }
  BB20 {
    goto BB25
  }
  BB21 {
    assume { Resolve2.resolve _28 };
    _28 <- val'_3;
    assume { Resolve2.resolve (Type.redblacktree_node_Node_val ( * node_17)) };
    node_17 <- { node_17 with current = (let Type.RedBlackTree_Node a b c d e =  * node_17 in Type.RedBlackTree_Node a b c _28 e) };
    goto BB22
  }
  BB22 {
    assume { Resolve5.resolve node_17 };
    goto BB23
  }
  BB23 {
    _0 <- ();
    goto BB28
  }
  BB24 {
    goto BB25
  }
  BB25 {
    _33 <- borrow_mut ( * node_17);
    node_17 <- { node_17 with current = ( ^ _33) };
    _32 <- ([#"../red_black_tree.rs" 563 16 30] Balance0.balance _33);
    goto BB26
  }
  BB26 {
    assume { Resolve5.resolve node_17 };
    _0 <- ();
    goto BB27
  }
  BB27 {
    goto BB30
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    return _0
  }
  
end
module RedBlackTree_Impl13_Insert_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val insert [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 568 15 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 570 14 53] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_Some val') }
    ensures { [#"../red_black_tree.rs" 569 14 33] Invariant0.invariant' ( ^ self) }
    
end
module RedBlackTree_Impl13_Insert
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_tree k v
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  clone RedBlackTree_Impl13_InsertRec_Interface as InsertRec0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasHeight0.has_height = HasHeight0.has_height, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Color0.color = Color0.color, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg insert [@cfg:stackify] [#"../red_black_tree.rs" 571 4 44] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 568 15 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 570 14 53] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_Some val') }
    ensures { [#"../red_black_tree.rs" 569 14 33] Invariant0.invariant' ( ^ self) }
    
   =
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var val'_3 : v;
  ghost var old_self_4 : borrowed (Type.redblacktree_tree k v);
  var _5 : ();
  var _6 : ();
  var _7 : borrowed (Type.redblacktree_tree k v);
  var _8 : k;
  var _9 : v;
  var _10 : Type.redblacktree_color;
  var _11 : borrowed (Type.redblacktree_node k v);
  var _12 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _13 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _14 : ();
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _5 <- ();
    old_self_4 <- ghost ([#"../red_black_tree.rs" 572 23 38] self_1);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve old_self_4 };
    _7 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _7) };
    assume { Resolve1.resolve _8 };
    _8 <- key_2;
    assume { Resolve2.resolve _9 };
    _9 <- val'_3;
    _6 <- ([#"../red_black_tree.rs" 573 8 33] InsertRec0.insert_rec _7 _8 _9);
    goto BB3
  }
  BB3 {
    _10 <- Type.RedBlackTree_Color_Black;
    _13 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _13)) };
    _12 <- ([#"../red_black_tree.rs" 574 8 26] AsMut0.as_mut _13);
    goto BB4
  }
  BB4 {
    assume { Resolve3.resolve self_1 };
    _11 <- ([#"../red_black_tree.rs" 574 8 35] Unwrap0.unwrap _12);
    goto BB5
  }
  BB5 {
    _11 <- { _11 with current = (let Type.RedBlackTree_Node a b c d e =  * _11 in Type.RedBlackTree_Node a _10 c d e) };
    assume { Resolve4.resolve _11 };
    assert { [#"../red_black_tree.rs" 575 8 58] forall h : (int) . HasHeight0.has_height ( * old_self_4) h -> HasHeight0.has_height ( * self_1) h || HasHeight0.has_height ( * self_1) (h + 1) };
    _14 <- ();
    assert { [#"../red_black_tree.rs" 577 24 67] let _ = HasMappingModel0.has_mapping_model ( * self_1) (Model1.model key_2) in true };
    goto BB6
  }
  BB6 {
    _0 <- ();
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) && Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module RedBlackTree_Impl13_DeleteMinRec_Interface
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  val delete_min_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 584 4 53] exists h : (int) . HasHeight0.has_height ( * self) h}
    requires {[#"../red_black_tree.rs" 582 4 64] exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( * self) = Type.Core_Option_Option_Some node && (Type.redblacktree_node_Node_color node = Type.RedBlackTree_Color_Red || Color0.color (Type.redblacktree_node_Node_left node) = Type.RedBlackTree_Color_Red)}
    requires {[#"../red_black_tree.rs" 581 15 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 580 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 594 4 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    ensures { [#"../red_black_tree.rs" 593 14 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 592 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 590 4 59] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v -> Model0.model (let (a, _) = result in a) <> k && HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 588 4 59] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> Model0.model (let (a, _) = result in a) = k || HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 587 4 88] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (Model0.model (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 586 14 54] HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 585 14 37] BstInvariant0.bst_invariant ( ^ self) }
    
end
module RedBlackTree_Impl13_DeleteMinRec
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve6.resolve, predicate Resolve1.resolve = Resolve7.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl12_Balance_Interface as Balance0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate ColorInvariant1.color_invariant = ColorInvariant1.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl12_MoveRedLeft_Interface as MoveRedLeft0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant, function Model0.model = Model0.model,
  predicate LeLog0.le_log = LeLog0.le_log, predicate ColorInvariant1.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight1.has_height, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg delete_min_rec [@cfg:stackify] [#"../red_black_tree.rs" 595 4 42] (self : borrowed (Type.redblacktree_tree k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 584 4 53] exists h : (int) . HasHeight0.has_height ( * self) h}
    requires {[#"../red_black_tree.rs" 582 4 64] exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( * self) = Type.Core_Option_Option_Some node && (Type.redblacktree_node_Node_color node = Type.RedBlackTree_Color_Red || Color0.color (Type.redblacktree_node_Node_left node) = Type.RedBlackTree_Color_Red)}
    requires {[#"../red_black_tree.rs" 581 15 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 580 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 594 4 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    ensures { [#"../red_black_tree.rs" 593 14 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 592 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 590 4 59] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v -> Model0.model (let (a, _) = result in a) <> k && HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 588 4 59] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> Model0.model (let (a, _) = result in a) = k || HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 587 4 88] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (Model0.model (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 586 14 54] HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 585 14 37] BstInvariant0.bst_invariant ( ^ self) }
    
   =
  var _0 : (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  ghost var old_self_2 : borrowed (Type.redblacktree_tree k v);
  var _3 : ();
  var node_4 : borrowed (Type.redblacktree_node k v);
  var _5 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _6 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _7 : ();
  var _8 : isize;
  var node_9 : Type.redblacktree_node k v;
  var _10 : Type.core_option_option (Type.redblacktree_node k v);
  var _11 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _12 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _13 : ();
  var _14 : k;
  var _15 : v;
  var _16 : ();
  var _17 : bool;
  var _18 : bool;
  var _19 : bool;
  var _20 : Type.redblacktree_tree k v;
  var _21 : bool;
  var _22 : bool;
  var _23 : Type.redblacktree_tree k v;
  var _24 : Type.redblacktree_node k v;
  var _25 : Type.core_option_option (Type.redblacktree_node k v);
  var _26 : Type.core_option_option (Type.redblacktree_node k v);
  var _27 : ();
  var _28 : borrowed (Type.redblacktree_node k v);
  var _29 : ();
  var r_30 : (k, v);
  var _31 : borrowed (Type.redblacktree_tree k v);
  var _32 : ();
  var _33 : ();
  var _34 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 596 23 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _6 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _6)) };
    _5 <- ([#"../red_black_tree.rs" 597 19 37] AsMut0.as_mut _6);
    goto BB2
  }
  BB2 {
    node_4 <- ([#"../red_black_tree.rs" 597 19 46] Unwrap0.unwrap _5);
    goto BB3
  }
  BB3 {
    switch (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_4)))
      | Type.Core_Option_Option_None -> goto BB4
      | _ -> goto BB9
      end
  }
  BB4 {
    assume { Resolve3.resolve node_4 };
    _12 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _12)) };
    assume { Resolve1.resolve self_1 };
    _11 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    _10 <- ([#"../red_black_tree.rs" 599 23 53] Take0.take _11);
    goto BB5
  }
  BB5 {
    assume { Resolve5.resolve _12 };
    node_9 <- ([#"../red_black_tree.rs" 599 23 62] Unwrap2.unwrap _10);
    goto BB6
  }
  BB6 {
    assume { Resolve6.resolve _14 };
    _14 <- Type.redblacktree_node_Node_key node_9;
    assume { Resolve7.resolve _15 };
    _15 <- Type.redblacktree_node_Node_val node_9;
    _0 <- (_14, _15);
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB24
  }
  BB9 {
    assume { Resolve1.resolve self_1 };
    _7 <- ();
    _20 <- Type.redblacktree_node_Node_left ( * node_4);
    _19 <- ([#"../red_black_tree.rs" 602 12 30] IsRed0.is_red _20);
    goto BB13
  }
  BB10 {
    _17 <- false;
    goto BB12
  }
  BB11 {
    _26 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_4));
    _25 <- ([#"../red_black_tree.rs" 602 35 58] AsRef0.as_ref _26);
    goto BB14
  }
  BB12 {
    switch (_17)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    _18 <- not _19;
    switch (_18)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _24 <- ([#"../red_black_tree.rs" 602 35 67] Unwrap1.unwrap _25);
    goto BB15
  }
  BB15 {
    _23 <- Type.redblacktree_node_Node_left _24;
    assume { Resolve2.resolve _24 };
    _22 <- ([#"../red_black_tree.rs" 602 35 81] IsRed0.is_red _23);
    goto BB16
  }
  BB16 {
    _21 <- not _22;
    _17 <- _21;
    goto BB12
  }
  BB17 {
    _28 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _28) };
    _27 <- ([#"../red_black_tree.rs" 603 12 32] MoveRedLeft0.move_red_left _28);
    goto BB18
  }
  BB18 {
    _16 <- ();
    goto BB20
  }
  BB19 {
    _16 <- ();
    goto BB20
  }
  BB20 {
    assert { [#"../red_black_tree.rs" 605 8 87] forall h : (int) . HasHeight0.has_height ( * old_self_2) h -> HasHeight1.has_height ( * node_4) h };
    _29 <- ();
    _31 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node ( ^ _31) b c d e) };
    r_30 <- ([#"../red_black_tree.rs" 606 16 42] delete_min_rec _31);
    goto BB21
  }
  BB21 {
    assert { [#"../red_black_tree.rs" 607 8 87] forall h : (int) . HasHeight0.has_height ( * old_self_2) h -> HasHeight1.has_height ( * node_4) h };
    _32 <- ();
    _34 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _34) };
    _33 <- ([#"../red_black_tree.rs" 608 8 22] Balance0.balance _34);
    goto BB22
  }
  BB22 {
    assume { Resolve3.resolve node_4 };
    assume { Resolve4.resolve _0 };
    _0 <- r_30;
    goto BB23
  }
  BB23 {
    goto BB25
  }
  BB24 {
    assume { Resolve8.resolve node_9 };
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
module RedBlackTree_Impl13_DeleteMin_Interface
  type k
  type v
  use Type
  use map.Map
  use map.Const
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val delete_min [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 612 15 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 615 4 48] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Type.Core_Option_Option_Some v && (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Type.Core_Option_Option_None || LeLog0.le_log (Model1.model k) k2) && Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 614 4 83] result = Type.Core_Option_Option_None -> Model0.model ( ^ self) = Model0.model ( * self) && Model0.model ( * self) = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 613 14 33] Invariant0.invariant' ( ^ self) }
    
end
module RedBlackTree_Impl13_DeleteMin
  type k
  type v
  use Type
  use map.Map
  use map.Const
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve5.resolve, predicate Resolve1.resolve = Resolve6.resolve
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl13_DeleteMinRec_Interface as DeleteMinRec0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Color0.color = Color0.color,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model1.model,
  predicate LeLog0.le_log = LeLog0.le_log, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg delete_min [@cfg:stackify] [#"../red_black_tree.rs" 619 4 50] (self : borrowed (Type.redblacktree_tree k v)) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 612 15 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 615 4 48] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Type.Core_Option_Option_Some v && (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Type.Core_Option_Option_None || LeLog0.le_log (Model1.model k) k2) && Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 614 4 83] result = Type.Core_Option_Option_None -> Model0.model ( ^ self) = Model0.model ( * self) && Model0.model ( * self) = Const.const (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 613 14 33] Invariant0.invariant' ( ^ self) }
    
   =
  var _0 : Type.core_option_option (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  ghost var old_self_2 : borrowed (Type.redblacktree_tree k v);
  var _3 : ();
  var _4 : ();
  var _5 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _6 : isize;
  var _7 : ();
  var node_8 : borrowed (Type.redblacktree_node k v);
  var _9 : bool;
  var _10 : bool;
  var _11 : bool;
  var _12 : Type.redblacktree_tree k v;
  var _13 : bool;
  var _14 : bool;
  var _15 : Type.redblacktree_tree k v;
  var _16 : Type.redblacktree_color;
  var _17 : ();
  var _18 : ();
  var r_19 : (k, v);
  var _20 : borrowed (Type.redblacktree_tree k v);
  var _21 : ();
  var _22 : bool;
  var _23 : Type.redblacktree_tree k v;
  var _24 : Type.redblacktree_color;
  var _25 : borrowed (Type.redblacktree_node k v);
  var _26 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _27 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _28 : ();
  var _29 : ();
  var _30 : (k, v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 620 23 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _5 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _5)) };
    switch ( * _5)
      | Type.Core_Option_Option_None -> goto BB4
      | Type.Core_Option_Option_Some _ -> goto BB2
      end
  }
  BB2 {
    node_8 <- borrow_mut (Type.core_option_option_Some_0 ( * _5));
    _5 <- { _5 with current = (let Type.Core_Option_Option_Some a =  * _5 in Type.Core_Option_Option_Some ( ^ node_8)) };
    assume { Resolve2.resolve _5 };
    _12 <- Type.redblacktree_node_Node_left ( * node_8);
    _11 <- ([#"../red_black_tree.rs" 624 20 38] IsRed0.is_red _12);
    goto BB8
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve _5 };
    absurd
  }
  BB4 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve _5 };
    _0 <- Type.Core_Option_Option_None;
    goto BB23
  }
  BB5 {
    _9 <- false;
    goto BB7
  }
  BB6 {
    _15 <- Type.redblacktree_node_Node_right ( * node_8);
    _14 <- ([#"../red_black_tree.rs" 624 43 62] IsRed0.is_red _15);
    goto BB9
  }
  BB7 {
    switch (_9)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB8 {
    _10 <- not _11;
    switch (_10)
      | False -> goto BB5
      | _ -> goto BB6
      end
  }
  BB9 {
    _13 <- not _14;
    _9 <- _13;
    goto BB7
  }
  BB10 {
    _16 <- Type.RedBlackTree_Color_Red;
    node_8 <- { node_8 with current = (let Type.RedBlackTree_Node a b c d e =  * node_8 in Type.RedBlackTree_Node a _16 c d e) };
    assume { Resolve3.resolve node_8 };
    _4 <- ();
    goto BB12
  }
  BB11 {
    assume { Resolve3.resolve node_8 };
    _4 <- ();
    goto BB12
  }
  BB12 {
    assert { [#"../red_black_tree.rs" 628 8 77] forall h : (int) . HasHeight0.has_height ( * old_self_2) h -> Color0.color ( * self_1) = Type.RedBlackTree_Color_Black || HasHeight0.has_height ( * self_1) (h - 1) };
    _17 <- ();
    assert { [#"../red_black_tree.rs" 630 24 53] SameMappings0.same_mappings ( * old_self_2) ( * self_1) };
    _18 <- ();
    _20 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _20) };
    r_19 <- ([#"../red_black_tree.rs" 631 16 37] DeleteMinRec0.delete_min_rec _20);
    goto BB13
  }
  BB13 {
    _23 <-  * self_1;
    _22 <- ([#"../red_black_tree.rs" 632 11 24] IsRed0.is_red _23);
    goto BB14
  }
  BB14 {
    switch (_22)
      | False -> goto BB18
      | _ -> goto BB15
      end
  }
  BB15 {
    _24 <- Type.RedBlackTree_Color_Black;
    _27 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _27)) };
    _26 <- ([#"../red_black_tree.rs" 632 27 45] AsMut0.as_mut _27);
    goto BB16
  }
  BB16 {
    assume { Resolve1.resolve self_1 };
    _25 <- ([#"../red_black_tree.rs" 632 27 54] Unwrap0.unwrap _26);
    goto BB17
  }
  BB17 {
    _25 <- { _25 with current = (let Type.RedBlackTree_Node a b c d e =  * _25 in Type.RedBlackTree_Node a _24 c d e) };
    assume { Resolve3.resolve _25 };
    _21 <- ();
    goto BB19
  }
  BB18 {
    assume { Resolve1.resolve self_1 };
    _21 <- ();
    goto BB19
  }
  BB19 {
    assert { [#"../red_black_tree.rs" 633 8 74] forall h : (int) . HasHeight0.has_height ( * old_self_2) h -> HasHeight0.has_height ( * self_1) h || HasHeight0.has_height ( * self_1) (h - 1) };
    _28 <- ();
    assert { [#"../red_black_tree.rs" 635 24 67] let _ = HasMappingModel0.has_mapping_model ( * self_1) (Model1.model (let (a, _) = r_19 in a)) in true };
    goto BB20
  }
  BB20 {
    _29 <- ();
    assume { Resolve4.resolve _30 };
    _30 <- r_19;
    _0 <- Type.Core_Option_Option_Some _30;
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    goto BB23
  }
  BB23 {
    return _0
  }
  
end
module Core_Option_Impl0_IsNone_Interface
  type t
  use Type
  use prelude.Prelude
  val is_none [@cfg:stackify] (self : Type.core_option_option t) : bool
    ensures { result = (self = Type.Core_Option_Option_None) }
    
end
module Core_Option_Impl0_IsNone
  type t
  use Type
  use prelude.Prelude
  val is_none [@cfg:stackify] (self : Type.core_option_option t) : bool
    ensures { result = (self = Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl13_DeleteRec_Interface
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl6_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_HasHeightRec_Interface as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight_Interface as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight_Interface as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  val delete_rec [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 643 4 53] exists h : (int) . HasHeight0.has_height ( * self) h}
    requires {[#"../red_black_tree.rs" 641 4 92] Color0.color ( * self) = Type.RedBlackTree_Color_Red || (exists n : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( * self) = Type.Core_Option_Option_Some n && Color0.color (Type.redblacktree_node_Node_left n) = Type.RedBlackTree_Color_Red)}
    requires {[#"../red_black_tree.rs" 640 15 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 639 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 654 4 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    ensures { [#"../red_black_tree.rs" 653 14 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 652 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 650 4 55] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v -> Model0.model key <> k && HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 648 4 55] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> Model0.model key = k || HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 646 4 57] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Model0.model key = Model0.model k && HasMapping0.has_mapping ( * self) (Model0.model k) v }
    ensures { [#"../red_black_tree.rs" 645 4 78] forall v : (v) . result = Type.Core_Option_Option_None -> not HasMapping0.has_mapping ( * self) (Model0.model key) v }
    ensures { [#"../red_black_tree.rs" 644 14 37] BstInvariant0.bst_invariant ( ^ self) }
    
end
module RedBlackTree_Impl13_DeleteRec
  type k
  type v
  use mach.int.Int
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl3_Model as Model1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model1.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl0_HasMappingInj as HasMappingInj0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model,
  function HasMappingModel0.has_mapping_model = HasMappingModel0.has_mapping_model, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve13 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve10 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = Type.redblacktree_node k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone Core_Option_Impl0_IsNone_Interface as IsNone0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve12 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve11 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve9 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve11.resolve, predicate Resolve1.resolve = Resolve12.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve8 with type t = v
  clone Core_Mem_Swap_Interface as Swap1 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = k
  clone Core_Mem_Swap_Interface as Swap0 with type t = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.core_option_option (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model0.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_SameMappings as SameMappings1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  predicate SameMappings0.same_mappings = SameMappings1.same_mappings
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl7_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl12_MoveRedLeft_Interface as MoveRedLeft0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant, function Model0.model = Model0.model,
  predicate LeLog0.le_log = LeLog0.le_log, predicate ColorInvariant1.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight1.has_height, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl12_Balance_Interface as Balance0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate ColorInvariant1.color_invariant = ColorInvariant1.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl12_MoveRedRight_Interface as MoveRedRight0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, predicate ColorInvariant1.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  predicate HasHeight0.has_height = HasHeight1.has_height, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl12_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  function Color0.color = Color0.color, predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  clone RedBlackTree_Impl13_DeleteMinRec_Interface as DeleteMinRec0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Color0.color = Color0.color,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  predicate LeLog0.le_log = LeLog0.le_log, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg delete_rec [@cfg:stackify] [#"../red_black_tree.rs" 655 4 55] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 643 4 53] exists h : (int) . HasHeight0.has_height ( * self) h}
    requires {[#"../red_black_tree.rs" 641 4 92] Color0.color ( * self) = Type.RedBlackTree_Color_Red || (exists n : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node ( * self) = Type.Core_Option_Option_Some n && Color0.color (Type.redblacktree_node_Node_left n) = Type.RedBlackTree_Color_Red)}
    requires {[#"../red_black_tree.rs" 640 15 40] ColorInvariant0.color_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 639 15 38] BstInvariant0.bst_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 654 4 69] Color0.color ( * self) = Type.RedBlackTree_Color_Black -> Color0.color ( ^ self) = Type.RedBlackTree_Color_Black }
    ensures { [#"../red_black_tree.rs" 653 14 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 652 4 78] forall h : (int) . HasHeight0.has_height ( * self) h -> HasHeight0.has_height ( ^ self) h }
    ensures { [#"../red_black_tree.rs" 650 4 55] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v -> Model0.model key <> k && HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 648 4 55] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> Model0.model key = k || HasMapping0.has_mapping ( ^ self) k v }
    ensures { [#"../red_black_tree.rs" 646 4 57] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) -> Model0.model key = Model0.model k && HasMapping0.has_mapping ( * self) (Model0.model k) v }
    ensures { [#"../red_black_tree.rs" 645 4 78] forall v : (v) . result = Type.Core_Option_Option_None -> not HasMapping0.has_mapping ( * self) (Model0.model key) v }
    ensures { [#"../red_black_tree.rs" 644 14 37] BstInvariant0.bst_invariant ( ^ self) }
    
   =
  var _0 : Type.core_option_option (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var r_3 : Type.core_option_option (k, v);
  var node_4 : borrowed (Type.redblacktree_node k v);
  var _5 : borrowed (Type.redblacktree_node k v);
  var _6 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  ghost var old_node_8 : Type.redblacktree_node k v;
  var _9 : ();
  var _10 : ();
  var _11 : Type.core_cmp_ordering;
  var _12 : k;
  var _13 : k;
  var _14 : k;
  var _15 : int8;
  var _16 : ();
  var _17 : bool;
  var _18 : Type.core_option_option (Type.redblacktree_node k v);
  var _19 : ();
  var _20 : ();
  var _21 : bool;
  var _22 : bool;
  var _23 : bool;
  var _24 : Type.redblacktree_tree k v;
  var _25 : bool;
  var _26 : bool;
  var _27 : Type.redblacktree_tree k v;
  var _28 : Type.redblacktree_node k v;
  var _29 : Type.core_option_option (Type.redblacktree_node k v);
  var _30 : Type.core_option_option (Type.redblacktree_node k v);
  var _31 : ();
  var _32 : borrowed (Type.redblacktree_node k v);
  var _33 : Type.core_option_option (k, v);
  var _34 : borrowed (Type.redblacktree_tree k v);
  var _35 : k;
  var ord_36 : Type.core_cmp_ordering;
  var _37 : ();
  var _38 : bool;
  var _39 : Type.redblacktree_tree k v;
  var _40 : ();
  var _41 : borrowed (Type.redblacktree_node k v);
  var _42 : Type.core_cmp_ordering;
  var _43 : bool;
  var _44 : Type.core_option_option (Type.redblacktree_node k v);
  var _45 : ();
  var _46 : int8;
  var _47 : ();
  var node_48 : Type.redblacktree_node k v;
  var _49 : Type.core_option_option (Type.redblacktree_node k v);
  var _50 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _51 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _52 : ();
  var _53 : (k, v);
  var _54 : k;
  var _55 : v;
  var _56 : ();
  var _57 : bool;
  var _58 : bool;
  var _59 : bool;
  var _60 : Type.redblacktree_tree k v;
  var _61 : bool;
  var _62 : bool;
  var _63 : Type.redblacktree_tree k v;
  var _64 : Type.redblacktree_node k v;
  var _65 : Type.core_option_option (Type.redblacktree_node k v);
  var _66 : Type.core_option_option (Type.redblacktree_node k v);
  var _67 : bool;
  var _68 : bool;
  var _69 : borrowed (Type.redblacktree_node k v);
  var _70 : Type.core_cmp_ordering;
  var _71 : int8;
  var kv_72 : (k, v);
  var _73 : borrowed (Type.redblacktree_tree k v);
  var _74 : ();
  var _75 : ();
  var _76 : borrowed k;
  var _77 : borrowed k;
  var _78 : borrowed k;
  var _79 : borrowed k;
  var _80 : ();
  var _81 : borrowed v;
  var _82 : borrowed v;
  var _83 : borrowed v;
  var _84 : borrowed v;
  var _85 : Type.core_option_option (k, v);
  var _86 : (k, v);
  var _87 : Type.core_option_option (k, v);
  var _88 : borrowed (Type.redblacktree_tree k v);
  var _89 : k;
  var _90 : ();
  var _91 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _7 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _7)) };
    _6 <- ([#"../red_black_tree.rs" 657 26 44] AsMut0.as_mut _7);
    goto BB1
  }
  BB1 {
    _5 <- ([#"../red_black_tree.rs" 657 26 53] Unwrap0.unwrap _6);
    goto BB2
  }
  BB2 {
    node_4 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ node_4) };
    assume { Resolve0.resolve _5 };
    _9 <- ();
    old_node_8 <- ghost ([#"../red_black_tree.rs" 658 23 39]  * node_4);
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve old_node_8 };
    _12 <- key_2;
    _14 <- Type.redblacktree_node_Node_key ( * node_4);
    _13 <- _14;
    assume { Resolve2.resolve _14 };
    _11 <- ([#"../red_black_tree.rs" 659 14 32] Cmp0.cmp _12 _13);
    goto BB4
  }
  BB4 {
    switch (_11)
      | Type.Core_Cmp_Ordering_Less -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    ord_36 <- _11;
    _39 <- Type.redblacktree_node_Node_left ( * node_4);
    _38 <- ([#"../red_black_tree.rs" 669 19 37] IsRed0.is_red _39);
    goto BB24
  }
  BB6 {
    assume { Resolve3.resolve self_1 };
    _18 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_4));
    _17 <- ([#"../red_black_tree.rs" 661 19 43] IsNone0.is_none _18);
    goto BB7
  }
  BB7 {
    switch (_17)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    assume { Resolve2.resolve key_2 };
    assume { Resolve6.resolve node_4 };
    _0 <- Type.Core_Option_Option_None;
    goto BB72
  }
  BB9 {
    _16 <- ();
    _24 <- Type.redblacktree_node_Node_left ( * node_4);
    _23 <- ([#"../red_black_tree.rs" 662 20 38] IsRed0.is_red _24);
    goto BB13
  }
  BB10 {
    _21 <- false;
    goto BB12
  }
  BB11 {
    _30 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_4));
    _29 <- ([#"../red_black_tree.rs" 662 43 66] AsRef0.as_ref _30);
    goto BB14
  }
  BB12 {
    switch (_21)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    _22 <- not _23;
    switch (_22)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _28 <- ([#"../red_black_tree.rs" 662 43 75] Unwrap1.unwrap _29);
    goto BB15
  }
  BB15 {
    _27 <- Type.redblacktree_node_Node_left _28;
    assume { Resolve4.resolve _28 };
    _26 <- ([#"../red_black_tree.rs" 662 43 89] IsRed0.is_red _27);
    goto BB16
  }
  BB16 {
    _25 <- not _26;
    _21 <- _25;
    goto BB12
  }
  BB17 {
    _32 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _32) };
    _31 <- ([#"../red_black_tree.rs" 663 20 40] MoveRedLeft0.move_red_left _32);
    goto BB18
  }
  BB18 {
    _20 <- ();
    goto BB20
  }
  BB19 {
    _20 <- ();
    goto BB20
  }
  BB20 {
    _34 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node ( ^ _34) b c d e) };
    _35 <- key_2;
    assume { Resolve2.resolve key_2 };
    _33 <- ([#"../red_black_tree.rs" 665 20 45] delete_rec _34 _35);
    goto BB21
  }
  BB21 {
    assume { Resolve5.resolve r_3 };
    r_3 <- _33;
    goto BB22
  }
  BB22 {
    _10 <- ();
    goto BB23
  }
  BB23 {
    goto BB67
  }
  BB24 {
    switch (_38)
      | False -> goto BB27
      | _ -> goto BB25
      end
  }
  BB25 {
    assume { Resolve3.resolve self_1 };
    _41 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _41) };
    _40 <- ([#"../red_black_tree.rs" 670 20 39] RotateRight0.rotate_right _41);
    goto BB26
  }
  BB26 {
    _42 <- Type.Core_Cmp_Ordering_Greater;
    ord_36 <- _42;
    _37 <- ();
    goto BB38
  }
  BB27 {
    _44 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * node_4));
    _43 <- ([#"../red_black_tree.rs" 672 26 51] IsNone0.is_none _44);
    goto BB28
  }
  BB28 {
    switch (_43)
      | False -> goto BB37
      | _ -> goto BB29
      end
  }
  BB29 {
    assume { Resolve2.resolve key_2 };
    assume { Resolve6.resolve node_4 };
    switch (ord_36)
      | Type.Core_Cmp_Ordering_Greater -> goto BB30
      | _ -> goto BB31
      end
  }
  BB30 {
    assume { Resolve3.resolve self_1 };
    _0 <- Type.Core_Option_Option_None;
    goto BB71
  }
  BB31 {
    _45 <- ();
    _51 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _51)) };
    assume { Resolve3.resolve self_1 };
    _50 <- borrow_mut ( * _51);
    _51 <- { _51 with current = ( ^ _50) };
    _49 <- ([#"../red_black_tree.rs" 674 31 61] Take0.take _50);
    goto BB32
  }
  BB32 {
    assume { Resolve10.resolve _51 };
    node_48 <- ([#"../red_black_tree.rs" 674 31 70] Unwrap2.unwrap _49);
    goto BB33
  }
  BB33 {
    assume { Resolve11.resolve _54 };
    _54 <- Type.redblacktree_node_Node_key node_48;
    assume { Resolve12.resolve _55 };
    _55 <- Type.redblacktree_node_Node_val node_48;
    _53 <- (_54, _55);
    goto BB34
  }
  BB34 {
    goto BB35
  }
  BB35 {
    _0 <- Type.Core_Option_Option_Some _53;
    goto BB36
  }
  BB36 {
    goto BB70
  }
  BB37 {
    assume { Resolve3.resolve self_1 };
    _37 <- ();
    goto BB38
  }
  BB38 {
    _60 <- Type.redblacktree_node_Node_right ( * node_4);
    _59 <- ([#"../red_black_tree.rs" 677 20 39] IsRed0.is_red _60);
    goto BB42
  }
  BB39 {
    _57 <- false;
    goto BB41
  }
  BB40 {
    _66 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * node_4));
    _65 <- ([#"../red_black_tree.rs" 677 44 68] AsRef0.as_ref _66);
    goto BB43
  }
  BB41 {
    switch (_57)
      | False -> goto BB51
      | _ -> goto BB46
      end
  }
  BB42 {
    _58 <- not _59;
    switch (_58)
      | False -> goto BB39
      | _ -> goto BB40
      end
  }
  BB43 {
    _64 <- ([#"../red_black_tree.rs" 677 44 77] Unwrap1.unwrap _65);
    goto BB44
  }
  BB44 {
    _63 <- Type.redblacktree_node_Node_left _64;
    assume { Resolve4.resolve _64 };
    _62 <- ([#"../red_black_tree.rs" 677 44 91] IsRed0.is_red _63);
    goto BB45
  }
  BB45 {
    _61 <- not _62;
    _57 <- _61;
    goto BB41
  }
  BB46 {
    _69 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _69) };
    _68 <- ([#"../red_black_tree.rs" 678 24 45] MoveRedRight0.move_red_right _69);
    goto BB47
  }
  BB47 {
    _67 <- not _68;
    switch (_67)
      | False -> goto BB49
      | _ -> goto BB48
      end
  }
  BB48 {
    _70 <- Type.Core_Cmp_Ordering_Greater;
    ord_36 <- _70;
    _56 <- ();
    goto BB50
  }
  BB49 {
    _56 <- ();
    goto BB50
  }
  BB50 {
    goto BB52
  }
  BB51 {
    _56 <- ();
    goto BB52
  }
  BB52 {
    switch (ord_36)
      | Type.Core_Cmp_Ordering_Equal -> goto BB53
      | _ -> goto BB62
      end
  }
  BB53 {
    assume { Resolve2.resolve key_2 };
    _73 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b c d ( ^ _73)) };
    kv_72 <- ([#"../red_black_tree.rs" 683 33 60] DeleteMinRec0.delete_min_rec _73);
    goto BB54
  }
  BB54 {
    assert { [#"../red_black_tree.rs" 684 20 116] let _ = HasMappingInj0.has_mapping_inj (Type.redblacktree_node_Node_right old_node_8) (Model0.model (let (a, _) = kv_72 in a)) (let (_, a) = kv_72 in a) (let (_, a) = kv_72 in a) in true };
    goto BB55
  }
  BB55 {
    _74 <- ();
    _77 <- borrow_mut (Type.redblacktree_node_Node_key ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b ( ^ _77) d e) };
    _76 <- borrow_mut ( * _77);
    _77 <- { _77 with current = ( ^ _76) };
    _79 <- borrow_mut (let (a, _) = kv_72 in a);
    kv_72 <- (let (a, b) = kv_72 in ( ^ _79, b));
    _78 <- borrow_mut ( * _79);
    _79 <- { _79 with current = ( ^ _78) };
    _75 <- ([#"../red_black_tree.rs" 685 20 60] Swap0.swap _76 _78);
    goto BB56
  }
  BB56 {
    assume { Resolve7.resolve _77 };
    assume { Resolve7.resolve _79 };
    _82 <- borrow_mut (Type.redblacktree_node_Node_val ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b c ( ^ _82) e) };
    _81 <- borrow_mut ( * _82);
    _82 <- { _82 with current = ( ^ _81) };
    _84 <- borrow_mut (let (_, a) = kv_72 in a);
    kv_72 <- (let (a, b) = kv_72 in (a,  ^ _84));
    _83 <- borrow_mut ( * _84);
    _84 <- { _84 with current = ( ^ _83) };
    _80 <- ([#"../red_black_tree.rs" 686 20 60] Swap1.swap _81 _83);
    goto BB57
  }
  BB57 {
    assume { Resolve8.resolve _82 };
    assume { Resolve8.resolve _84 };
    assume { Resolve9.resolve _86 };
    _86 <- kv_72;
    _85 <- Type.Core_Option_Option_Some _86;
    goto BB58
  }
  BB58 {
    assume { Resolve5.resolve r_3 };
    r_3 <- _85;
    goto BB59
  }
  BB59 {
    _10 <- ();
    goto BB60
  }
  BB60 {
    goto BB61
  }
  BB61 {
    goto BB66
  }
  BB62 {
    _88 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_4));
    node_4 <- { node_4 with current = (let Type.RedBlackTree_Node a b c d e =  * node_4 in Type.RedBlackTree_Node a b c d ( ^ _88)) };
    _89 <- key_2;
    assume { Resolve2.resolve key_2 };
    _87 <- ([#"../red_black_tree.rs" 689 24 50] delete_rec _88 _89);
    goto BB63
  }
  BB63 {
    assume { Resolve5.resolve r_3 };
    r_3 <- _87;
    goto BB64
  }
  BB64 {
    _10 <- ();
    goto BB65
  }
  BB65 {
    goto BB66
  }
  BB66 {
    goto BB67
  }
  BB67 {
    _91 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _91) };
    _90 <- ([#"../red_black_tree.rs" 693 8 22] Balance0.balance _91);
    goto BB68
  }
  BB68 {
    assume { Resolve6.resolve node_4 };
    assume { Resolve5.resolve _0 };
    _0 <- r_3;
    goto BB69
  }
  BB69 {
    goto BB74
  }
  BB70 {
    assume { Resolve13.resolve node_48 };
    goto BB71
  }
  BB71 {
    goto BB72
  }
  BB72 {
    goto BB73
  }
  BB73 {
    goto BB74
  }
  BB74 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module RedBlackTree_Impl13_Delete_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val delete [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 697 15 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 702 14 49] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 700 4 46] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) && Model1.model k = Model1.model key -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some v }
    ensures { [#"../red_black_tree.rs" 699 14 63] (result = Type.Core_Option_Option_None) = (Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 698 14 33] Invariant0.invariant' ( ^ self) }
    
end
module RedBlackTree_Impl13_Delete
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl3_ModelTy as ModelTy1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model2 with type t = Type.redblacktree_tree k v,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.core_option_option (k, v)
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.redblacktree_tree k v)
  clone RedBlackTree_Impl11_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone RedBlackTree_Impl13_DeleteRec_Interface as DeleteRec0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight0.has_height, function Color0.color = Color0.color,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model1.model,
  predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  let rec cfg delete [@cfg:stackify] [#"../red_black_tree.rs" 703 4 55] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (k, v)
    requires {[#"../red_black_tree.rs" 697 15 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 702 14 49] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 700 4 46] forall v : (v) . forall k : (k) . result = Type.Core_Option_Option_Some (k, v) && Model1.model k = Model1.model key -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some v }
    ensures { [#"../red_black_tree.rs" 699 14 63] (result = Type.Core_Option_Option_None) = (Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None) }
    ensures { [#"../red_black_tree.rs" 698 14 33] Invariant0.invariant' ( ^ self) }
    
   =
  var _0 : Type.core_option_option (k, v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  ghost var old_self_3 : borrowed (Type.redblacktree_tree k v);
  var _4 : ();
  var _5 : ();
  var _6 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _7 : isize;
  var _8 : ();
  var node_9 : borrowed (Type.redblacktree_node k v);
  var _10 : bool;
  var _11 : bool;
  var _12 : bool;
  var _13 : Type.redblacktree_tree k v;
  var _14 : bool;
  var _15 : bool;
  var _16 : Type.redblacktree_tree k v;
  var _17 : Type.redblacktree_color;
  var _18 : ();
  var _19 : ();
  var r_20 : Type.core_option_option (k, v);
  var _21 : borrowed (Type.redblacktree_tree k v);
  var _22 : k;
  var _23 : ();
  var _24 : ();
  var _25 : bool;
  var _26 : Type.redblacktree_tree k v;
  var _27 : Type.redblacktree_color;
  var _28 : borrowed (Type.redblacktree_node k v);
  var _29 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _30 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _31 : ();
  ghost var _32 : ();
  var _33 : ();
  var _34 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _4 <- ();
    old_self_3 <- ghost ([#"../red_black_tree.rs" 704 23 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_3 };
    _6 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _6)) };
    switch ( * _6)
      | Type.Core_Option_Option_None -> goto BB4
      | Type.Core_Option_Option_Some _ -> goto BB2
      end
  }
  BB2 {
    node_9 <- borrow_mut (Type.core_option_option_Some_0 ( * _6));
    _6 <- { _6 with current = (let Type.Core_Option_Option_Some a =  * _6 in Type.Core_Option_Option_Some ( ^ node_9)) };
    assume { Resolve3.resolve _6 };
    _13 <- Type.redblacktree_node_Node_left ( * node_9);
    _12 <- ([#"../red_black_tree.rs" 708 20 38] IsRed0.is_red _13);
    goto BB8
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve key_2 };
    assume { Resolve3.resolve _6 };
    absurd
  }
  BB4 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve key_2 };
    assume { Resolve3.resolve _6 };
    _0 <- Type.Core_Option_Option_None;
    goto BB22
  }
  BB5 {
    _10 <- false;
    goto BB7
  }
  BB6 {
    _16 <- Type.redblacktree_node_Node_right ( * node_9);
    _15 <- ([#"../red_black_tree.rs" 708 43 62] IsRed0.is_red _16);
    goto BB9
  }
  BB7 {
    switch (_10)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB8 {
    _11 <- not _12;
    switch (_11)
      | False -> goto BB5
      | _ -> goto BB6
      end
  }
  BB9 {
    _14 <- not _15;
    _10 <- _14;
    goto BB7
  }
  BB10 {
    _17 <- Type.RedBlackTree_Color_Red;
    node_9 <- { node_9 with current = (let Type.RedBlackTree_Node a b c d e =  * node_9 in Type.RedBlackTree_Node a _17 c d e) };
    assume { Resolve4.resolve node_9 };
    _5 <- ();
    goto BB12
  }
  BB11 {
    assume { Resolve4.resolve node_9 };
    _5 <- ();
    goto BB12
  }
  BB12 {
    assert { [#"../red_black_tree.rs" 713 8 77] forall h : (int) . HasHeight0.has_height ( * old_self_3) h -> Color0.color ( * self_1) = Type.RedBlackTree_Color_Black || HasHeight0.has_height ( * self_1) (h - 1) };
    _18 <- ();
    assert { [#"../red_black_tree.rs" 715 24 53] SameMappings0.same_mappings ( * old_self_3) ( * self_1) };
    _19 <- ();
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _22 <- key_2;
    assume { Resolve2.resolve key_2 };
    r_20 <- ([#"../red_black_tree.rs" 716 16 36] DeleteRec0.delete_rec _21 _22);
    goto BB13
  }
  BB13 {
    assert { [#"../red_black_tree.rs" 717 24 62] Model0.model ( * self_1) = Map.set (Model2.model old_self_3) (Model1.model key_2) (Type.Core_Option_Option_None) };
    _23 <- ();
    _26 <-  * self_1;
    _25 <- ([#"../red_black_tree.rs" 718 11 24] IsRed0.is_red _26);
    goto BB14
  }
  BB14 {
    switch (_25)
      | False -> goto BB18
      | _ -> goto BB15
      end
  }
  BB15 {
    _27 <- Type.RedBlackTree_Color_Black;
    _30 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _30)) };
    _29 <- ([#"../red_black_tree.rs" 718 27 45] AsMut0.as_mut _30);
    goto BB16
  }
  BB16 {
    assume { Resolve1.resolve self_1 };
    _28 <- ([#"../red_black_tree.rs" 718 27 54] Unwrap0.unwrap _29);
    goto BB17
  }
  BB17 {
    _28 <- { _28 with current = (let Type.RedBlackTree_Node a b c d e =  * _28 in Type.RedBlackTree_Node a _27 c d e) };
    assume { Resolve4.resolve _28 };
    _24 <- ();
    goto BB19
  }
  BB18 {
    assume { Resolve1.resolve self_1 };
    _24 <- ();
    goto BB19
  }
  BB19 {
    assert { [#"../red_black_tree.rs" 719 8 74] forall h : (int) . HasHeight0.has_height ( * old_self_3) h -> HasHeight0.has_height ( * self_1) h || HasHeight0.has_height ( * self_1) (h - 1) };
    _31 <- ();
    _33 <- ();
    _32 <- ghost ([#"../red_black_tree.rs" 721 8 55] match (r_20) with
      | Type.Core_Option_Option_None -> ()
      | Type.Core_Option_Option_Some _ -> ()
      end);
    goto BB20
  }
  BB20 {
    assert { [#"../red_black_tree.rs" 722 24 68] let _ = HasMappingModel0.has_mapping_model ( * self_1) (Model1.model key_2) in true };
    _34 <- ();
    assume { Resolve5.resolve _0 };
    _0 <- r_20;
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    return _0
  }
  
end
module RedBlackTree_Impl13_Get_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get [@cfg:stackify] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
    requires {[#"../red_black_tree.rs" 726 15 34] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 728 4 62] result = Type.Core_Option_Option_None -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None }
    ensures { [#"../red_black_tree.rs" 727 4 83] forall v : (v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v }
    
end
module RedBlackTree_Impl13_Get
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg get [@cfg:stackify] [#"../red_black_tree.rs" 729 4 44] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
    requires {[#"../red_black_tree.rs" 726 15 34] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 728 4 62] result = Type.Core_Option_Option_None -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None }
    ensures { [#"../red_black_tree.rs" 727 4 83] forall v : (v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v }
    
   =
  var _0 : Type.core_option_option v;
  var self_1 : Type.redblacktree_tree k v;
  var key_2 : k;
  var _3 : ();
  var tree_4 : Type.redblacktree_tree k v;
  var _5 : ();
  var _6 : ();
  var _7 : Type.core_option_option (Type.redblacktree_node k v);
  var _8 : isize;
  var node_9 : Type.redblacktree_node k v;
  var _10 : Type.core_cmp_ordering;
  var _11 : k;
  var _12 : k;
  var _13 : k;
  var _14 : int8;
  var _15 : Type.redblacktree_tree k v;
  var _16 : Type.redblacktree_tree k v;
  var _17 : ();
  var _18 : v;
  var _19 : v;
  var _20 : Type.redblacktree_tree k v;
  var _21 : Type.redblacktree_tree k v;
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    assert { [#"../red_black_tree.rs" 730 24 53] let _ = HasMappingModel0.has_mapping_model self_1 (Model1.model key_2) in true };
    _3 <- ();
    assume { Resolve0.resolve tree_4 };
    tree_4 <- self_1;
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  BB1 {
    invariant bst_inv { [#"../red_black_tree.rs" 733 29 52] BstInvariant0.bst_invariant tree_4 };
    invariant has_mapping { [#"../red_black_tree.rs" 733 8 54] forall v : (v) . HasMapping0.has_mapping self_1 (Model1.model key_2) v = HasMapping0.has_mapping tree_4 (Model1.model key_2) v };
    _7 <- Type.redblacktree_tree_Tree_node tree_4;
    assume { Resolve0.resolve tree_4 };
    switch (_7)
      | Type.Core_Option_Option_Some _ -> goto BB2
      | _ -> goto BB9
      end
  }
  BB2 {
    node_9 <- Type.core_option_option_Some_0 _7;
    assume { Resolve2.resolve _7 };
    _11 <- key_2;
    _13 <- Type.redblacktree_node_Node_key node_9;
    _12 <- _13;
    assume { Resolve1.resolve _13 };
    _10 <- ([#"../red_black_tree.rs" 736 18 36] Cmp0.cmp _11 _12);
    goto BB3
  }
  BB3 {
    switch (_10)
      | Type.Core_Cmp_Ordering_Less -> goto BB6
      | Type.Core_Cmp_Ordering_Equal -> goto BB7
      | Type.Core_Cmp_Ordering_Greater -> goto BB4
      end
  }
  BB4 {
    _21 <- Type.redblacktree_node_Node_right node_9;
    assume { Resolve3.resolve node_9 };
    _20 <- _21;
    assume { Resolve0.resolve _21 };
    assume { Resolve0.resolve tree_4 };
    tree_4 <- _20;
    _6 <- ();
    goto BB8
  }
  BB5 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_9 };
    absurd
  }
  BB6 {
    _16 <- Type.redblacktree_node_Node_left node_9;
    assume { Resolve3.resolve node_9 };
    _15 <- _16;
    assume { Resolve0.resolve _16 };
    assume { Resolve0.resolve tree_4 };
    tree_4 <- _15;
    _6 <- ();
    goto BB8
  }
  BB7 {
    assume { Resolve1.resolve key_2 };
    _19 <- Type.redblacktree_node_Node_val node_9;
    assume { Resolve3.resolve node_9 };
    _18 <- _19;
    assume { Resolve4.resolve _19 };
    _0 <- Type.Core_Option_Option_Some _18;
    goto BB10
  }
  BB8 {
    goto BB1
  }
  BB9 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _7 };
    _5 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module RedBlackTree_Impl13_GetMut_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get_mut [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    requires {[#"../red_black_tree.rs" 745 15 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 749 4 93] result = Type.Core_Option_Option_None -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None && Map.get (Model0.model ( ^ self)) (Model1.model key) = Type.Core_Option_Option_None }
    ensures { [#"../red_black_tree.rs" 747 4 89] forall v : (borrowed v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some ( * v) && Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model2.model key) (Type.Core_Option_Option_Some ( ^ v)) }
    ensures { [#"../red_black_tree.rs" 746 14 33] Invariant0.invariant' ( ^ self) }
    
end
module RedBlackTree_Impl13_GetMut
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  use mach.int.Int
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl9_HasHeightRec as HasHeightRec0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_HasHeight as HasHeight1 with type k = k, type v = v,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl9_HasHeight as HasHeight0 with type k = k, type v = v,
  predicate HasHeight0.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec, axiom .
  clone RedBlackTree_Impl6_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl7_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl6_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl10_Invariant as Invariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color,
  predicate HasHeight0.has_height = HasHeight0.has_height, predicate HasHeight1.has_height = HasHeight1.has_height,
  predicate HasHeightRec0.has_height_rec = HasHeightRec0.has_height_rec
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_tree k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg get_mut [@cfg:stackify] [#"../red_black_tree.rs" 750 4 56] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    requires {[#"../red_black_tree.rs" 745 15 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 749 4 93] result = Type.Core_Option_Option_None -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_None && Map.get (Model0.model ( ^ self)) (Model1.model key) = Type.Core_Option_Option_None }
    ensures { [#"../red_black_tree.rs" 747 4 89] forall v : (borrowed v) . result = Type.Core_Option_Option_Some v -> Map.get (Model0.model ( * self)) (Model1.model key) = Type.Core_Option_Option_Some ( * v) && Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model2.model key) (Type.Core_Option_Option_Some ( ^ v)) }
    ensures { [#"../red_black_tree.rs" 746 14 33] Invariant0.invariant' ( ^ self) }
    
   =
  var _0 : Type.core_option_option (borrowed v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var _3 : ();
  var tree_4 : borrowed (Type.redblacktree_tree k v);
  var _5 : ();
  var _6 : ();
  var _7 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _8 : isize;
  var node_9 : borrowed (Type.redblacktree_node k v);
  var _10 : Type.core_cmp_ordering;
  var _11 : k;
  var _12 : k;
  var _13 : k;
  var _14 : int8;
  var _15 : borrowed (Type.redblacktree_tree k v);
  var _16 : borrowed (Type.redblacktree_tree k v);
  var _17 : ();
  var _18 : borrowed v;
  var _19 : borrowed v;
  var _20 : borrowed (Type.redblacktree_tree k v);
  var _21 : borrowed (Type.redblacktree_tree k v);
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    assert { [#"../red_black_tree.rs" 751 24 53] let _ = HasMappingModel0.has_mapping_model ( * self_1) (Model1.model key_2) in true };
    _3 <- ();
    assume { Resolve0.resolve tree_4 };
    tree_4 <- self_1;
    goto BB1
  }
  BB1 {
    invariant bst_inv { [#"../red_black_tree.rs" 755 29 52] BstInvariant0.bst_invariant ( * tree_4) };
    invariant color_inv { [#"../red_black_tree.rs" 756 31 56] ColorInvariant0.color_invariant ( * tree_4) };
    invariant mapping_prof_key { [#"../red_black_tree.rs" 755 8 54] forall v : (v) . HasMapping0.has_mapping ( ^ tree_4) (Model2.model key_2) v = HasMapping0.has_mapping ( ^ self_1) (Model2.model key_2) v };
    invariant mapping_cur_key { [#"../red_black_tree.rs" 755 8 54] forall v : (v) . HasMapping0.has_mapping ( * tree_4) (Model2.model key_2) v = HasMapping0.has_mapping ( * self_1) (Model2.model key_2) v };
    invariant bst_inv_proph { [#"../red_black_tree.rs" 755 8 54] (forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model2.model key_2 || HasMapping0.has_mapping ( * tree_4) k v = HasMapping0.has_mapping ( ^ tree_4) k v) -> BstInvariant0.bst_invariant ( ^ tree_4) -> BstInvariant0.bst_invariant ( ^ self_1) };
    invariant color_inv_proph { [#"../red_black_tree.rs" 755 8 54] ColorInvariant0.color_invariant ( ^ tree_4) && Color0.color ( ^ tree_4) = Color0.color ( * tree_4) -> ColorInvariant0.color_invariant ( ^ self_1) };
    invariant color_proph { [#"../red_black_tree.rs" 755 8 54] Color0.color ( ^ tree_4) = Color0.color ( * tree_4) -> Color0.color ( ^ self_1) = Color0.color ( * self_1) };
    invariant mapping_proph { [#"../red_black_tree.rs" 755 8 54] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * tree_4) k v = HasMapping0.has_mapping ( ^ tree_4) k v -> HasMapping0.has_mapping ( * self_1) k v = HasMapping0.has_mapping ( ^ self_1) k v };
    invariant height { [#"../red_black_tree.rs" 755 8 54] Color0.color ( ^ tree_4) = Color0.color ( * tree_4) && (forall h : (int) . HasHeight0.has_height ( * tree_4) h -> HasHeight0.has_height ( ^ tree_4) h) -> (forall h : (int) . HasHeight0.has_height ( * self_1) h -> HasHeight0.has_height ( ^ self_1) h) };
    _7 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * tree_4));
    tree_4 <- { tree_4 with current = (let Type.RedBlackTree_Tree a =  * tree_4 in Type.RedBlackTree_Tree ( ^ _7)) };
    assume { Resolve0.resolve tree_4 };
    switch ( * _7)
      | Type.Core_Option_Option_Some _ -> goto BB2
      | _ -> goto BB9
      end
  }
  BB2 {
    node_9 <- borrow_mut (Type.core_option_option_Some_0 ( * _7));
    _7 <- { _7 with current = (let Type.Core_Option_Option_Some a =  * _7 in Type.Core_Option_Option_Some ( ^ node_9)) };
    assume { Resolve2.resolve _7 };
    _11 <- key_2;
    _13 <- Type.redblacktree_node_Node_key ( * node_9);
    _12 <- _13;
    assume { Resolve1.resolve _13 };
    _10 <- ([#"../red_black_tree.rs" 769 18 36] Cmp0.cmp _11 _12);
    goto BB3
  }
  BB3 {
    switch (_10)
      | Type.Core_Cmp_Ordering_Less -> goto BB6
      | Type.Core_Cmp_Ordering_Equal -> goto BB7
      | Type.Core_Cmp_Ordering_Greater -> goto BB4
      end
  }
  BB4 {
    _21 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_9));
    node_9 <- { node_9 with current = (let Type.RedBlackTree_Node a b c d e =  * node_9 in Type.RedBlackTree_Node a b c d ( ^ _21)) };
    assume { Resolve3.resolve node_9 };
    _20 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _20) };
    assume { Resolve0.resolve _21 };
    assume { Resolve0.resolve tree_4 };
    tree_4 <- _20;
    _6 <- ();
    goto BB8
  }
  BB5 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_9 };
    absurd
  }
  BB6 {
    _16 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_9));
    node_9 <- { node_9 with current = (let Type.RedBlackTree_Node a b c d e =  * node_9 in Type.RedBlackTree_Node ( ^ _16) b c d e) };
    assume { Resolve3.resolve node_9 };
    _15 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _15) };
    assume { Resolve0.resolve _16 };
    assume { Resolve0.resolve tree_4 };
    tree_4 <- _15;
    _6 <- ();
    goto BB8
  }
  BB7 {
    assume { Resolve1.resolve key_2 };
    _19 <- borrow_mut (Type.redblacktree_node_Node_val ( * node_9));
    node_9 <- { node_9 with current = (let Type.RedBlackTree_Node a b c d e =  * node_9 in Type.RedBlackTree_Node a b c ( ^ _19) e) };
    assume { Resolve3.resolve node_9 };
    _18 <- borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _0 <- Type.Core_Option_Option_Some _18;
    assume { Resolve4.resolve _19 };
    goto BB10
  }
  BB8 {
    goto BB1
  }
  BB9 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _7 };
    _5 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module RedBlackTree_Impl14
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.redblacktree_color
  clone RedBlackTree_Impl14_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.redblacktree_color, val clone' = Clone0.clone'
end
module RedBlackTree_Impl15
  
end
module RedBlackTree_Impl2_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl2
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model3.model
  clone RedBlackTree_Impl3_Model as Model2 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model, function Model1.model = Model3.model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = Type.redblacktree_node k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.redblacktree_node k v,
  type modelTy = ModelTy0.modelTy
end
