
module RedBlackTree_Color_Type
  type redblacktree_color_type  =
    | RedBlackTree_Color_Red_Type
    | RedBlackTree_Color_Black_Type
    
end
module RedBlackTree_Impl17_Clone_Interface
  use prelude.Borrow
  use RedBlackTree_Color_Type
  val clone' [@cfg:stackify] (self : RedBlackTree_Color_Type.redblacktree_color_type) : RedBlackTree_Color_Type.redblacktree_color_type
    ensures { [#"../red_black_tree.rs" 8 9 8 14] result = self }
    
end
module RedBlackTree_Impl17_Clone
  use prelude.Borrow
  use RedBlackTree_Color_Type
  use mach.int.Int
  use prelude.IntSize
  let rec cfg clone' [@cfg:stackify] [#"../red_black_tree.rs" 8 9 8 14] (self : RedBlackTree_Color_Type.redblacktree_color_type) : RedBlackTree_Color_Type.redblacktree_color_type
    ensures { [#"../red_black_tree.rs" 8 9 8 14] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : RedBlackTree_Color_Type.redblacktree_color_type;
  var self_1 : RedBlackTree_Color_Type.redblacktree_color_type;
  var _2 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> goto BB3
      | RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> goto BB1
      end
  }
  BB1 {
    _0 <- RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type;
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type;
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Core_Option_Option_Type
  type core_option_option_type 't =
    | Core_Option_Option_None_Type
    | Core_Option_Option_Some_Type 't
    
  let function core_option_option_type_Some_0 (self : core_option_option_type 't) : 't
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Core_Option_Option_None_Type -> any 't
      | Core_Option_Option_Some_Type a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type core_ptr_nonnull_nonnull_type 't =
    | Core_Ptr_NonNull_NonNull_Type opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_ptr_unique_unique_type 't =
    | Core_Ptr_Unique_Unique_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type
  type alloc_boxed_box_type 't 'a =
    | Alloc_Boxed_Box_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type alloc_alloc_global_type  =
    | Alloc_Alloc_Global_Type
    
end
module RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  use RedBlackTree_Color_Type
  type redblacktree_node_type 'k 'v =
    | RedBlackTree_Node_Type (redblacktree_tree_type 'k 'v) (RedBlackTree_Color_Type.redblacktree_color_type) 'k 'v (redblacktree_tree_type 'k 'v)
    with redblacktree_tree_type 'k 'v =
    | RedBlackTree_Tree_Type (Core_Option_Option_Type.core_option_option_type (redblacktree_node_type 'k 'v))
    
  let function redblacktree_node_type_Node_left (self : redblacktree_node_type 'k 'v) : redblacktree_tree_type 'k 'v
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node_Type a _ _ _ _ -> a
      end
  let function redblacktree_node_type_Node_key (self : redblacktree_node_type 'k 'v) : 'k
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node_Type _ _ a _ _ -> a
      end
  let function redblacktree_node_type_Node_right (self : redblacktree_node_type 'k 'v) : redblacktree_tree_type 'k 'v
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node_Type _ _ _ _ a -> a
      end
  let function redblacktree_node_type_Node_val (self : redblacktree_node_type 'k 'v) : 'v
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node_Type _ _ _ a _ -> a
      end
  let function redblacktree_node_type_Node_color (self : redblacktree_node_type 'k 'v) : RedBlackTree_Color_Type.redblacktree_color_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Node_Type _ a _ _ _ -> a
      end
  let function redblacktree_tree_type_Tree_node (self : redblacktree_tree_type 'k 'v) : Core_Option_Option_Type.core_option_option_type (redblacktree_node_type 'k 'v)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Tree_Type a -> a
      end
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module RedBlackTree_Impl0_HasMapping_Interface
  type k
  type v
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  predicate has_mapping (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (k : ModelTy0.modelTy) (v : v)
end
module RedBlackTree_Impl0_HasMapping
  type k
  type v
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate has_mapping [#"../red_black_tree.rs" 31 4 31 53] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (k : ModelTy0.modelTy) (v : v)
    
   =
    [#"../red_black_tree.rs" 33 12 37 13] match (self) with
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_None_Type) -> false
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type (RedBlackTree_Node_Type.RedBlackTree_Node_Type left _ key val' right)) -> has_mapping left k v \/ has_mapping right k v \/ k = Model0.model key /\ v = val'
      end
end
module RedBlackTree_Impl0_SameMappings_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  predicate same_mappings (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (o : RedBlackTree_Node_Type.redblacktree_tree_type k v)
    
end
module RedBlackTree_Impl0_SameMappings
  type k
  type v
  use RedBlackTree_Node_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate same_mappings [#"../red_black_tree.rs" 42 4 42 43] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (o : RedBlackTree_Node_Type.redblacktree_tree_type k v)
    
   =
    [#"../red_black_tree.rs" 43 8 45 9] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping self k v = HasMapping0.has_mapping o k v
end
module RedBlackTree_Impl0_ModelAcc_Interface
  type k
  type v
  use map.Map
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  function model_acc (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (accu : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)) : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)
    
end
module RedBlackTree_Impl0_ModelAcc
  type k
  type v
  use map.Map
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc [#"../red_black_tree.rs" 49 4 49 82] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (accu : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)) : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)
    
   =
    [#"../red_black_tree.rs" 51 12 58 13] match (self) with
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_None_Type) -> accu
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type (RedBlackTree_Node_Type.RedBlackTree_Node_Type left _ key val' right)) -> let accu1 = model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Core_Option_Option_Type.Core_Option_Option_Some_Type val') in model_acc right accu2
      end
end
module RedBlackTree_Impl0_ModelAccHasMapping_Interface
  type k
  type v
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_has_mapping (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (accu : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)) (k : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl0_ModelAccHasMapping
  type k
  type v
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_has_mapping [#"../red_black_tree.rs" 65 4 65 81] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (accu : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 67 12 75 13] match (self) with
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_None_Type) -> ()
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type (RedBlackTree_Node_Type.RedBlackTree_Node_Type left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Core_Option_Option_Type.Core_Option_Option_Some_Type val') in model_acc_has_mapping right accu2 k
      end
  axiom model_acc_has_mapping_spec : forall self : RedBlackTree_Node_Type.redblacktree_tree_type k v, accu : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v), k : ModelTy0.modelTy . [#"../red_black_tree.rs" 63 4 64 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k \/ (exists v : (v) . Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.Core_Option_Option_Some_Type v /\ HasMapping0.has_mapping self k v)
end
module RedBlackTree_Impl0_ModelAccHasMapping_Impl
  type k
  type v
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  use Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  let rec ghost function model_acc_has_mapping (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (accu : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)) (k : ModelTy0.modelTy) : ()
    ensures { [#"../red_black_tree.rs" 63 4 64 93] Map.get (ModelAcc0.model_acc self accu) k = Map.get accu k \/ (exists v : (v) . Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.Core_Option_Option_Some_Type v /\ HasMapping0.has_mapping self k v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 67 12 75 13] match (self) with
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_None_Type) -> ()
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type (RedBlackTree_Node_Type.RedBlackTree_Node_Type left _ key val' right)) -> let _ = model_acc_has_mapping left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model0.model key in Map.set accu1 b' (Core_Option_Option_Type.Core_Option_Option_Some_Type val') in model_acc_has_mapping right accu2 k
      end
end
module Core_Cmp_Ordering_Type
  type core_cmp_ordering_type  =
    | Core_Cmp_Ordering_Less_Type
    | Core_Cmp_Ordering_Equal_Type
    | Core_Cmp_Ordering_Greater_Type
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
end
module RedBlackTree_Impl4_BstInvariantHere_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  predicate bst_invariant_here (self : RedBlackTree_Node_Type.redblacktree_node_type k v)
end
module RedBlackTree_Impl4_BstInvariantHere
  type k
  type v
  use RedBlackTree_Node_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate bst_invariant_here [#"../red_black_tree.rs" 175 4 175 39] (self : RedBlackTree_Node_Type.redblacktree_node_type k v)
    
   =
    [#"../red_black_tree.rs" 177 12 178 88] (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (RedBlackTree_Node_Type.redblacktree_node_type_Node_left self) k v -> LtLog0.lt_log k (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key self))) /\ (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (RedBlackTree_Node_Type.redblacktree_node_type_Node_right self) k v -> LtLog0.lt_log (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key self)) k)
end
module RedBlackTree_Impl5_BstInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  predicate bst_invariant (self : RedBlackTree_Node_Type.redblacktree_tree_type k v)
end
module RedBlackTree_Impl5_BstInvariant
  type k
  type v
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl4_BstInvariantHere_Interface as BstInvariantHere0 with type k = k, type v = v
  predicate bst_invariant [#"../red_black_tree.rs" 195 4 195 34] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v)
    
   =
    [#"../red_black_tree.rs" 197 12 203 13] match (self) with
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_None_Type) -> true
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type node) -> let RedBlackTree_Node_Type.RedBlackTree_Node_Type left _ _ _ right = node in BstInvariantHere0.bst_invariant_here node /\ bst_invariant left /\ bst_invariant right
      end
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.core_cmp_ordering_type) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.core_cmp_ordering_type . CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type)
end
module RedBlackTree_Impl0_HasMappingModelAcc_Interface
  type k
  type v
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_model_acc (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (accu : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)) (k : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl0_HasMappingModelAcc
  type k
  type v
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl0_ModelAccHasMapping_Interface as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function has_mapping_model_acc [#"../red_black_tree.rs" 82 4 84 29] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (accu : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 87 12 96 13] match (self) with
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_None_Type) -> ()
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type (RedBlackTree_Node_Type.RedBlackTree_Node_Type left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Core_Option_Option_Type.Core_Option_Option_Some_Type val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
  axiom has_mapping_model_acc_spec : forall self : RedBlackTree_Node_Type.redblacktree_tree_type k v, accu : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v), k : ModelTy0.modelTy . ([#"../red_black_tree.rs" 80 15 80 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 81 4 81 94] forall v : (v) . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.Core_Option_Option_Some_Type v)
end
module RedBlackTree_Impl0_HasMappingModelAcc_Impl
  type k
  type v
  use map.Map
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  use RedBlackTree_Node_Type
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  use Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  let rec ghost function has_mapping_model_acc (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (accu : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)) (k : ModelTy0.modelTy) : ()
    requires {[#"../red_black_tree.rs" 80 15 80 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 81 4 81 94] forall v : (v) . HasMapping0.has_mapping self k v -> Map.get (ModelAcc0.model_acc self accu) k = Core_Option_Option_Type.Core_Option_Option_Some_Type v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 87 12 96 13] match (self) with
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_None_Type) -> ()
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type (RedBlackTree_Node_Type.RedBlackTree_Node_Type left _ key val' right)) -> let _ = has_mapping_model_acc left accu k in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model0.model key in Map.set accu1 b' (Core_Option_Option_Type.Core_Option_Option_Some_Type val') in let _ = has_mapping_model_acc right accu2 k in ModelAccHasMapping0.model_acc_has_mapping right accu2 k
      end
end
module RedBlackTree_Impl3_Model_Interface
  type k
  type v
  use map.Map
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  function model (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)
    
end
module RedBlackTree_Impl3_Model
  type k
  type v
  use map.Map
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  use map.Const
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../red_black_tree.rs" 163 4 163 35] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)
    
   =
    [#"../red_black_tree.rs" 164 20 164 54] ModelAcc0.model_acc self (Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type))
end
module RedBlackTree_Impl3_ModelTy_Type
  type k
  type v
  use map.Map
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)
end
module RedBlackTree_Impl3
  type k
  type v
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  use Core_Option_Option_Type
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl3_ModelTy_Type as ModelTy0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = RedBlackTree_Node_Type.redblacktree_tree_type k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = RedBlackTree_Node_Type.redblacktree_tree_type k v,
  type modelTy = ModelTy0.modelTy
end
module RedBlackTree_Impl0_HasMappingModel_Interface
  type k
  type v
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_model (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (k : ModelTy0.modelTy) : ()
end
module RedBlackTree_Impl0_HasMappingModel
  type k
  type v
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  use map.Const
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMappingModelAcc_Interface as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone RedBlackTree_Impl0_ModelAccHasMapping_Interface as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_model [#"../red_black_tree.rs" 103 4 105 29] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (k : ModelTy0.modelTy) : ()
    
   =
    [#"../red_black_tree.rs" 108 12 108 61] let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type)) k
  axiom has_mapping_model_spec : forall self : RedBlackTree_Node_Type.redblacktree_tree_type k v, k : ModelTy0.modelTy . ([#"../red_black_tree.rs" 101 15 101 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 102 4 102 82] forall v : (v) . HasMapping0.has_mapping self k v = (Map.get (Model0.model self) k = Core_Option_Option_Type.Core_Option_Option_Some_Type v))
end
module RedBlackTree_Impl0_HasMappingModel_Impl
  type k
  type v
  use map.Map
  use map.Const
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  let rec ghost function has_mapping_model (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (k : ModelTy0.modelTy) : ()
    requires {[#"../red_black_tree.rs" 101 15 101 35] BstInvariant0.bst_invariant self}
    ensures { [#"../red_black_tree.rs" 102 4 102 82] forall v : (v) . HasMapping0.has_mapping self k v = (Map.get (Model0.model self) k = Core_Option_Option_Type.Core_Option_Option_Some_Type v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 108 12 108 61] let _ = ModelAccHasMapping0.model_acc_has_mapping self (Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type)) k in HasMappingModelAcc0.has_mapping_model_acc self (Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type)) k
end
module RedBlackTree_Impl0_HasMappingInj_Interface
  type k
  type v
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  function has_mapping_inj (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
    
end
module RedBlackTree_Impl0_HasMappingInj
  type k
  type v
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  use map.Map
  use Core_Option_Option_Type
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMappingModel_Interface as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function has_mapping_inj [#"../red_black_tree.rs" 118 4 120 29] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
    
   =
    [#"../red_black_tree.rs" 123 12 123 37] let _ = HasMappingModel0.has_mapping_model self k in match (Map.get (Model0.model self) k) with
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> ()
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _v -> ()
      end
  axiom has_mapping_inj_spec : forall self : RedBlackTree_Node_Type.redblacktree_tree_type k v, k : ModelTy0.modelTy, v1 : v, v2 : v . ([#"../red_black_tree.rs" 114 15 114 35] BstInvariant0.bst_invariant self) -> ([#"../red_black_tree.rs" 115 15 115 38] HasMapping0.has_mapping self k v1) -> ([#"../red_black_tree.rs" 116 15 116 38] HasMapping0.has_mapping self k v2) -> ([#"../red_black_tree.rs" 117 14 117 22] v1 = v2)
end
module RedBlackTree_Impl0_HasMappingInj_Impl
  type k
  type v
  use map.Map
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  let rec ghost function has_mapping_inj (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (k : ModelTy0.modelTy) (v1 : v) (v2 : v) : ()
    requires {[#"../red_black_tree.rs" 114 15 114 35] BstInvariant0.bst_invariant self}
    requires {[#"../red_black_tree.rs" 115 15 115 38] HasMapping0.has_mapping self k v1}
    requires {[#"../red_black_tree.rs" 116 15 116 38] HasMapping0.has_mapping self k v2}
    ensures { [#"../red_black_tree.rs" 117 14 117 22] v1 = v2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 123 12 123 37] let _ = HasMappingModel0.has_mapping_model self k in match (let a' = Model0.model self in Map.get a' k) with
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> ()
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _v -> ()
      end
end
module RedBlackTree_Impl1_HasMapping_Interface
  type k
  type v
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  predicate has_mapping (self : RedBlackTree_Node_Type.redblacktree_node_type k v) (k : ModelTy0.modelTy) (v : v)
end
module RedBlackTree_Impl1_HasMapping
  type k
  type v
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate has_mapping [#"../red_black_tree.rs" 133 4 133 53] (self : RedBlackTree_Node_Type.redblacktree_node_type k v) (k : ModelTy0.modelTy) (v : v)
    
   =
    [#"../red_black_tree.rs" 134 8 137 9] HasMapping0.has_mapping (RedBlackTree_Node_Type.redblacktree_node_type_Node_left self) k v \/ HasMapping0.has_mapping (RedBlackTree_Node_Type.redblacktree_node_type_Node_right self) k v \/ k = Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key self) /\ v = RedBlackTree_Node_Type.redblacktree_node_type_Node_val self
  axiom has_mapping_spec : forall self : RedBlackTree_Node_Type.redblacktree_node_type k v, k : ModelTy0.modelTy, v : v . [#"../red_black_tree.rs" 131 4 132 86] forall node : (RedBlackTree_Node_Type.redblacktree_node_type k v) . self = node -> has_mapping self k v = HasMapping0.has_mapping (RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type node)) k v
end
module RedBlackTree_Impl1_HasMapping_Impl
  type k
  type v
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  use Core_Option_Option_Type
  let rec ghost function has_mapping (self : RedBlackTree_Node_Type.redblacktree_node_type k v) (k : ModelTy0.modelTy) (v : v) : bool
    ensures { [#"../red_black_tree.rs" 131 4 132 86] forall node : (RedBlackTree_Node_Type.redblacktree_node_type k v) . self = node -> result = HasMapping0.has_mapping (RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type node)) k v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 134 8 137 9] HasMapping0.has_mapping (RedBlackTree_Node_Type.redblacktree_node_type_Node_left self) k v || HasMapping0.has_mapping (RedBlackTree_Node_Type.redblacktree_node_type_Node_right self) k v || (let b = Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key self) in pure {k = b}) && pure {v = RedBlackTree_Node_Type.redblacktree_node_type_Node_val self}
end
module RedBlackTree_Impl1_SameMappings_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  predicate same_mappings (self : RedBlackTree_Node_Type.redblacktree_node_type k v) (o : RedBlackTree_Node_Type.redblacktree_node_type k v)
    
end
module RedBlackTree_Impl1_SameMappings
  type k
  type v
  use RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  clone RedBlackTree_Impl1_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping1.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  predicate same_mappings [#"../red_black_tree.rs" 141 4 141 43] (self : RedBlackTree_Node_Type.redblacktree_node_type k v) (o : RedBlackTree_Node_Type.redblacktree_node_type k v)
    
   =
    [#"../red_black_tree.rs" 142 8 144 9] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping self k v = HasMapping0.has_mapping o k v
end
module RedBlackTree_Impl2_Model_Interface
  type k
  type v
  use map.Map
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  function model (self : RedBlackTree_Node_Type.redblacktree_node_type k v) : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)
    
end
module RedBlackTree_Impl2_Model
  type k
  type v
  use map.Map
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model [#"../red_black_tree.rs" 152 4 152 35] (self : RedBlackTree_Node_Type.redblacktree_node_type k v) : Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)
    
   =
    [#"../red_black_tree.rs" 153 8 155 9] ModelAcc0.model_acc (RedBlackTree_Node_Type.redblacktree_node_type_Node_right self) (Map.set (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_left self)) (Model1.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key self)) (Core_Option_Option_Type.Core_Option_Option_Some_Type (RedBlackTree_Node_Type.redblacktree_node_type_Node_val self)))
end
module RedBlackTree_Impl4_BstInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  predicate bst_invariant (self : RedBlackTree_Node_Type.redblacktree_node_type k v)
end
module RedBlackTree_Impl4_BstInvariant
  type k
  type v
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariantHere_Interface as BstInvariantHere0 with type k = k, type v = v
  predicate bst_invariant [#"../red_black_tree.rs" 183 4 183 34] (self : RedBlackTree_Node_Type.redblacktree_node_type k v)
    
   =
    [#"../red_black_tree.rs" 184 8 186 9] BstInvariantHere0.bst_invariant_here self /\ BstInvariant0.bst_invariant (RedBlackTree_Node_Type.redblacktree_node_type_Node_left self) /\ BstInvariant0.bst_invariant (RedBlackTree_Node_Type.redblacktree_node_type_Node_right self)
end
module RedBlackTree_Cpl_Type
  use RedBlackTree_Color_Type
  type redblacktree_cpl_type  =
    | RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.redblacktree_color_type)
    
  let function redblacktree_cpl_type_CPL_0 (self : redblacktree_cpl_type) : RedBlackTree_Color_Type.redblacktree_color_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Cpl_Type a -> a
      end
end
module RedBlackTree_Impl8_Color_Interface
  type k
  type v
  use RedBlackTree_Color_Type
  use RedBlackTree_Node_Type
  function color (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) : RedBlackTree_Color_Type.redblacktree_color_type
    
end
module RedBlackTree_Impl8_Color
  type k
  type v
  use RedBlackTree_Color_Type
  use RedBlackTree_Node_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  function color [#"../red_black_tree.rs" 273 4 273 27] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) : RedBlackTree_Color_Type.redblacktree_color_type
    
   =
    [#"../red_black_tree.rs" 275 12 278 13] match (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node self) with
      | Core_Option_Option_Type.Core_Option_Option_Some_Type (RedBlackTree_Node_Type.RedBlackTree_Node_Type _ color _ _ _) -> color
      | _ -> RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type
      end
end
module RedBlackTree_Impl9_ColorInvariantHere_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  predicate color_invariant_here (self : RedBlackTree_Node_Type.redblacktree_node_type k v)
end
module RedBlackTree_Impl9_ColorInvariantHere
  type k
  type v
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  predicate color_invariant_here [#"../red_black_tree.rs" 298 4 298 41] (self : RedBlackTree_Node_Type.redblacktree_node_type k v)
    
   =
    [#"../red_black_tree.rs" 299 20 299 102] Color0.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right self) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type /\ (RedBlackTree_Node_Type.redblacktree_node_type_Node_color self = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type \/ Color0.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_left self) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)
end
module RedBlackTree_Impl8_ColorInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  predicate color_invariant (self : RedBlackTree_Node_Type.redblacktree_tree_type k v)
end
module RedBlackTree_Impl8_ColorInvariant
  type k
  type v
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl9_ColorInvariantHere_Interface as ColorInvariantHere0 with type k = k, type v = v
  predicate color_invariant [#"../red_black_tree.rs" 283 4 283 36] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v)
    
   =
    [#"../red_black_tree.rs" 285 12 291 13] match (self) with
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_None_Type) -> true
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type node) -> let RedBlackTree_Node_Type.RedBlackTree_Node_Type left _ _ _ right = node in ColorInvariantHere0.color_invariant_here node /\ color_invariant left /\ color_invariant right
      end
end
module RedBlackTree_Impl9_ColorInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  predicate color_invariant (self : RedBlackTree_Node_Type.redblacktree_node_type k v)
end
module RedBlackTree_Impl9_ColorInvariant
  type k
  type v
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere_Interface as ColorInvariantHere0 with type k = k, type v = v
  predicate color_invariant [#"../red_black_tree.rs" 303 4 303 36] (self : RedBlackTree_Node_Type.redblacktree_node_type k v)
    
   =
    [#"../red_black_tree.rs" 304 8 304 112] ColorInvariantHere0.color_invariant_here self /\ ColorInvariant0.color_invariant (RedBlackTree_Node_Type.redblacktree_node_type_Node_left self) /\ ColorInvariant0.color_invariant (RedBlackTree_Node_Type.redblacktree_node_type_Node_right self)
end
module RedBlackTree_Impl6_MatchN_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  use RedBlackTree_Cpl_Type
  predicate match_n (self : RedBlackTree_Cpl_Type.redblacktree_cpl_type) (node : RedBlackTree_Node_Type.redblacktree_node_type k v)
    
end
module RedBlackTree_Impl6_MatchN
  type k
  type v
  use RedBlackTree_Node_Type
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl9_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  predicate match_n [#"../red_black_tree.rs" 246 4 246 46] (self : RedBlackTree_Cpl_Type.redblacktree_cpl_type) (node : RedBlackTree_Node_Type.redblacktree_node_type k v)
    
   =
    [#"../red_black_tree.rs" 248 12 248 58] RedBlackTree_Node_Type.redblacktree_node_type_Node_color node = RedBlackTree_Cpl_Type.redblacktree_cpl_type_CPL_0 self /\ ColorInvariant0.color_invariant node
end
module RedBlackTree_Impl6_MatchT_Interface
  type k
  type v
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN_Interface as MatchN0 with type k = k, type v = v
  use Core_Option_Option_Type
  use RedBlackTree_Color_Type
  predicate match_t (self : RedBlackTree_Cpl_Type.redblacktree_cpl_type) (tree : RedBlackTree_Node_Type.redblacktree_tree_type k v)
    
end
module RedBlackTree_Impl6_MatchT
  type k
  type v
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN_Interface as MatchN0 with type k = k, type v = v
  use Core_Option_Option_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl8_Color_Interface as Color1 with type k = k, type v = v
  predicate match_t [#"../red_black_tree.rs" 239 4 239 46] (self : RedBlackTree_Cpl_Type.redblacktree_cpl_type) (tree : RedBlackTree_Node_Type.redblacktree_tree_type k v)
    
   =
    [#"../red_black_tree.rs" 241 12 241 60] Color1.color tree = RedBlackTree_Cpl_Type.redblacktree_cpl_type_CPL_0 self /\ ColorInvariant0.color_invariant tree
  axiom match_t_spec : forall self : RedBlackTree_Cpl_Type.redblacktree_cpl_type, tree : RedBlackTree_Node_Type.redblacktree_tree_type k v . ([#"../red_black_tree.rs" 235 4 238 43] RedBlackTree_Cpl_Type.redblacktree_cpl_type_CPL_0 self = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> match_t self tree = (forall node : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node tree = Core_Option_Option_Type.Core_Option_Option_Some_Type node -> MatchN0.match_n (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) node)) && ([#"../red_black_tree.rs" 230 4 234 44] RedBlackTree_Cpl_Type.redblacktree_cpl_type_CPL_0 self = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> match_t self tree = (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node tree = Core_Option_Option_Type.Core_Option_Option_None_Type \/ (exists node : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node tree = Core_Option_Option_Type.Core_Option_Option_Some_Type node /\ MatchN0.match_n (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) node))) && ([#"../red_black_tree.rs" 225 4 229 41] RedBlackTree_Cpl_Type.redblacktree_cpl_type_CPL_0 self = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> match_t self tree = (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node tree <> Core_Option_Option_Type.Core_Option_Option_None_Type /\ (forall node : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node tree = Core_Option_Option_Type.Core_Option_Option_Some_Type node -> MatchN0.match_n (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) node))) && ([#"../red_black_tree.rs" 221 4 224 41] RedBlackTree_Cpl_Type.redblacktree_cpl_type_CPL_0 self = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> match_t self tree = (exists node : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node tree = Core_Option_Option_Type.Core_Option_Option_Some_Type node /\ MatchN0.match_n (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) node))
end
module RedBlackTree_Impl6_MatchT_Impl
  type k
  type v
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  let rec ghost function match_t (self : RedBlackTree_Cpl_Type.redblacktree_cpl_type) (tree : RedBlackTree_Node_Type.redblacktree_tree_type k v) : bool
    ensures { [#"../red_black_tree.rs" 221 4 224 41] RedBlackTree_Cpl_Type.redblacktree_cpl_type_CPL_0 self = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> result = (exists node : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node tree = Core_Option_Option_Type.Core_Option_Option_Some_Type node /\ MatchN0.match_n (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) node) }
    ensures { [#"../red_black_tree.rs" 225 4 229 41] RedBlackTree_Cpl_Type.redblacktree_cpl_type_CPL_0 self = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> result = (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node tree <> Core_Option_Option_Type.Core_Option_Option_None_Type /\ (forall node : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node tree = Core_Option_Option_Type.Core_Option_Option_Some_Type node -> MatchN0.match_n (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) node)) }
    ensures { [#"../red_black_tree.rs" 230 4 234 44] RedBlackTree_Cpl_Type.redblacktree_cpl_type_CPL_0 self = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> result = (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node tree = Core_Option_Option_Type.Core_Option_Option_None_Type \/ (exists node : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node tree = Core_Option_Option_Type.Core_Option_Option_Some_Type node /\ MatchN0.match_n (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) node)) }
    ensures { [#"../red_black_tree.rs" 235 4 238 43] RedBlackTree_Cpl_Type.redblacktree_cpl_type_CPL_0 self = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> result = (forall node : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node tree = Core_Option_Option_Type.Core_Option_Option_Some_Type node -> MatchN0.match_n (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) node) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 241 12 241 60] (let a = Color1.color tree in pure {a = RedBlackTree_Cpl_Type.redblacktree_cpl_type_CPL_0 self}) && ColorInvariant0.color_invariant tree
end
module RedBlackTree_Cpn_Type
  use RedBlackTree_Color_Type
  type redblacktree_cpn_type 'l 'r =
    | RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.redblacktree_color_type) 'l 'r
    
  let function redblacktree_cpn_type_CPN_0 (self : redblacktree_cpn_type 'l 'r) : RedBlackTree_Color_Type.redblacktree_color_type
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Cpn_Type a _ _ -> a
      end
  let function redblacktree_cpn_type_CPN_1 (self : redblacktree_cpn_type 'l 'r) : 'l = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Cpn_Type _ a _ -> a
      end
  let function redblacktree_cpn_type_CPN_2 (self : redblacktree_cpn_type 'l 'r) : 'r = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | RedBlackTree_Cpn_Type _ _ a -> a
      end
end
module RedBlackTree_Cp_MatchT_Interface
  type self
  type k
  type v
  use RedBlackTree_Node_Type
  predicate match_t (self : self) (tree : RedBlackTree_Node_Type.redblacktree_tree_type k v)
end
module RedBlackTree_Cp_MatchT
  type self
  type k
  type v
  use RedBlackTree_Node_Type
  predicate match_t [#"../red_black_tree.rs" 212 4 212 47] (self : self) (tree : RedBlackTree_Node_Type.redblacktree_tree_type k v)
    
end
module RedBlackTree_Impl7_MatchN_Interface
  type k
  type v
  type l
  type r
  use RedBlackTree_Node_Type
  use RedBlackTree_Cpn_Type
  predicate match_n (self : RedBlackTree_Cpn_Type.redblacktree_cpn_type l r) (node : RedBlackTree_Node_Type.redblacktree_node_type k v)
    
end
module RedBlackTree_Impl7_MatchN
  type k
  type v
  type l
  type r
  use RedBlackTree_Node_Type
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Cp_MatchT_Interface as MatchT1 with type self = r, type k = k, type v = v
  clone RedBlackTree_Cp_MatchT_Interface as MatchT0 with type self = l, type k = k, type v = v
  predicate match_n [#"../red_black_tree.rs" 264 4 264 46] (self : RedBlackTree_Cpn_Type.redblacktree_cpn_type l r) (node : RedBlackTree_Node_Type.redblacktree_node_type k v)
    
   =
    [#"../red_black_tree.rs" 265 8 267 9] RedBlackTree_Node_Type.redblacktree_node_type_Node_color node = RedBlackTree_Cpn_Type.redblacktree_cpn_type_CPN_0 self /\ MatchT0.match_t (RedBlackTree_Cpn_Type.redblacktree_cpn_type_CPN_1 self) (RedBlackTree_Node_Type.redblacktree_node_type_Node_left node) /\ MatchT1.match_t (RedBlackTree_Cpn_Type.redblacktree_cpn_type_CPN_2 self) (RedBlackTree_Node_Type.redblacktree_node_type_Node_right node)
end
module RedBlackTree_Impl7_MatchT_Interface
  type k
  type v
  type l
  type r
  use RedBlackTree_Node_Type
  use RedBlackTree_Cpn_Type
  predicate match_t (self : RedBlackTree_Cpn_Type.redblacktree_cpn_type l r) (tree : RedBlackTree_Node_Type.redblacktree_tree_type k v)
    
end
module RedBlackTree_Impl7_MatchT
  type k
  type v
  type l
  type r
  use RedBlackTree_Node_Type
  use RedBlackTree_Cpn_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl7_MatchN_Interface as MatchN0 with type k = k, type v = v, type l = l, type r = r
  use Core_Option_Option_Type
  predicate match_t [#"../red_black_tree.rs" 256 4 256 46] (self : RedBlackTree_Cpn_Type.redblacktree_cpn_type l r) (tree : RedBlackTree_Node_Type.redblacktree_tree_type k v)
    
   =
    [#"../red_black_tree.rs" 257 8 260 9] exists node : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node tree = Core_Option_Option_Type.Core_Option_Option_Some_Type node /\ MatchN0.match_n self node
end
module RedBlackTree_Impl10_Height_Interface
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use RedBlackTree_Node_Type
  function height (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) : int
end
module RedBlackTree_Impl10_Height
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  function height [#"../red_black_tree.rs" 313 4 313 26] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) : int
    
   =
    [#"../red_black_tree.rs" 315 12 323 13] match (self) with
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_None_Type) -> 0
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type (RedBlackTree_Node_Type.RedBlackTree_Node_Type left color _ _ _)) -> match (color) with
        | RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> height left
        | RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> height left + 1
        end
      end
  axiom height_spec : forall self : RedBlackTree_Node_Type.redblacktree_tree_type k v . [#"../red_black_tree.rs" 312 14 312 25] height self >= 0
end
module RedBlackTree_Impl10_Height_Impl
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use RedBlackTree_Color_Type
  use RedBlackTree_Node_Type
  let rec ghost function height (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) : int
    ensures { [#"../red_black_tree.rs" 312 14 312 25] result >= 0 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 315 12 323 13] match (self) with
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_None_Type) -> 0
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type (RedBlackTree_Node_Type.RedBlackTree_Node_Type left color _ _ _)) -> match (color) with
        | RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> height left
        | RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> height left + 1
        end
      end
end
module RedBlackTree_Impl11_HeightInvariantHere_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  predicate height_invariant_here (self : RedBlackTree_Node_Type.redblacktree_node_type k v)
end
module RedBlackTree_Impl11_HeightInvariantHere
  type k
  type v
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_Height_Interface as Height0 with type k = k, type v = v, axiom .
  predicate height_invariant_here [#"../red_black_tree.rs" 355 4 355 42] (self : RedBlackTree_Node_Type.redblacktree_node_type k v)
    
   =
    [#"../red_black_tree.rs" 356 20 356 61] Height0.height (RedBlackTree_Node_Type.redblacktree_node_type_Node_left self) = Height0.height (RedBlackTree_Node_Type.redblacktree_node_type_Node_right self)
end
module RedBlackTree_Impl10_HeightInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  predicate height_invariant (self : RedBlackTree_Node_Type.redblacktree_tree_type k v)
end
module RedBlackTree_Impl10_HeightInvariant
  type k
  type v
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl11_HeightInvariantHere_Interface as HeightInvariantHere0 with type k = k, type v = v
  predicate height_invariant [#"../red_black_tree.rs" 328 4 328 37] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v)
    
   =
    [#"../red_black_tree.rs" 330 12 336 13] match (self) with
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_None_Type) -> true
      | RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type node) -> let RedBlackTree_Node_Type.RedBlackTree_Node_Type left _ _ _ right = node in HeightInvariantHere0.height_invariant_here node /\ height_invariant left /\ height_invariant right
      end
end
module RedBlackTree_Impl11_Height_Interface
  type k
  type v
  use mach.int.Int
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl10_Height_Interface as Height0 with type k = k, type v = v, axiom .
  use Core_Option_Option_Type
  function height (self : RedBlackTree_Node_Type.redblacktree_node_type k v) : int
end
module RedBlackTree_Impl11_Height
  type k
  type v
  use mach.int.Int
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl10_Height_Interface as Height0 with type k = k, type v = v, axiom .
  use Core_Option_Option_Type
  use mach.int.Int32
  use RedBlackTree_Color_Type
  function height [#"../red_black_tree.rs" 345 4 345 26] (self : RedBlackTree_Node_Type.redblacktree_node_type k v) : int
    
   =
    [#"../red_black_tree.rs" 347 12 350 13] match (RedBlackTree_Node_Type.redblacktree_node_type_Node_color self) with
      | RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> Height0.height (RedBlackTree_Node_Type.redblacktree_node_type_Node_left self)
      | RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> Height0.height (RedBlackTree_Node_Type.redblacktree_node_type_Node_left self) + 1
      end
  axiom height_spec : forall self : RedBlackTree_Node_Type.redblacktree_node_type k v . [#"../red_black_tree.rs" 343 4 344 77] forall node : (RedBlackTree_Node_Type.redblacktree_node_type k v) . self = node -> height self = Height0.height (RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type node))
end
module RedBlackTree_Impl11_Height_Impl
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  use Core_Option_Option_Type
  let rec ghost function height (self : RedBlackTree_Node_Type.redblacktree_node_type k v) : int
    ensures { [#"../red_black_tree.rs" 343 4 344 77] forall node : (RedBlackTree_Node_Type.redblacktree_node_type k v) . self = node -> result = Height0.height (RedBlackTree_Node_Type.RedBlackTree_Tree_Type (Core_Option_Option_Type.Core_Option_Option_Some_Type node)) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../red_black_tree.rs" 347 12 350 13] match (RedBlackTree_Node_Type.redblacktree_node_type_Node_color self) with
      | RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> Height0.height (RedBlackTree_Node_Type.redblacktree_node_type_Node_left self)
      | RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> Height0.height (RedBlackTree_Node_Type.redblacktree_node_type_Node_left self) + 1
      end
end
module RedBlackTree_Impl11_HeightInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  predicate height_invariant (self : RedBlackTree_Node_Type.redblacktree_node_type k v)
end
module RedBlackTree_Impl11_HeightInvariant
  type k
  type v
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_HeightInvariant_Interface as HeightInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl11_HeightInvariantHere_Interface as HeightInvariantHere0 with type k = k, type v = v
  predicate height_invariant [#"../red_black_tree.rs" 360 4 360 37] (self : RedBlackTree_Node_Type.redblacktree_node_type k v)
    
   =
    [#"../red_black_tree.rs" 361 8 361 115] HeightInvariantHere0.height_invariant_here self /\ HeightInvariant0.height_invariant (RedBlackTree_Node_Type.redblacktree_node_type_Node_left self) /\ HeightInvariant0.height_invariant (RedBlackTree_Node_Type.redblacktree_node_type_Node_right self)
end
module RedBlackTree_Impl12_InternalInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  predicate internal_invariant (self : RedBlackTree_Node_Type.redblacktree_tree_type k v)
end
module RedBlackTree_Impl12_InternalInvariant
  type k
  type v
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_HeightInvariant_Interface as HeightInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl5_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  predicate internal_invariant [#"../red_black_tree.rs" 372 4 372 43] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v)
    
   =
    [#"../red_black_tree.rs" 374 12 374 59] BstInvariant0.bst_invariant self /\ HeightInvariant0.height_invariant self
end
module RedBlackTree_Impl12_Invariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  predicate invariant' (self : RedBlackTree_Node_Type.redblacktree_tree_type k v)
end
module RedBlackTree_Impl12_Invariant
  type k
  type v
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl12_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  predicate invariant' [#"../red_black_tree.rs" 379 4 379 34] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v)
   =
    [#"../red_black_tree.rs" 381 12 381 88] InternalInvariant0.internal_invariant self /\ ColorInvariant0.color_invariant self /\ Color0.color self = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type
end
module RedBlackTree_Impl13_InternalInvariant_Interface
  type k
  type v
  use RedBlackTree_Node_Type
  predicate internal_invariant (self : RedBlackTree_Node_Type.redblacktree_node_type k v)
end
module RedBlackTree_Impl13_InternalInvariant
  type k
  type v
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl11_HeightInvariant_Interface as HeightInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl4_BstInvariant_Interface as BstInvariant0 with type k = k, type v = v
  predicate internal_invariant [#"../red_black_tree.rs" 391 4 391 43] (self : RedBlackTree_Node_Type.redblacktree_node_type k v)
    
   =
    [#"../red_black_tree.rs" 393 12 393 59] BstInvariant0.bst_invariant self /\ HeightInvariant0.height_invariant self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module RedBlackTree_Impl14_IsRed_Interface
  type k
  type v
  use prelude.Borrow
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  val is_red [@cfg:stackify] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) : bool
    ensures { [#"../red_black_tree.rs" 401 14 401 45] result = (Color0.color self = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type) }
    
end
module RedBlackTree_Impl14_IsRed
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  use mach.int.Int
  use prelude.IntSize
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = RedBlackTree_Node_Type.redblacktree_tree_type k v
  let rec cfg is_red [@cfg:stackify] [#"../red_black_tree.rs" 402 4 402 28] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) : bool
    ensures { [#"../red_black_tree.rs" 401 14 401 45] result = (Color0.color self = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _2 : isize;
  var _3 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node self_1)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB2
      | _ -> goto BB5
      end
  }
  BB1 {
    _0 <- false;
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    switch (RedBlackTree_Node_Type.redblacktree_node_type_Node_color (Core_Option_Option_Type.core_option_option_type_Some_0 (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node self_1)))
      | RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> goto BB3
      | _ -> goto BB1
      end
  }
  BB3 {
    _0 <- true;
    goto BB4
  }
  BB4 {
    return _0
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface
  type self
  function default_log (_ : ()) : self
end
module CreusotContracts_Std1_Default_DefaultSpec_DefaultLog
  type self
  function default_log (_ : ()) : self
end
module Core_Mem_Take_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = DefaultLog0.default_log () }
    
end
module Core_Mem_Take
  type t
  use prelude.Borrow
  clone CreusotContracts_Std1_Default_DefaultSpec_DefaultLog_Interface as DefaultLog0 with type self = t
  val take [@cfg:stackify] (dest : borrowed t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = DefaultLog0.default_log () }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Core_Option_Option_Type
  val unwrap [@cfg:stackify] (self : Core_Option_Option_Type.core_option_option_type t) : t
    requires {self <> Core_Option_Option_Type.Core_Option_Option_None_Type}
    ensures { Core_Option_Option_Type.Core_Option_Option_Some_Type result = self }
    
end
module Core_Option_Impl0_Unwrap
  type t
  use Core_Option_Option_Type
  val unwrap [@cfg:stackify] (self : Core_Option_Option_Type.core_option_option_type t) : t
    requires {self <> Core_Option_Option_Type.Core_Option_Option_None_Type}
    ensures { Core_Option_Option_Type.Core_Option_Option_Some_Type result = self }
    
end
module Core_Mem_Swap_Interface
  type t
  use prelude.Borrow
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ x =  * y }
    ensures {  ^ y =  * x }
    
end
module Core_Mem_Swap
  type t
  use prelude.Borrow
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ x =  * y }
    ensures {  ^ y =  * x }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  use prelude.Opaque
  type creusotcontracts_logic_ghost_ghost_type 't =
    | CreusotContracts_Logic_Ghost_Ghost_Type opaque_ptr
    
end
module CreusotContracts_Std1_Option_Impl0_DefaultLog_Interface
  type t
  use Core_Option_Option_Type
  function default_log (_ : ()) : Core_Option_Option_Type.core_option_option_type t
end
module CreusotContracts_Std1_Option_Impl0_DefaultLog
  type t
  use Core_Option_Option_Type
  function default_log (_ : ()) : Core_Option_Option_Type.core_option_option_type t =
    Core_Option_Option_Type.Core_Option_Option_None_Type
end
module CreusotContracts_Std1_Option_Impl0
  type t
end
module RedBlackTree_Impl15_RotateRight_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone RedBlackTree_Impl10_Height_Interface as Height1 with type k = k, type v = v, axiom .
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl11_Height_Interface as Height0 with type k = k, type v = v,
  function Height0.height = Height1.height, axiom .
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl13_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val rotate_right [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)) : ()
    requires {[#"../red_black_tree.rs" 414 15 414 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 415 15 415 42] Color0.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type}
    ensures { [#"../red_black_tree.rs" 416 14 416 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 417 14 417 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 418 14 418 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 419 14 419 41] LtLog0.lt_log (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( ^ self))) (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 420 14 420 42] Color0.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( ^ self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type }
    ensures { [#"../red_black_tree.rs" 421 14 421 44] RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( ^ self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 422 4 425 36] exists r : (RedBlackTree_Node_Type.redblacktree_node_type k v) . exists l : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type l /\ RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( ^ self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type r /\ (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( ^ self), RedBlackTree_Node_Type.redblacktree_node_type_Node_left r, RedBlackTree_Node_Type.redblacktree_node_type_Node_right r) = (RedBlackTree_Node_Type.redblacktree_node_type_Node_left l, RedBlackTree_Node_Type.redblacktree_node_type_Node_right l, RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_key r = RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self) }
    
end
module RedBlackTree_Impl15_RotateRight
  type k
  type v
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl10_Height as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl11_Height as Height0 with type k = k, type v = v, function Height0.height = Height1.height,
  axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  use CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = RedBlackTree_Color_Type.redblacktree_color_type
  clone Core_Mem_Swap_Interface as Swap2 with type t = RedBlackTree_Color_Type.redblacktree_color_type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone Core_Mem_Take_Interface as Take0 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
  let rec cfg rotate_right [@cfg:stackify] [#"../red_black_tree.rs" 426 4 426 30] (self : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)) : ()
    requires {[#"../red_black_tree.rs" 414 15 414 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 415 15 415 42] Color0.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type}
    ensures { [#"../red_black_tree.rs" 416 14 416 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 417 14 417 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 418 14 418 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 419 14 419 41] LtLog0.lt_log (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( ^ self))) (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self))) }
    ensures { [#"../red_black_tree.rs" 420 14 420 42] Color0.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( ^ self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type }
    ensures { [#"../red_black_tree.rs" 421 14 421 44] RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( ^ self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 422 4 425 36] exists r : (RedBlackTree_Node_Type.redblacktree_node_type k v) . exists l : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type l /\ RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( ^ self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type r /\ (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( ^ self), RedBlackTree_Node_Type.redblacktree_node_type_Node_left r, RedBlackTree_Node_Type.redblacktree_node_type_Node_right r) = (RedBlackTree_Node_Type.redblacktree_node_type_Node_left l, RedBlackTree_Node_Type.redblacktree_node_type_Node_right l, RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_key r = RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  ghost var old_self_2 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _3 : ();
  var x_4 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  var _5 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _6 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _7 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _8 : ();
  var _9 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _10 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _11 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _12 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _13 : ();
  var _14 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _15 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _16 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _17 : ();
  var _18 : borrowed (RedBlackTree_Color_Type.redblacktree_color_type);
  var _19 : borrowed (RedBlackTree_Color_Type.redblacktree_color_type);
  var _20 : borrowed (RedBlackTree_Color_Type.redblacktree_color_type);
  var _21 : borrowed (RedBlackTree_Color_Type.redblacktree_color_type);
  var _22 : ();
  var _23 : ();
  var _24 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _25 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _26 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 427 23 427 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _7 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a = RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self_1) in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _7)) b c d e) };
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _5 <- ([#"../red_black_tree.rs" 435 20 435 55] Take0.take _6);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _7 };
    x_4 <- ([#"../red_black_tree.rs" 435 20 435 64] Unwrap0.unwrap _5);
    goto BB3
  }
  BB3 {
    _10 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type ( ^ _10) b c d e) };
    _9 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _9) };
    _12 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_right x_4);
    x_4 <- (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e = x_4 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d ( ^ _12));
    _11 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    _8 <- ([#"../red_black_tree.rs" 442 8 442 52] Swap0.swap _9 _11);
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve _10 };
    assume { Resolve2.resolve _12 };
    _14 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _14) };
    _16 <- borrow_mut x_4;
    x_4 <-  ^ _16;
    _15 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _15) };
    _13 <- ([#"../red_black_tree.rs" 448 8 448 36] Swap1.swap _14 _15);
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _16 };
    _19 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a ( ^ _19) c d e) };
    _18 <- borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _21 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_color x_4);
    x_4 <- (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e = x_4 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a ( ^ _21) c d e);
    _20 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _20) };
    _17 <- ([#"../red_black_tree.rs" 449 8 449 53] Swap2.swap _18 _20);
    goto BB6
  }
  BB6 {
    assume { Resolve4.resolve _19 };
    assume { Resolve4.resolve _21 };
    assert { [#"../red_black_tree.rs" 455 8 455 78] HasMapping0.has_mapping (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * old_self_2)) (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self_1))) (RedBlackTree_Node_Type.redblacktree_node_type_Node_val ( * self_1)) };
    _22 <- ();
    assert { [#"../red_black_tree.rs" 456 8 456 114] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (RedBlackTree_Node_Type.redblacktree_node_type_Node_left x_4) k v -> HasMapping0.has_mapping (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * old_self_2)) k v };
    goto BB7
  }
  BB7 {
    _23 <- ();
    assume { Resolve5.resolve _26 };
    _26 <- x_4;
    x_4 <- any RedBlackTree_Node_Type.redblacktree_node_type k v;
    _25 <- Core_Option_Option_Type.Core_Option_Option_Some_Type _26;
    goto BB8
  }
  BB8 {
    _24 <- RedBlackTree_Node_Type.RedBlackTree_Tree_Type _25;
    goto BB9
  }
  BB9 {
    assume { Resolve6.resolve (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self_1)) };
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d _24) };
    goto BB10
  }
  BB10 {
    assume { Resolve7.resolve self_1 };
    goto BB11
  }
  BB11 {
    _0 <- ();
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module RedBlackTree_Impl15_RotateLeft_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone RedBlackTree_Impl10_Height_Interface as Height1 with type k = k, type v = v, axiom .
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl11_Height_Interface as Height0 with type k = k, type v = v,
  function Height0.height = Height1.height, axiom .
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl13_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val rotate_left [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)) : ()
    requires {[#"../red_black_tree.rs" 465 15 465 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 466 15 466 43] Color0.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type}
    ensures { [#"../red_black_tree.rs" 467 14 467 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 468 14 468 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 469 14 469 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 470 14 470 41] LtLog0.lt_log (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self))) (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 471 14 471 41] Color0.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( ^ self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type }
    ensures { [#"../red_black_tree.rs" 472 14 472 44] RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( ^ self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 473 4 476 36] exists r : (RedBlackTree_Node_Type.redblacktree_node_type k v) . exists l : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type r /\ RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( ^ self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type l /\ (RedBlackTree_Node_Type.redblacktree_node_type_Node_left l, RedBlackTree_Node_Type.redblacktree_node_type_Node_right l, RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( ^ self)) = (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self), RedBlackTree_Node_Type.redblacktree_node_type_Node_left r, RedBlackTree_Node_Type.redblacktree_node_type_Node_right r) /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_key l = RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self) }
    
end
module RedBlackTree_Impl15_RotateLeft
  type k
  type v
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl10_Height as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl11_Height as Height0 with type k = k, type v = v, function Height0.height = Height1.height,
  axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  use CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = RedBlackTree_Color_Type.redblacktree_color_type
  clone Core_Mem_Swap_Interface as Swap2 with type t = RedBlackTree_Color_Type.redblacktree_color_type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone Core_Mem_Take_Interface as Take0 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
  let rec cfg rotate_left [@cfg:stackify] [#"../red_black_tree.rs" 477 4 477 29] (self : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)) : ()
    requires {[#"../red_black_tree.rs" 465 15 465 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 466 15 466 43] Color0.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type}
    ensures { [#"../red_black_tree.rs" 467 14 467 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 468 14 468 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 469 14 469 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 470 14 470 41] LtLog0.lt_log (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self))) (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( ^ self))) }
    ensures { [#"../red_black_tree.rs" 471 14 471 41] Color0.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( ^ self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type }
    ensures { [#"../red_black_tree.rs" 472 14 472 44] RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( ^ self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self) }
    ensures { [#"../red_black_tree.rs" 473 4 476 36] exists r : (RedBlackTree_Node_Type.redblacktree_node_type k v) . exists l : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type r /\ RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( ^ self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type l /\ (RedBlackTree_Node_Type.redblacktree_node_type_Node_left l, RedBlackTree_Node_Type.redblacktree_node_type_Node_right l, RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( ^ self)) = (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self), RedBlackTree_Node_Type.redblacktree_node_type_Node_left r, RedBlackTree_Node_Type.redblacktree_node_type_Node_right r) /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_key l = RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  ghost var old_self_2 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _3 : ();
  var x_4 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  var _5 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _6 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _7 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _8 : ();
  var _9 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _10 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _11 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _12 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _13 : ();
  var _14 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _15 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _16 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _17 : ();
  var _18 : borrowed (RedBlackTree_Color_Type.redblacktree_color_type);
  var _19 : borrowed (RedBlackTree_Color_Type.redblacktree_color_type);
  var _20 : borrowed (RedBlackTree_Color_Type.redblacktree_color_type);
  var _21 : borrowed (RedBlackTree_Color_Type.redblacktree_color_type);
  var _22 : ();
  var _23 : ();
  var _24 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _25 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _26 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 478 23 478 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _7 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a = RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self_1) in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _7))) };
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _5 <- ([#"../red_black_tree.rs" 479 20 479 56] Take0.take _6);
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve _7 };
    x_4 <- ([#"../red_black_tree.rs" 479 20 479 65] Unwrap0.unwrap _5);
    goto BB3
  }
  BB3 {
    _10 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d ( ^ _10)) };
    _9 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _9) };
    _12 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_left x_4);
    x_4 <- (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e = x_4 in RedBlackTree_Node_Type.RedBlackTree_Node_Type ( ^ _12) b c d e);
    _11 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    _8 <- ([#"../red_black_tree.rs" 480 8 480 52] Swap0.swap _9 _11);
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve _10 };
    assume { Resolve2.resolve _12 };
    _14 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _14) };
    _16 <- borrow_mut x_4;
    x_4 <-  ^ _16;
    _15 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _15) };
    _13 <- ([#"../red_black_tree.rs" 481 8 481 36] Swap1.swap _14 _15);
    goto BB5
  }
  BB5 {
    assume { Resolve3.resolve _16 };
    _19 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a ( ^ _19) c d e) };
    _18 <- borrow_mut ( * _19);
    _19 <- { _19 with current = ( ^ _18) };
    _21 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_color x_4);
    x_4 <- (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e = x_4 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a ( ^ _21) c d e);
    _20 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _20) };
    _17 <- ([#"../red_black_tree.rs" 482 8 482 53] Swap2.swap _18 _20);
    goto BB6
  }
  BB6 {
    assume { Resolve4.resolve _19 };
    assume { Resolve4.resolve _21 };
    assert { [#"../red_black_tree.rs" 483 8 483 79] HasMapping0.has_mapping (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * old_self_2)) (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self_1))) (RedBlackTree_Node_Type.redblacktree_node_type_Node_val ( * self_1)) };
    _22 <- ();
    assert { [#"../red_black_tree.rs" 484 8 484 116] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping (RedBlackTree_Node_Type.redblacktree_node_type_Node_right x_4) k v -> HasMapping0.has_mapping (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * old_self_2)) k v };
    goto BB7
  }
  BB7 {
    _23 <- ();
    assume { Resolve5.resolve _26 };
    _26 <- x_4;
    x_4 <- any RedBlackTree_Node_Type.redblacktree_node_type k v;
    _25 <- Core_Option_Option_Type.Core_Option_Option_Some_Type _26;
    goto BB8
  }
  BB8 {
    _24 <- RedBlackTree_Node_Type.RedBlackTree_Tree_Type _25;
    goto BB9
  }
  BB9 {
    assume { Resolve6.resolve (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self_1)) };
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type _24 b c d e) };
    goto BB10
  }
  BB10 {
    assume { Resolve7.resolve self_1 };
    goto BB11
  }
  BB11 {
    _0 <- ();
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Core_Option_Impl0_AsMut_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type
  val as_mut [@cfg:stackify] (self : borrowed (Core_Option_Option_Type.core_option_option_type t)) : Core_Option_Option_Type.core_option_option_type (borrowed t)
    ensures {  * self = Core_Option_Option_Type.Core_Option_Option_None_Type -> result = Core_Option_Option_Type.Core_Option_Option_None_Type /\  ^ self = Core_Option_Option_Type.Core_Option_Option_None_Type }
    ensures {  * self = Core_Option_Option_Type.Core_Option_Option_None_Type \/ (exists r : (borrowed t) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type r /\  * self = Core_Option_Option_Type.Core_Option_Option_Some_Type ( * r) /\  ^ self = Core_Option_Option_Type.Core_Option_Option_Some_Type ( ^ r)) }
    
end
module Core_Option_Impl0_AsMut
  type t
  use prelude.Borrow
  use Core_Option_Option_Type
  val as_mut [@cfg:stackify] (self : borrowed (Core_Option_Option_Type.core_option_option_type t)) : Core_Option_Option_Type.core_option_option_type (borrowed t)
    ensures {  * self = Core_Option_Option_Type.Core_Option_Option_None_Type -> result = Core_Option_Option_Type.Core_Option_Option_None_Type /\  ^ self = Core_Option_Option_Type.Core_Option_Option_None_Type }
    ensures {  * self = Core_Option_Option_Type.Core_Option_Option_None_Type \/ (exists r : (borrowed t) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type r /\  * self = Core_Option_Option_Type.Core_Option_Option_Some_Type ( * r) /\  ^ self = Core_Option_Option_Type.Core_Option_Option_Some_Type ( ^ r)) }
    
end
module RedBlackTree_Impl15_FlipColors_Interface
  type k
  type v
  use prelude.Borrow
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_Height_Interface as Height1 with type k = k, type v = v, axiom .
  use RedBlackTree_Color_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  use Core_Option_Option_Type
  clone RedBlackTree_Impl11_Height_Interface as Height0 with type k = k, type v = v,
  function Height0.height = Height1.height, axiom .
  clone RedBlackTree_Impl8_Color_Interface as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl13_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val flip_colors [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)) : ()
    requires {[#"../red_black_tree.rs" 488 15 488 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 489 15 489 40] RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) <> Core_Option_Option_Type.Core_Option_Option_None_Type}
    requires {[#"../red_black_tree.rs" 490 15 490 41] RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) <> Core_Option_Option_Type.Core_Option_Option_None_Type}
    requires {[#"../red_black_tree.rs" 491 15 491 60] Color0.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) = Color0.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self))}
    ensures { [#"../red_black_tree.rs" 492 14 492 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 493 14 493 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 494 14 494 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 495 14 495 40] RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( ^ self) }
    ensures { [#"../red_black_tree.rs" 496 4 498 70] exists l2 : (RedBlackTree_Node_Type.redblacktree_node_type k v) . exists l1 : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type l1 /\ RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( ^ self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type l2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_left l1 = RedBlackTree_Node_Type.redblacktree_node_type_Node_left l2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_right l1 = RedBlackTree_Node_Type.redblacktree_node_type_Node_right l2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_key l1 = RedBlackTree_Node_Type.redblacktree_node_type_Node_key l2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_color l2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( ^ self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_color l1 }
    ensures { [#"../red_black_tree.rs" 499 4 501 90] exists r2 : (RedBlackTree_Node_Type.redblacktree_node_type k v) . exists r1 : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type r1 /\ RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( ^ self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type r2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_left r1 = RedBlackTree_Node_Type.redblacktree_node_type_Node_left r2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_right r1 = RedBlackTree_Node_Type.redblacktree_node_type_Node_right r2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_key r1 = RedBlackTree_Node_Type.redblacktree_node_type_Node_key r2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_color r2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( ^ self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_color r1 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_key r1 = RedBlackTree_Node_Type.redblacktree_node_type_Node_key r2 }
    
end
module RedBlackTree_Impl15_FlipColors
  type k
  type v
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl10_Height as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping1.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone RedBlackTree_Impl11_Height as Height0 with type k = k, type v = v, function Height0.height = Height1.height,
  axiom .
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = RedBlackTree_Color_Type.redblacktree_color_type
  clone Core_Mem_Swap_Interface as Swap0 with type t = RedBlackTree_Color_Type.redblacktree_color_type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  let rec cfg flip_colors [@cfg:stackify] [#"../red_black_tree.rs" 502 4 502 29] (self : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)) : ()
    requires {[#"../red_black_tree.rs" 488 15 488 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 489 15 489 40] RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) <> Core_Option_Option_Type.Core_Option_Option_None_Type}
    requires {[#"../red_black_tree.rs" 490 15 490 41] RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) <> Core_Option_Option_Type.Core_Option_Option_None_Type}
    requires {[#"../red_black_tree.rs" 491 15 491 60] Color0.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) = Color0.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self))}
    ensures { [#"../red_black_tree.rs" 492 14 492 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 493 14 493 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 494 14 494 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 495 14 495 40] RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( ^ self) }
    ensures { [#"../red_black_tree.rs" 496 4 498 70] exists l2 : (RedBlackTree_Node_Type.redblacktree_node_type k v) . exists l1 : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type l1 /\ RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( ^ self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type l2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_left l1 = RedBlackTree_Node_Type.redblacktree_node_type_Node_left l2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_right l1 = RedBlackTree_Node_Type.redblacktree_node_type_Node_right l2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_key l1 = RedBlackTree_Node_Type.redblacktree_node_type_Node_key l2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_color l2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( ^ self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_color l1 }
    ensures { [#"../red_black_tree.rs" 499 4 501 90] exists r2 : (RedBlackTree_Node_Type.redblacktree_node_type k v) . exists r1 : (RedBlackTree_Node_Type.redblacktree_node_type k v) . RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type r1 /\ RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( ^ self)) = Core_Option_Option_Type.Core_Option_Option_Some_Type r2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_left r1 = RedBlackTree_Node_Type.redblacktree_node_type_Node_left r2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_right r1 = RedBlackTree_Node_Type.redblacktree_node_type_Node_right r2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_key r1 = RedBlackTree_Node_Type.redblacktree_node_type_Node_key r2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_color r2 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( ^ self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_color r1 /\ RedBlackTree_Node_Type.redblacktree_node_type_Node_key r1 = RedBlackTree_Node_Type.redblacktree_node_type_Node_key r2 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _2 : RedBlackTree_Color_Type.redblacktree_color_type;
  var _3 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _4 : Core_Option_Option_Type.core_option_option_type (borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _5 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _6 : ();
  var _7 : borrowed (RedBlackTree_Color_Type.redblacktree_color_type);
  var _8 : borrowed (RedBlackTree_Color_Type.redblacktree_color_type);
  var _9 : borrowed (RedBlackTree_Color_Type.redblacktree_color_type);
  var _10 : borrowed (RedBlackTree_Color_Type.redblacktree_color_type);
  var _11 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _12 : Core_Option_Option_Type.core_option_option_type (borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _13 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self_1);
    _5 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a = RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self_1) in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _5)) b c d e) };
    _4 <- ([#"../red_black_tree.rs" 503 8 503 31] AsMut0.as_mut _5);
    goto BB1
  }
  BB1 {
    _3 <- ([#"../red_black_tree.rs" 503 8 503 40] Unwrap0.unwrap _4);
    goto BB2
  }
  BB2 {
    _3 <- { _3 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * _3 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a _2 c d e) };
    _2 <- any RedBlackTree_Color_Type.redblacktree_color_type;
    assume { Resolve0.resolve _3 };
    _8 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a ( ^ _8) c d e) };
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    _13 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a = RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self_1) in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _13))) };
    _12 <- ([#"../red_black_tree.rs" 504 45 504 69] AsMut0.as_mut _13);
    goto BB3
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    _11 <- ([#"../red_black_tree.rs" 504 45 504 78] Unwrap0.unwrap _12);
    goto BB4
  }
  BB4 {
    _10 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * _11));
    _11 <- { _11 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * _11 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a ( ^ _10) c d e) };
    assume { Resolve0.resolve _11 };
    _9 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _9) };
    _6 <- ([#"../red_black_tree.rs" 504 8 504 85] Swap0.swap _7 _9);
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve _8 };
    assume { Resolve2.resolve _10 };
    _0 <- ();
    return _0
  }
  
end
module RedBlackTree_Cp_MatchN_Interface
  type self
  type k
  type v
  use RedBlackTree_Node_Type
  predicate match_n (self : self) (node : RedBlackTree_Node_Type.redblacktree_node_type k v)
end
module RedBlackTree_Cp_MatchN
  type self
  type k
  type v
  use RedBlackTree_Node_Type
  predicate match_n [#"../red_black_tree.rs" 215 4 215 47] (self : self) (node : RedBlackTree_Node_Type.redblacktree_node_type k v)
    
end
module RedBlackTree_Impl7
  type k
  type v
  type l
  type r
  use RedBlackTree_Node_Type
  clone RedBlackTree_Cp_MatchT as MatchT3 with type self = r, type k = k, type v = v
  clone RedBlackTree_Cp_MatchT as MatchT2 with type self = l, type k = k, type v = v
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN0 with type k = k, type v = v, type l = l, type r = r,
  predicate MatchT0.match_t = MatchT2.match_t, predicate MatchT1.match_t = MatchT3.match_t
  clone RedBlackTree_Cp_MatchN_Interface as MatchN1 with type self = RedBlackTree_Cpn_Type.redblacktree_cpn_type l r,
  type k = k, type v = v, predicate match_n = MatchN0.match_n
  clone RedBlackTree_Impl7_MatchT as MatchT0 with type k = k, type v = v, type l = l, type r = r,
  predicate MatchN0.match_n = MatchN0.match_n
  clone RedBlackTree_Cp_MatchT_Interface as MatchT1 with type self = RedBlackTree_Cpn_Type.redblacktree_cpn_type l r,
  type k = k, type v = v, predicate match_t = MatchT0.match_t
end
module RedBlackTree_Impl6
  type k
  type v
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Cp_MatchN_Interface as MatchN1 with type self = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  type k = k, type v = v, predicate match_n = MatchN0.match_n
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color1.color = Color1.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Cp_MatchT_Interface as MatchT1 with type self = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  type k = k, type v = v, predicate match_t = MatchT0.match_t
end
module Core_Option_Impl0_AsRef_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type
  val as_ref [@cfg:stackify] (self : Core_Option_Option_Type.core_option_option_type t) : Core_Option_Option_Type.core_option_option_type t
    ensures { self = Core_Option_Option_Type.Core_Option_Option_None_Type -> result = Core_Option_Option_Type.Core_Option_Option_None_Type }
    ensures { self = Core_Option_Option_Type.Core_Option_Option_None_Type \/ (exists r : (borrowed t) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type ( * r) /\ self = Core_Option_Option_Type.Core_Option_Option_Some_Type ( * r)) }
    
end
module Core_Option_Impl0_AsRef
  type t
  use prelude.Borrow
  use Core_Option_Option_Type
  val as_ref [@cfg:stackify] (self : Core_Option_Option_Type.core_option_option_type t) : Core_Option_Option_Type.core_option_option_type t
    ensures { self = Core_Option_Option_Type.Core_Option_Option_None_Type -> result = Core_Option_Option_Type.Core_Option_Option_None_Type }
    ensures { self = Core_Option_Option_Type.Core_Option_Option_None_Type \/ (exists r : (borrowed t) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type ( * r) /\ self = Core_Option_Option_Type.Core_Option_Option_Some_Type ( * r)) }
    
end
module RedBlackTree_Impl15_Balance_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl10_Height_Interface as Height1 with type k = k, type v = v, axiom .
  use Core_Option_Option_Type
  use RedBlackTree_Cpl_Type
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN_Interface as MatchN2 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type
  clone RedBlackTree_Impl6_MatchN_Interface as MatchN1 with type k = k, type v = v
  clone RedBlackTree_Impl7_MatchN_Interface as MatchN0 with type k = k, type v = v,
  type l = RedBlackTree_Cpn_Type.redblacktree_cpn_type (RedBlackTree_Cpl_Type.redblacktree_cpl_type) (RedBlackTree_Cpl_Type.redblacktree_cpl_type),
  type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type
  clone RedBlackTree_Impl11_Height_Interface as Height0 with type k = k, type v = v,
  function Height0.height = Height1.height, axiom .
  clone RedBlackTree_Impl1_SameMappings_Interface as SameMappings0 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Interface as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl13_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val balance [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)) : ()
    requires {[#"../red_black_tree.rs" 507 15 507 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 508 4 509 47] RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type /\ Color1.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> ColorInvariant0.color_invariant (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self))}
    requires {[#"../red_black_tree.rs" 510 4 511 48] RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type /\ Color1.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> ColorInvariant0.color_invariant (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 512 4 512 110] RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type /\ Color1.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type /\ Color1.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> false}
    ensures { [#"../red_black_tree.rs" 513 14 513 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 514 14 514 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 515 14 515 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 516 4 517 34] ColorInvariant0.color_invariant (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) /\ Color1.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 518 4 519 39] MatchN0.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( * self) -> MatchN1.match_n (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 520 4 521 63] MatchN2.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type))) ( * self) -> MatchN2.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 522 4 523 61] MatchN2.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type))) ( * self) -> MatchN2.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 524 4 525 39] MatchN2.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type))) ( * self) -> MatchN1.match_n (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) ( ^ self) }
    
end
module RedBlackTree_Impl15_Balance
  type k
  type v
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl10_Height as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN1 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT1 with type k = k, type v = v, predicate MatchN0.match_n = MatchN1.match_n,
  function Color1.color = Color1.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN2 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchT0.match_t = MatchT1.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl7_MatchT as MatchT0 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchN0.match_n = MatchN2.match_n
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping1.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl7_MatchN as MatchN0 with type k = k, type v = v,
  type l = RedBlackTree_Cpn_Type.redblacktree_cpn_type (RedBlackTree_Cpl_Type.redblacktree_cpl_type) (RedBlackTree_Cpl_Type.redblacktree_cpl_type),
  type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl11_Height as Height0 with type k = k, type v = v, function Height0.height = Height1.height,
  axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl15_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color1.color, function Height0.height = Height0.height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Height1.height = Height1.height
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color1.color, predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  function Height0.height = Height0.height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, function Height1.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl15_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color1.color, predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  function Height0.height = Height0.height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, function Height1.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color1.color
  let rec cfg balance [@cfg:stackify] [#"../red_black_tree.rs" 526 4 526 25] (self : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)) : ()
    requires {[#"../red_black_tree.rs" 507 15 507 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 508 4 509 47] RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type /\ Color1.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> ColorInvariant0.color_invariant (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self))}
    requires {[#"../red_black_tree.rs" 510 4 511 48] RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type /\ Color1.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> ColorInvariant0.color_invariant (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self))}
    requires {[#"../red_black_tree.rs" 512 4 512 110] RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( * self) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type /\ Color1.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type /\ Color1.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type -> false}
    ensures { [#"../red_black_tree.rs" 513 14 513 42] SameMappings0.same_mappings ( * self) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 514 14 514 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 515 14 515 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 516 4 517 34] ColorInvariant0.color_invariant (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) /\ Color1.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type ->  * self =  ^ self }
    ensures { [#"../red_black_tree.rs" 518 4 519 39] MatchN0.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( * self) -> MatchN1.match_n (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 520 4 521 63] MatchN2.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type))) ( * self) -> MatchN2.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 522 4 523 61] MatchN2.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type))) ( * self) -> MatchN2.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( ^ self) }
    ensures { [#"../red_black_tree.rs" 524 4 525 39] MatchN2.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type))) ( * self) -> MatchN1.match_n (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _2 : ();
  var _3 : bool;
  var _4 : bool;
  var _5 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _6 : bool;
  var _7 : bool;
  var _8 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _9 : ();
  var _10 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _11 : ();
  var _12 : bool;
  var _13 : bool;
  var _14 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _15 : bool;
  var _16 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _17 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  var _18 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _19 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _20 : ();
  var _21 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _22 : bool;
  var _23 : bool;
  var _24 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _25 : bool;
  var _26 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _27 : ();
  var _28 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self_1);
    _4 <- ([#"../red_black_tree.rs" 527 11 527 30] IsRed0.is_red _5);
    goto BB4
  }
  BB1 {
    _3 <- false;
    goto BB3
  }
  BB2 {
    _8 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self_1);
    _7 <- ([#"../red_black_tree.rs" 527 35 527 53] IsRed0.is_red _8);
    goto BB5
  }
  BB3 {
    switch (_3)
      | False -> goto BB8
      | _ -> goto BB6
      end
  }
  BB4 {
    switch (_4)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB5 {
    _6 <- not _7;
    _3 <- _6;
    _6 <- any bool;
    goto BB3
  }
  BB6 {
    _10 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _10) };
    _9 <- ([#"../red_black_tree.rs" 528 12 528 30] RotateLeft0.rotate_left _10);
    goto BB7
  }
  BB7 {
    _2 <- ();
    goto BB9
  }
  BB8 {
    _2 <- ();
    goto BB9
  }
  BB9 {
    _14 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self_1);
    _13 <- ([#"../red_black_tree.rs" 531 11 531 29] IsRed0.is_red _14);
    goto BB13
  }
  BB10 {
    _12 <- false;
    goto BB12
  }
  BB11 {
    _19 <- RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self_1));
    _18 <- ([#"../red_black_tree.rs" 531 33 531 56] AsRef0.as_ref _19);
    goto BB14
  }
  BB12 {
    switch (_12)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    switch (_13)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _17 <- ([#"../red_black_tree.rs" 531 33 531 65] Unwrap0.unwrap _18);
    goto BB15
  }
  BB15 {
    _16 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left _17;
    assume { Resolve0.resolve _17 };
    _15 <- ([#"../red_black_tree.rs" 531 33 531 79] IsRed0.is_red _16);
    goto BB16
  }
  BB16 {
    _12 <- _15;
    _15 <- any bool;
    goto BB12
  }
  BB17 {
    _21 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _21) };
    _20 <- ([#"../red_black_tree.rs" 532 12 532 31] RotateRight0.rotate_right _21);
    goto BB18
  }
  BB18 {
    _11 <- ();
    goto BB20
  }
  BB19 {
    _11 <- ();
    goto BB20
  }
  BB20 {
    _24 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self_1);
    _23 <- ([#"../red_black_tree.rs" 535 11 535 29] IsRed0.is_red _24);
    goto BB24
  }
  BB21 {
    _22 <- false;
    goto BB23
  }
  BB22 {
    _26 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self_1);
    _25 <- ([#"../red_black_tree.rs" 535 33 535 52] IsRed0.is_red _26);
    goto BB25
  }
  BB23 {
    switch (_22)
      | False -> goto BB28
      | _ -> goto BB26
      end
  }
  BB24 {
    switch (_23)
      | False -> goto BB21
      | _ -> goto BB22
      end
  }
  BB25 {
    _22 <- _25;
    _25 <- any bool;
    goto BB23
  }
  BB26 {
    _28 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _28) };
    _27 <- ([#"../red_black_tree.rs" 536 12 536 30] FlipColors0.flip_colors _28);
    goto BB27
  }
  BB27 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB28 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
module RedBlackTree_Impl15_MoveRedLeft_Interface
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Height_Interface as Height1 with type k = k, type v = v, axiom .
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Interface as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  use RedBlackTree_Cpl_Type
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN_Interface as MatchN1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  clone RedBlackTree_Impl1_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping1.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone RedBlackTree_Impl11_Height_Interface as Height0 with type k = k, type v = v,
  function Height0.height = Height1.height, axiom .
  clone RedBlackTree_Impl7_MatchN_Interface as MatchN0 with type k = k, type v = v,
  type l = RedBlackTree_Cpn_Type.redblacktree_cpn_type (RedBlackTree_Cpl_Type.redblacktree_cpl_type) (RedBlackTree_Cpl_Type.redblacktree_cpl_type),
  type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type
  clone RedBlackTree_Impl13_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val move_red_left [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)) : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
    requires {[#"../red_black_tree.rs" 540 15 540 41] RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) <> Core_Option_Option_Type.Core_Option_Option_None_Type}
    requires {[#"../red_black_tree.rs" 541 15 541 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 542 15 542 86] MatchN0.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type) (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( * self)}
    ensures { [#"../red_black_tree.rs" 543 14 543 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 544 4 546 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 547 4 547 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 548 14 548 42] RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * result) }
    ensures { [#"../red_black_tree.rs" 549 4 549 101] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 550 4 551 47] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log k (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self))) -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 552 4 553 108] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 554 14 555 61] MatchN1.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( * result) \/ MatchN1.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type))) ( * result) }
    ensures { [#"../red_black_tree.rs" 556 4 557 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color1.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * result)) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( ^ result) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) -> ColorInvariant0.color_invariant ( ^ self) }
    
end
module RedBlackTree_Impl15_MoveRedLeft
  type k
  type v
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN2 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl6_MatchT as MatchT1 with type k = k, type v = v, predicate MatchN0.match_n = MatchN2.match_n,
  function Color1.color = Color1.color, predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
  axiom .
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchT0.match_t = MatchT1.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl7_MatchT as MatchT0 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping1.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl11_Height as Height0 with type k = k, type v = v, function Height0.height = Height1.height,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN0 with type k = k, type v = v,
  type l = RedBlackTree_Cpn_Type.redblacktree_cpn_type (RedBlackTree_Cpl_Type.redblacktree_cpl_type) (RedBlackTree_Cpl_Type.redblacktree_cpl_type),
  type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl15_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color1.color, predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  function Height0.height = Height0.height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, function Height1.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color1.color, predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  function Height0.height = Height0.height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, function Height1.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color1.color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl15_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color1.color, function Height0.height = Height0.height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Height1.height = Height1.height
  let rec cfg move_red_left [@cfg:stackify] [#"../red_black_tree.rs" 558 4 558 44] (self : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)) : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
    requires {[#"../red_black_tree.rs" 540 15 540 41] RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self)) <> Core_Option_Option_Type.Core_Option_Option_None_Type}
    requires {[#"../red_black_tree.rs" 541 15 541 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 542 15 542 86] MatchN0.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type) (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( * self)}
    ensures { [#"../red_black_tree.rs" 543 14 543 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 544 4 546 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 547 4 547 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 548 14 548 42] RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self) = RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * result) }
    ensures { [#"../red_black_tree.rs" 549 4 549 101] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 550 4 551 47] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log k (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self))) -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 552 4 553 108] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 554 14 555 61] MatchN1.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( * result) \/ MatchN1.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type))) ( * result) }
    ensures { [#"../red_black_tree.rs" 556 4 557 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color1.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * result)) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( ^ result) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) -> ColorInvariant0.color_invariant ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _2 : ();
  var _3 : ();
  var _4 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _5 : ();
  var _6 : bool;
  var _7 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _8 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _9 : Core_Option_Option_Type.core_option_option_type (borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _10 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _11 : ();
  var _12 : ();
  var _13 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _14 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _15 : Core_Option_Option_Type.core_option_option_type (borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _16 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _17 : ();
  var _18 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _19 : ();
  var _20 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _21 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _22 : Core_Option_Option_Type.core_option_option_type (borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _23 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _4) };
    _3 <- ([#"../red_black_tree.rs" 559 8 559 26] FlipColors0.flip_colors _4);
    goto BB1
  }
  BB1 {
    _10 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a = RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self_1) in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _10))) };
    _9 <- ([#"../red_black_tree.rs" 560 11 560 35] AsMut0.as_mut _10);
    goto BB2
  }
  BB2 {
    _8 <- ([#"../red_black_tree.rs" 560 11 560 44] Unwrap0.unwrap _9);
    goto BB3
  }
  BB3 {
    _7 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * _8);
    assume { Resolve0.resolve _8 };
    _6 <- ([#"../red_black_tree.rs" 560 11 560 58] IsRed0.is_red _7);
    goto BB4
  }
  BB4 {
    switch (_6)
      | False -> goto BB13
      | _ -> goto BB5
      end
  }
  BB5 {
    _16 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a = RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self_1) in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _16))) };
    _15 <- ([#"../red_black_tree.rs" 561 12 561 36] AsMut0.as_mut _16);
    goto BB6
  }
  BB6 {
    _14 <- ([#"../red_black_tree.rs" 561 12 561 45] Unwrap0.unwrap _15);
    goto BB7
  }
  BB7 {
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    _12 <- ([#"../red_black_tree.rs" 561 12 561 60] RotateRight0.rotate_right _13);
    goto BB8
  }
  BB8 {
    assume { Resolve0.resolve _14 };
    _18 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _18) };
    _17 <- ([#"../red_black_tree.rs" 562 12 562 30] RotateLeft0.rotate_left _18);
    goto BB9
  }
  BB9 {
    _20 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _20) };
    _19 <- ([#"../red_black_tree.rs" 563 12 563 30] FlipColors0.flip_colors _20);
    goto BB10
  }
  BB10 {
    _23 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a = RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self_1) in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _23)) b c d e) };
    _22 <- ([#"../red_black_tree.rs" 564 19 564 42] AsMut0.as_mut _23);
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    _21 <- ([#"../red_black_tree.rs" 564 19 564 51] Unwrap0.unwrap _22);
    goto BB12
  }
  BB12 {
    _0 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _0) };
    assume { Resolve0.resolve _21 };
    goto BB14
  }
  BB13 {
    _5 <- ();
    assume { Resolve1.resolve _0 };
    _0 <- self_1;
    self_1 <- any borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module RedBlackTree_Impl15_MoveRedRight_Interface
  type k
  type v
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Height_Interface as Height1 with type k = k, type v = v, axiom .
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Interface as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  use RedBlackTree_Cpl_Type
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN_Interface as MatchN1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  clone RedBlackTree_Impl1_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping1.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone RedBlackTree_Impl11_Height_Interface as Height0 with type k = k, type v = v,
  function Height0.height = Height1.height, axiom .
  clone RedBlackTree_Impl7_MatchN_Interface as MatchN0 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  type r = RedBlackTree_Cpn_Type.redblacktree_cpn_type (RedBlackTree_Cpl_Type.redblacktree_cpl_type) (RedBlackTree_Cpl_Type.redblacktree_cpl_type)
  clone RedBlackTree_Impl13_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val move_red_right [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)) : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
    requires {[#"../red_black_tree.rs" 569 15 569 40] RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) <> Core_Option_Option_Type.Core_Option_Option_None_Type}
    requires {[#"../red_black_tree.rs" 570 15 570 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 571 15 571 86] MatchN0.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)))) ( * self)}
    ensures { [#"../red_black_tree.rs" 572 14 572 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 573 4 575 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 576 4 576 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 577 14 577 42] RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * result) = RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self) }
    ensures { [#"../red_black_tree.rs" 578 4 578 101] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 579 4 580 47] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self))) k -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 581 4 582 108] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 583 14 584 61] MatchN1.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type))) ( * result) \/ MatchN1.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type))) ( * result) }
    ensures { [#"../red_black_tree.rs" 585 4 586 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color1.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * result)) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( ^ result) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) -> ColorInvariant0.color_invariant ( ^ self) }
    
end
module RedBlackTree_Impl15_MoveRedRight
  type k
  type v
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN2 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height1 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height1.height
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN2.match_n,
  function Color1.color = Color1.color, predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant,
  axiom .
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl7_MatchT as MatchT1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant
  clone RedBlackTree_Impl1_HasMapping as HasMapping0 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping1.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl11_Height as Height0 with type k = k, type v = v, function Height0.height = Height1.height,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN0 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  type r = RedBlackTree_Cpn_Type.redblacktree_cpn_type (RedBlackTree_Cpl_Type.redblacktree_cpl_type) (RedBlackTree_Cpl_Type.redblacktree_cpl_type),
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping1.has_mapping
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color1.color, predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  function Height0.height = Height0.height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, function Height1.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color1.color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl15_FlipColors_Interface as FlipColors0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  function Color0.color = Color1.color, function Height0.height = Height0.height,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Height1.height = Height1.height
  let rec cfg move_red_right [@cfg:stackify] [#"../red_black_tree.rs" 587 4 587 45] (self : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)) : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
    requires {[#"../red_black_tree.rs" 569 15 569 40] RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self)) <> Core_Option_Option_Type.Core_Option_Option_None_Type}
    requires {[#"../red_black_tree.rs" 570 15 570 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 571 15 571 86] MatchN0.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)))) ( * self)}
    ensures { [#"../red_black_tree.rs" 572 14 572 44] InternalInvariant0.internal_invariant ( * result) }
    ensures { [#"../red_black_tree.rs" 573 4 575 48] InternalInvariant0.internal_invariant ( ^ result) /\ Height0.height ( * result) = Height0.height ( ^ result) /\ (forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ result) k v -> HasMapping0.has_mapping ( * result) k v) -> InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 576 4 576 97] Height0.height ( * result) = Height0.height ( ^ result) -> Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 577 14 577 42] RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * result) = RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self) }
    ensures { [#"../red_black_tree.rs" 578 4 578 101] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * result) k v -> HasMapping0.has_mapping ( * self) k v }
    ensures { [#"../red_black_tree.rs" 579 4 580 47] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v /\ LeLog0.le_log (Model0.model (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * self))) k -> HasMapping0.has_mapping ( * result) k v }
    ensures { [#"../red_black_tree.rs" 581 4 582 108] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (HasMapping0.has_mapping ( ^ result) k v \/ HasMapping0.has_mapping ( * self) k v /\ not HasMapping0.has_mapping ( * result) k v) }
    ensures { [#"../red_black_tree.rs" 583 14 584 61] MatchN1.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type))) ( * result) \/ MatchN1.match_n (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type))) ( * result) }
    ensures { [#"../red_black_tree.rs" 585 4 586 45] ColorInvariant0.color_invariant ( ^ result) /\ (Color1.color (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * result)) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> RedBlackTree_Node_Type.redblacktree_node_type_Node_color ( ^ result) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) -> ColorInvariant0.color_invariant ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _2 : ();
  var _3 : ();
  var _4 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _5 : ();
  var _6 : bool;
  var _7 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _8 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _9 : Core_Option_Option_Type.core_option_option_type (borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _10 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _11 : ();
  var _12 : ();
  var _13 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _14 : ();
  var _15 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _16 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _17 : Core_Option_Option_Type.core_option_option_type (borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _18 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _4 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _4) };
    _3 <- ([#"../red_black_tree.rs" 588 8 588 26] FlipColors0.flip_colors _4);
    goto BB1
  }
  BB1 {
    _10 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a = RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * self_1) in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _10)) b c d e) };
    _9 <- ([#"../red_black_tree.rs" 589 11 589 34] AsMut0.as_mut _10);
    goto BB2
  }
  BB2 {
    _8 <- ([#"../red_black_tree.rs" 589 11 589 43] Unwrap0.unwrap _9);
    goto BB3
  }
  BB3 {
    _7 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * _8);
    assume { Resolve0.resolve _8 };
    _6 <- ([#"../red_black_tree.rs" 589 11 589 57] IsRed0.is_red _7);
    goto BB4
  }
  BB4 {
    switch (_6)
      | False -> goto BB10
      | _ -> goto BB5
      end
  }
  BB5 {
    _13 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _13) };
    _12 <- ([#"../red_black_tree.rs" 590 12 590 31] RotateRight0.rotate_right _13);
    goto BB6
  }
  BB6 {
    _15 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _15) };
    _14 <- ([#"../red_black_tree.rs" 591 12 591 30] FlipColors0.flip_colors _15);
    goto BB7
  }
  BB7 {
    _18 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a = RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * self_1) in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _18))) };
    _17 <- ([#"../red_black_tree.rs" 592 19 592 43] AsMut0.as_mut _18);
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve self_1 };
    _16 <- ([#"../red_black_tree.rs" 592 19 592 52] Unwrap0.unwrap _17);
    goto BB9
  }
  BB9 {
    _0 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ _0) };
    assume { Resolve0.resolve _16 };
    goto BB11
  }
  BB10 {
    _5 <- ();
    assume { Resolve1.resolve _0 };
    _0 <- self_1;
    self_1 <- any borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module RedBlackTree_Impl16_New_Interface
  type k
  type v
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  use Core_Option_Option_Type
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val new [@cfg:stackify] (_ : ()) : RedBlackTree_Node_Type.redblacktree_tree_type k v
    ensures { [#"../red_black_tree.rs" 602 14 602 43] Model0.model result = Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    ensures { [#"../red_black_tree.rs" 603 14 603 32] Invariant0.invariant' result }
    
end
module RedBlackTree_Impl16_New
  type k
  type v
  use map.Const
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  use RedBlackTree_Color_Type
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  let rec cfg new [@cfg:stackify] [#"../red_black_tree.rs" 604 4 604 30] (_ : ()) : RedBlackTree_Node_Type.redblacktree_tree_type k v
    ensures { [#"../red_black_tree.rs" 602 14 602 43] Model0.model result = Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    ensures { [#"../red_black_tree.rs" 603 14 603 32] Invariant0.invariant' result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _1 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  {
    goto BB0
  }
  BB0 {
    _1 <- Core_Option_Option_Type.Core_Option_Option_None_Type;
    _0 <- RedBlackTree_Node_Type.RedBlackTree_Tree_Type _1;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module Core_Cmp_Ord_Cmp_Interface
  type self
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module Core_Cmp_Ord_Cmp
  type self
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Core_Cmp_Ordering_Type.core_cmp_ordering_type
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module RedBlackTree_Impl16_InsertRec_Interface
  type k
  type v
  use prelude.Borrow
  use RedBlackTree_Node_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Interface as Color1 with type k = k, type v = v
  use RedBlackTree_Cpl_Type
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchT_Interface as MatchT0 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type
  clone RedBlackTree_Impl10_Height_Interface as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl12_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val insert_rec [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 608 15 608 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 609 15 609 40] ColorInvariant0.color_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 610 14 610 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 611 14 611 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 612 14 613 39] MatchT0.match_t (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( ^ self) /\ Color1.color ( * self) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type \/ ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 614 14 614 44] HasMapping0.has_mapping ( ^ self) (Model0.model key) val' }
    ensures { [#"../red_black_tree.rs" 615 4 615 111] forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key \/ HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    
end
module RedBlackTree_Impl16_InsertRec
  type k
  type v
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN1 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT1 with type k = k, type v = v, predicate MatchN0.match_n = MatchN1.match_n,
  function Color1.color = Color1.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN0 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchT0.match_t = MatchT1.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl7_MatchT as MatchT0 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchN0.match_n = MatchN0.match_n
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  use mach.int.Int
  use prelude.IntSize
  use prelude.Int8
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl7_MatchN as MatchN2 with type k = k, type v = v,
  type l = RedBlackTree_Cpn_Type.redblacktree_cpn_type (RedBlackTree_Cpl_Type.redblacktree_cpl_type) (RedBlackTree_Cpl_Type.redblacktree_cpl_type),
  type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type, predicate MatchT0.match_t = MatchT0.match_t,
  predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl11_Height as Height1 with type k = k, type v = v, function Height0.height = Height0.height,
  axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant1 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl15_Balance_Interface as Balance0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  function Color1.color = Color1.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Height0.height = Height1.height,
  predicate MatchN0.match_n = MatchN2.match_n, predicate MatchN1.match_n = MatchN1.match_n,
  predicate MatchN2.match_n = MatchN0.match_n, function Height1.height = Height0.height
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve6 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model1.model,
  function Model1.model = Model0.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v)
  let rec cfg insert_rec [@cfg:stackify] [#"../red_black_tree.rs" 616 4 616 44] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 608 15 608 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 609 15 609 40] ColorInvariant0.color_invariant ( * self)}
    ensures { [#"../red_black_tree.rs" 610 14 610 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 611 14 611 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 612 14 613 39] MatchT0.match_t (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( ^ self) /\ Color1.color ( * self) = RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type \/ ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 614 14 614 44] HasMapping0.has_mapping ( ^ self) (Model0.model key) val' }
    ensures { [#"../red_black_tree.rs" 615 4 615 111] forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model0.model key \/ HasMapping0.has_mapping ( * self) k v = HasMapping0.has_mapping ( ^ self) k v }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var key_2 : k;
  var val'_3 : v;
  var _4 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _5 : isize;
  var node_6 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _7 : ();
  var _8 : Core_Cmp_Ordering_Type.core_cmp_ordering_type;
  var _9 : k;
  var _10 : k;
  var _11 : k;
  var _12 : int8;
  var _13 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _14 : k;
  var _15 : v;
  var _16 : ();
  var _17 : v;
  var _18 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _19 : k;
  var _20 : v;
  var _21 : ();
  var _22 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _23 : ();
  var _24 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _25 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  var _26 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  var _27 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _28 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _29 : RedBlackTree_Color_Type.redblacktree_color_type;
  var _30 : k;
  var _31 : v;
  var _32 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _33 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _4 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _4)) };
    switch ( * _4)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB3
      | _ -> goto BB15
      end
  }
  BB3 {
    assume { Resolve4.resolve self_1 };
    node_6 <- borrow_mut (Core_Option_Option_Type.core_option_option_type_Some_0 ( * _4));
    _4 <- { _4 with current = (let Core_Option_Option_Type.Core_Option_Option_Some_Type a =  * _4 in Core_Option_Option_Type.Core_Option_Option_Some_Type ( ^ node_6)) };
    assume { Resolve0.resolve _4 };
    _9 <- key_2;
    _11 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * node_6);
    _10 <- _11;
    assume { Resolve5.resolve _11 };
    _8 <- ([#"../red_black_tree.rs" 618 18 618 36] Cmp0.cmp _9 _10);
    goto BB4
  }
  BB4 {
    switch (_8)
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type -> goto BB7
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type -> goto BB9
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type -> goto BB5
      end
  }
  BB5 {
    _18 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * node_6));
    node_6 <- { node_6 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_6 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d ( ^ _18)) };
    assume { Resolve1.resolve _19 };
    _19 <- key_2;
    key_2 <- any k;
    assume { Resolve2.resolve _20 };
    _20 <- val'_3;
    val'_3 <- any v;
    _7 <- ([#"../red_black_tree.rs" 624 27 624 58] insert_rec _18 _19 _20);
    goto BB12
  }
  BB6 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve val'_3 };
    assume { Resolve6.resolve node_6 };
    absurd
  }
  BB7 {
    _13 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_6));
    node_6 <- { node_6 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_6 in RedBlackTree_Node_Type.RedBlackTree_Node_Type ( ^ _13) b c d e) };
    assume { Resolve1.resolve _14 };
    _14 <- key_2;
    key_2 <- any k;
    assume { Resolve2.resolve _15 };
    _15 <- val'_3;
    val'_3 <- any v;
    _7 <- ([#"../red_black_tree.rs" 619 24 619 54] insert_rec _13 _14 _15);
    goto BB8
  }
  BB8 {
    goto BB13
  }
  BB9 {
    assume { Resolve2.resolve _17 };
    _17 <- val'_3;
    val'_3 <- any v;
    assume { Resolve2.resolve (RedBlackTree_Node_Type.redblacktree_node_type_Node_val ( * node_6)) };
    node_6 <- { node_6 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_6 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c _17 e) };
    goto BB10
  }
  BB10 {
    assume { Resolve6.resolve node_6 };
    goto BB11
  }
  BB11 {
    _0 <- ();
    goto BB27
  }
  BB12 {
    goto BB13
  }
  BB13 {
    _22 <- borrow_mut ( * node_6);
    node_6 <- { node_6 with current = ( ^ _22) };
    _21 <- ([#"../red_black_tree.rs" 626 12 626 26] Balance0.balance _22);
    goto BB14
  }
  BB14 {
    assume { Resolve6.resolve node_6 };
    _0 <- ();
    goto BB26
  }
  BB15 {
    assume { Resolve0.resolve _4 };
    _28 <- Core_Option_Option_Type.Core_Option_Option_None_Type;
    _27 <- RedBlackTree_Node_Type.RedBlackTree_Tree_Type _28;
    goto BB16
  }
  BB16 {
    _29 <- RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type;
    assume { Resolve1.resolve _30 };
    _30 <- key_2;
    key_2 <- any k;
    assume { Resolve2.resolve _31 };
    _31 <- val'_3;
    val'_3 <- any v;
    _33 <- Core_Option_Option_Type.Core_Option_Option_None_Type;
    _32 <- RedBlackTree_Node_Type.RedBlackTree_Tree_Type _33;
    goto BB17
  }
  BB17 {
    _26 <- RedBlackTree_Node_Type.RedBlackTree_Node_Type _27 _29 _30 _31 _32;
    goto BB18
  }
  BB18 {
    goto BB19
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB21
  }
  BB21 {
    _25 <- _26;
    goto BB22
  }
  BB22 {
    _24 <- Core_Option_Option_Type.Core_Option_Option_Some_Type _25;
    goto BB23
  }
  BB23 {
    assume { Resolve3.resolve (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1)) };
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type _24) };
    goto BB24
  }
  BB24 {
    assume { Resolve4.resolve self_1 };
    goto BB25
  }
  BB25 {
    _0 <- ();
    goto BB27
  }
  BB26 {
    goto BB29
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
module RedBlackTree_Impl16_Insert_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val insert [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 639 15 639 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 640 14 640 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 641 14 641 53] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Core_Option_Option_Type.Core_Option_Option_Some_Type val') }
    
end
module RedBlackTree_Impl16_Insert
  type k
  type v
  use prelude.Borrow
  use map.Map
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  use RedBlackTree_Color_Type
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN1 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT1 with type k = k, type v = v, predicate MatchN0.match_n = MatchN1.match_n,
  function Color1.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN0 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchT0.match_t = MatchT1.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl7_MatchT as MatchT0 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchN0.match_n = MatchN0.match_n
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl16_InsertRec_Interface as InsertRec0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Height0.height = Height0.height,
  predicate MatchT0.match_t = MatchT0.match_t, function Color1.color = Color0.color,
  function Model0.model = Model1.model, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = k
  let rec cfg insert [@cfg:stackify] [#"../red_black_tree.rs" 642 4 642 44] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) (key : k) (val' : v) : ()
    requires {[#"../red_black_tree.rs" 639 15 639 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 640 14 640 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 641 14 641 53] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Core_Option_Option_Type.Core_Option_Option_Some_Type val') }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var key_2 : k;
  var val'_3 : v;
  var _4 : ();
  var _5 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _6 : k;
  var _7 : v;
  var _8 : RedBlackTree_Color_Type.redblacktree_color_type;
  var _9 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _10 : Core_Option_Option_Type.core_option_option_type (borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _11 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  ghost var _12 : ();
  var _13 : ();
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _5 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _5) };
    assume { Resolve0.resolve _6 };
    _6 <- key_2;
    key_2 <- any k;
    assume { Resolve1.resolve _7 };
    _7 <- val'_3;
    val'_3 <- any v;
    _4 <- ([#"../red_black_tree.rs" 643 8 643 33] InsertRec0.insert_rec _5 _6 _7);
    goto BB2
  }
  BB2 {
    _8 <- RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type;
    _11 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _11)) };
    _10 <- ([#"../red_black_tree.rs" 644 8 644 26] AsMut0.as_mut _11);
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve self_1 };
    _9 <- ([#"../red_black_tree.rs" 644 8 644 35] Unwrap0.unwrap _10);
    goto BB4
  }
  BB4 {
    _9 <- { _9 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * _9 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a _8 c d e) };
    _8 <- any RedBlackTree_Color_Type.redblacktree_color_type;
    assume { Resolve3.resolve _9 };
    _13 <- ();
    _12 <- ghost ([#"../red_black_tree.rs" 645 8 645 42] ());
    goto BB5
  }
  BB5 {
    _0 <- ();
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module Alloc_Boxed_Impl54_AsMut_Interface
  type t
  type a
  use prelude.Borrow
  val as_mut [@cfg:stackify] (self : borrowed t) : borrowed t
    ensures {  * self =  * result }
    ensures {  ^ self =  ^ result }
    
end
module Alloc_Boxed_Impl54_AsMut
  type t
  type a
  use prelude.Borrow
  val as_mut [@cfg:stackify] (self : borrowed t) : borrowed t
    ensures {  * self =  * result }
    ensures {  ^ self =  ^ result }
    
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
end
module Alloc_Boxed_Impl54
  type t
  type a
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module RedBlackTree_Impl16_DeleteMaxRec_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN_Interface as MatchN0 with type k = k, type v = v
  use Core_Option_Option_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Interface as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Height_Interface as Height0 with type k = k, type v = v, axiom .
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchT_Interface as MatchT1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type
  clone RedBlackTree_Impl6_MatchT_Interface as MatchT0 with type k = k, type v = v,
  predicate MatchN0.match_n = MatchN0.match_n, axiom .
  clone RedBlackTree_Impl12_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val delete_max_rec [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 648 15 648 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 649 15 650 62] MatchT0.match_t (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) ( * self) \/ MatchT1.match_t (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( * self)}
    ensures { [#"../red_black_tree.rs" 651 14 651 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 652 14 652 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 653 14 653 54] HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 654 4 654 88] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log k (Model0.model (let (a, _) = result in a)) }
    ensures { [#"../red_black_tree.rs" 655 4 656 61] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (Model0.model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 657 14 657 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 658 4 658 69] Color1.color ( * self) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> Color1.color ( ^ self) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type }
    
end
module RedBlackTree_Impl16_DeleteMaxRec
  type k
  type v
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color1.color = Color1.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl7_MatchT as MatchT1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  use mach.int.Int
  use prelude.IntSize
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl7_MatchN as MatchN3 with type k = k, type v = v,
  type l = RedBlackTree_Cpn_Type.redblacktree_cpn_type (RedBlackTree_Cpl_Type.redblacktree_cpl_type) (RedBlackTree_Cpl_Type.redblacktree_cpl_type),
  type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type, predicate MatchT0.match_t = MatchT1.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN2 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  type r = RedBlackTree_Cpn_Type.redblacktree_cpn_type (RedBlackTree_Cpl_Type.redblacktree_cpl_type) (RedBlackTree_Cpl_Type.redblacktree_cpl_type),
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone RedBlackTree_Impl11_Height as Height1 with type k = k, type v = v, function Height0.height = Height0.height,
  axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant1 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone Core_Mem_Take_Interface as Take0 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve6.resolve, predicate Resolve1.resolve = Resolve7.resolve
  clone RedBlackTree_Impl15_Balance_Interface as Balance0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  function Color1.color = Color1.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Height0.height = Height1.height,
  predicate MatchN0.match_n = MatchN3.match_n, predicate MatchN1.match_n = MatchN0.match_n,
  predicate MatchN2.match_n = MatchN1.match_n, function Height1.height = Height0.height
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl15_MoveRedRight_Interface as MoveRedRight0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  predicate MatchN0.match_n = MatchN2.match_n, function Height0.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LeLog0.le_log = LeLog0.le_log,
  predicate MatchN1.match_n = MatchN1.match_n,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant, function Color1.color = Color1.color,
  function Height1.height = Height0.height, predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  function Color0.color = Color1.color, predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  function Height0.height = Height1.height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, function Height1.height = Height0.height,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color1.color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Alloc_Boxed_Impl54_AsMut_Interface as AsMut1 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  let rec cfg delete_max_rec [@cfg:stackify] [#"../red_black_tree.rs" 659 4 659 42] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 648 15 648 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 649 15 650 62] MatchT0.match_t (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) ( * self) \/ MatchT1.match_t (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( * self)}
    ensures { [#"../red_black_tree.rs" 651 14 651 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 652 14 652 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 653 14 653 54] HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 654 4 654 88] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log k (Model0.model (let (a, _) = result in a)) }
    ensures { [#"../red_black_tree.rs" 655 4 656 61] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (Model0.model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 657 14 657 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 658 4 658 69] Color1.color ( * self) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> Color1.color ( ^ self) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (k, v);
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var node_2 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _3 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _4 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _5 : Core_Option_Option_Type.core_option_option_type (borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _6 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _7 : ();
  var _8 : bool;
  var _9 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _10 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _11 : ();
  var _12 : isize;
  var _13 : ();
  var node_14 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  var _15 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _16 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _17 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _18 : k;
  var _19 : v;
  var _20 : ();
  var _21 : bool;
  var _22 : bool;
  var _23 : bool;
  var _24 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _25 : bool;
  var _26 : bool;
  var _27 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _28 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  var _29 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _30 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _31 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _32 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _33 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var r_34 : (k, v);
  var _35 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _36 : ();
  var _37 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _6)) };
    _5 <- ([#"../red_black_tree.rs" 660 23 660 41] AsMut0.as_mut _6);
    goto BB1
  }
  BB1 {
    _4 <- ([#"../red_black_tree.rs" 660 23 660 50] Unwrap0.unwrap _5);
    goto BB2
  }
  BB2 {
    _3 <- borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _3) };
    node_2 <- ([#"../red_black_tree.rs" 660 23 660 59] AsMut1.as_mut _3);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _4 };
    _9 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_2);
    _8 <- ([#"../red_black_tree.rs" 661 11 661 29] IsRed0.is_red _9);
    goto BB4
  }
  BB4 {
    switch (_8)
      | False -> goto BB7
      | _ -> goto BB5
      end
  }
  BB5 {
    _10 <- borrow_mut ( * node_2);
    node_2 <- { node_2 with current = ( ^ _10) };
    _7 <- ([#"../red_black_tree.rs" 662 12 662 31] RotateRight0.rotate_right _10);
    goto BB6
  }
  BB6 {
    goto BB8
  }
  BB7 {
    _7 <- ();
    goto BB8
  }
  BB8 {
    switch (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * node_2)))
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB9
      | _ -> goto BB14
      end
  }
  BB9 {
    assume { Resolve3.resolve node_2 };
    _17 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _17)) };
    assume { Resolve1.resolve self_1 };
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    _15 <- ([#"../red_black_tree.rs" 665 23 665 53] Take0.take _16);
    goto BB10
  }
  BB10 {
    assume { Resolve5.resolve _17 };
    node_14 <- ([#"../red_black_tree.rs" 665 23 665 62] Unwrap2.unwrap _15);
    goto BB11
  }
  BB11 {
    assume { Resolve6.resolve _18 };
    _18 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_key node_14;
    node_14 <- (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e = node_14 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b (any k) d e);
    assume { Resolve7.resolve _19 };
    _19 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_val node_14;
    node_14 <- (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e = node_14 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c (any v) e);
    _0 <- (_18, _19);
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    goto BB29
  }
  BB14 {
    assume { Resolve1.resolve self_1 };
    _11 <- ();
    _24 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * node_2);
    _23 <- ([#"../red_black_tree.rs" 668 12 668 31] IsRed0.is_red _24);
    goto BB18
  }
  BB15 {
    _21 <- false;
    goto BB17
  }
  BB16 {
    _30 <- RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * node_2));
    _29 <- ([#"../red_black_tree.rs" 668 36 668 60] AsRef0.as_ref _30);
    goto BB19
  }
  BB17 {
    switch (_21)
      | False -> goto BB24
      | _ -> goto BB22
      end
  }
  BB18 {
    _22 <- not _23;
    switch (_22)
      | False -> goto BB15
      | _ -> goto BB16
      end
  }
  BB19 {
    _28 <- ([#"../red_black_tree.rs" 668 36 668 69] Unwrap1.unwrap _29);
    goto BB20
  }
  BB20 {
    _27 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left _28;
    assume { Resolve2.resolve _28 };
    _26 <- ([#"../red_black_tree.rs" 668 36 668 83] IsRed0.is_red _27);
    goto BB21
  }
  BB21 {
    _25 <- not _26;
    _21 <- _25;
    _25 <- any bool;
    goto BB17
  }
  BB22 {
    _33 <- borrow_mut ( * node_2);
    node_2 <- { node_2 with current = ( ^ _33) };
    _32 <- ([#"../red_black_tree.rs" 669 19 669 40] MoveRedRight0.move_red_right _33);
    goto BB23
  }
  BB23 {
    assume { Resolve3.resolve node_2 };
    _31 <- borrow_mut ( * _32);
    _32 <- { _32 with current = ( ^ _31) };
    assume { Resolve3.resolve _32 };
    assume { Resolve3.resolve node_2 };
    node_2 <- _31;
    _31 <- any borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
    _20 <- ();
    goto BB25
  }
  BB24 {
    _20 <- ();
    goto BB25
  }
  BB25 {
    _35 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * node_2));
    node_2 <- { node_2 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_2 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d ( ^ _35)) };
    r_34 <- ([#"../red_black_tree.rs" 671 16 671 43] delete_max_rec _35);
    goto BB26
  }
  BB26 {
    _37 <- borrow_mut ( * node_2);
    node_2 <- { node_2 with current = ( ^ _37) };
    _36 <- ([#"../red_black_tree.rs" 672 8 672 22] Balance0.balance _37);
    goto BB27
  }
  BB27 {
    assume { Resolve3.resolve node_2 };
    assume { Resolve4.resolve _0 };
    _0 <- r_34;
    r_34 <- any (k, v);
    goto BB28
  }
  BB28 {
    goto BB30
  }
  BB29 {
    assume { Resolve8.resolve node_14 };
    goto BB30
  }
  BB30 {
    return _0
  }
  
end
module RedBlackTree_Impl16_DeleteMax_Interface
  type k
  type v
  use prelude.Borrow
  use map.Const
  use map.Map
  use RedBlackTree_Node_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val delete_max [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) : Core_Option_Option_Type.core_option_option_type (k, v)
    requires {[#"../red_black_tree.rs" 676 15 676 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 677 14 677 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 678 4 678 83] result = Core_Option_Option_Type.Core_Option_Option_None_Type -> Model0.model ( ^ self) = Model0.model ( * self) /\ Model0.model ( * self) = Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    ensures { [#"../red_black_tree.rs" 679 4 682 48] forall v : (v) . forall k : (k) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Core_Option_Option_Type.Core_Option_Option_Some_Type v /\ (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Core_Option_Option_Type.Core_Option_Option_None_Type \/ LeLog0.le_log k2 (Model1.model k)) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    
end
module RedBlackTree_Impl16_DeleteMax
  type k
  type v
  use prelude.Borrow
  use map.Const
  use map.Map
  use RedBlackTree_Color_Type
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl0_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color
  use mach.int.Int
  use prelude.IntSize
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color1.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT0.match_t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = k
  clone RedBlackTree_Impl7_MatchT as MatchT1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchN0.match_n = MatchN1.match_n
  use CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve5.resolve, predicate Resolve1.resolve = Resolve6.resolve
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl16_DeleteMaxRec_Interface as DeleteMaxRec0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t,
  function Height0.height = Height0.height, function Model0.model = Model1.model,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  function Color1.color = Color0.color, predicate MatchN0.match_n = MatchN0.match_n
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)
  let rec cfg delete_max [@cfg:stackify] [#"../red_black_tree.rs" 683 4 683 50] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) : Core_Option_Option_Type.core_option_option_type (k, v)
    requires {[#"../red_black_tree.rs" 676 15 676 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 677 14 677 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 678 4 678 83] result = Core_Option_Option_Type.Core_Option_Option_None_Type -> Model0.model ( ^ self) = Model0.model ( * self) /\ Model0.model ( * self) = Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    ensures { [#"../red_black_tree.rs" 679 4 682 48] forall v : (v) . forall k : (k) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Core_Option_Option_Type.Core_Option_Option_Some_Type v /\ (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Core_Option_Option_Type.Core_Option_Option_None_Type \/ LeLog0.le_log k2 (Model1.model k)) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.core_option_option_type (k, v);
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  ghost var old_self_2 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _3 : ();
  var _4 : ();
  var _5 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _6 : isize;
  var node_7 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _8 : bool;
  var _9 : bool;
  var _10 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _11 : RedBlackTree_Color_Type.redblacktree_color_type;
  var _12 : ();
  var _13 : ();
  var r_14 : (k, v);
  var _15 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _16 : ();
  var _17 : bool;
  var _18 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _19 : RedBlackTree_Color_Type.redblacktree_color_type;
  var _20 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _21 : Core_Option_Option_Type.core_option_option_type (borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _22 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  ghost var _23 : ();
  var _24 : ();
  var _25 : (k, v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 684 23 684 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _5 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _5)) };
    switch ( * _5)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB2
      | _ -> goto BB7
      end
  }
  BB2 {
    node_7 <- borrow_mut (Core_Option_Option_Type.core_option_option_type_Some_0 ( * _5));
    _5 <- { _5 with current = (let Core_Option_Option_Type.Core_Option_Option_Some_Type a =  * _5 in Core_Option_Option_Type.Core_Option_Option_Some_Type ( ^ node_7)) };
    assume { Resolve2.resolve _5 };
    _10 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_7);
    _9 <- ([#"../red_black_tree.rs" 686 16 686 34] IsRed0.is_red _10);
    goto BB3
  }
  BB3 {
    _8 <- not _9;
    switch (_8)
      | False -> goto BB5
      | _ -> goto BB4
      end
  }
  BB4 {
    _11 <- RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type;
    node_7 <- { node_7 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_7 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a _11 c d e) };
    _11 <- any RedBlackTree_Color_Type.redblacktree_color_type;
    assume { Resolve3.resolve node_7 };
    _4 <- ();
    goto BB6
  }
  BB5 {
    assume { Resolve3.resolve node_7 };
    _4 <- ();
    goto BB6
  }
  BB6 {
    assert { [#"../red_black_tree.rs" 692 24 692 53] SameMappings0.same_mappings ( * old_self_2) ( * self_1) };
    _13 <- ();
    _15 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _15) };
    r_14 <- ([#"../red_black_tree.rs" 693 16 693 37] DeleteMaxRec0.delete_max_rec _15);
    goto BB8
  }
  BB7 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve _5 };
    _0 <- Core_Option_Option_Type.Core_Option_Option_None_Type;
    goto BB18
  }
  BB8 {
    _18 <-  * self_1;
    _17 <- ([#"../red_black_tree.rs" 694 11 694 24] IsRed0.is_red _18);
    goto BB9
  }
  BB9 {
    switch (_17)
      | False -> goto BB13
      | _ -> goto BB10
      end
  }
  BB10 {
    _19 <- RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type;
    _22 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _22)) };
    _21 <- ([#"../red_black_tree.rs" 695 12 695 30] AsMut0.as_mut _22);
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    _20 <- ([#"../red_black_tree.rs" 695 12 695 39] Unwrap0.unwrap _21);
    goto BB12
  }
  BB12 {
    _20 <- { _20 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * _20 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a _19 c d e) };
    _19 <- any RedBlackTree_Color_Type.redblacktree_color_type;
    assume { Resolve3.resolve _20 };
    _16 <- ();
    goto BB14
  }
  BB13 {
    assume { Resolve1.resolve self_1 };
    _16 <- ();
    goto BB14
  }
  BB14 {
    _24 <- ();
    _23 <- ghost ([#"../red_black_tree.rs" 697 8 697 42] ());
    goto BB15
  }
  BB15 {
    assume { Resolve4.resolve _25 };
    _25 <- r_14;
    r_14 <- any (k, v);
    _0 <- Core_Option_Option_Type.Core_Option_Option_Some_Type _25;
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module RedBlackTree_Impl16_DeleteMinRec_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN_Interface as MatchN0 with type k = k, type v = v
  use Core_Option_Option_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Interface as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Height_Interface as Height0 with type k = k, type v = v, axiom .
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchT_Interface as MatchT1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type
  clone RedBlackTree_Impl6_MatchT_Interface as MatchT0 with type k = k, type v = v,
  predicate MatchN0.match_n = MatchN0.match_n, axiom .
  clone RedBlackTree_Impl12_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val delete_min_rec [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 701 15 701 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 702 15 703 62] MatchT0.match_t (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) ( * self) \/ MatchT1.match_t (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( * self)}
    ensures { [#"../red_black_tree.rs" 704 14 704 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 705 14 705 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 706 14 706 54] HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 707 4 707 88] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (Model0.model (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 708 4 709 61] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (Model0.model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 710 14 710 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 711 4 711 69] Color1.color ( * self) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> Color1.color ( ^ self) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type }
    
end
module RedBlackTree_Impl16_DeleteMinRec
  type k
  type v
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color1.color = Color1.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl7_MatchT as MatchT1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  use mach.int.Int
  use prelude.IntSize
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl11_Height as Height1 with type k = k, type v = v, function Height0.height = Height0.height,
  axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN2 with type k = k, type v = v,
  type l = RedBlackTree_Cpn_Type.redblacktree_cpn_type (RedBlackTree_Cpl_Type.redblacktree_cpl_type) (RedBlackTree_Cpl_Type.redblacktree_cpl_type),
  type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type, predicate MatchT0.match_t = MatchT1.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant1 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone Core_Mem_Take_Interface as Take0 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve6.resolve, predicate Resolve1.resolve = Resolve7.resolve
  clone RedBlackTree_Impl15_Balance_Interface as Balance0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  function Color1.color = Color1.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Height0.height = Height1.height,
  predicate MatchN0.match_n = MatchN2.match_n, predicate MatchN1.match_n = MatchN0.match_n,
  predicate MatchN2.match_n = MatchN1.match_n, function Height1.height = Height0.height
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl15_MoveRedLeft_Interface as MoveRedLeft0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  predicate MatchN0.match_n = MatchN2.match_n, function Height0.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LeLog0.le_log = LeLog0.le_log,
  predicate MatchN1.match_n = MatchN1.match_n,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant, function Color1.color = Color1.color,
  function Height1.height = Height0.height, predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color1.color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Alloc_Boxed_Impl54_AsMut_Interface as AsMut1 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  let rec cfg delete_min_rec [@cfg:stackify] [#"../red_black_tree.rs" 712 4 712 42] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) : (k, v)
    requires {[#"../red_black_tree.rs" 701 15 701 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 702 15 703 62] MatchT0.match_t (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) ( * self) \/ MatchT1.match_t (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( * self)}
    ensures { [#"../red_black_tree.rs" 704 14 704 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 705 14 705 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 706 14 706 54] HasMapping0.has_mapping ( * self) (Model0.model (let (a, _) = result in a)) (let (_, a) = result in a) }
    ensures { [#"../red_black_tree.rs" 707 4 707 88] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * self) k v -> LeLog0.le_log (Model0.model (let (a, _) = result in a)) k }
    ensures { [#"../red_black_tree.rs" 708 4 709 61] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (Model0.model (let (a, _) = result in a) <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 710 14 710 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 711 4 711 69] Color1.color ( * self) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> Color1.color ( ^ self) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (k, v);
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var node_2 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _3 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _4 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _5 : Core_Option_Option_Type.core_option_option_type (borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _6 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _7 : ();
  var _8 : isize;
  var _9 : ();
  var node_10 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  var _11 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _12 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _13 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _14 : k;
  var _15 : v;
  var _16 : ();
  var _17 : bool;
  var _18 : bool;
  var _19 : bool;
  var _20 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _21 : bool;
  var _22 : bool;
  var _23 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _24 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  var _25 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _26 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _27 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _28 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _29 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var r_30 : (k, v);
  var _31 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _32 : ();
  var _33 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _6 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _6)) };
    _5 <- ([#"../red_black_tree.rs" 713 23 713 41] AsMut0.as_mut _6);
    goto BB1
  }
  BB1 {
    _4 <- ([#"../red_black_tree.rs" 713 23 713 50] Unwrap0.unwrap _5);
    goto BB2
  }
  BB2 {
    _3 <- borrow_mut ( * _4);
    _4 <- { _4 with current = ( ^ _3) };
    node_2 <- ([#"../red_black_tree.rs" 713 23 713 59] AsMut1.as_mut _3);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _4 };
    switch (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_2)))
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB4
      | _ -> goto BB9
      end
  }
  BB4 {
    assume { Resolve3.resolve node_2 };
    _13 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _13)) };
    assume { Resolve1.resolve self_1 };
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    _11 <- ([#"../red_black_tree.rs" 715 23 715 53] Take0.take _12);
    goto BB5
  }
  BB5 {
    assume { Resolve5.resolve _13 };
    node_10 <- ([#"../red_black_tree.rs" 715 23 715 62] Unwrap2.unwrap _11);
    goto BB6
  }
  BB6 {
    assume { Resolve6.resolve _14 };
    _14 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_key node_10;
    node_10 <- (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e = node_10 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b (any k) d e);
    assume { Resolve7.resolve _15 };
    _15 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_val node_10;
    node_10 <- (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e = node_10 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c (any v) e);
    _0 <- (_14, _15);
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB24
  }
  BB9 {
    assume { Resolve1.resolve self_1 };
    _7 <- ();
    _20 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_2);
    _19 <- ([#"../red_black_tree.rs" 718 12 718 30] IsRed0.is_red _20);
    goto BB13
  }
  BB10 {
    _17 <- false;
    goto BB12
  }
  BB11 {
    _26 <- RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_2));
    _25 <- ([#"../red_black_tree.rs" 718 35 718 58] AsRef0.as_ref _26);
    goto BB14
  }
  BB12 {
    switch (_17)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    _18 <- not _19;
    switch (_18)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _24 <- ([#"../red_black_tree.rs" 718 35 718 67] Unwrap1.unwrap _25);
    goto BB15
  }
  BB15 {
    _23 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left _24;
    assume { Resolve2.resolve _24 };
    _22 <- ([#"../red_black_tree.rs" 718 35 718 81] IsRed0.is_red _23);
    goto BB16
  }
  BB16 {
    _21 <- not _22;
    _17 <- _21;
    _21 <- any bool;
    goto BB12
  }
  BB17 {
    _29 <- borrow_mut ( * node_2);
    node_2 <- { node_2 with current = ( ^ _29) };
    _28 <- ([#"../red_black_tree.rs" 719 19 719 39] MoveRedLeft0.move_red_left _29);
    goto BB18
  }
  BB18 {
    assume { Resolve3.resolve node_2 };
    _27 <- borrow_mut ( * _28);
    _28 <- { _28 with current = ( ^ _27) };
    assume { Resolve3.resolve _28 };
    assume { Resolve3.resolve node_2 };
    node_2 <- _27;
    _27 <- any borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
    _16 <- ();
    goto BB20
  }
  BB19 {
    _16 <- ();
    goto BB20
  }
  BB20 {
    _31 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_2));
    node_2 <- { node_2 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_2 in RedBlackTree_Node_Type.RedBlackTree_Node_Type ( ^ _31) b c d e) };
    r_30 <- ([#"../red_black_tree.rs" 721 16 721 42] delete_min_rec _31);
    goto BB21
  }
  BB21 {
    _33 <- borrow_mut ( * node_2);
    node_2 <- { node_2 with current = ( ^ _33) };
    _32 <- ([#"../red_black_tree.rs" 722 8 722 22] Balance0.balance _33);
    goto BB22
  }
  BB22 {
    assume { Resolve3.resolve node_2 };
    assume { Resolve4.resolve _0 };
    _0 <- r_30;
    r_30 <- any (k, v);
    goto BB23
  }
  BB23 {
    goto BB25
  }
  BB24 {
    assume { Resolve8.resolve node_10 };
    goto BB25
  }
  BB25 {
    return _0
  }
  
end
module RedBlackTree_Impl16_DeleteMin_Interface
  type k
  type v
  use prelude.Borrow
  use map.Const
  use map.Map
  use RedBlackTree_Node_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val delete_min [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) : Core_Option_Option_Type.core_option_option_type (k, v)
    requires {[#"../red_black_tree.rs" 726 15 726 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 727 14 727 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 728 4 728 83] result = Core_Option_Option_Type.Core_Option_Option_None_Type -> Model0.model ( ^ self) = Model0.model ( * self) /\ Model0.model ( * self) = Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    ensures { [#"../red_black_tree.rs" 729 4 732 48] forall v : (v) . forall k : (k) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Core_Option_Option_Type.Core_Option_Option_Some_Type v /\ (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Core_Option_Option_Type.Core_Option_Option_None_Type \/ LeLog0.le_log (Model1.model k) k2) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    
end
module RedBlackTree_Impl16_DeleteMin
  type k
  type v
  use prelude.Borrow
  use map.Const
  use map.Map
  use RedBlackTree_Color_Type
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl0_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color
  use mach.int.Int
  use prelude.IntSize
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color1.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT0.match_t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = k
  clone RedBlackTree_Impl7_MatchT as MatchT1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchN0.match_n = MatchN1.match_n
  use CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve4 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve5.resolve, predicate Resolve1.resolve = Resolve6.resolve
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl16_DeleteMinRec_Interface as DeleteMinRec0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t,
  function Height0.height = Height0.height, function Model0.model = Model1.model,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  function Color1.color = Color0.color, predicate MatchN0.match_n = MatchN0.match_n
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)
  let rec cfg delete_min [@cfg:stackify] [#"../red_black_tree.rs" 733 4 733 50] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) : Core_Option_Option_Type.core_option_option_type (k, v)
    requires {[#"../red_black_tree.rs" 726 15 726 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 727 14 727 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 728 4 728 83] result = Core_Option_Option_Type.Core_Option_Option_None_Type -> Model0.model ( ^ self) = Model0.model ( * self) /\ Model0.model ( * self) = Const.const (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    ensures { [#"../red_black_tree.rs" 729 4 732 48] forall v : (v) . forall k : (k) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type (k, v) -> Map.get (Model0.model ( * self)) (Model1.model k) = Core_Option_Option_Type.Core_Option_Option_Some_Type v /\ (forall k2 : (ModelTy0.modelTy) . Map.get (Model0.model ( * self)) k2 = Core_Option_Option_Type.Core_Option_Option_None_Type \/ LeLog0.le_log (Model1.model k) k2) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model k) (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.core_option_option_type (k, v);
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  ghost var old_self_2 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _3 : ();
  var _4 : ();
  var _5 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _6 : isize;
  var node_7 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _8 : bool;
  var _9 : bool;
  var _10 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _11 : RedBlackTree_Color_Type.redblacktree_color_type;
  var _12 : ();
  var _13 : ();
  var r_14 : (k, v);
  var _15 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _16 : ();
  var _17 : bool;
  var _18 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _19 : RedBlackTree_Color_Type.redblacktree_color_type;
  var _20 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _21 : Core_Option_Option_Type.core_option_option_type (borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _22 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  ghost var _23 : ();
  var _24 : ();
  var _25 : (k, v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- ();
    old_self_2 <- ghost ([#"../red_black_tree.rs" 734 23 734 38] self_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_self_2 };
    _5 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _5)) };
    switch ( * _5)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB2
      | _ -> goto BB7
      end
  }
  BB2 {
    node_7 <- borrow_mut (Core_Option_Option_Type.core_option_option_type_Some_0 ( * _5));
    _5 <- { _5 with current = (let Core_Option_Option_Type.Core_Option_Option_Some_Type a =  * _5 in Core_Option_Option_Type.Core_Option_Option_Some_Type ( ^ node_7)) };
    assume { Resolve2.resolve _5 };
    _10 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_7);
    _9 <- ([#"../red_black_tree.rs" 736 16 736 34] IsRed0.is_red _10);
    goto BB3
  }
  BB3 {
    _8 <- not _9;
    switch (_8)
      | False -> goto BB5
      | _ -> goto BB4
      end
  }
  BB4 {
    _11 <- RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type;
    node_7 <- { node_7 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_7 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a _11 c d e) };
    _11 <- any RedBlackTree_Color_Type.redblacktree_color_type;
    assume { Resolve3.resolve node_7 };
    _4 <- ();
    goto BB6
  }
  BB5 {
    assume { Resolve3.resolve node_7 };
    _4 <- ();
    goto BB6
  }
  BB6 {
    assert { [#"../red_black_tree.rs" 742 24 742 53] SameMappings0.same_mappings ( * old_self_2) ( * self_1) };
    _13 <- ();
    _15 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _15) };
    r_14 <- ([#"../red_black_tree.rs" 743 16 743 37] DeleteMinRec0.delete_min_rec _15);
    goto BB8
  }
  BB7 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve _5 };
    _0 <- Core_Option_Option_Type.Core_Option_Option_None_Type;
    goto BB18
  }
  BB8 {
    _18 <-  * self_1;
    _17 <- ([#"../red_black_tree.rs" 744 11 744 24] IsRed0.is_red _18);
    goto BB9
  }
  BB9 {
    switch (_17)
      | False -> goto BB13
      | _ -> goto BB10
      end
  }
  BB10 {
    _19 <- RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type;
    _22 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _22)) };
    _21 <- ([#"../red_black_tree.rs" 745 12 745 30] AsMut0.as_mut _22);
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    _20 <- ([#"../red_black_tree.rs" 745 12 745 39] Unwrap0.unwrap _21);
    goto BB12
  }
  BB12 {
    _20 <- { _20 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * _20 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a _19 c d e) };
    _19 <- any RedBlackTree_Color_Type.redblacktree_color_type;
    assume { Resolve3.resolve _20 };
    _16 <- ();
    goto BB14
  }
  BB13 {
    assume { Resolve1.resolve self_1 };
    _16 <- ();
    goto BB14
  }
  BB14 {
    _24 <- ();
    _23 <- ghost ([#"../red_black_tree.rs" 747 8 747 42] ());
    goto BB15
  }
  BB15 {
    assume { Resolve4.resolve _25 };
    _25 <- r_14;
    r_14 <- any (k, v);
    _0 <- Core_Option_Option_Type.Core_Option_Option_Some_Type _25;
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Core_Option_Impl0_IsNone_Interface
  type t
  use prelude.Borrow
  use Core_Option_Option_Type
  val is_none [@cfg:stackify] (self : Core_Option_Option_Type.core_option_option_type t) : bool
    ensures { result = (self = Core_Option_Option_Type.Core_Option_Option_None_Type) }
    
end
module Core_Option_Impl0_IsNone
  type t
  use prelude.Borrow
  use Core_Option_Option_Type
  val is_none [@cfg:stackify] (self : Core_Option_Option_Type.core_option_option_type t) : bool
    ensures { result = (self = Core_Option_Option_Type.Core_Option_Option_None_Type) }
    
end
module RedBlackTree_Impl16_DeleteRec_Interface
  type k
  type v
  use prelude.Borrow
  use Alloc_Alloc_Global_Type
  use RedBlackTree_Node_Type
  use Alloc_Boxed_Box_Type
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN_Interface as MatchN0 with type k = k, type v = v
  use Core_Option_Option_Type
  use RedBlackTree_Color_Type
  clone RedBlackTree_Impl8_Color_Interface as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl8_ColorInvariant_Interface as ColorInvariant0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone RedBlackTree_Impl0_HasMapping_Interface as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl10_Height_Interface as Height0 with type k = k, type v = v, axiom .
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchT_Interface as MatchT1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type
  clone RedBlackTree_Impl6_MatchT_Interface as MatchT0 with type k = k, type v = v,
  predicate MatchN0.match_n = MatchN0.match_n, axiom .
  clone RedBlackTree_Impl12_InternalInvariant_Interface as InternalInvariant0 with type k = k, type v = v
  val delete_rec [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) (key : k) : Core_Option_Option_Type.core_option_option_type (k, v)
    requires {[#"../red_black_tree.rs" 751 15 751 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 752 15 753 62] MatchT0.match_t (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) ( * self) \/ MatchT1.match_t (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( * self)}
    ensures { [#"../red_black_tree.rs" 754 14 754 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 755 14 755 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 756 4 756 78] forall v : (v) . result = Core_Option_Option_Type.Core_Option_Option_None_Type -> not HasMapping0.has_mapping ( * self) (Model0.model key) v }
    ensures { [#"../red_black_tree.rs" 757 4 758 57] forall v : (v) . forall k : (k) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type (k, v) -> Model0.model key = Model0.model k /\ HasMapping0.has_mapping ( * self) (Model0.model k) v }
    ensures { [#"../red_black_tree.rs" 759 4 759 114] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (Model0.model key <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 760 14 760 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 761 4 761 69] Color1.color ( * self) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> Color1.color ( ^ self) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type }
    
end
module RedBlackTree_Impl16_DeleteRec
  type k
  type v
  use prelude.Borrow
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model0.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  use RedBlackTree_Color_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  clone RedBlackTree_Impl8_Color as Color1 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color1.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone RedBlackTree_Impl3_Model as Model1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model1.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color1.color = Color1.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl0_HasMappingInj as HasMappingInj0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function HasMappingModel0.has_mapping_model = HasMappingModel0.has_mapping_model,
  function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl7_MatchT as MatchT1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchN0.match_n = MatchN1.match_n
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  use mach.int.Int
  use prelude.Int8
  clone RedBlackTree_Impl11_HeightInvariant as HeightInvariant1 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl4_BstInvariant as BstInvariant1 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant
  clone RedBlackTree_Impl7_MatchN as MatchN3 with type k = k, type v = v,
  type l = RedBlackTree_Cpn_Type.redblacktree_cpn_type (RedBlackTree_Cpl_Type.redblacktree_cpl_type) (RedBlackTree_Cpl_Type.redblacktree_cpl_type),
  type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type, predicate MatchT0.match_t = MatchT1.match_t,
  predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl1_HasMapping as HasMapping1 with type k = k, type v = v,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model, axiom .
  clone RedBlackTree_Impl7_MatchN as MatchN2 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  type r = RedBlackTree_Cpn_Type.redblacktree_cpn_type (RedBlackTree_Cpl_Type.redblacktree_cpl_type) (RedBlackTree_Cpl_Type.redblacktree_cpl_type),
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t
  clone CreusotContracts_Std1_Option_Impl0_DefaultLog as DefaultLog0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl11_Height as Height1 with type k = k, type v = v, function Height0.height = Height0.height,
  axiom .
  clone RedBlackTree_Impl1_SameMappings as SameMappings0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone RedBlackTree_Impl13_InternalInvariant as InternalInvariant1 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant1.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant1.height_invariant
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl15_Balance_Interface as Balance0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  function Color1.color = Color1.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  predicate SameMappings0.same_mappings = SameMappings0.same_mappings, function Height0.height = Height1.height,
  predicate MatchN0.match_n = MatchN3.match_n, predicate MatchN1.match_n = MatchN0.match_n,
  predicate MatchN2.match_n = MatchN1.match_n, function Height1.height = Height0.height
  clone RedBlackTree_Impl15_MoveRedLeft_Interface as MoveRedLeft0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  predicate MatchN0.match_n = MatchN3.match_n, function Height0.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LeLog0.le_log = LeLog0.le_log,
  predicate MatchN1.match_n = MatchN1.match_n,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant, function Color1.color = Color1.color,
  function Height1.height = Height0.height, predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve12 with type t1 = k, type t2 = v,
  predicate Resolve0.resolve = Resolve6.resolve, predicate Resolve1.resolve = Resolve7.resolve
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve11 with type t = v
  clone Core_Mem_Swap_Interface as Swap1 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve10 with type t = k
  clone Core_Mem_Swap_Interface as Swap0 with type t = k
  clone RedBlackTree_Impl16_DeleteMinRec_Interface as DeleteMinRec0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t,
  function Height0.height = Height0.height, function Model0.model = Model0.model,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  function Color1.color = Color1.color, predicate MatchN0.match_n = MatchN0.match_n
  clone RedBlackTree_Impl15_MoveRedRight_Interface as MoveRedRight0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  predicate MatchN0.match_n = MatchN2.match_n, function Height0.height = Height1.height,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping1.has_mapping,
  function Model0.model = Model0.model, predicate LeLog0.le_log = LeLog0.le_log,
  predicate MatchN1.match_n = MatchN1.match_n,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant, function Color1.color = Color1.color,
  function Height1.height = Height0.height, predicate HasMapping1.has_mapping = HasMapping0.has_mapping
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve9 with type self = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap2 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap1 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone Core_Mem_Take_Interface as Take0 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v),
  function DefaultLog0.default_log = DefaultLog0.default_log
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Option_Impl0_IsNone_Interface as IsNone0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Core_Option_Option_Type.core_option_option_type (k, v)
  clone RedBlackTree_Impl15_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant1.internal_invariant,
  function Color0.color = Color1.color, predicate SameMappings0.same_mappings = SameMappings0.same_mappings,
  function Height0.height = Height1.height, function Model0.model = Model0.model,
  predicate LtLog0.lt_log = LtLog0.lt_log, function Height1.height = Height0.height,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color1.color
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model0.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Alloc_Boxed_Impl54_AsMut_Interface as AsMut1 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  let rec cfg delete_rec [@cfg:stackify] [#"../red_black_tree.rs" 762 4 762 55] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) (key : k) : Core_Option_Option_Type.core_option_option_type (k, v)
    requires {[#"../red_black_tree.rs" 751 15 751 43] InternalInvariant0.internal_invariant ( * self)}
    requires {[#"../red_black_tree.rs" 752 15 753 62] MatchT0.match_t (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) ( * self) \/ MatchT1.match_t (RedBlackTree_Cpn_Type.RedBlackTree_Cpn_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type)) (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type))) ( * self)}
    ensures { [#"../red_black_tree.rs" 754 14 754 42] InternalInvariant0.internal_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 755 14 755 50] Height0.height ( * self) = Height0.height ( ^ self) }
    ensures { [#"../red_black_tree.rs" 756 4 756 78] forall v : (v) . result = Core_Option_Option_Type.Core_Option_Option_None_Type -> not HasMapping0.has_mapping ( * self) (Model0.model key) v }
    ensures { [#"../red_black_tree.rs" 757 4 758 57] forall v : (v) . forall k : (k) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type (k, v) -> Model0.model key = Model0.model k /\ HasMapping0.has_mapping ( * self) (Model0.model k) v }
    ensures { [#"../red_black_tree.rs" 759 4 759 114] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( ^ self) k v = (Model0.model key <> k /\ HasMapping0.has_mapping ( * self) k v) }
    ensures { [#"../red_black_tree.rs" 760 14 760 39] ColorInvariant0.color_invariant ( ^ self) }
    ensures { [#"../red_black_tree.rs" 761 4 761 69] Color1.color ( * self) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type -> Color1.color ( ^ self) = RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.core_option_option_type (k, v);
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var key_2 : k;
  var r_3 : Core_Option_Option_Type.core_option_option_type (k, v);
  var node_4 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _5 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _6 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _7 : Core_Option_Option_Type.core_option_option_type (borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _8 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _9 : ();
  var _10 : Core_Cmp_Ordering_Type.core_cmp_ordering_type;
  var _11 : k;
  var _12 : k;
  var _13 : k;
  var _14 : int8;
  var _15 : ();
  var _16 : bool;
  var _17 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _18 : ();
  var _19 : ();
  var _20 : bool;
  var _21 : bool;
  var _22 : bool;
  var _23 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _24 : bool;
  var _25 : bool;
  var _26 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _27 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  var _28 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _29 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _30 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _31 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _32 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _33 : Core_Option_Option_Type.core_option_option_type (k, v);
  var _34 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _35 : k;
  var ord_36 : Core_Cmp_Ordering_Type.core_cmp_ordering_type;
  var _37 : bool;
  var _38 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _39 : ();
  var _40 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _41 : Core_Option_Option_Type.core_option_option_type (k, v);
  var _42 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _43 : k;
  var _44 : ();
  var _45 : bool;
  var _46 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _47 : ();
  var _48 : ();
  var _49 : int8;
  var _50 : ();
  var node_51 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  var _52 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _53 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _54 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _55 : (k, v);
  var _56 : k;
  var _57 : v;
  var _58 : ();
  var _59 : bool;
  var _60 : bool;
  var _61 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _62 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  var _63 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _64 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _65 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _66 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _67 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _68 : int8;
  var kv_69 : (k, v);
  var _70 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  ghost var _71 : ();
  var _72 : ();
  var _73 : ();
  var _74 : borrowed k;
  var _75 : borrowed k;
  var _76 : borrowed k;
  var _77 : borrowed k;
  var _78 : ();
  var _79 : borrowed v;
  var _80 : borrowed v;
  var _81 : borrowed v;
  var _82 : borrowed v;
  var _83 : Core_Option_Option_Type.core_option_option_type (k, v);
  var _84 : (k, v);
  var _85 : Core_Option_Option_Type.core_option_option_type (k, v);
  var _86 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _87 : k;
  var _88 : ();
  var _89 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _8 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _8)) };
    _7 <- ([#"../red_black_tree.rs" 764 23 764 41] AsMut0.as_mut _8);
    goto BB1
  }
  BB1 {
    _6 <- ([#"../red_black_tree.rs" 764 23 764 50] Unwrap0.unwrap _7);
    goto BB2
  }
  BB2 {
    _5 <- borrow_mut ( * _6);
    _6 <- { _6 with current = ( ^ _5) };
    node_4 <- ([#"../red_black_tree.rs" 764 23 764 59] AsMut1.as_mut _5);
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _6 };
    _11 <- key_2;
    _13 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * node_4);
    _12 <- _13;
    assume { Resolve1.resolve _13 };
    _10 <- ([#"../red_black_tree.rs" 765 14 765 32] Cmp0.cmp _11 _12);
    goto BB4
  }
  BB4 {
    switch (_10)
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    ord_36 <- _10;
    _38 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_4);
    _37 <- ([#"../red_black_tree.rs" 776 19 776 37] IsRed0.is_red _38);
    goto BB24
  }
  BB6 {
    assume { Resolve2.resolve self_1 };
    _17 <- RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_4));
    _16 <- ([#"../red_black_tree.rs" 767 19 767 43] IsNone0.is_none _17);
    goto BB7
  }
  BB7 {
    switch (_16)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve4.resolve node_4 };
    _0 <- Core_Option_Option_Type.Core_Option_Option_None_Type;
    goto BB67
  }
  BB9 {
    _15 <- ();
    _23 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_4);
    _22 <- ([#"../red_black_tree.rs" 770 20 770 38] IsRed0.is_red _23);
    goto BB13
  }
  BB10 {
    _20 <- false;
    goto BB12
  }
  BB11 {
    _29 <- RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_4));
    _28 <- ([#"../red_black_tree.rs" 770 43 770 66] AsRef0.as_ref _29);
    goto BB14
  }
  BB12 {
    switch (_20)
      | False -> goto BB19
      | _ -> goto BB17
      end
  }
  BB13 {
    _21 <- not _22;
    switch (_21)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB14 {
    _27 <- ([#"../red_black_tree.rs" 770 43 770 75] Unwrap2.unwrap _28);
    goto BB15
  }
  BB15 {
    _26 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left _27;
    assume { Resolve9.resolve _27 };
    _25 <- ([#"../red_black_tree.rs" 770 43 770 89] IsRed0.is_red _26);
    goto BB16
  }
  BB16 {
    _24 <- not _25;
    _20 <- _24;
    _24 <- any bool;
    goto BB12
  }
  BB17 {
    _32 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _32) };
    _31 <- ([#"../red_black_tree.rs" 771 27 771 47] MoveRedLeft0.move_red_left _32);
    goto BB18
  }
  BB18 {
    assume { Resolve4.resolve node_4 };
    _30 <- borrow_mut ( * _31);
    _31 <- { _31 with current = ( ^ _30) };
    assume { Resolve4.resolve _31 };
    assume { Resolve4.resolve node_4 };
    node_4 <- _30;
    _30 <- any borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
    _19 <- ();
    goto BB20
  }
  BB19 {
    _19 <- ();
    goto BB20
  }
  BB20 {
    _34 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_4));
    node_4 <- { node_4 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_4 in RedBlackTree_Node_Type.RedBlackTree_Node_Type ( ^ _34) b c d e) };
    _35 <- key_2;
    assume { Resolve1.resolve key_2 };
    _33 <- ([#"../red_black_tree.rs" 773 20 773 45] delete_rec _34 _35);
    goto BB21
  }
  BB21 {
    assume { Resolve3.resolve r_3 };
    r_3 <- _33;
    goto BB22
  }
  BB22 {
    _9 <- ();
    goto BB23
  }
  BB23 {
    goto BB62
  }
  BB24 {
    switch (_37)
      | False -> goto BB30
      | _ -> goto BB25
      end
  }
  BB25 {
    assume { Resolve2.resolve self_1 };
    _40 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _40) };
    _39 <- ([#"../red_black_tree.rs" 777 20 777 39] RotateRight0.rotate_right _40);
    goto BB26
  }
  BB26 {
    _42 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * node_4));
    node_4 <- { node_4 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_4 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d ( ^ _42)) };
    _43 <- key_2;
    assume { Resolve1.resolve key_2 };
    _41 <- ([#"../red_black_tree.rs" 778 24 778 50] delete_rec _42 _43);
    goto BB27
  }
  BB27 {
    assume { Resolve3.resolve r_3 };
    r_3 <- _41;
    goto BB28
  }
  BB28 {
    _9 <- ();
    goto BB29
  }
  BB29 {
    goto BB61
  }
  BB30 {
    _46 <- RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * node_4));
    _45 <- ([#"../red_black_tree.rs" 780 23 780 48] IsNone0.is_none _46);
    goto BB31
  }
  BB31 {
    switch (_45)
      | False -> goto BB40
      | _ -> goto BB32
      end
  }
  BB32 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve4.resolve node_4 };
    switch (ord_36)
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type -> goto BB33
      | _ -> goto BB34
      end
  }
  BB33 {
    assume { Resolve2.resolve self_1 };
    _0 <- Core_Option_Option_Type.Core_Option_Option_None_Type;
    goto BB66
  }
  BB34 {
    _48 <- ();
    _54 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _54)) };
    assume { Resolve2.resolve self_1 };
    _53 <- borrow_mut ( * _54);
    _54 <- { _54 with current = ( ^ _53) };
    _52 <- ([#"../red_black_tree.rs" 784 35 784 65] Take0.take _53);
    goto BB35
  }
  BB35 {
    assume { Resolve5.resolve _54 };
    node_51 <- ([#"../red_black_tree.rs" 784 35 784 74] Unwrap1.unwrap _52);
    goto BB36
  }
  BB36 {
    assume { Resolve6.resolve _56 };
    _56 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_key node_51;
    node_51 <- (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e = node_51 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b (any k) d e);
    assume { Resolve7.resolve _57 };
    _57 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_val node_51;
    node_51 <- (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e = node_51 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c (any v) e);
    _55 <- (_56, _57);
    goto BB37
  }
  BB37 {
    goto BB38
  }
  BB38 {
    _0 <- Core_Option_Option_Type.Core_Option_Option_Some_Type _55;
    goto BB39
  }
  BB39 {
    goto BB65
  }
  BB40 {
    assume { Resolve2.resolve self_1 };
    _44 <- ();
    _64 <- RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * node_4));
    _63 <- ([#"../red_black_tree.rs" 787 24 787 48] AsRef0.as_ref _64);
    goto BB41
  }
  BB41 {
    _62 <- ([#"../red_black_tree.rs" 787 24 787 57] Unwrap2.unwrap _63);
    goto BB42
  }
  BB42 {
    _61 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left _62;
    assume { Resolve9.resolve _62 };
    _60 <- ([#"../red_black_tree.rs" 787 24 787 71] IsRed0.is_red _61);
    goto BB43
  }
  BB43 {
    _59 <- not _60;
    switch (_59)
      | False -> goto BB46
      | _ -> goto BB44
      end
  }
  BB44 {
    _67 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _67) };
    _66 <- ([#"../red_black_tree.rs" 788 31 788 52] MoveRedRight0.move_red_right _67);
    goto BB45
  }
  BB45 {
    assume { Resolve4.resolve node_4 };
    _65 <- borrow_mut ( * _66);
    _66 <- { _66 with current = ( ^ _65) };
    assume { Resolve4.resolve _66 };
    assume { Resolve4.resolve node_4 };
    node_4 <- _65;
    _65 <- any borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
    _58 <- ();
    goto BB47
  }
  BB46 {
    _58 <- ();
    goto BB47
  }
  BB47 {
    switch (ord_36)
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type -> goto BB48
      | _ -> goto BB57
      end
  }
  BB48 {
    assume { Resolve1.resolve key_2 };
    _70 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * node_4));
    node_4 <- { node_4 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_4 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d ( ^ _70)) };
    kv_69 <- ([#"../red_black_tree.rs" 791 37 791 64] DeleteMinRec0.delete_min_rec _70);
    goto BB49
  }
  BB49 {
    _72 <- ();
    _71 <- ghost ([#"../red_black_tree.rs" 792 24 792 56] ());
    goto BB50
  }
  BB50 {
    _75 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * node_4));
    node_4 <- { node_4 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_4 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b ( ^ _75) d e) };
    _74 <- borrow_mut ( * _75);
    _75 <- { _75 with current = ( ^ _74) };
    _77 <- borrow_mut (let (a, _) = kv_69 in a);
    kv_69 <- (let (a, b) = kv_69 in ( ^ _77, b));
    _76 <- borrow_mut ( * _77);
    _77 <- { _77 with current = ( ^ _76) };
    _73 <- ([#"../red_black_tree.rs" 793 24 793 64] Swap0.swap _74 _76);
    goto BB51
  }
  BB51 {
    assume { Resolve10.resolve _75 };
    assume { Resolve10.resolve _77 };
    _80 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_val ( * node_4));
    node_4 <- { node_4 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_4 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c ( ^ _80) e) };
    _79 <- borrow_mut ( * _80);
    _80 <- { _80 with current = ( ^ _79) };
    _82 <- borrow_mut (let (_, a) = kv_69 in a);
    kv_69 <- (let (a, b) = kv_69 in (a,  ^ _82));
    _81 <- borrow_mut ( * _82);
    _82 <- { _82 with current = ( ^ _81) };
    _78 <- ([#"../red_black_tree.rs" 794 24 794 64] Swap1.swap _79 _81);
    goto BB52
  }
  BB52 {
    assume { Resolve11.resolve _80 };
    assume { Resolve11.resolve _82 };
    assume { Resolve12.resolve _84 };
    _84 <- kv_69;
    kv_69 <- any (k, v);
    _83 <- Core_Option_Option_Type.Core_Option_Option_Some_Type _84;
    goto BB53
  }
  BB53 {
    assume { Resolve3.resolve r_3 };
    r_3 <- _83;
    goto BB54
  }
  BB54 {
    _9 <- ();
    goto BB55
  }
  BB55 {
    goto BB56
  }
  BB56 {
    goto BB61
  }
  BB57 {
    _86 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * node_4));
    node_4 <- { node_4 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_4 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d ( ^ _86)) };
    _87 <- key_2;
    assume { Resolve1.resolve key_2 };
    _85 <- ([#"../red_black_tree.rs" 797 28 797 54] delete_rec _86 _87);
    goto BB58
  }
  BB58 {
    assume { Resolve3.resolve r_3 };
    r_3 <- _85;
    goto BB59
  }
  BB59 {
    _9 <- ();
    goto BB60
  }
  BB60 {
    goto BB61
  }
  BB61 {
    goto BB62
  }
  BB62 {
    _89 <- borrow_mut ( * node_4);
    node_4 <- { node_4 with current = ( ^ _89) };
    _88 <- ([#"../red_black_tree.rs" 802 8 802 22] Balance0.balance _89);
    goto BB63
  }
  BB63 {
    assume { Resolve4.resolve node_4 };
    assume { Resolve3.resolve _0 };
    _0 <- r_3;
    r_3 <- any Core_Option_Option_Type.core_option_option_type (k, v);
    goto BB64
  }
  BB64 {
    goto BB69
  }
  BB65 {
    assume { Resolve8.resolve node_51 };
    goto BB66
  }
  BB66 {
    goto BB67
  }
  BB67 {
    goto BB68
  }
  BB68 {
    goto BB69
  }
  BB69 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module RedBlackTree_Impl16_Delete_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val delete [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) (key : k) : Core_Option_Option_Type.core_option_option_type (k, v)
    requires {[#"../red_black_tree.rs" 806 15 806 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 807 14 807 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 808 14 808 63] (result = Core_Option_Option_Type.Core_Option_Option_None_Type) = (Map.get (Model0.model ( * self)) (Model1.model key) = Core_Option_Option_Type.Core_Option_Option_None_Type) }
    ensures { [#"../red_black_tree.rs" 809 4 810 46] forall v : (v) . forall k : (k) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type (k, v) /\ Model1.model k = Model1.model key -> Map.get (Model0.model ( * self)) (Model1.model key) = Core_Option_Option_Type.Core_Option_Option_Some_Type v }
    ensures { [#"../red_black_tree.rs" 811 14 811 49] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    
end
module RedBlackTree_Impl16_Delete
  type k
  type v
  use prelude.Borrow
  use map.Map
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  use RedBlackTree_Color_Type
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl3_ModelTy_Type as ModelTy1 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone CreusotContracts_Logic_Model_Impl1_Model as Model2 with type t = RedBlackTree_Node_Type.redblacktree_tree_type k v,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model0.model
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color
  use mach.int.Int
  use prelude.IntSize
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color1.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  use RedBlackTree_Cpn_Type
  clone RedBlackTree_Impl7_MatchN as MatchN1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT0.match_t
  clone RedBlackTree_Impl7_MatchT as MatchT1 with type k = k, type v = v,
  type l = RedBlackTree_Cpl_Type.redblacktree_cpl_type, type r = RedBlackTree_Cpl_Type.redblacktree_cpl_type,
  predicate MatchN0.match_n = MatchN1.match_n
  use CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Core_Option_Option_Type.core_option_option_type (k, v)
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl16_DeleteRec_Interface as DeleteRec0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate MatchT0.match_t = MatchT0.match_t, predicate MatchT1.match_t = MatchT1.match_t,
  function Height0.height = Height0.height, function Model0.model = Model1.model,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, type ModelTy0.modelTy = ModelTy0.modelTy,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color1.color = Color0.color,
  predicate MatchN0.match_n = MatchN0.match_n
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone RedBlackTree_Impl14_IsRed_Interface as IsRed0 with type k = k, type v = v, function Color0.color = Color0.color
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)
  let rec cfg delete [@cfg:stackify] [#"../red_black_tree.rs" 812 4 812 55] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) (key : k) : Core_Option_Option_Type.core_option_option_type (k, v)
    requires {[#"../red_black_tree.rs" 806 15 806 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 807 14 807 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 808 14 808 63] (result = Core_Option_Option_Type.Core_Option_Option_None_Type) = (Map.get (Model0.model ( * self)) (Model1.model key) = Core_Option_Option_Type.Core_Option_Option_None_Type) }
    ensures { [#"../red_black_tree.rs" 809 4 810 46] forall v : (v) . forall k : (k) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type (k, v) /\ Model1.model k = Model1.model key -> Map.get (Model0.model ( * self)) (Model1.model key) = Core_Option_Option_Type.Core_Option_Option_Some_Type v }
    ensures { [#"../red_black_tree.rs" 811 14 811 49] Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Core_Option_Option_Type.Core_Option_Option_None_Type) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.core_option_option_type (k, v);
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var key_2 : k;
  ghost var _3 : ();
  var _4 : ();
  ghost var old_self_5 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _6 : ();
  var _7 : ();
  var _8 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _9 : isize;
  var node_10 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _11 : bool;
  var _12 : bool;
  var _13 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _14 : RedBlackTree_Color_Type.redblacktree_color_type;
  var _15 : ();
  var r_16 : Core_Option_Option_Type.core_option_option_type (k, v);
  var _17 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _18 : k;
  var _19 : ();
  var _20 : ();
  var _21 : bool;
  var _22 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _23 : RedBlackTree_Color_Type.redblacktree_color_type;
  var _24 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _25 : Core_Option_Option_Type.core_option_option_type (borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _26 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  ghost var _27 : ();
  var _28 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _4 <- ();
    _3 <- ghost ([#"../red_black_tree.rs" 813 8 813 42] ());
    goto BB1
  }
  BB1 {
    _6 <- ();
    old_self_5 <- ghost ([#"../red_black_tree.rs" 815 23 815 38] self_1);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve old_self_5 };
    _8 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _8)) };
    switch ( * _8)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB3
      | _ -> goto BB8
      end
  }
  BB3 {
    node_10 <- borrow_mut (Core_Option_Option_Type.core_option_option_type_Some_0 ( * _8));
    _8 <- { _8 with current = (let Core_Option_Option_Type.Core_Option_Option_Some_Type a =  * _8 in Core_Option_Option_Type.Core_Option_Option_Some_Type ( ^ node_10)) };
    assume { Resolve3.resolve _8 };
    _13 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_10);
    _12 <- ([#"../red_black_tree.rs" 817 16 817 34] IsRed0.is_red _13);
    goto BB4
  }
  BB4 {
    _11 <- not _12;
    switch (_11)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    _14 <- RedBlackTree_Color_Type.RedBlackTree_Color_Red_Type;
    node_10 <- { node_10 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_10 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a _14 c d e) };
    _14 <- any RedBlackTree_Color_Type.redblacktree_color_type;
    assume { Resolve4.resolve node_10 };
    _7 <- ();
    goto BB7
  }
  BB6 {
    assume { Resolve4.resolve node_10 };
    _7 <- ();
    goto BB7
  }
  BB7 {
    _17 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _17) };
    _18 <- key_2;
    assume { Resolve2.resolve key_2 };
    r_16 <- ([#"../red_black_tree.rs" 823 16 823 36] DeleteRec0.delete_rec _17 _18);
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve key_2 };
    assume { Resolve3.resolve _8 };
    _0 <- Core_Option_Option_Type.Core_Option_Option_None_Type;
    goto BB18
  }
  BB9 {
    assert { [#"../red_black_tree.rs" 824 24 824 62] Model0.model ( * self_1) = Map.set (Model2.model old_self_5) (Model1.model key_2) (Core_Option_Option_Type.Core_Option_Option_None_Type) };
    _19 <- ();
    _22 <-  * self_1;
    _21 <- ([#"../red_black_tree.rs" 825 11 825 24] IsRed0.is_red _22);
    goto BB10
  }
  BB10 {
    switch (_21)
      | False -> goto BB14
      | _ -> goto BB11
      end
  }
  BB11 {
    _23 <- RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type;
    _26 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * self_1 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _26)) };
    _25 <- ([#"../red_black_tree.rs" 826 12 826 30] AsMut0.as_mut _26);
    goto BB12
  }
  BB12 {
    assume { Resolve1.resolve self_1 };
    _24 <- ([#"../red_black_tree.rs" 826 12 826 39] Unwrap0.unwrap _25);
    goto BB13
  }
  BB13 {
    _24 <- { _24 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * _24 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a _23 c d e) };
    _23 <- any RedBlackTree_Color_Type.redblacktree_color_type;
    assume { Resolve4.resolve _24 };
    _20 <- ();
    goto BB15
  }
  BB14 {
    assume { Resolve1.resolve self_1 };
    _20 <- ();
    goto BB15
  }
  BB15 {
    _28 <- ();
    _27 <- ghost ([#"../red_black_tree.rs" 828 8 828 55] match (r_16) with
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> ()
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> ()
      end);
    goto BB16
  }
  BB16 {
    assume { Resolve5.resolve _0 };
    _0 <- r_16;
    r_16 <- any Core_Option_Option_Type.core_option_option_type (k, v);
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module RedBlackTree_Impl16_Get_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get [@cfg:stackify] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (key : k) : Core_Option_Option_Type.core_option_option_type v
    requires {[#"../red_black_tree.rs" 832 15 832 34] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 833 4 833 83] forall v : (v) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type v -> Map.get (Model0.model self) (Model1.model key) = Core_Option_Option_Type.Core_Option_Option_Some_Type v }
    ensures { [#"../red_black_tree.rs" 834 4 834 62] result = Core_Option_Option_Type.Core_Option_Option_None_Type -> Map.get (Model0.model self) (Model1.model key) = Core_Option_Option_Type.Core_Option_Option_None_Type }
    
end
module RedBlackTree_Impl16_Get
  type k
  type v
  use prelude.Borrow
  use map.Map
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  use RedBlackTree_Color_Type
  use RedBlackTree_Node_Type
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color
  use mach.int.Int
  use prelude.IntSize
  use prelude.Int8
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = RedBlackTree_Node_Type.redblacktree_tree_type k v
  let rec cfg get [@cfg:stackify] [#"../red_black_tree.rs" 835 4 835 44] (self : RedBlackTree_Node_Type.redblacktree_tree_type k v) (key : k) : Core_Option_Option_Type.core_option_option_type v
    requires {[#"../red_black_tree.rs" 832 15 832 34] Invariant0.invariant' self}
    ensures { [#"../red_black_tree.rs" 833 4 833 83] forall v : (v) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type v -> Map.get (Model0.model self) (Model1.model key) = Core_Option_Option_Type.Core_Option_Option_Some_Type v }
    ensures { [#"../red_black_tree.rs" 834 4 834 62] result = Core_Option_Option_Type.Core_Option_Option_None_Type -> Map.get (Model0.model self) (Model1.model key) = Core_Option_Option_Type.Core_Option_Option_None_Type }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.core_option_option_type v;
  var self_1 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var key_2 : k;
  var _3 : ();
  ghost var _4 : ();
  var _5 : ();
  var tree_6 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _7 : ();
  var _8 : ();
  var _9 : Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _10 : isize;
  var node_11 : RedBlackTree_Node_Type.redblacktree_node_type k v;
  var _12 : Core_Cmp_Ordering_Type.core_cmp_ordering_type;
  var _13 : k;
  var _14 : k;
  var _15 : k;
  var _16 : int8;
  var _17 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _18 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _19 : ();
  var _20 : v;
  var _21 : v;
  var _22 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _23 : RedBlackTree_Node_Type.redblacktree_tree_type k v;
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _5 <- ();
    _4 <- ghost ([#"../red_black_tree.rs" 836 8 836 42] ());
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve tree_6 };
    tree_6 <- self_1;
    assume { Resolve0.resolve self_1 };
    goto BB2
  }
  BB2 {
    invariant bst_inv { [#"../red_black_tree.rs" 839 29 839 52] BstInvariant0.bst_invariant tree_6 };
    invariant has_mapping { [#"../red_black_tree.rs" 839 8 839 54] forall v : (v) . HasMapping0.has_mapping self_1 (Model1.model key_2) v = HasMapping0.has_mapping tree_6 (Model1.model key_2) v };
    _9 <- RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node tree_6;
    assume { Resolve0.resolve tree_6 };
    switch (_9)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB3
      | _ -> goto BB10
      end
  }
  BB3 {
    node_11 <- Core_Option_Option_Type.core_option_option_type_Some_0 _9;
    assume { Resolve2.resolve _9 };
    _13 <- key_2;
    _15 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_key node_11;
    _14 <- _15;
    assume { Resolve1.resolve _15 };
    _12 <- ([#"../red_black_tree.rs" 842 18 842 36] Cmp0.cmp _13 _14);
    goto BB4
  }
  BB4 {
    switch (_12)
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type -> goto BB7
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type -> goto BB8
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type -> goto BB5
      end
  }
  BB5 {
    _23 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_right node_11;
    assume { Resolve3.resolve node_11 };
    _22 <- _23;
    assume { Resolve0.resolve _23 };
    assume { Resolve0.resolve tree_6 };
    tree_6 <- _22;
    _22 <- any RedBlackTree_Node_Type.redblacktree_tree_type k v;
    _8 <- ();
    goto BB9
  }
  BB6 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_11 };
    absurd
  }
  BB7 {
    _18 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_left node_11;
    assume { Resolve3.resolve node_11 };
    _17 <- _18;
    assume { Resolve0.resolve _18 };
    assume { Resolve0.resolve tree_6 };
    tree_6 <- _17;
    _17 <- any RedBlackTree_Node_Type.redblacktree_tree_type k v;
    _8 <- ();
    goto BB9
  }
  BB8 {
    assume { Resolve1.resolve key_2 };
    _21 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_val node_11;
    assume { Resolve3.resolve node_11 };
    _20 <- _21;
    assume { Resolve4.resolve _21 };
    _0 <- Core_Option_Option_Type.Core_Option_Option_Some_Type _20;
    goto BB11
  }
  BB9 {
    goto BB2
  }
  BB10 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _9 };
    _7 <- ();
    _0 <- Core_Option_Option_Type.Core_Option_Option_None_Type;
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module RedBlackTree_Impl16_GetMut_Interface
  type k
  type v
  use prelude.Borrow
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  use RedBlackTree_Node_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model2 with type t = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl3_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl12_Invariant_Interface as Invariant0 with type k = k, type v = v
  val get_mut [@cfg:stackify] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) (key : k) : Core_Option_Option_Type.core_option_option_type (borrowed v)
    requires {[#"../red_black_tree.rs" 851 15 851 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 852 14 852 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 853 4 854 89] forall v : (borrowed v) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type v -> Map.get (Model0.model ( * self)) (Model1.model key) = Core_Option_Option_Type.Core_Option_Option_Some_Type ( * v) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model2.model key) (Core_Option_Option_Type.Core_Option_Option_Some_Type ( ^ v)) }
    ensures { [#"../red_black_tree.rs" 855 4 855 93] result = Core_Option_Option_Type.Core_Option_Option_None_Type -> Map.get (Model0.model ( * self)) (Model1.model key) = Core_Option_Option_Type.Core_Option_Option_None_Type /\ Map.get (Model0.model ( ^ self)) (Model1.model key) = Core_Option_Option_Type.Core_Option_Option_None_Type }
    
end
module RedBlackTree_Impl16_GetMut
  type k
  type v
  use prelude.Borrow
  use map.Map
  use Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  use RedBlackTree_Node_Type
  use RedBlackTree_Color_Type
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  use Core_Option_Option_Type
  clone RedBlackTree_Impl8_Color as Color0 with type k = k, type v = v
  clone RedBlackTree_Impl9_ColorInvariantHere as ColorInvariantHere0 with type k = k, type v = v,
  function Color0.color = Color0.color
  clone RedBlackTree_Impl8_ColorInvariant as ColorInvariant0 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here
  clone RedBlackTree_Impl9_ColorInvariant as ColorInvariant1 with type k = k, type v = v,
  predicate ColorInvariantHere0.color_invariant_here = ColorInvariantHere0.color_invariant_here,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant
  use RedBlackTree_Cpl_Type
  clone RedBlackTree_Impl6_MatchN as MatchN0 with type k = k, type v = v,
  predicate ColorInvariant0.color_invariant = ColorInvariant1.color_invariant
  clone RedBlackTree_Impl10_Height as Height0 with type k = k, type v = v, axiom .
  clone RedBlackTree_Impl11_HeightInvariantHere as HeightInvariantHere0 with type k = k, type v = v,
  function Height0.height = Height0.height
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl0_HasMapping as HasMapping0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone RedBlackTree_Impl4_BstInvariantHere as BstInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  function Model0.model = Model1.model, predicate LtLog0.lt_log = LtLog0.lt_log
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl0_ModelAccHasMapping as ModelAccHasMapping0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, predicate HasMapping0.has_mapping = HasMapping0.has_mapping,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, axiom .
  clone RedBlackTree_Impl5_BstInvariant as BstInvariant0 with type k = k, type v = v,
  predicate BstInvariantHere0.bst_invariant_here = BstInvariantHere0.bst_invariant_here
  clone RedBlackTree_Impl0_HasMappingModelAcc as HasMappingModelAcc0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function ModelAcc0.model_acc = ModelAcc0.model_acc,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping, axiom .
  clone RedBlackTree_Impl10_HeightInvariant as HeightInvariant0 with type k = k, type v = v,
  predicate HeightInvariantHere0.height_invariant_here = HeightInvariantHere0.height_invariant_here
  clone RedBlackTree_Impl12_InternalInvariant as InternalInvariant0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HeightInvariant0.height_invariant = HeightInvariant0.height_invariant
  clone RedBlackTree_Impl6_MatchT as MatchT0 with type k = k, type v = v, predicate MatchN0.match_n = MatchN0.match_n,
  function Color1.color = Color0.color, predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant,
  axiom .
  clone RedBlackTree_Impl3_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl0_HasMappingModel as HasMappingModel0 with type k = k, type v = v,
  predicate BstInvariant0.bst_invariant = BstInvariant0.bst_invariant,
  predicate HasMapping0.has_mapping = HasMapping0.has_mapping, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAccHasMapping0.model_acc_has_mapping = ModelAccHasMapping0.model_acc_has_mapping,
  function HasMappingModelAcc0.has_mapping_model_acc = HasMappingModelAcc0.has_mapping_model_acc,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl12_Invariant as Invariant0 with type k = k, type v = v,
  predicate InternalInvariant0.internal_invariant = InternalInvariant0.internal_invariant,
  predicate ColorInvariant0.color_invariant = ColorInvariant0.color_invariant, function Color0.color = Color0.color
  use mach.int.Int
  use prelude.IntSize
  use prelude.Int8
  use CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = RedBlackTree_Node_Type.redblacktree_node_type k v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model2.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = RedBlackTree_Node_Type.redblacktree_tree_type k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)
  let rec cfg get_mut [@cfg:stackify] [#"../red_black_tree.rs" 856 4 856 56] (self : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v)) (key : k) : Core_Option_Option_Type.core_option_option_type (borrowed v)
    requires {[#"../red_black_tree.rs" 851 15 851 34] Invariant0.invariant' ( * self)}
    ensures { [#"../red_black_tree.rs" 852 14 852 33] Invariant0.invariant' ( ^ self) }
    ensures { [#"../red_black_tree.rs" 853 4 854 89] forall v : (borrowed v) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type v -> Map.get (Model0.model ( * self)) (Model1.model key) = Core_Option_Option_Type.Core_Option_Option_Some_Type ( * v) /\ Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model2.model key) (Core_Option_Option_Type.Core_Option_Option_Some_Type ( ^ v)) }
    ensures { [#"../red_black_tree.rs" 855 4 855 93] result = Core_Option_Option_Type.Core_Option_Option_None_Type -> Map.get (Model0.model ( * self)) (Model1.model key) = Core_Option_Option_Type.Core_Option_Option_None_Type /\ Map.get (Model0.model ( ^ self)) (Model1.model key) = Core_Option_Option_Type.Core_Option_Option_None_Type }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.core_option_option_type (borrowed v);
  var self_1 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var key_2 : k;
  var _3 : ();
  ghost var _4 : ();
  var _5 : ();
  ghost var old_self_6 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _7 : ();
  var tree_8 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _9 : ();
  var _10 : ();
  var _11 : borrowed (Core_Option_Option_Type.core_option_option_type (RedBlackTree_Node_Type.redblacktree_node_type k v));
  var _12 : isize;
  var node_13 : borrowed (RedBlackTree_Node_Type.redblacktree_node_type k v);
  var _14 : Core_Cmp_Ordering_Type.core_cmp_ordering_type;
  var _15 : k;
  var _16 : k;
  var _17 : k;
  var _18 : int8;
  var _19 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _20 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _21 : ();
  var _22 : borrowed v;
  var _23 : borrowed v;
  var _24 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _25 : borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
  var _26 : ();
  var _27 : ();
  var _28 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _5 <- ();
    _4 <- ghost ([#"../red_black_tree.rs" 857 8 857 42] ());
    goto BB1
  }
  BB1 {
    _7 <- ();
    old_self_6 <- ghost ([#"../red_black_tree.rs" 859 23 859 38] self_1);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve old_self_6 };
    assume { Resolve1.resolve tree_8 };
    tree_8 <- self_1;
    self_1 <- any borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
    goto BB3
  }
  BB3 {
    invariant bst_inv { [#"../red_black_tree.rs" 862 29 862 52] BstInvariant0.bst_invariant ( * tree_8) };
    invariant height_inv { [#"../red_black_tree.rs" 863 32 863 58] HeightInvariant0.height_invariant ( * tree_8) };
    invariant color_inv { [#"../red_black_tree.rs" 864 31 864 56] ColorInvariant0.color_invariant ( * tree_8) };
    invariant mapping_prof_key { [#"../red_black_tree.rs" 862 8 862 54] forall v : (v) . HasMapping0.has_mapping ( ^ tree_8) (Model2.model key_2) v = HasMapping0.has_mapping ( ^ old_self_6) (Model2.model key_2) v };
    invariant mapping_cur_key { [#"../red_black_tree.rs" 862 8 862 54] forall v : (v) . HasMapping0.has_mapping ( * tree_8) (Model2.model key_2) v = HasMapping0.has_mapping ( * old_self_6) (Model2.model key_2) v };
    invariant bst_inv_proph { [#"../red_black_tree.rs" 862 8 862 54] (forall v : (v) . forall k : (ModelTy0.modelTy) . k = Model2.model key_2 \/ HasMapping0.has_mapping ( * tree_8) k v = HasMapping0.has_mapping ( ^ tree_8) k v) -> BstInvariant0.bst_invariant ( ^ tree_8) -> BstInvariant0.bst_invariant ( ^ old_self_6) };
    invariant height_inv_proph { [#"../red_black_tree.rs" 862 8 862 54] Height0.height ( * tree_8) = Height0.height ( ^ tree_8) /\ HeightInvariant0.height_invariant ( ^ tree_8) -> HeightInvariant0.height_invariant ( ^ old_self_6) };
    invariant color_inv_proph { [#"../red_black_tree.rs" 862 8 862 54] MatchT0.match_t (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (Color0.color ( * tree_8))) ( ^ tree_8) -> MatchT0.match_t (RedBlackTree_Cpl_Type.RedBlackTree_Cpl_Type (RedBlackTree_Color_Type.RedBlackTree_Color_Black_Type)) ( ^ old_self_6) };
    invariant mapping_proph { [#"../red_black_tree.rs" 862 8 862 54] forall v : (v) . forall k : (ModelTy0.modelTy) . HasMapping0.has_mapping ( * tree_8) k v = HasMapping0.has_mapping ( ^ tree_8) k v -> HasMapping0.has_mapping ( * old_self_6) k v = HasMapping0.has_mapping ( ^ old_self_6) k v };
    _11 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_tree_type_Tree_node ( * tree_8));
    tree_8 <- { tree_8 with current = (let RedBlackTree_Node_Type.RedBlackTree_Tree_Type a =  * tree_8 in RedBlackTree_Node_Type.RedBlackTree_Tree_Type ( ^ _11)) };
    assume { Resolve1.resolve tree_8 };
    switch ( * _11)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB4
      | _ -> goto BB11
      end
  }
  BB4 {
    node_13 <- borrow_mut (Core_Option_Option_Type.core_option_option_type_Some_0 ( * _11));
    _11 <- { _11 with current = (let Core_Option_Option_Type.Core_Option_Option_Some_Type a =  * _11 in Core_Option_Option_Type.Core_Option_Option_Some_Type ( ^ node_13)) };
    assume { Resolve3.resolve _11 };
    _15 <- key_2;
    _17 <- RedBlackTree_Node_Type.redblacktree_node_type_Node_key ( * node_13);
    _16 <- _17;
    assume { Resolve2.resolve _17 };
    _14 <- ([#"../red_black_tree.rs" 877 18 877 36] Cmp0.cmp _15 _16);
    goto BB5
  }
  BB5 {
    switch (_14)
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Less_Type -> goto BB8
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Equal_Type -> goto BB9
      | Core_Cmp_Ordering_Type.Core_Cmp_Ordering_Greater_Type -> goto BB6
      end
  }
  BB6 {
    _25 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_right ( * node_13));
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_13 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d ( ^ _25)) };
    assume { Resolve4.resolve node_13 };
    _24 <- borrow_mut ( * _25);
    _25 <- { _25 with current = ( ^ _24) };
    assume { Resolve1.resolve _25 };
    assume { Resolve1.resolve tree_8 };
    tree_8 <- _24;
    _24 <- any borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
    _10 <- ();
    goto BB10
  }
  BB7 {
    assume { Resolve2.resolve key_2 };
    assume { Resolve4.resolve node_13 };
    absurd
  }
  BB8 {
    _20 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_left ( * node_13));
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_13 in RedBlackTree_Node_Type.RedBlackTree_Node_Type ( ^ _20) b c d e) };
    assume { Resolve4.resolve node_13 };
    _19 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _19) };
    assume { Resolve1.resolve _20 };
    assume { Resolve1.resolve tree_8 };
    tree_8 <- _19;
    _19 <- any borrowed (RedBlackTree_Node_Type.redblacktree_tree_type k v);
    _10 <- ();
    goto BB10
  }
  BB9 {
    assume { Resolve2.resolve key_2 };
    _23 <- borrow_mut (RedBlackTree_Node_Type.redblacktree_node_type_Node_val ( * node_13));
    node_13 <- { node_13 with current = (let RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c d e =  * node_13 in RedBlackTree_Node_Type.RedBlackTree_Node_Type a b c ( ^ _23) e) };
    assume { Resolve4.resolve node_13 };
    _22 <- borrow_mut ( * _23);
    _23 <- { _23 with current = ( ^ _22) };
    _0 <- Core_Option_Option_Type.Core_Option_Option_Some_Type _22;
    assume { Resolve5.resolve _23 };
    goto BB12
  }
  BB10 {
    goto BB3
  }
  BB11 {
    assume { Resolve2.resolve key_2 };
    assume { Resolve3.resolve _11 };
    _9 <- ();
    _0 <- Core_Option_Option_Type.Core_Option_Option_None_Type;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Borrow
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Borrow
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module RedBlackTree_Impl17
  use RedBlackTree_Color_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = RedBlackTree_Color_Type.redblacktree_color_type
  clone RedBlackTree_Impl17_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = RedBlackTree_Color_Type.redblacktree_color_type,
  val clone' = Clone0.clone'
end
module RedBlackTree_Impl18
  
end
module RedBlackTree_Impl2_ModelTy_Type
  type k
  type v
  use map.Map
  use Core_Option_Option_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = k
  type modelTy  =
    Map.map ModelTy0.modelTy (Core_Option_Option_Type.core_option_option_type v)
end
module RedBlackTree_Impl2
  type k
  type v
  use RedBlackTree_Node_Type
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  use Core_Option_Option_Type
  clone RedBlackTree_Impl0_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model3.model
  clone RedBlackTree_Impl3_Model as Model2 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl2_ModelTy_Type as ModelTy0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl2_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model, function Model1.model = Model3.model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = RedBlackTree_Node_Type.redblacktree_node_type k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = RedBlackTree_Node_Type.redblacktree_node_type k v,
  type modelTy = ModelTy0.modelTy
end
