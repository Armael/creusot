module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type redblacktree2_color  = 
    | RedBlackTree2_Color_Red
    | RedBlackTree2_Color_Black
    
  type redblacktree2_tree 'k 'v = 
    | RedBlackTree2_Tree_Node (redblacktree2_tree 'k 'v) (redblacktree2_color) 'k 'v (redblacktree2_tree 'k 'v)
    | RedBlackTree2_Tree_Leaf
    
  function redblacktree2_tree_Node_left (self : redblacktree2_tree 'k 'v) : redblacktree2_tree 'k 'v
  val redblacktree2_tree_Node_left (self : redblacktree2_tree 'k 'v) : redblacktree2_tree 'k 'v
    ensures { result = redblacktree2_tree_Node_left self }
    
  axiom redblacktree2_tree_Node_left_acc : forall a : redblacktree2_tree 'k 'v, b : redblacktree2_color, c : 'k, d : 'v, e : redblacktree2_tree 'k 'v . redblacktree2_tree_Node_left (RedBlackTree2_Tree_Node a b c d e : redblacktree2_tree 'k 'v) = a
  function redblacktree2_tree_Node_right (self : redblacktree2_tree 'k 'v) : redblacktree2_tree 'k 'v
  val redblacktree2_tree_Node_right (self : redblacktree2_tree 'k 'v) : redblacktree2_tree 'k 'v
    ensures { result = redblacktree2_tree_Node_right self }
    
  axiom redblacktree2_tree_Node_right_acc : forall a : redblacktree2_tree 'k 'v, b : redblacktree2_color, c : 'k, d : 'v, e : redblacktree2_tree 'k 'v . redblacktree2_tree_Node_right (RedBlackTree2_Tree_Node a b c d e : redblacktree2_tree 'k 'v) = e
end
module Core_Mem_Replace_Interface
  type t
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    requires {false}
    
end
module Core_Mem_Replace
  type t
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    requires {false}
    
end
module Core_Mem_Swap_Interface
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    requires {false}
    
end
module Core_Mem_Swap
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    requires {false}
    
end
module RedBlackTree2_Impl0_RotateRight_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  val rotate_right [@cfg:stackify] (self : borrowed (Type.redblacktree2_tree k v)) : ()
end
module RedBlackTree2_Impl0_RotateRight
  type k
  type v
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree2_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree2_tree k v
  clone Core_Mem_Replace_Interface as Replace0 with type t = Type.redblacktree2_tree k v
  let rec cfg rotate_right [@cfg:stackify] (self : borrowed (Type.redblacktree2_tree k v)) : () = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree2_tree k v);
  var _2 : isize;
  var _3 : ();
  var left_4 : borrowed (Type.redblacktree2_tree k v);
  var x_5 : Type.redblacktree2_tree k v;
  var _6 : borrowed (Type.redblacktree2_tree k v);
  var _7 : borrowed (Type.redblacktree2_tree k v);
  var _8 : Type.redblacktree2_tree k v;
  var _9 : borrowed (Type.redblacktree2_tree k v);
  var _10 : isize;
  var _11 : ();
  var right_12 : borrowed (Type.redblacktree2_tree k v);
  var _13 : ();
  var _14 : borrowed (Type.redblacktree2_tree k v);
  var _15 : borrowed (Type.redblacktree2_tree k v);
  var _16 : ();
  var _17 : borrowed (Type.redblacktree2_tree k v);
  var _18 : borrowed (Type.redblacktree2_tree k v);
  var _19 : borrowed (Type.redblacktree2_tree k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch ( * self_1)
      | Type.RedBlackTree2_Tree_Node _ _ _ _ _ -> goto BB1
      | Type.RedBlackTree2_Tree_Leaf -> goto BB3
      end
  }
  BB1 {
    left_4 <- borrow_mut (Type.redblacktree2_tree_Node_left ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree2_Tree_Node a b c d e =  * self_1 in Type.RedBlackTree2_Tree_Node ( ^ left_4) b c d e) };
    _7 <- borrow_mut ( * left_4);
    left_4 <- { left_4 with current = ( ^ _7) };
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _8 <- Type.RedBlackTree2_Tree_Leaf;
    x_5 <- Replace0.replace _6 _8;
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- ();
    goto BB12
  }
  BB4 {
    _9 <- borrow_mut x_5;
    x_5 <-  ^ _9;
    switch ( * _9)
      | Type.RedBlackTree2_Tree_Node _ _ _ _ _ -> goto BB5
      | Type.RedBlackTree2_Tree_Leaf -> goto BB7
      end
  }
  BB5 {
    right_12 <- borrow_mut (Type.redblacktree2_tree_Node_right ( * _9));
    _9 <- { _9 with current = (let Type.RedBlackTree2_Tree_Node a b c d e =  * _9 in Type.RedBlackTree2_Tree_Node a b c d ( ^ right_12)) };
    _14 <- borrow_mut ( * left_4);
    left_4 <- { left_4 with current = ( ^ _14) };
    _15 <- borrow_mut ( * right_12);
    right_12 <- { right_12 with current = ( ^ _15) };
    _13 <- Swap0.swap _14 _15;
    goto BB8
  }
  BB6 {
    absurd
  }
  BB7 {
    _0 <- ();
    goto BB11
  }
  BB8 {
    _18 <- borrow_mut ( * right_12);
    right_12 <- { right_12 with current = ( ^ _18) };
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _19 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _19) };
    _16 <- Swap1.swap _17 _19;
    goto BB9
  }
  BB9 {
    _0 <- ();
    goto BB10
  }
  BB10 {
    goto BB12
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module RedBlackTree2_Impl0_RotateLeft_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  val rotate_left [@cfg:stackify] (self : borrowed (Type.redblacktree2_tree k v)) : ()
end
module RedBlackTree2_Impl0_RotateLeft
  type k
  type v
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree2_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree2_tree k v
  clone Core_Mem_Replace_Interface as Replace0 with type t = Type.redblacktree2_tree k v
  let rec cfg rotate_left [@cfg:stackify] (self : borrowed (Type.redblacktree2_tree k v)) : () = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree2_tree k v);
  var _2 : isize;
  var _3 : ();
  var right_4 : borrowed (Type.redblacktree2_tree k v);
  var x_5 : Type.redblacktree2_tree k v;
  var _6 : borrowed (Type.redblacktree2_tree k v);
  var _7 : borrowed (Type.redblacktree2_tree k v);
  var _8 : Type.redblacktree2_tree k v;
  var _9 : borrowed (Type.redblacktree2_tree k v);
  var _10 : isize;
  var _11 : ();
  var left_12 : borrowed (Type.redblacktree2_tree k v);
  var _13 : ();
  var _14 : borrowed (Type.redblacktree2_tree k v);
  var _15 : borrowed (Type.redblacktree2_tree k v);
  var _16 : ();
  var _17 : borrowed (Type.redblacktree2_tree k v);
  var _18 : borrowed (Type.redblacktree2_tree k v);
  var _19 : borrowed (Type.redblacktree2_tree k v);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch ( * self_1)
      | Type.RedBlackTree2_Tree_Node _ _ _ _ _ -> goto BB1
      | Type.RedBlackTree2_Tree_Leaf -> goto BB3
      end
  }
  BB1 {
    right_4 <- borrow_mut (Type.redblacktree2_tree_Node_right ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree2_Tree_Node a b c d e =  * self_1 in Type.RedBlackTree2_Tree_Node a b c d ( ^ right_4)) };
    _7 <- borrow_mut ( * right_4);
    right_4 <- { right_4 with current = ( ^ _7) };
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    _8 <- Type.RedBlackTree2_Tree_Leaf;
    x_5 <- Replace0.replace _6 _8;
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- ();
    goto BB12
  }
  BB4 {
    _9 <- borrow_mut x_5;
    x_5 <-  ^ _9;
    switch ( * _9)
      | Type.RedBlackTree2_Tree_Node _ _ _ _ _ -> goto BB5
      | Type.RedBlackTree2_Tree_Leaf -> goto BB7
      end
  }
  BB5 {
    left_12 <- borrow_mut (Type.redblacktree2_tree_Node_left ( * _9));
    _9 <- { _9 with current = (let Type.RedBlackTree2_Tree_Node a b c d e =  * _9 in Type.RedBlackTree2_Tree_Node ( ^ left_12) b c d e) };
    _14 <- borrow_mut ( * right_4);
    right_4 <- { right_4 with current = ( ^ _14) };
    _15 <- borrow_mut ( * left_12);
    left_12 <- { left_12 with current = ( ^ _15) };
    _13 <- Swap0.swap _14 _15;
    goto BB8
  }
  BB6 {
    absurd
  }
  BB7 {
    _0 <- ();
    goto BB11
  }
  BB8 {
    _18 <- borrow_mut ( * left_12);
    left_12 <- { left_12 with current = ( ^ _18) };
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _19 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _19) };
    _16 <- Swap1.swap _17 _19;
    goto BB9
  }
  BB9 {
    _0 <- ();
    goto BB10
  }
  BB10 {
    goto BB12
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
