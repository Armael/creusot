
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type core_ptr_nonnull_nonnull_type 't =
    | Core_Ptr_NonNull_NonNull_Type opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_ptr_unique_unique_type 't =
    | Core_Ptr_Unique_Unique_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type
  type alloc_rawvec_rawvec_type 't 'a =
    | Alloc_RawVec_RawVec_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type
  type alloc_vec_vec_type 't 'a =
    | Alloc_Vec_Vec_Type (Alloc_RawVec_RawVec_Type.alloc_rawvec_rawvec_type 't 'a) usize
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a . Seq.length (model self) <= 18446744073709551615
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module Alloc_Alloc_Global_Type
  type alloc_alloc_global_type  =
    | Alloc_Alloc_Global_Type
    
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy_Type
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  use prelude.Opaque
  type creusotcontracts_logic_ghost_ghost_type 't =
    | CreusotContracts_Logic_Ghost_Ghost_Type opaque_ptr
    
end
module Hillel_RightPad_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val right_pad [@cfg:stackify] (str : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))) (len : usize) (pad : t) : ()
    ensures { [#"../hillel.rs" 7 10 7 64] Seq.length (Model0.model ( ^ str)) >= UInt64.to_int len /\ Seq.length (Model0.model ( ^ str)) >= Seq.length (Model1.model str) }
    ensures { [#"../hillel.rs" 8 10 8 64] Seq.length (Model0.model ( ^ str)) = UInt64.to_int len \/ Seq.length (Model0.model ( ^ str)) = Seq.length (Model1.model str) }
    ensures { [#"../hillel.rs" 9 0 9 66] UInt64.to_int len <= Seq.length (Model1.model str) -> Seq.length (Model0.model ( ^ str)) = Seq.length (Model1.model str) }
    ensures { [#"../hillel.rs" 10 0 10 57] UInt64.to_int len > Seq.length (Model1.model str) -> Seq.length (Model0.model ( ^ str)) = UInt64.to_int len }
    ensures { [#"../hillel.rs" 11 0 11 81] forall i : (int) . 0 <= i /\ i < Seq.length (Model1.model str) -> Seq.get (Model0.model ( ^ str)) i = Seq.get (Model1.model str) i }
    ensures { [#"../hillel.rs" 12 0 12 78] forall i : (int) . Seq.length (Model1.model str) <= i /\ i < UInt64.to_int len -> Seq.get (Model0.model ( ^ str)) i = pad }
    
end
module Hillel_RightPad
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  use CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = t, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type,
  function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
  let rec cfg right_pad [@cfg:stackify] [#"../hillel.rs" 13 0 13 59] (str : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))) (len : usize) (pad : t) : ()
    ensures { [#"../hillel.rs" 7 10 7 64] Seq.length (Model0.model ( ^ str)) >= UInt64.to_int len /\ Seq.length (Model0.model ( ^ str)) >= Seq.length (Model1.model str) }
    ensures { [#"../hillel.rs" 8 10 8 64] Seq.length (Model0.model ( ^ str)) = UInt64.to_int len \/ Seq.length (Model0.model ( ^ str)) = Seq.length (Model1.model str) }
    ensures { [#"../hillel.rs" 9 0 9 66] UInt64.to_int len <= Seq.length (Model1.model str) -> Seq.length (Model0.model ( ^ str)) = Seq.length (Model1.model str) }
    ensures { [#"../hillel.rs" 10 0 10 57] UInt64.to_int len > Seq.length (Model1.model str) -> Seq.length (Model0.model ( ^ str)) = UInt64.to_int len }
    ensures { [#"../hillel.rs" 11 0 11 81] forall i : (int) . 0 <= i /\ i < Seq.length (Model1.model str) -> Seq.get (Model0.model ( ^ str)) i = Seq.get (Model1.model str) i }
    ensures { [#"../hillel.rs" 12 0 12 78] forall i : (int) . Seq.length (Model1.model str) <= i /\ i < UInt64.to_int len -> Seq.get (Model0.model ( ^ str)) i = pad }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var str_1 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var len_2 : usize;
  var pad_3 : t;
  ghost var old_str_4 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _10 : usize;
  var _11 : ();
  var _12 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _13 : t;
  var _14 : ();
  var _15 : ();
  var _16 : ();
  {
    str_1 <- str;
    len_2 <- len;
    pad_3 <- pad;
    goto BB0
  }
  BB0 {
    _5 <- ();
    old_str_4 <- ghost ([#"../hillel.rs" 14 18 14 32] str_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_str_4 };
    goto BB2
  }
  BB2 {
    invariant proph_const { [#"../hillel.rs" 16 29 16 46]  ^ str_1 =  ^ old_str_4 };
    invariant old_str_bound { [#"../hillel.rs" 17 31 17 63] Seq.length (Model1.model old_str_4) <= Seq.length (Model1.model str_1) };
    invariant len_bound { [#"../hillel.rs" 16 4 16 48] Seq.length (Model1.model old_str_4) < UInt64.to_int len_2 -> Seq.length (Model1.model str_1) <= UInt64.to_int len_2 };
    invariant len_bound { [#"../hillel.rs" 16 4 16 48] Seq.length (Model1.model str_1) > UInt64.to_int len_2 -> Seq.length (Model1.model str_1) = Seq.length (Model1.model old_str_4) };
    invariant old_elem { [#"../hillel.rs" 16 4 16 48] forall i : (int) . 0 <= i /\ i < Seq.length (Model1.model old_str_4) -> Seq.get (Model1.model str_1) i = Seq.get (Model1.model old_str_4) i };
    invariant pad_elem { [#"../hillel.rs" 16 4 16 48] forall i : (int) . Seq.length (Model1.model old_str_4) <= i /\ i < Seq.length (Model1.model str_1) -> Seq.get (Model1.model str_1) i = pad_3 };
    _9 <-  * str_1;
    _8 <- ([#"../hillel.rs" 22 10 22 19] Len0.len _9);
    goto BB3
  }
  BB3 {
    _10 <- len_2;
    _7 <- ([#"../hillel.rs" 22 10 22 25] _8 < _10);
    switch (_7)
      | False -> goto BB6
      | _ -> goto BB4
      end
  }
  BB4 {
    _12 <- borrow_mut ( * str_1);
    str_1 <- { str_1 with current = ( ^ _12) };
    assume { Resolve1.resolve _13 };
    _13 <- pad_3;
    _11 <- ([#"../hillel.rs" 23 8 23 21] Push0.push _12 _13);
    goto BB5
  }
  BB5 {
    _6 <- ();
    goto BB2
  }
  BB6 {
    assume { Resolve2.resolve str_1 };
    assume { Resolve1.resolve pad_3 };
    _0 <- ();
    return _0
  }
  
end
module Alloc_Vec_Impl1_Insert_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t, type a = a
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val insert [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (index : usize) (element : t) : ()
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model1.model self) + 1 }
    ensures { forall i : (int) . 0 <= i /\ i < UInt64.to_int index -> Seq.get (Model0.model ( ^ self)) i = Seq.get (Model1.model self) i }
    ensures { Seq.get (Model0.model ( ^ self)) (UInt64.to_int index) = element }
    ensures { forall i : (int) . UInt64.to_int index < i /\ i < Seq.length (Model0.model ( ^ self)) -> Seq.get (Model0.model ( ^ self)) i = Seq.get (Model1.model self) (i - 1) }
    
end
module Alloc_Vec_Impl1_Insert
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t, type a = a
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val insert [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (index : usize) (element : t) : ()
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model1.model self) + 1 }
    ensures { forall i : (int) . 0 <= i /\ i < UInt64.to_int index -> Seq.get (Model0.model ( ^ self)) i = Seq.get (Model1.model self) i }
    ensures { Seq.get (Model0.model ( ^ self)) (UInt64.to_int index) = element }
    ensures { forall i : (int) . UInt64.to_int index < i /\ i < Seq.length (Model0.model ( ^ self)) -> Seq.get (Model0.model ( ^ self)) i = Seq.get (Model1.model self) (i - 1) }
    
end
module Hillel_LeftPad_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val left_pad [@cfg:stackify] (str : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))) (len : usize) (pad : t) : ()
    ensures { [#"../hillel.rs" 27 10 27 64] Seq.length (Model0.model ( ^ str)) >= UInt64.to_int len /\ Seq.length (Model0.model ( ^ str)) >= Seq.length (Model1.model str) }
    ensures { [#"../hillel.rs" 28 10 28 64] Seq.length (Model0.model ( ^ str)) = UInt64.to_int len \/ Seq.length (Model0.model ( ^ str)) = Seq.length (Model1.model str) }
    ensures { [#"../hillel.rs" 29 0 29 93] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model ( ^ str)) - Seq.length (Model1.model str) -> Seq.get (Model0.model ( ^ str)) i = pad }
    ensures { [#"../hillel.rs" 30 0 30 114] forall i : (int) . 0 <= i /\ i < Seq.length (Model1.model str) -> Seq.get (Model0.model ( ^ str)) (i + (Seq.length (Model0.model ( ^ str)) - Seq.length (Model1.model str))) = Seq.get (Model1.model str) i }
    
end
module Hillel_LeftPad
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  use CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone Alloc_Vec_Impl1_Insert_Interface as Insert0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = t, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type,
  function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
  let rec cfg left_pad [@cfg:stackify] [#"../hillel.rs" 31 0 31 58] (str : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))) (len : usize) (pad : t) : ()
    ensures { [#"../hillel.rs" 27 10 27 64] Seq.length (Model0.model ( ^ str)) >= UInt64.to_int len /\ Seq.length (Model0.model ( ^ str)) >= Seq.length (Model1.model str) }
    ensures { [#"../hillel.rs" 28 10 28 64] Seq.length (Model0.model ( ^ str)) = UInt64.to_int len \/ Seq.length (Model0.model ( ^ str)) = Seq.length (Model1.model str) }
    ensures { [#"../hillel.rs" 29 0 29 93] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model ( ^ str)) - Seq.length (Model1.model str) -> Seq.get (Model0.model ( ^ str)) i = pad }
    ensures { [#"../hillel.rs" 30 0 30 114] forall i : (int) . 0 <= i /\ i < Seq.length (Model1.model str) -> Seq.get (Model0.model ( ^ str)) (i + (Seq.length (Model0.model ( ^ str)) - Seq.length (Model1.model str))) = Seq.get (Model1.model str) i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var str_1 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var len_2 : usize;
  var pad_3 : t;
  ghost var old_str_4 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _5 : ();
  ghost var c_6 : usize;
  var _7 : ();
  var _8 : ();
  var _9 : bool;
  var _10 : usize;
  var _11 : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _12 : usize;
  var _13 : ();
  var _14 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _15 : t;
  ghost var _16 : usize;
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var _20 : ();
  {
    str_1 <- str;
    len_2 <- len;
    pad_3 <- pad;
    goto BB0
  }
  BB0 {
    _5 <- ();
    old_str_4 <- ghost ([#"../hillel.rs" 32 18 32 32] str_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_str_4 };
    _7 <- ();
    c_6 <- ghost ([#"../hillel.rs" 33 30 33 42] (0 : usize));
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant proph_const { [#"../hillel.rs" 35 29 35 46]  ^ str_1 =  ^ old_str_4 };
    invariant old_str_bound { [#"../hillel.rs" 36 31 36 63] Seq.length (Model1.model old_str_4) <= Seq.length (Model1.model str_1) };
    invariant len_bound { [#"../hillel.rs" 35 4 35 48] Seq.length (Model1.model old_str_4) < UInt64.to_int len_2 -> Seq.length (Model1.model str_1) <= UInt64.to_int len_2 };
    invariant len_bound { [#"../hillel.rs" 35 4 35 48] Seq.length (Model1.model str_1) > UInt64.to_int len_2 -> Seq.length (Model1.model str_1) = Seq.length (Model1.model old_str_4) };
    invariant count { [#"../hillel.rs" 39 23 39 60] UInt64.to_int c_6 = Seq.length (Model1.model str_1) - Seq.length (Model1.model old_str_4) };
    invariant old_elem { [#"../hillel.rs" 35 4 35 48] forall i : (int) . UInt64.to_int c_6 <= i /\ i < Seq.length (Model1.model str_1) -> Seq.get (Model1.model str_1) i = Seq.get (Model1.model old_str_4) (i - UInt64.to_int c_6) };
    invariant pad_elem { [#"../hillel.rs" 35 4 35 48] forall i : (int) . 0 <= i /\ i < UInt64.to_int c_6 -> Seq.get (Model1.model str_1) i = pad_3 };
    _11 <-  * str_1;
    _10 <- ([#"../hillel.rs" 42 10 42 19] Len0.len _11);
    goto BB4
  }
  BB4 {
    _12 <- len_2;
    _9 <- ([#"../hillel.rs" 42 10 42 25] _10 < _12);
    switch (_9)
      | False -> goto BB8
      | _ -> goto BB5
      end
  }
  BB5 {
    _14 <- borrow_mut ( * str_1);
    str_1 <- { str_1 with current = ( ^ _14) };
    assume { Resolve1.resolve _15 };
    _15 <- pad_3;
    _13 <- ([#"../hillel.rs" 43 8 43 26] Insert0.insert _14 (0 : usize) _15);
    goto BB6
  }
  BB6 {
    _17 <- ();
    _16 <- ghost ([#"../hillel.rs" 44 12 44 38] (1 : usize) + c_6);
    goto BB7
  }
  BB7 {
    c_6 <- _16;
    _16 <- any usize;
    _8 <- ();
    goto BB3
  }
  BB8 {
    assume { Resolve2.resolve str_1 };
    assume { Resolve1.resolve pad_3 };
    _0 <- ();
    return _0
  }
  
end
module Hillel_IsUnique_Interface
  type t
  use seq.Seq
  predicate is_unique (s : Seq.seq t)
end
module Hillel_IsUnique
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate is_unique [#"../hillel.rs" 49 0 49 46] (s : Seq.seq t) =
    [#"../hillel.rs" 50 4 52 5] forall j : (int) . forall i : (int) . 0 <= i /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s -> Model0.model (Seq.get s i) = Model0.model (Seq.get s j) -> i = j
end
module Hillel_Contains_Interface
  type t
  use seq.Seq
  predicate contains (seq : Seq.seq t) (elem : t)
end
module Hillel_Contains
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate contains [#"../hillel.rs" 56 0 56 51] (seq : Seq.seq t) (elem : t) =
    [#"../hillel.rs" 57 4 59 5] exists i : (int) . 0 <= i /\ i < Seq.length seq /\ Model0.model (Seq.get seq i) = Model0.model elem
end
module Hillel_IsSubset_Interface
  type t
  use seq.Seq
  predicate is_subset (sub : Seq.seq t) (sup : Seq.seq t)
end
module Hillel_IsSubset
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone Hillel_Contains_Interface as Contains0 with type t = t
  predicate is_subset [#"../hillel.rs" 63 0 63 56] (sub : Seq.seq t) (sup : Seq.seq t) =
    [#"../hillel.rs" 64 4 66 5] forall i : (int) . 0 <= i /\ i < Seq.length sub -> Contains0.contains sup (Seq.get sub i)
end
module Hillel_SubsetPush_Interface
  type t
  use seq.Seq
  clone Hillel_IsSubset_Interface as IsSubset0 with type t = t
  function subset_push (s : Seq.seq t) (elem : t) : ()
end
module Hillel_SubsetPush
  type t
  use seq.Seq
  clone Hillel_IsSubset_Interface as IsSubset0 with type t = t
  function subset_push [#"../hillel.rs" 71 0 71 49] (s : Seq.seq t) (elem : t) : () =
    [#"../hillel.rs" 69 0 69 8] ()
  axiom subset_push_spec : forall s : Seq.seq t, elem : t . [#"../hillel.rs" 70 10 70 36] IsSubset0.is_subset s (Seq.snoc s elem)
end
module Hillel_SubsetPush_Impl
  type t
  use seq.Seq
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hillel_Contains as Contains0 with type t = t, function Model0.model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hillel_IsSubset as IsSubset0 with type t = t, predicate Contains0.contains = Contains0.contains
  let rec ghost function subset_push (s : Seq.seq t) (elem : t) : ()
    ensures { [#"../hillel.rs" 70 10 70 36] IsSubset0.is_subset s (Seq.snoc s elem) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hillel.rs" 69 0 69 8] ()
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Core_Cmp_PartialEq_Eq
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module Hillel_InsertUnique_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  use Alloc_Vec_Vec_Type
  clone Hillel_Contains_Interface as Contains0 with type t = t
  clone Hillel_IsSubset_Interface as IsSubset0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Hillel_IsUnique_Interface as IsUnique0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val insert_unique [@cfg:stackify] (vec : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))) (elem : t) : ()
    requires {[#"../hillel.rs" 73 11 73 26] IsUnique0.is_unique (Model0.model vec)}
    ensures { [#"../hillel.rs" 74 10 74 26] IsUnique0.is_unique (Model1.model ( ^ vec)) }
    ensures { [#"../hillel.rs" 75 10 75 32] IsSubset0.is_subset (Model0.model vec) (Model1.model ( ^ vec)) }
    ensures { [#"../hillel.rs" 76 10 76 45] IsSubset0.is_subset (Model1.model ( ^ vec)) (Seq.snoc (Model0.model vec) elem) }
    ensures { [#"../hillel.rs" 77 10 77 31] Contains0.contains (Model1.model ( ^ vec)) elem }
    
end
module Hillel_InsertUnique
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = t
  use Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy1.modelTy
  clone Hillel_Contains as Contains0 with type t = t, function Model0.model = Model2.model,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone Hillel_IsSubset as IsSubset0 with type t = t, predicate Contains0.contains = Contains0.contains
  clone Hillel_SubsetPush as SubsetPush0 with type t = t, predicate IsSubset0.is_subset = IsSubset0.is_subset, axiom .
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone Hillel_IsUnique as IsUnique0 with type t = t, function Model0.model = Model2.model,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use prelude.UIntSize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = t, type ModelTy0.modelTy = ModelTy1.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy2 with type t = t
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = t
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with type self = t, type rhs = t, function Model0.model = Model3.model,
  function Model1.model = Model3.model, type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = t, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = t, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type,
  function Model0.model = Model1.model
  let rec cfg insert_unique [@cfg:stackify] [#"../hillel.rs" 78 0 78 58] (vec : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))) (elem : t) : ()
    requires {[#"../hillel.rs" 73 11 73 26] IsUnique0.is_unique (Model0.model vec)}
    ensures { [#"../hillel.rs" 74 10 74 26] IsUnique0.is_unique (Model1.model ( ^ vec)) }
    ensures { [#"../hillel.rs" 75 10 75 32] IsSubset0.is_subset (Model0.model vec) (Model1.model ( ^ vec)) }
    ensures { [#"../hillel.rs" 76 10 76 45] IsSubset0.is_subset (Model1.model ( ^ vec)) (Seq.snoc (Model0.model vec) elem) }
    ensures { [#"../hillel.rs" 77 10 77 31] Contains0.contains (Model1.model ( ^ vec)) elem }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var vec_1 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var elem_2 : t;
  ghost var _3 : ();
  var _4 : ();
  var _5 : ();
  var i_6 : usize;
  var _7 : ();
  var _8 : ();
  var _9 : bool;
  var _10 : usize;
  var _11 : usize;
  var _12 : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _13 : ();
  var _14 : bool;
  var _15 : t;
  var _16 : t;
  var _17 : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _18 : usize;
  var _19 : t;
  var _20 : ();
  var _21 : ();
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : ();
  var _26 : ();
  var _27 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _28 : t;
  {
    vec_1 <- vec;
    elem_2 <- elem;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _4 <- ();
    _3 <- ghost ([#"../hillel.rs" 79 4 79 52] SubsetPush0.subset_push (Model0.model vec_1) elem_2);
    goto BB3
  }
  BB3 {
    assert { [#"../hillel.rs" 80 20 80 54] IsSubset0.is_subset (Model0.model vec_1) (Seq.snoc (Model0.model vec_1) elem_2) };
    goto BB4
  }
  BB4 {
    _5 <- ();
    i_6 <- (0 : usize);
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant not_elem { [#"../hillel.rs" 84 4 84 85] forall j : (int) . 0 <= j /\ j < UInt64.to_int i_6 -> Model2.model (Seq.get (Model0.model vec_1) j) <> Model2.model elem_2 };
    _10 <- i_6;
    _12 <-  * vec_1;
    _11 <- ([#"../hillel.rs" 85 14 85 23] Len0.len _12);
    goto BB7
  }
  BB7 {
    _9 <- ([#"../hillel.rs" 85 10 85 23] _10 < _11);
    switch (_9)
      | False -> goto BB14
      | _ -> goto BB8
      end
  }
  BB8 {
    _17 <-  * vec_1;
    _18 <- i_6;
    _16 <- ([#"../hillel.rs" 86 11 86 17] Index0.index _17 _18);
    goto BB9
  }
  BB9 {
    _15 <- _16;
    assume { Resolve0.resolve _16 };
    _19 <- elem_2;
    _14 <- ([#"../hillel.rs" 86 11 86 25] Eq0.eq _15 _19);
    goto BB10
  }
  BB10 {
    switch (_14)
      | False -> goto BB13
      | _ -> goto BB11
      end
  }
  BB11 {
    assume { Resolve1.resolve vec_1 };
    assert { [#"../hillel.rs" 87 28 87 48] Contains0.contains (Model0.model vec_1) elem_2 };
    goto BB12
  }
  BB12 {
    _21 <- ();
    _0 <- ();
    goto BB22
  }
  BB13 {
    _13 <- ();
    i_6 <- ([#"../hillel.rs" 90 8 90 14] i_6 + (1 : usize));
    _8 <- ();
    goto BB6
  }
  BB14 {
    _7 <- ();
    assert { [#"../hillel.rs" 93 20 93 48] IsUnique0.is_unique (Seq.snoc (Model0.model vec_1) elem_2) };
    goto BB15
  }
  BB15 {
    _25 <- ();
    _27 <- borrow_mut ( * vec_1);
    vec_1 <- { vec_1 with current = ( ^ _27) };
    assume { Resolve2.resolve _28 };
    _28 <- elem_2;
    elem_2 <- any t;
    _26 <- ([#"../hillel.rs" 94 4 94 18] Push0.push _27 _28);
    goto BB16
  }
  BB16 {
    assume { Resolve1.resolve vec_1 };
    _0 <- ();
    goto BB17
  }
  BB17 {
    return _0
  }
  BB22 {
    assume { Resolve2.resolve elem_2 };
    goto BB17
  }
  
end
module CreusotContracts_Logic_Seq_Impl2_New_Interface
  type t
  use seq.Seq
  function new (_ : ()) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl2_New
  type t
  use seq.Seq
  function new (_ : ()) : Seq.seq t =
    Seq.empty 
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Slice.id self && Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val new [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val new [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Core_Slice_Impl0_Len_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (Model0.model self) = UInt64.to_int result }
    
end
module Core_Slice_Impl0_Len
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (Model0.model self) = UInt64.to_int result }
    
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) =
    forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_Impl3
  type t
end
module CreusotContracts_Logic_Seq_Seq_Type
  use Core_Marker_PhantomData_Type
  type creusotcontracts_logic_seq_seq_type 't =
    | CreusotContracts_Logic_Seq_Seq_Type (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Hillel_Unique_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone Hillel_IsSubset_Interface as IsSubset0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hillel_IsUnique_Interface as IsUnique0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val unique [@cfg:stackify] (str : seq t) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { [#"../hillel.rs" 97 10 97 28] IsUnique0.is_unique (Model0.model result) }
    ensures { [#"../hillel.rs" 98 10 98 34] IsSubset0.is_subset (Model0.model result) (Model1.model str) }
    ensures { [#"../hillel.rs" 99 10 99 34] IsSubset0.is_subset (Model1.model str) (Model0.model result) }
    
end
module Hillel_Unique
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq_ext.SeqExt
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hillel_Contains as Contains0 with type t = t, function Model0.model = Model2.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model3 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = t
  clone CreusotContracts_Logic_Seq_Impl2_New as New0 with type t = t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone Hillel_IsSubset as IsSubset0 with type t = t, predicate Contains0.contains = Contains0.contains
  clone CreusotContracts_Logic_Model_Impl0_Model as Model1 with type t = seq t,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  clone Hillel_IsUnique as IsUnique0 with type t = t, function Model0.model = Model2.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy2 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone CreusotContracts_Logic_Model_Impl1_Model as Model4 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model0.model
  use CreusotContracts_Logic_Seq_Seq_Type
  use CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve4 with type t = t, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve1.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = seq t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone Hillel_InsertUnique_Interface as InsertUnique0 with type t = t, function Model0.model = Model4.model,
  predicate IsUnique0.is_unique = IsUnique0.is_unique, function Model1.model = Model0.model,
  predicate IsSubset0.is_subset = IsSubset0.is_subset, predicate Contains0.contains = Contains0.contains
  clone Core_Slice_Impl0_Len_Interface as Len0 with type t = t, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Seq.seq t
  clone Alloc_Vec_Impl0_New_Interface as New1 with type t = t, function Model0.model = Model0.model
  let rec cfg unique [@cfg:stackify] [#"../hillel.rs" 100 0 100 52] (str : seq t) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { [#"../hillel.rs" 97 10 97 28] IsUnique0.is_unique (Model0.model result) }
    ensures { [#"../hillel.rs" 98 10 98 34] IsSubset0.is_subset (Model0.model result) (Model1.model str) }
    ensures { [#"../hillel.rs" 99 10 99 34] IsSubset0.is_subset (Model1.model str) (Model0.model result) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var str_1 : seq t;
  var unique_2 : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  ghost var sub_str_3 : Seq.seq t;
  var _4 : ();
  var i_5 : usize;
  var _6 : ();
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : seq t;
  var elem_12 : t;
  var _13 : usize;
  var _14 : usize;
  var _15 : bool;
  var _16 : ();
  var _17 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _18 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _19 : t;
  ghost var _20 : Seq.seq t;
  var _21 : ();
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    str_1 <- str;
    goto BB0
  }
  BB0 {
    unique_2 <- ([#"../hillel.rs" 101 21 101 31] New1.new ());
    goto BB1
  }
  BB1 {
    _4 <- ();
    sub_str_3 <- ghost ([#"../hillel.rs" 102 37 102 58] New0.new ());
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve sub_str_3 };
    i_5 <- (0 : usize);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant i_bound { [#"../hillel.rs" 105 25 105 43] UInt64.to_int i_5 <= Seq.length (Model1.model str_1) };
    invariant sub_str { [#"../hillel.rs" 106 25 106 66] Seq.(==) sub_str_3 (SeqExt.subsequence (Model1.model str_1) 0 (UInt64.to_int i_5)) };
    invariant unique { [#"../hillel.rs" 107 24 107 42] IsUnique0.is_unique (Model0.model unique_2) };
    invariant unique_subset { [#"../hillel.rs" 108 31 108 55] IsSubset0.is_subset (Model0.model unique_2) (Model1.model str_1) };
    invariant unique_subset { [#"../hillel.rs" 109 31 109 59] IsSubset0.is_subset sub_str_3 (Model0.model unique_2) };
    _9 <- i_5;
    _11 <- str_1;
    _10 <- ([#"../hillel.rs" 110 14 110 23] Len0.len _11);
    goto BB7
  }
  BB7 {
    _8 <- ([#"../hillel.rs" 110 10 110 23] _9 < _10);
    switch (_8)
      | False -> goto BB12
      | _ -> goto BB8
      end
  }
  BB8 {
    _13 <- i_5;
    _14 <- UIntSize.of_int (Seq.length str_1);
    _15 <- ([#"../hillel.rs" 111 22 111 28] _13 < _14);
    assert { _15 };
    goto BB9
  }
  BB9 {
    assume { Resolve1.resolve elem_12 };
    elem_12 <- Seq.get str_1 (UIntSize.to_int _13);
    _18 <- borrow_mut unique_2;
    unique_2 <-  ^ _18;
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    assume { Resolve1.resolve _19 };
    _19 <- elem_12;
    assume { Resolve1.resolve elem_12 };
    _16 <- ([#"../hillel.rs" 112 8 112 40] InsertUnique0.insert_unique _17 _19);
    goto BB10
  }
  BB10 {
    assume { Resolve2.resolve _18 };
    _21 <- ();
    _20 <- ghost ([#"../hillel.rs" 113 18 113 47] Seq.snoc sub_str_3 elem_12);
    goto BB11
  }
  BB11 {
    assume { Resolve0.resolve sub_str_3 };
    sub_str_3 <- _20;
    _20 <- any Seq.seq t;
    i_5 <- ([#"../hillel.rs" 114 8 114 14] i_5 + (1 : usize));
    _7 <- ();
    goto BB6
  }
  BB12 {
    assume { Resolve3.resolve str_1 };
    _6 <- ();
    assert { [#"../hillel.rs" 117 20 117 75] IsSubset0.is_subset (SeqExt.subsequence (Model1.model str_1) 0 (Seq.length (Model1.model str_1))) (Model0.model unique_2) };
    goto BB13
  }
  BB13 {
    _25 <- ();
    assert { [#"../hillel.rs" 118 20 118 68] Seq.(==) (SeqExt.subsequence (Model1.model str_1) 0 (Seq.length (Model1.model str_1))) (Model1.model str_1) };
    _26 <- ();
    assume { Resolve4.resolve _0 };
    _0 <- unique_2;
    unique_2 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module Hillel_SumRange_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt32
  function sum_range (seq : Seq.seq uint32) (from : int) (to' : int) : int
end
module Hillel_SumRange
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt32
  function sum_range [#"../hillel.rs" 126 0 126 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  axiom def : forall seq : Seq.seq uint32, from : int, to' : int . sum_range seq from to' = ([#"../hillel.rs" 122 0 122 8] if to' - from > 0 then
    UInt32.to_int (Seq.get seq from) + sum_range seq (from + 1) to'
  else
    0
  )
  axiom sum_range_spec : forall seq : Seq.seq uint32, from : int, to' : int . ([#"../hillel.rs" 124 11 124 53] 0 <= from /\ from <= to' /\ to' <= Seq.length seq) -> ([#"../hillel.rs" 125 10 125 21] sum_range seq from to' >= 0)
end
module Hillel_SumRange_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt32
  let rec ghost function sum_range (seq : Seq.seq uint32) (from : int) (to' : int) : int
    requires {[#"../hillel.rs" 124 11 124 53] 0 <= from /\ from <= to' /\ to' <= Seq.length seq}
    ensures { [#"../hillel.rs" 125 10 125 21] result >= 0 }
    variant {[#"../hillel.rs" 123 10 123 19] to' - from}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hillel.rs" 122 0 122 8] if to' - from > 0 then
      UInt32.to_int (Seq.get seq from) + sum_range seq (from + 1) to'
    else
      0
    
end
module Hillel_SumRangeSplit_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt32
  clone Hillel_SumRange_Interface as SumRange0 with axiom .
  function sum_range_split (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
end
module Hillel_SumRangeSplit
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt32
  clone Hillel_SumRange_Interface as SumRange0 with axiom .
  function sum_range_split [#"../hillel.rs" 138 0 138 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
  axiom def : forall seq : Seq.seq uint32, from : int, to' : int, i : int . sum_range_split seq from to' i = ([#"../hillel.rs" 139 4 141 5] if i > from then
    let _ = sum_range_split seq (from + 1) to' i in ()
  else
    ()
  )
  axiom sum_range_split_spec : forall seq : Seq.seq uint32, from : int, to' : int, i : int . ([#"../hillel.rs" 136 11 136 63] 0 <= from /\ from <= i /\ i <= to' /\ to' <= Seq.length seq) -> ([#"../hillel.rs" 137 10 137 85] SumRange0.sum_range seq from to' = SumRange0.sum_range seq from i + SumRange0.sum_range seq i to')
end
module Hillel_SumRangeSplit_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt32
  clone Hillel_SumRange as SumRange0 with axiom .
  let rec ghost function sum_range_split (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
    requires {[#"../hillel.rs" 136 11 136 63] 0 <= from /\ from <= i /\ i <= to' /\ to' <= Seq.length seq}
    ensures { [#"../hillel.rs" 137 10 137 85] SumRange0.sum_range seq from to' = SumRange0.sum_range seq from i + SumRange0.sum_range seq i to' }
    variant {[#"../hillel.rs" 135 10 135 18] i - from}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hillel.rs" 139 4 141 5] if i > from then let _ = sum_range_split seq (from + 1) to' i in () else ()
end
module CreusotContracts_Logic_Int_Impl1_AbsDiff_Interface
  use mach.int.Int
  function abs_diff (self : int) (other : int) : int
end
module CreusotContracts_Logic_Int_Impl1_AbsDiff
  use mach.int.Int
  function abs_diff (self : int) (other : int) : int =
    if self < other then other - self else self - other
end
module Hillel_Score_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt32
  clone Hillel_SumRange_Interface as SumRange0 with axiom .
  function score (seq : Seq.seq uint32) (i : int) : int
end
module Hillel_Score
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt32
  clone Hillel_SumRange_Interface as SumRange0 with axiom .
  clone CreusotContracts_Logic_Int_Impl1_AbsDiff_Interface as AbsDiff0
  clone Hillel_SumRangeSplit_Interface as SumRangeSplit0 with function SumRange0.sum_range = SumRange0.sum_range,
  axiom .
  function score [#"../hillel.rs" 148 0 148 38] (seq : Seq.seq uint32) (i : int) : int =
    [#"../hillel.rs" 149 4 149 41] let _ = SumRangeSplit0.sum_range_split seq 0 (Seq.length seq) i in AbsDiff0.abs_diff (SumRange0.sum_range seq 0 i) (SumRange0.sum_range seq i (Seq.length seq))
  axiom score_spec : forall seq : Seq.seq uint32, i : int . ([#"../hillel.rs" 145 11 145 35] 0 <= i /\ i <= Seq.length seq) -> ([#"../hillel.rs" 147 0 147 79] 0 = i \/ i = Seq.length seq -> score seq i = SumRange0.sum_range seq 0 (Seq.length seq)) && ([#"../hillel.rs" 146 10 146 64] 0 <= score seq i /\ score seq i <= SumRange0.sum_range seq 0 (Seq.length seq))
end
module Hillel_Score_Impl
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt32
  clone CreusotContracts_Logic_Int_Impl1_AbsDiff as AbsDiff0
  clone Hillel_SumRange as SumRange0 with axiom .
  clone Hillel_SumRangeSplit as SumRangeSplit0 with function SumRange0.sum_range = SumRange0.sum_range, axiom .
  let rec ghost function score (seq : Seq.seq uint32) (i : int) : int
    requires {[#"../hillel.rs" 145 11 145 35] 0 <= i /\ i <= Seq.length seq}
    ensures { [#"../hillel.rs" 146 10 146 64] 0 <= result /\ result <= SumRange0.sum_range seq 0 (Seq.length seq) }
    ensures { [#"../hillel.rs" 147 0 147 79] 0 = i \/ i = Seq.length seq -> result = SumRange0.sum_range seq 0 (Seq.length seq) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hillel.rs" 149 4 149 41] let _ = SumRangeSplit0.sum_range_split seq 0 (Seq.length seq) i in let a' = SumRange0.sum_range seq 0 i in let b' = SumRange0.sum_range seq i (Seq.length seq) in AbsDiff0.abs_diff a' b'
end
module Core_Num_Impl8_AbsDiff_Interface
  use mach.int.UInt32
  use mach.int.Int
  clone CreusotContracts_Logic_Int_Impl1_AbsDiff_Interface as AbsDiff0
  val abs_diff [@cfg:stackify] (self : uint32) (other : uint32) : uint32
    ensures { UInt32.to_int result = AbsDiff0.abs_diff (UInt32.to_int self) (UInt32.to_int other) }
    
end
module Core_Num_Impl8_AbsDiff
  use mach.int.UInt32
  use mach.int.Int
  clone CreusotContracts_Logic_Int_Impl1_AbsDiff_Interface as AbsDiff0
  val abs_diff [@cfg:stackify] (self : uint32) (other : uint32) : uint32
    ensures { UInt32.to_int result = AbsDiff0.abs_diff (UInt32.to_int self) (UInt32.to_int other) }
    
end
module Hillel_Fulcrum_Interface
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.UInt32
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = uint32
  clone Hillel_SumRange_Interface as SumRange0 with axiom .
  clone Hillel_Score_Interface as Score0 with function SumRange0.sum_range = SumRange0.sum_range, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = seq uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val fulcrum [@cfg:stackify] (s : seq uint32) : usize
    requires {[#"../hillel.rs" 156 11 156 47] SumRange0.sum_range (Model0.model s) 0 (Seq.length (Model0.model s)) <= 1000}
    requires {[#"../hillel.rs" 157 11 157 25] Seq.length (Model0.model s) > 0}
    ensures { [#"../hillel.rs" 158 10 158 46] 0 <= UInt64.to_int result /\ UInt64.to_int result < Seq.length (Model0.model s) }
    ensures { [#"../hillel.rs" 159 0 159 90] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model s) -> Score0.score (Model0.model s) (UInt64.to_int result) <= Score0.score (Model0.model s) i }
    
end
module Hillel_Fulcrum
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.UInt32
  use prelude.UIntSize
  clone CreusotContracts_Logic_Int_Impl1_AbsDiff as AbsDiff0
  clone Hillel_SumRange as SumRange0 with axiom .
  clone Hillel_SumRangeSplit as SumRangeSplit0 with function SumRange0.sum_range = SumRange0.sum_range, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model1 with type t = uint32, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = uint32
  clone Hillel_Score as Score0 with function SumRange0.sum_range = SumRange0.sum_range,
  function SumRangeSplit0.sum_range_split = SumRangeSplit0.sum_range_split,
  function AbsDiff0.abs_diff = AbsDiff0.abs_diff, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = seq uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone Core_Num_Impl8_AbsDiff_Interface as AbsDiff1 with function AbsDiff0.abs_diff = AbsDiff0.abs_diff
  clone Core_Slice_Impl0_Len_Interface as Len0 with type t = uint32, function Model0.model = Model0.model
  let rec cfg fulcrum [@cfg:stackify] [#"../hillel.rs" 160 0 160 30] (s : seq uint32) : usize
    requires {[#"../hillel.rs" 156 11 156 47] SumRange0.sum_range (Model0.model s) 0 (Seq.length (Model0.model s)) <= 1000}
    requires {[#"../hillel.rs" 157 11 157 25] Seq.length (Model0.model s) > 0}
    ensures { [#"../hillel.rs" 158 10 158 46] 0 <= UInt64.to_int result /\ UInt64.to_int result < Seq.length (Model0.model s) }
    ensures { [#"../hillel.rs" 159 0 159 90] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model s) -> Score0.score (Model0.model s) (UInt64.to_int result) <= Score0.score (Model0.model s) i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var s_1 : seq uint32;
  var total_2 : uint32;
  var i_3 : usize;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : seq uint32;
  var _10 : uint32;
  var _11 : usize;
  var _12 : usize;
  var _13 : bool;
  var _14 : ();
  var _15 : ();
  var _16 : ();
  var _17 : ();
  var min_i_18 : usize;
  var min_dist_19 : uint32;
  var sum_20 : uint32;
  var i_21 : usize;
  var _22 : ();
  var _23 : bool;
  var _24 : usize;
  var _25 : usize;
  var _26 : seq uint32;
  var dist_27 : uint32;
  var _28 : uint32;
  var _29 : uint32;
  var _30 : uint32;
  var _31 : uint32;
  var _32 : ();
  var _33 : bool;
  var _34 : uint32;
  var _35 : uint32;
  var _36 : usize;
  var _37 : uint32;
  var _38 : uint32;
  var _39 : usize;
  var _40 : usize;
  var _41 : bool;
  var _42 : ();
  var _43 : ();
  var _44 : ();
  {
    s_1 <- s;
    goto BB0
  }
  BB0 {
    total_2 <- (0 : uint32);
    i_3 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant i_bound { [#"../hillel.rs" 163 25 163 41] UInt64.to_int i_3 <= Seq.length (Model0.model s_1) };
    invariant total { [#"../hillel.rs" 164 23 164 53] UInt32.to_int total_2 = SumRange0.sum_range (Model0.model s_1) 0 (UInt64.to_int i_3) };
    invariant total_bound { [#"../hillel.rs" 165 29 165 67] UInt32.to_int total_2 <= SumRange0.sum_range (Model0.model s_1) 0 (Seq.length (Model0.model s_1)) };
    _7 <- i_3;
    _9 <- s_1;
    _8 <- ([#"../hillel.rs" 166 14 166 21] Len0.len _9);
    goto BB2
  }
  BB2 {
    _6 <- ([#"../hillel.rs" 166 10 166 21] _7 < _8);
    switch (_6)
      | False -> goto BB5
      | _ -> goto BB3
      end
  }
  BB3 {
    _11 <- i_3;
    _12 <- UIntSize.of_int (Seq.length s_1);
    _13 <- ([#"../hillel.rs" 167 17 167 21] _11 < _12);
    assert { _13 };
    goto BB4
  }
  BB4 {
    _10 <- Seq.get s_1 (UIntSize.to_int _11);
    total_2 <- ([#"../hillel.rs" 167 8 167 21] total_2 + _10);
    i_3 <- ([#"../hillel.rs" 168 8 168 14] i_3 + (1 : usize));
    _5 <- ();
    goto BB1
  }
  BB5 {
    _4 <- ();
    assert { [#"../hillel.rs" 171 20 171 58] UInt32.to_int total_2 = SumRange0.sum_range (Model0.model s_1) 0 (Seq.length (Model0.model s_1)) };
    _17 <- ();
    min_i_18 <- (0 : usize);
    min_dist_19 <- total_2;
    sum_20 <- (0 : uint32);
    i_21 <- (0 : usize);
    goto BB6
  }
  BB6 {
    invariant i_bound { [#"../hillel.rs" 178 25 178 41] UInt64.to_int i_21 <= Seq.length (Model0.model s_1) };
    invariant sum { [#"../hillel.rs" 179 21 179 49] UInt32.to_int sum_20 = SumRange0.sum_range (Model0.model s_1) 0 (UInt64.to_int i_21) };
    invariant sum_bound { [#"../hillel.rs" 180 27 180 41] UInt32.to_int sum_20 <= UInt32.to_int total_2 };
    invariant min_i_bound { [#"../hillel.rs" 181 29 181 64] UInt64.to_int min_i_18 <= UInt64.to_int i_21 /\ UInt64.to_int min_i_18 < Seq.length (Model0.model s_1) };
    invariant min_dist { [#"../hillel.rs" 182 26 182 56] UInt32.to_int min_dist_19 = Score0.score (Model0.model s_1) (UInt64.to_int min_i_18) };
    invariant min_i_min { [#"../hillel.rs" 178 4 178 43] forall j : (int) . 0 <= j /\ j < UInt64.to_int i_21 -> Score0.score (Model0.model s_1) (UInt64.to_int min_i_18) <= Score0.score (Model0.model s_1) j };
    _24 <- i_21;
    _26 <- s_1;
    _25 <- ([#"../hillel.rs" 184 14 184 21] Len0.len _26);
    goto BB7
  }
  BB7 {
    _23 <- ([#"../hillel.rs" 184 10 184 21] _24 < _25);
    switch (_23)
      | False -> goto BB14
      | _ -> goto BB8
      end
  }
  BB8 {
    _28 <- sum_20;
    _30 <- total_2;
    _31 <- sum_20;
    _29 <- ([#"../hillel.rs" 185 32 185 43] _30 - _31);
    dist_27 <- ([#"../hillel.rs" 185 19 185 44] AbsDiff1.abs_diff _28 _29);
    goto BB9
  }
  BB9 {
    _34 <- dist_27;
    _35 <- min_dist_19;
    _33 <- ([#"../hillel.rs" 186 11 186 26] _34 < _35);
    switch (_33)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    _36 <- i_21;
    min_i_18 <- _36;
    _36 <- any usize;
    _37 <- dist_27;
    min_dist_19 <- _37;
    _37 <- any uint32;
    _32 <- ();
    goto BB12
  }
  BB11 {
    _32 <- ();
    goto BB12
  }
  BB12 {
    _39 <- i_21;
    _40 <- UIntSize.of_int (Seq.length s_1);
    _41 <- ([#"../hillel.rs" 191 15 191 19] _39 < _40);
    assert { _41 };
    goto BB13
  }
  BB13 {
    _38 <- Seq.get s_1 (UIntSize.to_int _39);
    sum_20 <- ([#"../hillel.rs" 191 8 191 19] sum_20 + _38);
    i_21 <- ([#"../hillel.rs" 192 8 192 14] i_21 + (1 : usize));
    _5 <- ();
    goto BB6
  }
  BB14 {
    _22 <- ();
    _0 <- min_i_18;
    return _0
  }
  
end
