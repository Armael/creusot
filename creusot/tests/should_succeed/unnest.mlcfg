module Ambient
use Ref 
use mach.int.Int 
use mach.int.Int32
use mach.int.Int64
use mach.int.UInt32
use mach.int.UInt64
use string.Char
use floating_point.Single
use floating_point.Double
(** Generic Type for borrowed values *) 
type borrowed 'a = 
{ current : 'a ; 
final : 'a; (* The "future" value when borrow will end *) 
} 
let function ( *_ ) x = x.current 
let function ( ^_ ) x = x.final 
val borrow_mut (a : 'a) : borrowed 'a 
ensures { *result = a }
  type myInt  =
      | MyInt(usize)

  let cfg unnest (o_x_1 : borrowed (borrowed uint32)) : borrowed uint32
    ensures {  *  ^ o_x_1 =  ^  ^ o_x_1 }
    ensures {  * result =  *  * o_x_1 }
    ensures {  ^ result =  ^  * o_x_1 }
    =
  var _0 : borrowed uint32;
  var x_1 : borrowed (borrowed uint32);
  var _2 : borrowed uint32;
  {
    x_1 <- o_x_1;
    goto BB0;
  }
  BB0 {
    _2 <- borrow_mut  *  * x_1;
    x_1 <- { x_1 with current = { ( * x_1) with current = ( ^ _2) } };
    assume { ^ x_1 = * x_1 };
    _0 <- borrow_mut  * _2;
    _2 <- { _2 with current = ( ^ _0) };
    assume { ^ _2 = * _2 };
    _0
  }

  let cfg main () : ()
    =
  var _0 : ();
  {
    goto BB0;
  }
  BB0 {
    _0 <- ();
    _0
  }

end
