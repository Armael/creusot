module Ambient
  use Ref 
  use mach.int.Int 
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double

  type usize = int
  type isize = int

  (** Generic Type for borrowed values *) 
  type borrowed 'a = 
  { current : 'a ; 
  final : 'a; (* The "future" value when borrow will end *) 
  } 
  let function ( *_ ) x = x.current 
  let function ( ^_ ) x = x.final 
  val borrow_mut (a : 'a) : borrowed 'a 
  ensures { *result = a }

  predicate drop_fix (_ : 'a) = true
  predicate drop_uint (_ : 'a) = true
  predicate drop_int (_ : 'a) = true
  predicate drop_float (_ : 'a) = true
  predicate drop_bool (_ : 'a) = true
  predicate drop_mut_ref (b : borrowed 'a) = ^ b = * b
  predicate drop_ref (_ : 'a) = true

  type m 't =
      | F(uint32)
      | G('t)

  predicate drop_m (drop_'t : 't -> bool) (self : m 't) =
    match (self) with
      | F(a) -> drop_uint a
      | G(a) -> drop_'t a
      end

  let cfg test (o_o_1 : m uint32) : bool
    =
  var _0 : bool;
  var o_1 : m uint32;
  var _2 : isize;
  var field1_3 : uint32;
  var _4 : uint32;
  var field2_5 : uint32;
  var _6 : uint32;
  {
    o_1 <- o_o_1;
    goto BB0;
  }
  BB0 {
    switch (o_1)
      | F(_) -> goto BB1
      | G(_) -> goto BB2
      | _ -> goto BB3
      end
  }
  BB3 {
    assume { drop_m drop_uint o_1 };
    absurd
  }
  BB2 {
    field2_5 <- (let G(a) = o_1 in a);
    assume { drop_m drop_uint o_1 };
    _6 <- field2_5;
    assume { drop_uint field2_5 };
    _0 <- _6 = 0;
    goto BB5
  }
  BB5 {
    _0
  }
  BB1 {
    goto BB4
  }
  BB4 {
    field1_3 <- (let F(a) = o_1 in a);
    assume { drop_m drop_uint o_1 };
    _4 <- field1_3;
    assume { drop_uint field1_3 };
    _0 <- _4 > 0;
    goto BB5
  }

  let cfg main () : ()
    =
  var _0 : ();
  {
    goto BB0;
  }
  BB0 {
    _0 <- ();
    _0
  }

end
