module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type switch_option 't = 
    | Switch_Option_Some('t)
    | Switch_Option_None
    
  predicate drop_switch_option (drop_t : 't -> bool) (self : switch_option 't) = 
    match (self) with
      | Switch_Option_Some(a) -> drop_t a
      | Switch_Option_None -> true
      end
end
module Switch_Test
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec cfg impl (o_o_1 : Type.switch_option uint32) : bool = 
  var _0 : bool;
  var o_1 : Type.switch_option uint32;
  var _2 : isize;
  var x_3 : uint32;
  var _4 : uint32;
  {
    o_1 <- o_o_1;
    goto BB0
  }
  BB0 {
    switch (o_1)
      | Type.Switch_Option_Some(_) -> goto BB1
      | Type.Switch_Option_None -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { drop_int _2 };
    goto BB4
  }
  BB2 {
    assume { Type.drop_switch_option drop_uint o_1 };
    assume { drop_int _2 };
    _0 <- false;
    goto BB5
  }
  BB3 {
    assume { Type.drop_switch_option drop_uint o_1 };
    assume { drop_int _2 };
    absurd
  }
  BB4 {
    assume { drop_uint x_3 };
    x_3 <- (let Type.Switch_Option_Some(a) = o_1 in a);
    assume { Type.drop_switch_option drop_uint o_1 };
    assume { drop_uint _4 };
    _4 <- x_3;
    assume { drop_uint x_3 };
    _0 <- _4 > (0 : uint32);
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Switch_Test2
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec cfg impl (o_o_1 : (Type.switch_option uint32, uint32)) : uint32 = 
  var _0 : uint32;
  var o_1 : (Type.switch_option uint32, uint32);
  var _2 : isize;
  var x_3 : uint32;
  {
    o_1 <- o_o_1;
    goto BB0
  }
  BB0 {
    switch (let (a, _) = o_1 in a)
      | Type.Switch_Option_Some(_) -> goto BB1
      | Type.Switch_Option_None -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { drop_int _2 };
    goto BB4
  }
  BB2 {
    assume { drop_int _2 };
    assume { drop_uint _0 };
    _0 <- (let (_, a) = o_1 in a);
    assume { (fun tup -> let (a, b) = tup in Type.drop_switch_option drop_uint a && drop_uint b) o_1 };
    goto BB5
  }
  BB3 {
    assume { (fun tup -> let (a, b) = tup in Type.drop_switch_option drop_uint a && drop_uint b) o_1 };
    assume { drop_int _2 };
    absurd
  }
  BB4 {
    assume { drop_uint x_3 };
    x_3 <- (let Type.Switch_Option_Some(a) = let (a, _) = o_1 in a in a);
    assume { (fun tup -> let (a, b) = tup in Type.drop_switch_option drop_uint a && drop_uint b) o_1 };
    assume { drop_uint _0 };
    _0 <- x_3;
    assume { drop_uint x_3 };
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module Switch_Main
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec cfg impl () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
