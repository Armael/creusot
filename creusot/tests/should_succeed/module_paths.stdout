module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type a_t  = 
    | A_T(uint32)
    
  predicate drop_a_t (self : a_t) = 
    let A_T(a) = self in drop_uint a
  type b_c_t  = 
    | B_C_T(a_t)
    
  predicate drop_b_c_t (self : b_c_t) = 
    let B_C_T(a) = self in drop_a_t a
  type s  = 
    | S(a_t)
    
  predicate drop_s (self : s) = 
    let S(a) = self in drop_a_t a
  type b_o  = 
    | B_O(uint32)
    
  predicate drop_b_o (self : b_o) = 
    let B_O(a) = self in drop_uint a
end
module Test
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec cfg impl (o_a_1 : Type.a_t) (o_b_2 : Type.s) (o_c_3 : Type.b_o) (o_d_4 : Type.b_c_t) : () = 
  var _0 : ();
  var a_1 : Type.a_t;
  var b_2 : Type.s;
  var c_3 : Type.b_o;
  var d_4 : Type.b_c_t;
  {
    a_1 <- o_a_1;
    b_2 <- o_b_2;
    c_3 <- o_c_3;
    d_4 <- o_d_4;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Type.drop_a_t a_1 };
    assume { Type.drop_s b_2 };
    assume { Type.drop_b_o c_3 };
    assume { Type.drop_b_c_t d_4 };
    return _0
  }
  
end
module Main
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec cfg impl () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
