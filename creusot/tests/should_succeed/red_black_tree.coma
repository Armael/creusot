
module T_red_black_tree__Color
  type t_Color  =
    | C_Red
    | C_Black
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Red (input:t_Color) (ret  )= any
    [ good -> {C_Red  = input} (! ret) | bad -> {C_Red  <> input} {false} any ]
    
  
  let rec v_Black (input:t_Color) (ret  )= any
    [ good -> {C_Black  = input} (! ret) | bad -> {C_Black  <> input} {false} any ]
    
end
module M_red_black_tree__qyi5152850904912270561__clone
  let%span sred_black_tree0 = "../red_black_tree.rs" 12 9 12 14
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use T_red_black_tree__Color as Color'0
  
  let rec clone' (self:Color'0.t_Color) (return'  (ret:Color'0.t_Color))= (! bb0
    [ bb0 = any [ br0 -> {self = Color'0.C_Red } (! bb2) | br1 -> {self = Color'0.C_Black } (! bb3) ] 
    | bb3 = s0 [ s0 =  [ &_0 <- Color'0.C_Black ] s1 | s1 = bb5 ] 
    | bb2 = bb4
    | bb4 = s0 [ s0 =  [ &_0 <- Color'0.C_Red ] s1 | s1 = bb5 ] 
    | bb5 = return' {_0} ]
    ) [ & _0 : Color'0.t_Color = any_l () | & self : Color'0.t_Color = self ] 
    [ return' (result:Color'0.t_Color)-> {[@expl:postcondition] [%#sred_black_tree0] result = self}
      (! return' {result}) ]
    
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module T_red_black_tree__Node
  use T_core__option__Option as Option'0
  
  use T_red_black_tree__Color as Color'0
  
  type t_Node 'k 'v =
    | C_Node (t_Tree 'k 'v) (Color'0.t_Color) 'k 'v (t_Tree 'k 'v)
  with t_Tree 'k 'v =
    | C_Tree (Option'0.t_Option (t_Node 'k 'v))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Node < 'k > < 'v > (input:t_Node 'k 'v) (ret  (left:t_Tree 'k 'v) (color:Color'0.t_Color) (key:'k) (val':'v) (right:t_Tree 'k 'v))= any
    [ good (left:t_Tree 'k 'v) (color:Color'0.t_Color) (key:'k) (val':'v) (right:t_Tree 'k 'v)-> {C_Node left color key val' right
      = input}
      (! ret {left} {color} {key} {val'} {right})
    | bad (left:t_Tree 'k 'v) (color:Color'0.t_Color) (key:'k) (val':'v) (right:t_Tree 'k 'v)-> {C_Node left color key val' right
      <> input}
      {false}
      any ]
    
  
  let rec t_Tree < 'k > < 'v > (input:t_Tree 'k 'v) (ret  (node:Option'0.t_Option (t_Node 'k 'v)))= any
    [ good (node:Option'0.t_Option (t_Node 'k 'v))-> {C_Tree node = input} (! ret {node})
    | bad (node:Option'0.t_Option (t_Node 'k 'v))-> {C_Tree node <> input} {false} any ]
    
  
  function t_Node__left (self : t_Node 'k 'v) : t_Tree 'k 'v =
    match self with
      | C_Node a _ _ _ _ -> a
      end
  
  function t_Node__key (self : t_Node 'k 'v) : 'k =
    match self with
      | C_Node _ _ a _ _ -> a
      end
  
  function t_Node__right (self : t_Node 'k 'v) : t_Tree 'k 'v =
    match self with
      | C_Node _ _ _ _ a -> a
      end
  
  function t_Node__val (self : t_Node 'k 'v) : 'v =
    match self with
      | C_Node _ _ _ a _ -> a
      end
  
  function t_Node__color (self : t_Node 'k 'v) : Color'0.t_Color =
    match self with
      | C_Node _ a _ _ _ -> a
      end
  
  function t_Tree__node (self : t_Tree 'k 'v) : Option'0.t_Option (t_Node 'k 'v) =
    match self with
      | C_Tree a -> a
      end
end
module T_red_black_tree__Tree
  use export T_red_black_tree__Node
end
module M_red_black_tree__qyi9974039414958028887__model_acc_has_mapping__Impl
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 70 4 71 93
  
  let%span span1 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span2 = "../red_black_tree.rs" 58 12 65 13
  
  use map.Map
  
  type t_DeepModelTy'0
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  use T_red_black_tree__Node as Node'0
  
  use T_core__option__Option as Option'0
  
  use map.Map
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span1] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 53 4 56 47] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span2] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  constant self  : Tree'0.t_Tree k v
  
  constant accu  : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
  
  constant k  : t_DeepModelTy'0
  
  function model_acc_has_mapping [#"../red_black_tree.rs" 72 4 76 5] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
  
  goal vc_model_acc_has_mapping : match self with
    | Tree'0.C_Tree (Option'0.C_None) -> [%#sred_black_tree0] Map.get (model_acc'0 self accu) k = Map.get accu k
    \/ (exists v : v . Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v)
    | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> ([%#sred_black_tree0] Map.get (model_acc'0 left accu) k
    = Map.get accu k
    \/ (exists v : v . Map.get (model_acc'0 left accu) k = Option'0.C_Some v /\ has_mapping'0 left k v))
     -> (let _ = model_acc_has_mapping left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in ([%#sred_black_tree0] Map.get (model_acc'0 right accu2) k
    = Map.get accu2 k
    \/ (exists v : v . Map.get (model_acc'0 right accu2) k = Option'0.C_Some v /\ has_mapping'0 right k v))
     -> ([%#sred_black_tree0] Map.get (model_acc'0 self accu) k = Map.get accu k
    \/ (exists v : v . Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v)))
    end
end
module T_core__cmp__Ordering
  type t_Ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Less (input:t_Ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  
  let rec v_Equal (input:t_Ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  
  let rec v_Greater (input:t_Ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module M_red_black_tree__qyi9974039414958028887__has_mapping_model_acc__Impl
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 91 15 91 35
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 92 4 92 94
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 70 4 71 93
  
  let%span span3 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span4 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span5 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span6 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span7 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span16 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span17 = "../red_black_tree.rs" 58 12 65 13
  
  let%span span18 = "../red_black_tree.rs" 78 12 86 13
  
  let%span span19 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span20 = "../red_black_tree.rs" 210 12 216 13
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span3] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span4] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span5] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span6] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span7] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span8] cmp_log'0 x y
  = o)  -> ([%#span9] cmp_log'0 y z = o)  -> ([%#span10] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span11] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span12] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span13] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span14] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span15] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  use map.Map
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  use T_red_black_tree__Node as Node'0
  
  use T_core__option__Option as Option'0
  
  use map.Map
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span16] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 53 4 56 47] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span17] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 72 4 76 5] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span18] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . [%#sred_black_tree2] Map.get (model_acc'0 self accu) k
  = Map.get accu k
  \/ (exists v : v . Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v)
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span19] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span20] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  constant self  : Tree'0.t_Tree k v
  
  constant accu  : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
  
  constant k  : t_DeepModelTy'0
  
  function has_mapping_model_acc [#"../red_black_tree.rs" 93 4 95 33] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
  
  goal vc_has_mapping_model_acc : ([%#sred_black_tree0] bst_invariant'0 self)
   -> match self with
    | Tree'0.C_Tree (Option'0.C_None) -> [%#sred_black_tree1] forall v : v . has_mapping'0 self k v
     -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v
    | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> ([%#sred_black_tree0] bst_invariant'0 left)
    /\ (([%#sred_black_tree1] forall v : v . has_mapping'0 left k v
     -> Map.get (model_acc'0 left accu) k = Option'0.C_Some v)
     -> (let _ = has_mapping_model_acc left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in ([%#sred_black_tree0] bst_invariant'0 right)
    /\ (([%#sred_black_tree1] forall v : v . has_mapping'0 right k v
     -> Map.get (model_acc'0 right accu2) k = Option'0.C_Some v)
     -> (let _ = has_mapping_model_acc right accu2 k in ([%#sred_black_tree2] Map.get (model_acc'0 right accu2) k
    = Map.get accu2 k
    \/ (exists v : v . Map.get (model_acc'0 right accu2) k = Option'0.C_Some v /\ has_mapping'0 right k v))
     -> ([%#sred_black_tree1] forall v : v . has_mapping'0 self k v
     -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)))))
    end
end
module M_red_black_tree__qyi9974039414958028887__has_mapping_model__Impl
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 112 15 112 35
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 113 4 113 80
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 70 4 71 93
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 91 15 91 35
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 92 4 92 94
  
  let%span span5 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span6 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span7 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span18 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span19 = "../red_black_tree.rs" 58 12 65 13
  
  let%span span20 = "../red_black_tree.rs" 78 12 86 13
  
  let%span span21 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span22 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span23 = "../red_black_tree.rs" 98 12 107 13
  
  let%span span24 = "../red_black_tree.rs" 177 20 177 54
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span5] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span6] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span7] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span8] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span9] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span10] cmp_log'0 x y
  = o)  -> ([%#span11] cmp_log'0 y z = o)  -> ([%#span12] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span13] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span14] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span15] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span16] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span17] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  use map.Map
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  use T_red_black_tree__Node as Node'0
  
  use T_core__option__Option as Option'0
  
  use map.Map
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span18] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 53 4 56 47] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span19] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 72 4 76 5] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span20] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . [%#sred_black_tree2] Map.get (model_acc'0 self accu) k
  = Map.get accu k
  \/ (exists v : v . Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v)
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span21] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span22] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 93 4 95 33] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span23] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . ([%#sred_black_tree3] bst_invariant'0 self)
   -> ([%#sred_black_tree4] forall v : v . has_mapping'0 self k v
   -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  use map.Const
  
  function shallow_model'0 [#"../red_black_tree.rs" 176 4 176 50] (self : Tree'0.t_Tree k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span24] model_acc'0 self (Const.const (Option'0.C_None))
  
  constant self  : Tree'0.t_Tree k v
  
  constant k  : t_DeepModelTy'0
  
  function has_mapping_model [#"../red_black_tree.rs" 114 4 116 33] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) : ()
    
  
  goal vc_has_mapping_model : ([%#sred_black_tree0] bst_invariant'0 self)
   -> ([%#sred_black_tree2] Map.get (model_acc'0 self (Const.const (Option'0.C_None))) k
  = Map.get (Const.const (Option'0.C_None)) k
  \/ (exists v : v . Map.get (model_acc'0 self (Const.const (Option'0.C_None))) k = Option'0.C_Some v
  /\ has_mapping'0 self k v))
   -> (let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in ([%#sred_black_tree3] bst_invariant'0 self)
  /\ (([%#sred_black_tree4] forall v : v . has_mapping'0 self k v
   -> Map.get (model_acc'0 self (Const.const (Option'0.C_None))) k = Option'0.C_Some v)
   -> ([%#sred_black_tree1] forall v : v . has_mapping'0 self k v
  = (Map.get (shallow_model'0 self) k = Option'0.C_Some v))))
end
module M_red_black_tree__qyi9974039414958028887__has_mapping_inj__Impl
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 125 15 125 35
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 126 15 126 38
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 127 15 127 38
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 128 14 128 22
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 112 15 112 35
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 113 4 113 80
  
  let%span span6 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span7 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span19 = "../red_black_tree.rs" 58 12 65 13
  
  let%span span20 = "../red_black_tree.rs" 177 20 177 54
  
  let%span span21 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span22 = "../red_black_tree.rs" 70 4 71 93
  
  let%span span23 = "../red_black_tree.rs" 78 12 86 13
  
  let%span span24 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span25 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span26 = "../red_black_tree.rs" 91 15 91 35
  
  let%span span27 = "../red_black_tree.rs" 92 4 92 94
  
  let%span span28 = "../red_black_tree.rs" 98 12 107 13
  
  let%span span29 = "../red_black_tree.rs" 119 12 119 61
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span6] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span7] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span8] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span9] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span10] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span11] cmp_log'0 x y
  = o)  -> ([%#span12] cmp_log'0 y z = o)  -> ([%#span13] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span14] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span15] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span16] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span17] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span18] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  use T_core__option__Option as Option'0
  
  use map.Map
  
  use map.Map
  
  use map.Map
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  use T_red_black_tree__Node as Node'0
  
  use T_red_black_tree__Tree as Tree'0
  
  function model_acc'0 [#"../red_black_tree.rs" 53 4 56 47] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span19] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  use map.Const
  
  function shallow_model'0 [#"../red_black_tree.rs" 176 4 176 50] (self : Tree'0.t_Tree k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span20] model_acc'0 self (Const.const (Option'0.C_None))
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span21] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 72 4 76 5] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span23] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . [%#span22] Map.get (model_acc'0 self accu) k
  = Map.get accu k
  \/ (exists v : v . Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v)
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span24] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span25] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 93 4 95 33] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span28] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . ([%#span26] bst_invariant'0 self)
   -> ([%#span27] forall v : v . has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 114 4 116 33] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span29] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_Tree k v, k : t_DeepModelTy'0 . ([%#sred_black_tree4] bst_invariant'0 self)
   -> ([%#sred_black_tree5] forall v : v . has_mapping'0 self k v
  = (Map.get (shallow_model'0 self) k = Option'0.C_Some v))
  
  constant self  : Tree'0.t_Tree k v
  
  constant k  : t_DeepModelTy'0
  
  constant v1  : v
  
  constant v2  : v
  
  function has_mapping_inj [#"../red_black_tree.rs" 129 4 131 33] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v1 : v) (v2 : v) : ()
    
  
  goal vc_has_mapping_inj : ([%#sred_black_tree2] has_mapping'0 self k v2)
   -> ([%#sred_black_tree1] has_mapping'0 self k v1)
   -> ([%#sred_black_tree0] bst_invariant'0 self)
   -> ([%#sred_black_tree4] bst_invariant'0 self)
  /\ (([%#sred_black_tree5] forall v : v . has_mapping'0 self k v
  = (Map.get (shallow_model'0 self) k = Option'0.C_Some v))
   -> (let _ = has_mapping_model'0 self k in match Map.get (shallow_model'0 self) k with
    | Option'0.C_None -> [%#sred_black_tree3] v1 = v2
    | Option'0.C_Some _v -> [%#sred_black_tree3] v1 = v2
    end))
end
module M_red_black_tree__qyi50474196543815120__has_mapping__Impl
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 142 4 143 86
  
  let%span span1 = "../red_black_tree.rs" 37 12 41 13
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  type t_DeepModelTy'0
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  use T_red_black_tree__Node as Node'0
  
  use T_core__option__Option as Option'0
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span1] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  constant self  : Node'0.t_Node k v
  
  constant k  : t_DeepModelTy'0
  
  constant v  : v
  
  predicate has_mapping [#"../red_black_tree.rs" 144 4 144 57] (self : Node'0.t_Node k v) (k : t_DeepModelTy'0) (v : v)
  
  goal vc_has_mapping : if k = deep_model'0 (T_red_black_tree__Node.t_Node__key self) then
    [%#sred_black_tree0] forall node : Node'0.t_Node k v . self = node
     -> ((has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
    \/ has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v)
    \/ v = T_red_black_tree__Node.t_Node__val self)
    = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v
  else
    [%#sred_black_tree0] forall node : Node'0.t_Node k v . self = node
     -> ((has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
    \/ has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v)
    \/ false)
    = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v
  
end
module T_red_black_tree__CP
  use T_red_black_tree__Color as Color'0
  
  type t_CP  =
    | C_CPL (Color'0.t_Color)
    | C_CPN (Color'0.t_Color) (t_CP) (t_CP)
  
  function any_l (_ : 'b) : 'a
  
  let rec v_CPL (input:t_CP) (ret  (field_0:Color'0.t_Color))= any
    [ good (field_0:Color'0.t_Color)-> {C_CPL field_0 = input} (! ret {field_0})
    | bad (field_0:Color'0.t_Color)-> {C_CPL field_0 <> input} {false} any ]
    
  
  let rec v_CPN (input:t_CP) (ret  (field_0:Color'0.t_Color) (field_1:t_CP) (field_2:t_CP))= any
    [ good (field_0:Color'0.t_Color) (field_1:t_CP) (field_2:t_CP)-> {C_CPN field_0 field_1 field_2 = input}
      (! ret {field_0} {field_1} {field_2})
    | bad (field_0:Color'0.t_Color) (field_1:t_CP) (field_2:t_CP)-> {C_CPN field_0 field_1 field_2 <> input}
      {false}
      any ]
    
end
module M_red_black_tree__qyi9974039414958028887__height__Impl
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 299 14 299 25
  
  use T_red_black_tree__Color as Color'0
  
  use T_red_black_tree__Node as Node'0
  
  use T_core__option__Option as Option'0
  
  use T_red_black_tree__Tree as Tree'0
  
  use prelude.prelude.Int
  
  constant self  : Tree'0.t_Tree k v
  
  function height [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int
  
  goal vc_height : match self with
    | Tree'0.C_Tree (Option'0.C_None) -> [%#sred_black_tree0] 0 >= 0
    | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
      | Color'0.C_Red -> ([%#sred_black_tree0] height left >= 0)  -> ([%#sred_black_tree0] height left >= 0)
      | Color'0.C_Black -> ([%#sred_black_tree0] height left >= 0)  -> ([%#sred_black_tree0] height left + 1 >= 0)
      end
    end
end
module M_red_black_tree__qyi50474196543815120__height__Impl
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 330 4 331 77
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span2 = "../red_black_tree.rs" 302 12 310 13
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  use T_red_black_tree__Color as Color'0
  
  use prelude.prelude.Int
  
  use T_red_black_tree__Node as Node'0
  
  use T_core__option__Option as Option'0
  
  use T_red_black_tree__Tree as Tree'0
  
  function height'0 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span2] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_Tree k v . [%#sred_black_tree1] height'0 self >= 0
  
  constant self  : Node'0.t_Node k v
  
  function height [#"../red_black_tree.rs" 332 4 332 26] (self : Node'0.t_Node k v) : int
  
  goal vc_height : match T_red_black_tree__Node.t_Node__color self with
    | Color'0.C_Red -> ([%#sred_black_tree1] height'0 (T_red_black_tree__Node.t_Node__left self) >= 0)
     -> ([%#sred_black_tree0] forall node : Node'0.t_Node k v . self = node
     -> height'0 (T_red_black_tree__Node.t_Node__left self) = height'0 (Tree'0.C_Tree (Option'0.C_Some node)))
    | Color'0.C_Black -> ([%#sred_black_tree1] height'0 (T_red_black_tree__Node.t_Node__left self) >= 0)
     -> ([%#sred_black_tree0] forall node : Node'0.t_Node k v . self = node
     -> height'0 (T_red_black_tree__Node.t_Node__left self) + 1 = height'0 (Tree'0.C_Tree (Option'0.C_Some node)))
    end
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module M_red_black_tree__qyi9974039414958028887__is_red
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 390 17 390 22
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 389 49 389 53
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 387 15 387 19
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 386 14 386 45
  
  let%span span4 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span5 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span6 = "../red_black_tree.rs" 262 12 265 13
  
  predicate invariant'3 (self : v)
  
  predicate inv'6 (_1 : v)
  
  axiom inv'6 : forall x : v [inv'6 x] . inv'6 x  -> invariant'3 x
  
  predicate invariant'2 (self : k)
  
  predicate inv'5 (_1 : k)
  
  axiom inv'5 : forall x : k [inv'5 x] . inv'5 x  -> invariant'2 x
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'1 (_1 : Tree'0.t_Tree k v)
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'4 (_1 : Node'0.t_Node k v)
  
  axiom inv'4 [@rewrite] : forall x : Node'0.t_Node k v [inv'4 x] . inv'4 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'1 left /\ inv'5 key /\ inv'6 val' /\ inv'1 right
    end
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'1 (self : Node'0.t_Node k v) =
    [%#span4] inv'4 self
  
  predicate inv'3 (_1 : Node'0.t_Node k v)
  
  axiom inv'3 [@rewrite] : forall x : Node'0.t_Node k v [inv'3 x] . inv'3 x = invariant'1 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'2 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  axiom inv'1 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'1 x] . inv'1 x
  = match x with
    | Tree'0.C_Tree node -> inv'2 node
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : Tree'0.t_Tree k v) =
    [%#span5] inv'1 self
  
  predicate inv'0 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'0 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'0 x] . inv'0 x = invariant'0 x
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  use T_red_black_tree__Color as Color'0
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span6] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use prelude.prelude.Intrinsic
  
  let rec is_red (self:Tree'0.t_Tree k v) (return'  (ret:bool))= {[%#sred_black_tree2] inv'0 self}
    (! bb0
    [ bb0 = Tree'0.t_Tree <k> <v> {self}
        (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
          any
          [ br0 -> {rnode'0 = Option'0.C_None } (! bb6)
          | br1 (a:Node'0.t_Node k v)-> {rnode'0 = Option'0.C_Some a} (! bb2) ]
          )
    | bb6 = bb1
    | bb2 = Tree'0.t_Tree <k> <v> {self}
        (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
          Option'0.v_Some <Node'0.t_Node k v> {rnode'0}
            (fun (r0'0:Node'0.t_Node k v) ->
              Node'0.t_Node <k> <v> {r0'0}
                (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
                  any [ br0 -> {rcolor'0 = Color'0.C_Red } (! bb3) | br1 -> {rcolor'0 = Color'0.C_Black } (! bb1) ] )))
    | bb1 = s0 [ s0 =  [ &_0 <- [%#sred_black_tree0] false ] s1 | s1 = bb5 ] 
    | bb3 = bb4
    | bb4 = s0 [ s0 =  [ &_0 <- [%#sred_black_tree1] true ] s1 | s1 = bb5 ] 
    | bb5 = return' {_0} ]
    ) [ & _0 : bool = any_l () | & self : Tree'0.t_Tree k v = self ] 
    [ return' (result:bool)-> {[@expl:postcondition] [%#sred_black_tree3] result = (color'0 self = Color'0.C_Red)}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi50474196543815120__rotate_right
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 412 23 412 41
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 440 8 440 90
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 399 15 399 43
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 400 15 400 42
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 411 25 411 29
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 401 14 401 42
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 402 14 402 42
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 403 14 403 50
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 404 14 404 65
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 405 14 405 42
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 406 14 406 44
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 407 4 410 36
  
  let%span span12 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span26 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span27 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span28 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span29 = "../red_black_tree.rs" 330 4 331 77
  
  let%span span30 = "../red_black_tree.rs" 334 12 337 13
  
  let%span span31 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span32 = "../red_black_tree.rs" 142 4 143 86
  
  let%span span33 = "../red_black_tree.rs" 145 8 148 9
  
  let%span span34 = "../red_black_tree.rs" 153 8 155 9
  
  let%span span35 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span36 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span37 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span38 = "../red_black_tree.rs" 348 8 348 115
  
  let%span span39 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span40 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span41 = "../red_black_tree.rs" 197 8 199 9
  
  let%span span42 = "../red_black_tree.rs" 378 12 378 59
  
  let%span span43 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span44 = "" 0 0 0 0
  
  let%span span45 = "" 0 0 0 0
  
  let%span span46 = "../../../../creusot-contracts/src/std/mem.rs" 13 22 13 30
  
  let%span span47 = "../../../../creusot-contracts/src/std/mem.rs" 14 22 14 30
  
  let%span span48 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span49 = "" 0 0 0 0
  
  let%span span50 = "" 0 0 0 0
  
  let%span span51 = "../../../../creusot-contracts/src/std/option.rs" 147 20 147 32
  
  let%span span52 = "" 0 0 0 0
  
  let%span span53 = "../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  
  let%span span54 = "../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  
  let%span span55 = "" 0 0 0 0
  
  use T_red_black_tree__Color as Color'0
  
  predicate inv'11 (_1 : Color'0.t_Color)
  
  axiom inv'11 [@rewrite] : forall x : Color'0.t_Color [inv'11 x] . inv'11 x = true
  
  predicate invariant'7 (self : v)
  
  predicate inv'10 (_1 : v)
  
  axiom inv'10 : forall x : v [inv'10 x] . inv'10 x  -> invariant'7 x
  
  predicate invariant'6 (self : k)
  
  predicate inv'9 (_1 : k)
  
  axiom inv'9 : forall x : k [inv'9 x] . inv'9 x  -> invariant'6 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'5 (self : borrowed (Color'0.t_Color)) =
    [%#span12] inv'11 self.current /\ inv'11 self.final
  
  predicate inv'8 (_1 : borrowed (Color'0.t_Color))
  
  axiom inv'8 [@rewrite] : forall x : borrowed (Color'0.t_Color) [inv'8 x] . inv'8 x = true
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span13] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span14] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span15] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span16] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span17] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span18] cmp_log'0 x y
  = o)  -> ([%#span19] cmp_log'0 y z = o)  -> ([%#span20] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span21] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span22] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span23] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span24] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span25] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'4 (_1 : Node'0.t_Node k v)
  
  predicate invariant'4 (self : borrowed (Node'0.t_Node k v)) =
    [%#span12] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'7 (_1 : borrowed (Node'0.t_Node k v))
  
  axiom inv'7 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate inv'5 (_1 : Node'0.t_Node k v)
  
  predicate invariant'3 (self : borrowed (Node'0.t_Node k v)) =
    [%#span12] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'6 (_1 : borrowed (Node'0.t_Node k v))
  
  axiom inv'6 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'6 x] . inv'6 x = invariant'3 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'2 (self : Node'0.t_Node k v) =
    [%#span26] inv'4 self
  
  axiom inv'5 [@rewrite] : forall x : Node'0.t_Node k v [inv'5 x] . inv'5 x = invariant'2 x
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'2 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'4 [@rewrite] : forall x : Node'0.t_Node k v [inv'4 x] . inv'4 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'2 left /\ inv'9 key /\ inv'10 val' /\ inv'2 right
    end
  
  predicate invariant'1 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span12] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_1 : borrowed (Tree'0.t_Tree k v))
  
  axiom inv'3 [@rewrite] : forall x : borrowed (Tree'0.t_Tree k v) [inv'3 x] . inv'3 x = invariant'1 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'0 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'2 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'2 x] . inv'2 x
  = match x with
    | Tree'0.C_Tree node -> inv'0 node
    end
  
  predicate invariant'0 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span12] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v)))
  
  axiom inv'1 [@rewrite] : forall x : borrowed (Option'0.t_Option (Node'0.t_Node k v)) [inv'1 x] . inv'1 x
  = invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'0 x] . inv'0 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'5 a_0
    end
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  use prelude.prelude.Int
  
  function height'1 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span28] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'1 left
        | Color'0.C_Black -> height'1 left + 1
        end
      end
  
  axiom height'1_spec : forall self : Tree'0.t_Tree k v . [%#span27] height'1 self >= 0
  
  function height'0 [#"../red_black_tree.rs" 332 4 332 26] (self : Node'0.t_Node k v) : int =
    [%#span30] match T_red_black_tree__Node.t_Node__color self with
      | Color'0.C_Red -> height'1 (T_red_black_tree__Node.t_Node__left self)
      | Color'0.C_Black -> height'1 (T_red_black_tree__Node.t_Node__left self) + 1
      end
  
  axiom height'0_spec : forall self : Node'0.t_Node k v . [%#span29] forall node : Node'0.t_Node k v . self = node
   -> height'0 self = height'1 (Tree'0.C_Tree (Option'0.C_Some node))
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span31] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 144 4 144 57] (self : Node'0.t_Node k v) (k : t_DeepModelTy'0) (v : v)
    
   =
    [%#span33] has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
    \/ has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
    \/ k = deep_model'0 (T_red_black_tree__Node.t_Node__key self) /\ v = T_red_black_tree__Node.t_Node__val self
  
  axiom has_mapping'1_spec : forall self : Node'0.t_Node k v, k : t_DeepModelTy'0, v : v . [%#span32] forall node : Node'0.t_Node k v . self
  = node  -> has_mapping'1 self k v = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 152 4 152 43] (self : Node'0.t_Node k v) (o : Node'0.t_Node k v) =
    [%#span34] forall k : t_DeepModelTy'0, v : v . has_mapping'1 self k v = has_mapping'1 o k v
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span35] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span36] height'1 (T_red_black_tree__Node.t_Node__left self)
    = height'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span37] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'1 left /\ height_invariant'1 right
      end
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 347 4 347 37] (self : Node'0.t_Node k v) =
    [%#span38] height_invariant_here'0 self
    /\ height_invariant'1 (T_red_black_tree__Node.t_Node__left self)
    /\ height_invariant'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span39] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span40] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'1 left /\ bst_invariant'1 right
      end
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 196 4 196 34] (self : Node'0.t_Node k v) =
    [%#span41] bst_invariant_here'0 self
    /\ bst_invariant'1 (T_red_black_tree__Node.t_Node__left self)
    /\ bst_invariant'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 376 4 376 39] (self : Node'0.t_Node k v) =
    [%#span42] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'9 (self : borrowed (Node'0.t_Node k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'9 _1
  
  use prelude.prelude.Snapshot
  
  predicate resolve'8 (self : borrowed (Color'0.t_Color)) =
    [%#span43] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed (Color'0.t_Color)) =
    resolve'8 _1
  
  let rec swap'2 (x:borrowed (Color'0.t_Color)) (y:borrowed (Color'0.t_Color)) (return'  (ret:()))= {[@expl:precondition] [%#span45] inv'8 y}
    {[@expl:precondition] [%#span44] inv'8 x}
    any
    [ return' (result:())-> {[%#span47] y.final = x.current} {[%#span46] x.final = y.current} (! return' {result}) ]
    
  
  predicate resolve'7 (self : borrowed (Node'0.t_Node k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'7 _1
  
  let rec swap'1 (x:borrowed (Node'0.t_Node k v)) (y:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span45] inv'7 y}
    {[@expl:precondition] [%#span44] inv'7 x}
    any
    [ return' (result:())-> {[%#span47] y.final = x.current} {[%#span46] x.final = y.current} (! return' {result}) ]
    
  
  predicate resolve'6 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Tree'0.t_Tree k v)) =
    resolve'6 _1
  
  let rec swap'0 (x:borrowed (Tree'0.t_Tree k v)) (y:borrowed (Tree'0.t_Tree k v)) (return'  (ret:()))= {[@expl:precondition] [%#span45] inv'3 y}
    {[@expl:precondition] [%#span44] inv'3 x}
    any
    [ return' (result:())-> {[%#span47] y.final = x.current} {[%#span46] x.final = y.current} (! return' {result}) ]
    
  
  let rec unwrap'0 (self:Option'0.t_Option (Node'0.t_Node k v)) (return'  (ret:Node'0.t_Node k v))= {[@expl:precondition] [%#span49] inv'0 self}
    {[@expl:precondition] [%#span48] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_Node k v)-> {[%#span50] inv'5 result}
      {[%#span48] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span43] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    resolve'5 _1
  
  predicate is_default'0 (self : Option'0.t_Option (Node'0.t_Node k v)) =
    [%#span51] self = Option'0.C_None
  
  let rec take'0 (dest:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (Node'0.t_Node k v)))= {[@expl:precondition] [%#span52] inv'1 dest}
    any
    [ return' (result:Option'0.t_Option (Node'0.t_Node k v))-> {[%#span55] inv'0 result}
      {[%#span54] is_default'0 dest.final}
      {[%#span53] result = dest.current}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  let rec rotate_right (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[%#sred_black_tree4] inv'7 self}
    {[%#sred_black_tree3] color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red}
    {[%#sred_black_tree2] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#sred_black_tree0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_mut <Option'0.t_Option (Node'0.t_Node k v)> {rnode'0}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_16 <- _ret' ] 
                    Node'0.t_Node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_left'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node (Tree'0.C_Tree _16.final) l_color'0 l_key'0 l_val'0 l_right'0 ; } ]
                            
                            s1)))))
      | s1 = -{inv'0 _16.final}- s2
      | s2 = Borrow.borrow_final <Option'0.t_Option (Node'0.t_Node k v)> {_16.current} {Borrow.get_id _16}
          (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
             [ &_15 <- _ret' ] 
             [ &_16 <- { _16 with current = _15.final ; } ] 
            s3)
      | s3 = -{inv'0 _15.final}- s4
      | s4 = take'0 {_15} (fun (_ret':Option'0.t_Option (Node'0.t_Node k v)) ->  [ &_14 <- _ret' ] s5)
      | s5 = bb2 ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'1 _16} s1
      | s1 = -{resolve'0 _16}- s2
      | s2 = unwrap'0 {_14} (fun (_ret':Node'0.t_Node k v) ->  [ &x <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {rleft'0}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_19 <- _ret' ] 
                Node'0.t_Node <k> <v> {self.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                     [ &self <- { self with current = Node'0.C_Node _19.final l_color'0 l_key'0 l_val'0 l_right'0 ; } ] 
                    s1)))
      | s1 = -{inv'2 _19.final}- s2
      | s2 = Borrow.borrow_final <Tree'0.t_Tree k v> {_19.current} {Borrow.get_id _19}
          (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
             [ &_18 <- _ret' ] 
             [ &_19 <- { _19 with current = _18.final ; } ] 
            s3)
      | s3 = -{inv'2 _18.final}- s4
      | s4 = Node'0.t_Node <k> <v> {x}
          (fun (rleft'1:Tree'0.t_Tree k v) (rcolor'1:Color'0.t_Color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {rright'1}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_21 <- _ret' ] 
                Node'0.t_Node <k> <v> {x}
                  (fun (l_left'1:Tree'0.t_Tree k v) (l_color'1:Color'0.t_Color) (l_key'1:k) (l_val'1:v) (l_right'1:Tree'0.t_Tree k v) ->
                     [ &x <- Node'0.C_Node l_left'1 l_color'1 l_key'1 l_val'1 _21.final ] 
                    s5)))
      | s5 = -{inv'2 _21.final}- s6
      | s6 = Borrow.borrow_final <Tree'0.t_Tree k v> {_21.current} {Borrow.get_id _21}
          (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
             [ &_20 <- _ret' ] 
             [ &_21 <- { _21 with current = _20.final ; } ] 
            s7)
      | s7 = -{inv'2 _20.final}- s8
      | s8 = swap'0 {_18} {_20} (fun (_ret':()) ->  [ &_17 <- _ret' ] s9)
      | s9 = bb4 ]
      
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'3 _21} s1
      | s1 = -{resolve'1 _21}- s2
      | s2 = {[@expl:type invariant] inv'3 _19} s3
      | s3 = -{resolve'1 _19}- s4
      | s4 = Borrow.borrow_mut <Node'0.t_Node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_23 <- _ret' ] 
             [ &self <- { self with current = _23.final ; } ] 
            s5)
      | s5 = -{inv'4 _23.final}- s6
      | s6 = Borrow.borrow_mut <Node'0.t_Node k v> {x}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_25 <- _ret' ]  [ &x <- _25.final ] s7)
      | s7 = -{inv'5 _25.final}- s8
      | s8 = Borrow.borrow_final <Node'0.t_Node k v> {_25.current} {Borrow.get_id _25}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_24 <- _ret' ] 
             [ &_25 <- { _25 with current = _24.final ; } ] 
            s9)
      | s9 = -{inv'4 _24.final}- s10
      | s10 = swap'1 {_23} {_24} (fun (_ret':()) ->  [ &_22 <- _ret' ] s11)
      | s11 = bb5 ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'6 _25} s1
      | s1 = -{resolve'2 _25}- s2
      | s2 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_final <Color'0.t_Color> {rcolor'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed (Color'0.t_Color)) ->
                 [ &_28 <- _ret' ] 
                Node'0.t_Node <k> <v> {self.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                     [ &self <- { self with current = Node'0.C_Node l_left'0 _28.final l_key'0 l_val'0 l_right'0 ; } ] 
                    s3)))
      | s3 = Borrow.borrow_final <Color'0.t_Color> {_28.current} {Borrow.get_id _28}
          (fun (_ret':borrowed (Color'0.t_Color)) ->
             [ &_27 <- _ret' ] 
             [ &_28 <- { _28 with current = _27.final ; } ] 
            s4)
      | s4 = Node'0.t_Node <k> <v> {x}
          (fun (rleft'1:Tree'0.t_Tree k v) (rcolor'1:Color'0.t_Color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Color'0.t_Color> {rcolor'1}
              (fun (_ret':borrowed (Color'0.t_Color)) ->
                 [ &_30 <- _ret' ] 
                Node'0.t_Node <k> <v> {x}
                  (fun (l_left'1:Tree'0.t_Tree k v) (l_color'1:Color'0.t_Color) (l_key'1:k) (l_val'1:v) (l_right'1:Tree'0.t_Tree k v) ->
                     [ &x <- Node'0.C_Node l_left'1 _30.final l_key'1 l_val'1 l_right'1 ] 
                    s5)))
      | s5 = Borrow.borrow_final <Color'0.t_Color> {_30.current} {Borrow.get_id _30}
          (fun (_ret':borrowed (Color'0.t_Color)) ->
             [ &_29 <- _ret' ] 
             [ &_30 <- { _30 with current = _29.final ; } ] 
            s6)
      | s6 = swap'2 {_27} {_29} (fun (_ret':()) ->  [ &_26 <- _ret' ] s7)
      | s7 = bb6 ]
      
    | bb6 = s0
      [ s0 = -{resolve'3 _30}- s1
      | s1 = -{resolve'3 _28}- s2
      | s2 = {[@expl:assertion] [%#sred_black_tree1] has_mapping'0 (T_red_black_tree__Node.t_Node__left (Snapshot.inner old_self).current) (deep_model'0 (T_red_black_tree__Node.t_Node__key self.current)) (T_red_black_tree__Node.t_Node__val self.current)}
        s3
      | s3 =  [ &_34 <- Option'0.C_Some x ] s4
      | s4 = bb7 ]
      
    | bb7 = s0 [ s0 =  [ &_33 <- Tree'0.C_Tree _34 ] s1 | s1 = bb8 ] 
    | bb8 = bb9
    | bb9 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            {[@expl:type invariant] inv'2 rright'0}
            s1)
      | s1 = Node'0.t_Node <k> <v> {self.current}
          (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
             [ &self <- { self with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _33 ; } ] 
            s2)
      | s2 = {[@expl:type invariant] inv'7 self} s3
      | s3 = -{resolve'4 self}- s4
      | s4 = bb11 ]
      
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Node'0.t_Node k v) = self
    | & old_self : Snapshot.snap_ty (borrowed (Node'0.t_Node k v)) = any_l ()
    | & x : Node'0.t_Node k v = any_l ()
    | & _14 : Option'0.t_Option (Node'0.t_Node k v) = any_l ()
    | & _15 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _16 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _17 : () = any_l ()
    | & _18 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _19 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _20 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _21 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _22 : () = any_l ()
    | & _23 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _24 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _25 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _26 : () = any_l ()
    | & _27 : borrowed (Color'0.t_Color) = any_l ()
    | & _28 : borrowed (Color'0.t_Color) = any_l ()
    | & _29 : borrowed (Color'0.t_Color) = any_l ()
    | & _30 : borrowed (Color'0.t_Color) = any_l ()
    | & _33 : Tree'0.t_Tree k v = any_l ()
    | & _34 : Option'0.t_Option (Node'0.t_Node k v) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sred_black_tree11] exists l : Node'0.t_Node k v, r : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
      = Option'0.C_Some l
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.final) = Option'0.C_Some r
      /\ (T_red_black_tree__Node.t_Node__left self.final, T_red_black_tree__Node.t_Node__left r, T_red_black_tree__Node.t_Node__right r)
      = (T_red_black_tree__Node.t_Node__left l, T_red_black_tree__Node.t_Node__right l, T_red_black_tree__Node.t_Node__right self.current)
      /\ T_red_black_tree__Node.t_Node__key r = T_red_black_tree__Node.t_Node__key self.current}
      {[@expl:postcondition] [%#sred_black_tree10] T_red_black_tree__Node.t_Node__color self.final
      = T_red_black_tree__Node.t_Node__color self.current}
      {[@expl:postcondition] [%#sred_black_tree9] color'0 (T_red_black_tree__Node.t_Node__right self.final)
      = Color'0.C_Red}
      {[@expl:postcondition] [%#sred_black_tree8] lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self.final)) (deep_model'0 (T_red_black_tree__Node.t_Node__key self.current))}
      {[@expl:postcondition] [%#sred_black_tree7] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree6] internal_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi50474196543815120__rotate_left
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 462 23 462 41
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 467 8 467 91
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 449 15 449 43
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 450 15 450 43
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 461 24 461 28
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 451 14 451 42
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 452 14 452 42
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 453 14 453 50
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 454 14 454 65
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 455 14 455 41
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 456 14 456 44
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 457 4 460 36
  
  let%span span12 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span26 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span27 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span28 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span29 = "../red_black_tree.rs" 330 4 331 77
  
  let%span span30 = "../red_black_tree.rs" 334 12 337 13
  
  let%span span31 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span32 = "../red_black_tree.rs" 142 4 143 86
  
  let%span span33 = "../red_black_tree.rs" 145 8 148 9
  
  let%span span34 = "../red_black_tree.rs" 153 8 155 9
  
  let%span span35 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span36 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span37 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span38 = "../red_black_tree.rs" 348 8 348 115
  
  let%span span39 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span40 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span41 = "../red_black_tree.rs" 197 8 199 9
  
  let%span span42 = "../red_black_tree.rs" 378 12 378 59
  
  let%span span43 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span44 = "" 0 0 0 0
  
  let%span span45 = "" 0 0 0 0
  
  let%span span46 = "../../../../creusot-contracts/src/std/mem.rs" 13 22 13 30
  
  let%span span47 = "../../../../creusot-contracts/src/std/mem.rs" 14 22 14 30
  
  let%span span48 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span49 = "" 0 0 0 0
  
  let%span span50 = "" 0 0 0 0
  
  let%span span51 = "../../../../creusot-contracts/src/std/option.rs" 147 20 147 32
  
  let%span span52 = "" 0 0 0 0
  
  let%span span53 = "../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  
  let%span span54 = "../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  
  let%span span55 = "" 0 0 0 0
  
  use T_red_black_tree__Color as Color'0
  
  predicate inv'11 (_1 : Color'0.t_Color)
  
  axiom inv'11 [@rewrite] : forall x : Color'0.t_Color [inv'11 x] . inv'11 x = true
  
  predicate invariant'7 (self : v)
  
  predicate inv'10 (_1 : v)
  
  axiom inv'10 : forall x : v [inv'10 x] . inv'10 x  -> invariant'7 x
  
  predicate invariant'6 (self : k)
  
  predicate inv'9 (_1 : k)
  
  axiom inv'9 : forall x : k [inv'9 x] . inv'9 x  -> invariant'6 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'5 (self : borrowed (Color'0.t_Color)) =
    [%#span12] inv'11 self.current /\ inv'11 self.final
  
  predicate inv'8 (_1 : borrowed (Color'0.t_Color))
  
  axiom inv'8 [@rewrite] : forall x : borrowed (Color'0.t_Color) [inv'8 x] . inv'8 x = true
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span13] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span14] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span15] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span16] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span17] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span18] cmp_log'0 x y
  = o)  -> ([%#span19] cmp_log'0 y z = o)  -> ([%#span20] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span21] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span22] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span23] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span24] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span25] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'4 (_1 : Node'0.t_Node k v)
  
  predicate invariant'4 (self : borrowed (Node'0.t_Node k v)) =
    [%#span12] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'7 (_1 : borrowed (Node'0.t_Node k v))
  
  axiom inv'7 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate inv'5 (_1 : Node'0.t_Node k v)
  
  predicate invariant'3 (self : borrowed (Node'0.t_Node k v)) =
    [%#span12] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'6 (_1 : borrowed (Node'0.t_Node k v))
  
  axiom inv'6 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'6 x] . inv'6 x = invariant'3 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'2 (self : Node'0.t_Node k v) =
    [%#span26] inv'4 self
  
  axiom inv'5 [@rewrite] : forall x : Node'0.t_Node k v [inv'5 x] . inv'5 x = invariant'2 x
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'2 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'4 [@rewrite] : forall x : Node'0.t_Node k v [inv'4 x] . inv'4 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'2 left /\ inv'9 key /\ inv'10 val' /\ inv'2 right
    end
  
  predicate invariant'1 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span12] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_1 : borrowed (Tree'0.t_Tree k v))
  
  axiom inv'3 [@rewrite] : forall x : borrowed (Tree'0.t_Tree k v) [inv'3 x] . inv'3 x = invariant'1 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'0 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'2 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'2 x] . inv'2 x
  = match x with
    | Tree'0.C_Tree node -> inv'0 node
    end
  
  predicate invariant'0 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span12] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v)))
  
  axiom inv'1 [@rewrite] : forall x : borrowed (Option'0.t_Option (Node'0.t_Node k v)) [inv'1 x] . inv'1 x
  = invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'0 x] . inv'0 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'5 a_0
    end
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  use prelude.prelude.Int
  
  function height'1 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span28] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'1 left
        | Color'0.C_Black -> height'1 left + 1
        end
      end
  
  axiom height'1_spec : forall self : Tree'0.t_Tree k v . [%#span27] height'1 self >= 0
  
  function height'0 [#"../red_black_tree.rs" 332 4 332 26] (self : Node'0.t_Node k v) : int =
    [%#span30] match T_red_black_tree__Node.t_Node__color self with
      | Color'0.C_Red -> height'1 (T_red_black_tree__Node.t_Node__left self)
      | Color'0.C_Black -> height'1 (T_red_black_tree__Node.t_Node__left self) + 1
      end
  
  axiom height'0_spec : forall self : Node'0.t_Node k v . [%#span29] forall node : Node'0.t_Node k v . self = node
   -> height'0 self = height'1 (Tree'0.C_Tree (Option'0.C_Some node))
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span31] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 144 4 144 57] (self : Node'0.t_Node k v) (k : t_DeepModelTy'0) (v : v)
    
   =
    [%#span33] has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
    \/ has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
    \/ k = deep_model'0 (T_red_black_tree__Node.t_Node__key self) /\ v = T_red_black_tree__Node.t_Node__val self
  
  axiom has_mapping'1_spec : forall self : Node'0.t_Node k v, k : t_DeepModelTy'0, v : v . [%#span32] forall node : Node'0.t_Node k v . self
  = node  -> has_mapping'1 self k v = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 152 4 152 43] (self : Node'0.t_Node k v) (o : Node'0.t_Node k v) =
    [%#span34] forall k : t_DeepModelTy'0, v : v . has_mapping'1 self k v = has_mapping'1 o k v
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span35] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span36] height'1 (T_red_black_tree__Node.t_Node__left self)
    = height'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span37] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'1 left /\ height_invariant'1 right
      end
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 347 4 347 37] (self : Node'0.t_Node k v) =
    [%#span38] height_invariant_here'0 self
    /\ height_invariant'1 (T_red_black_tree__Node.t_Node__left self)
    /\ height_invariant'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span39] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span40] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'1 left /\ bst_invariant'1 right
      end
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 196 4 196 34] (self : Node'0.t_Node k v) =
    [%#span41] bst_invariant_here'0 self
    /\ bst_invariant'1 (T_red_black_tree__Node.t_Node__left self)
    /\ bst_invariant'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 376 4 376 39] (self : Node'0.t_Node k v) =
    [%#span42] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'9 (self : borrowed (Node'0.t_Node k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'9 _1
  
  use prelude.prelude.Snapshot
  
  predicate resolve'8 (self : borrowed (Color'0.t_Color)) =
    [%#span43] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed (Color'0.t_Color)) =
    resolve'8 _1
  
  let rec swap'2 (x:borrowed (Color'0.t_Color)) (y:borrowed (Color'0.t_Color)) (return'  (ret:()))= {[@expl:precondition] [%#span45] inv'8 y}
    {[@expl:precondition] [%#span44] inv'8 x}
    any
    [ return' (result:())-> {[%#span47] y.final = x.current} {[%#span46] x.final = y.current} (! return' {result}) ]
    
  
  predicate resolve'7 (self : borrowed (Node'0.t_Node k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'7 _1
  
  let rec swap'1 (x:borrowed (Node'0.t_Node k v)) (y:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span45] inv'7 y}
    {[@expl:precondition] [%#span44] inv'7 x}
    any
    [ return' (result:())-> {[%#span47] y.final = x.current} {[%#span46] x.final = y.current} (! return' {result}) ]
    
  
  predicate resolve'6 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Tree'0.t_Tree k v)) =
    resolve'6 _1
  
  let rec swap'0 (x:borrowed (Tree'0.t_Tree k v)) (y:borrowed (Tree'0.t_Tree k v)) (return'  (ret:()))= {[@expl:precondition] [%#span45] inv'3 y}
    {[@expl:precondition] [%#span44] inv'3 x}
    any
    [ return' (result:())-> {[%#span47] y.final = x.current} {[%#span46] x.final = y.current} (! return' {result}) ]
    
  
  let rec unwrap'0 (self:Option'0.t_Option (Node'0.t_Node k v)) (return'  (ret:Node'0.t_Node k v))= {[@expl:precondition] [%#span49] inv'0 self}
    {[@expl:precondition] [%#span48] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_Node k v)-> {[%#span50] inv'5 result}
      {[%#span48] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span43] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    resolve'5 _1
  
  predicate is_default'0 (self : Option'0.t_Option (Node'0.t_Node k v)) =
    [%#span51] self = Option'0.C_None
  
  let rec take'0 (dest:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (Node'0.t_Node k v)))= {[@expl:precondition] [%#span52] inv'1 dest}
    any
    [ return' (result:Option'0.t_Option (Node'0.t_Node k v))-> {[%#span55] inv'0 result}
      {[%#span54] is_default'0 dest.final}
      {[%#span53] result = dest.current}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  let rec rotate_left (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[%#sred_black_tree4] inv'7 self}
    {[%#sred_black_tree3] color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Red}
    {[%#sred_black_tree2] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#sred_black_tree0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rright'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_mut <Option'0.t_Option (Node'0.t_Node k v)> {rnode'0}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_16 <- _ret' ] 
                    Node'0.t_Node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_right'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 (Tree'0.C_Tree _16.final) ; } ]
                            
                            s1)))))
      | s1 = -{inv'0 _16.final}- s2
      | s2 = Borrow.borrow_final <Option'0.t_Option (Node'0.t_Node k v)> {_16.current} {Borrow.get_id _16}
          (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
             [ &_15 <- _ret' ] 
             [ &_16 <- { _16 with current = _15.final ; } ] 
            s3)
      | s3 = -{inv'0 _15.final}- s4
      | s4 = take'0 {_15} (fun (_ret':Option'0.t_Option (Node'0.t_Node k v)) ->  [ &_14 <- _ret' ] s5)
      | s5 = bb2 ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'1 _16} s1
      | s1 = -{resolve'0 _16}- s2
      | s2 = unwrap'0 {_14} (fun (_ret':Node'0.t_Node k v) ->  [ &x <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {rright'0}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_19 <- _ret' ] 
                Node'0.t_Node <k> <v> {self.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                     [ &self <- { self with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _19.final ; } ] 
                    s1)))
      | s1 = -{inv'2 _19.final}- s2
      | s2 = Borrow.borrow_final <Tree'0.t_Tree k v> {_19.current} {Borrow.get_id _19}
          (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
             [ &_18 <- _ret' ] 
             [ &_19 <- { _19 with current = _18.final ; } ] 
            s3)
      | s3 = -{inv'2 _18.final}- s4
      | s4 = Node'0.t_Node <k> <v> {x}
          (fun (rleft'1:Tree'0.t_Tree k v) (rcolor'1:Color'0.t_Color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {rleft'1}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_21 <- _ret' ] 
                Node'0.t_Node <k> <v> {x}
                  (fun (l_left'1:Tree'0.t_Tree k v) (l_color'1:Color'0.t_Color) (l_key'1:k) (l_val'1:v) (l_right'1:Tree'0.t_Tree k v) ->
                     [ &x <- Node'0.C_Node _21.final l_color'1 l_key'1 l_val'1 l_right'1 ] 
                    s5)))
      | s5 = -{inv'2 _21.final}- s6
      | s6 = Borrow.borrow_final <Tree'0.t_Tree k v> {_21.current} {Borrow.get_id _21}
          (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
             [ &_20 <- _ret' ] 
             [ &_21 <- { _21 with current = _20.final ; } ] 
            s7)
      | s7 = -{inv'2 _20.final}- s8
      | s8 = swap'0 {_18} {_20} (fun (_ret':()) ->  [ &_17 <- _ret' ] s9)
      | s9 = bb4 ]
      
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'3 _21} s1
      | s1 = -{resolve'1 _21}- s2
      | s2 = {[@expl:type invariant] inv'3 _19} s3
      | s3 = -{resolve'1 _19}- s4
      | s4 = Borrow.borrow_mut <Node'0.t_Node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_23 <- _ret' ] 
             [ &self <- { self with current = _23.final ; } ] 
            s5)
      | s5 = -{inv'4 _23.final}- s6
      | s6 = Borrow.borrow_mut <Node'0.t_Node k v> {x}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_25 <- _ret' ]  [ &x <- _25.final ] s7)
      | s7 = -{inv'5 _25.final}- s8
      | s8 = Borrow.borrow_final <Node'0.t_Node k v> {_25.current} {Borrow.get_id _25}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_24 <- _ret' ] 
             [ &_25 <- { _25 with current = _24.final ; } ] 
            s9)
      | s9 = -{inv'4 _24.final}- s10
      | s10 = swap'1 {_23} {_24} (fun (_ret':()) ->  [ &_22 <- _ret' ] s11)
      | s11 = bb5 ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'6 _25} s1
      | s1 = -{resolve'2 _25}- s2
      | s2 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_final <Color'0.t_Color> {rcolor'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed (Color'0.t_Color)) ->
                 [ &_28 <- _ret' ] 
                Node'0.t_Node <k> <v> {self.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                     [ &self <- { self with current = Node'0.C_Node l_left'0 _28.final l_key'0 l_val'0 l_right'0 ; } ] 
                    s3)))
      | s3 = Borrow.borrow_final <Color'0.t_Color> {_28.current} {Borrow.get_id _28}
          (fun (_ret':borrowed (Color'0.t_Color)) ->
             [ &_27 <- _ret' ] 
             [ &_28 <- { _28 with current = _27.final ; } ] 
            s4)
      | s4 = Node'0.t_Node <k> <v> {x}
          (fun (rleft'1:Tree'0.t_Tree k v) (rcolor'1:Color'0.t_Color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Color'0.t_Color> {rcolor'1}
              (fun (_ret':borrowed (Color'0.t_Color)) ->
                 [ &_30 <- _ret' ] 
                Node'0.t_Node <k> <v> {x}
                  (fun (l_left'1:Tree'0.t_Tree k v) (l_color'1:Color'0.t_Color) (l_key'1:k) (l_val'1:v) (l_right'1:Tree'0.t_Tree k v) ->
                     [ &x <- Node'0.C_Node l_left'1 _30.final l_key'1 l_val'1 l_right'1 ] 
                    s5)))
      | s5 = Borrow.borrow_final <Color'0.t_Color> {_30.current} {Borrow.get_id _30}
          (fun (_ret':borrowed (Color'0.t_Color)) ->
             [ &_29 <- _ret' ] 
             [ &_30 <- { _30 with current = _29.final ; } ] 
            s6)
      | s6 = swap'2 {_27} {_29} (fun (_ret':()) ->  [ &_26 <- _ret' ] s7)
      | s7 = bb6 ]
      
    | bb6 = s0
      [ s0 = -{resolve'3 _30}- s1
      | s1 = -{resolve'3 _28}- s2
      | s2 = {[@expl:assertion] [%#sred_black_tree1] has_mapping'0 (T_red_black_tree__Node.t_Node__right (Snapshot.inner old_self).current) (deep_model'0 (T_red_black_tree__Node.t_Node__key self.current)) (T_red_black_tree__Node.t_Node__val self.current)}
        s3
      | s3 =  [ &_34 <- Option'0.C_Some x ] s4
      | s4 = bb7 ]
      
    | bb7 = s0 [ s0 =  [ &_33 <- Tree'0.C_Tree _34 ] s1 | s1 = bb8 ] 
    | bb8 = bb9
    | bb9 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            {[@expl:type invariant] inv'2 rleft'0}
            s1)
      | s1 = Node'0.t_Node <k> <v> {self.current}
          (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
             [ &self <- { self with current = Node'0.C_Node _33 l_color'0 l_key'0 l_val'0 l_right'0 ; } ] 
            s2)
      | s2 = {[@expl:type invariant] inv'7 self} s3
      | s3 = -{resolve'4 self}- s4
      | s4 = bb11 ]
      
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Node'0.t_Node k v) = self
    | & old_self : Snapshot.snap_ty (borrowed (Node'0.t_Node k v)) = any_l ()
    | & x : Node'0.t_Node k v = any_l ()
    | & _14 : Option'0.t_Option (Node'0.t_Node k v) = any_l ()
    | & _15 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _16 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _17 : () = any_l ()
    | & _18 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _19 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _20 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _21 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _22 : () = any_l ()
    | & _23 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _24 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _25 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _26 : () = any_l ()
    | & _27 : borrowed (Color'0.t_Color) = any_l ()
    | & _28 : borrowed (Color'0.t_Color) = any_l ()
    | & _29 : borrowed (Color'0.t_Color) = any_l ()
    | & _30 : borrowed (Color'0.t_Color) = any_l ()
    | & _33 : Tree'0.t_Tree k v = any_l ()
    | & _34 : Option'0.t_Option (Node'0.t_Node k v) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sred_black_tree11] exists l : Node'0.t_Node k v, r : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.current)
      = Option'0.C_Some r
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.final) = Option'0.C_Some l
      /\ (T_red_black_tree__Node.t_Node__left l, T_red_black_tree__Node.t_Node__right l, T_red_black_tree__Node.t_Node__right self.final)
      = (T_red_black_tree__Node.t_Node__left self.current, T_red_black_tree__Node.t_Node__left r, T_red_black_tree__Node.t_Node__right r)
      /\ T_red_black_tree__Node.t_Node__key l = T_red_black_tree__Node.t_Node__key self.current}
      {[@expl:postcondition] [%#sred_black_tree10] T_red_black_tree__Node.t_Node__color self.final
      = T_red_black_tree__Node.t_Node__color self.current}
      {[@expl:postcondition] [%#sred_black_tree9] color'0 (T_red_black_tree__Node.t_Node__left self.final)
      = Color'0.C_Red}
      {[@expl:postcondition] [%#sred_black_tree8] lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self.current)) (deep_model'0 (T_red_black_tree__Node.t_Node__key self.final))}
      {[@expl:postcondition] [%#sred_black_tree7] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree6] internal_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi50474196543815120__flip_colors
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 471 15 471 43
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 472 15 472 40
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 473 15 473 41
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 474 15 474 60
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 485 24 485 28
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 475 14 475 42
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 476 14 476 50
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 477 14 477 42
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 478 14 478 40
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 479 4 481 70
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 482 4 484 90
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span24 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span25 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span26 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span27 = "../red_black_tree.rs" 142 4 143 86
  
  let%span span28 = "../red_black_tree.rs" 145 8 148 9
  
  let%span span29 = "../red_black_tree.rs" 153 8 155 9
  
  let%span span30 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span31 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span32 = "../red_black_tree.rs" 330 4 331 77
  
  let%span span33 = "../red_black_tree.rs" 334 12 337 13
  
  let%span span34 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span35 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span36 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span37 = "../red_black_tree.rs" 348 8 348 115
  
  let%span span38 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span39 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span40 = "../red_black_tree.rs" 197 8 199 9
  
  let%span span41 = "../red_black_tree.rs" 378 12 378 59
  
  let%span span42 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span43 = "" 0 0 0 0
  
  let%span span44 = "" 0 0 0 0
  
  let%span span45 = "../../../../creusot-contracts/src/std/mem.rs" 13 22 13 30
  
  let%span span46 = "../../../../creusot-contracts/src/std/mem.rs" 14 22 14 30
  
  let%span span47 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span48 = "" 0 0 0 0
  
  let%span span49 = "" 0 0 0 0
  
  let%span span50 = "" 0 0 0 0
  
  let%span span51 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span52 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span53 = "" 0 0 0 0
  
  predicate invariant'7 (self : v)
  
  predicate inv'11 (_1 : v)
  
  axiom inv'11 : forall x : v [inv'11 x] . inv'11 x  -> invariant'7 x
  
  predicate invariant'6 (self : k)
  
  predicate inv'10 (_1 : k)
  
  axiom inv'10 : forall x : k [inv'10 x] . inv'10 x  -> invariant'6 x
  
  use T_red_black_tree__Node as Node'0
  
  use T_core__option__Option as Option'0
  
  predicate inv'0 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'9 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'9 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'9 x] . inv'9 x
  = match x with
    | Tree'0.C_Tree node -> inv'0 node
    end
  
  use T_red_black_tree__Color as Color'0
  
  predicate inv'8 (_1 : Color'0.t_Color)
  
  axiom inv'8 [@rewrite] : forall x : Color'0.t_Color [inv'8 x] . inv'8 x = true
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span11] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span12] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span13] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span14] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span15] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span16] cmp_log'0 x y
  = o)  -> ([%#span17] cmp_log'0 y z = o)  -> ([%#span18] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span19] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span20] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span21] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span22] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span23] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate inv'7 (_1 : Node'0.t_Node k v)
  
  axiom inv'7 [@rewrite] : forall x : Node'0.t_Node k v [inv'7 x] . inv'7 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'9 left /\ inv'10 key /\ inv'11 val' /\ inv'9 right
    end
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'4 (self : Node'0.t_Node k v) =
    [%#span24] inv'7 self
  
  predicate inv'6 (_1 : Node'0.t_Node k v)
  
  axiom inv'6 [@rewrite] : forall x : Node'0.t_Node k v [inv'6 x] . inv'6 x = invariant'4 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed (Color'0.t_Color)) =
    [%#span25] inv'8 self.current /\ inv'8 self.final
  
  predicate inv'5 (_1 : borrowed (Color'0.t_Color))
  
  axiom inv'5 [@rewrite] : forall x : borrowed (Color'0.t_Color) [inv'5 x] . inv'5 x = true
  
  predicate inv'1 (_1 : borrowed (Node'0.t_Node k v))
  
  predicate inv'4 (_1 : Option'0.t_Option (borrowed (Node'0.t_Node k v)))
  
  axiom inv'4 [@rewrite] : forall x : Option'0.t_Option (borrowed (Node'0.t_Node k v)) [inv'4 x] . inv'4 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'1 a_0
    end
  
  predicate invariant'2 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span25] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v)))
  
  axiom inv'3 [@rewrite] : forall x : borrowed (Option'0.t_Option (Node'0.t_Node k v)) [inv'3 x] . inv'3 x
  = invariant'2 x
  
  predicate invariant'1 (self : borrowed (Node'0.t_Node k v)) =
    [%#span25] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'2 (_1 : borrowed (Node'0.t_Node k v))
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed (Node'0.t_Node k v)) =
    [%#span25] inv'6 self.current /\ inv'6 self.final
  
  axiom inv'1 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'1 x] . inv'1 x = invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'0 x] . inv'0 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'6 a_0
    end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span26] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'1 left k v
      \/ has_mapping'1 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 144 4 144 57] (self : Node'0.t_Node k v) (k : t_DeepModelTy'0) (v : v)
    
   =
    [%#span28] has_mapping'1 (T_red_black_tree__Node.t_Node__left self) k v
    \/ has_mapping'1 (T_red_black_tree__Node.t_Node__right self) k v
    \/ k = deep_model'0 (T_red_black_tree__Node.t_Node__key self) /\ v = T_red_black_tree__Node.t_Node__val self
  
  axiom has_mapping'0_spec : forall self : Node'0.t_Node k v, k : t_DeepModelTy'0, v : v . [%#span27] forall node : Node'0.t_Node k v . self
  = node  -> has_mapping'0 self k v = has_mapping'1 (Tree'0.C_Tree (Option'0.C_Some node)) k v
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 152 4 152 43] (self : Node'0.t_Node k v) (o : Node'0.t_Node k v) =
    [%#span29] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self k v = has_mapping'0 o k v
  
  use prelude.prelude.Int
  
  function height'1 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span31] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'1 left
        | Color'0.C_Black -> height'1 left + 1
        end
      end
  
  axiom height'1_spec : forall self : Tree'0.t_Tree k v . [%#span30] height'1 self >= 0
  
  function height'0 [#"../red_black_tree.rs" 332 4 332 26] (self : Node'0.t_Node k v) : int =
    [%#span33] match T_red_black_tree__Node.t_Node__color self with
      | Color'0.C_Red -> height'1 (T_red_black_tree__Node.t_Node__left self)
      | Color'0.C_Black -> height'1 (T_red_black_tree__Node.t_Node__left self) + 1
      end
  
  axiom height'0_spec : forall self : Node'0.t_Node k v . [%#span32] forall node : Node'0.t_Node k v . self = node
   -> height'0 self = height'1 (Tree'0.C_Tree (Option'0.C_Some node))
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span34] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span35] height'1 (T_red_black_tree__Node.t_Node__left self)
    = height'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span36] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'1 left /\ height_invariant'1 right
      end
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 347 4 347 37] (self : Node'0.t_Node k v) =
    [%#span37] height_invariant_here'0 self
    /\ height_invariant'1 (T_red_black_tree__Node.t_Node__left self)
    /\ height_invariant'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span38] (forall k : t_DeepModelTy'0, v : v . has_mapping'1 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'1 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span39] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'1 left /\ bst_invariant'1 right
      end
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 196 4 196 34] (self : Node'0.t_Node k v) =
    [%#span40] bst_invariant_here'0 self
    /\ bst_invariant'1 (T_red_black_tree__Node.t_Node__left self)
    /\ bst_invariant'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 376 4 376 39] (self : Node'0.t_Node k v) =
    [%#span41] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'5 (self : borrowed (Node'0.t_Node k v)) =
    [%#span42] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'5 _1
  
  predicate resolve'4 (self : borrowed (Color'0.t_Color)) =
    [%#span42] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Color'0.t_Color)) =
    resolve'4 _1
  
  let rec swap'0 (x:borrowed (Color'0.t_Color)) (y:borrowed (Color'0.t_Color)) (return'  (ret:()))= {[@expl:precondition] [%#span44] inv'5 y}
    {[@expl:precondition] [%#span43] inv'5 x}
    any
    [ return' (result:())-> {[%#span46] y.final = x.current} {[%#span45] x.final = y.current} (! return' {result}) ]
    
  
  predicate resolve'3 (self : borrowed (Node'0.t_Node k v)) =
    [%#span42] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'3 _1
  
  let rec unwrap'0 (self:Option'0.t_Option (borrowed (Node'0.t_Node k v))) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span48] inv'4 self}
    {[@expl:precondition] [%#span47] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span49] inv'1 result}
      {[%#span47] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (borrowed (Node'0.t_Node k v))))= {[@expl:precondition] [%#span50] inv'3 self}
    any
    [ return' (result:Option'0.t_Option (borrowed (Node'0.t_Node k v)))-> {[%#span53] inv'4 result}
      {[%#span52] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_Node k v) . result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span51] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec flip_colors (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[%#sred_black_tree4] inv'2 self}
    {[%#sred_black_tree3] color'0 (T_red_black_tree__Node.t_Node__left self.current)
    = color'0 (T_red_black_tree__Node.t_Node__right self.current)}
    {[%#sred_black_tree2] T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.current)
    <> Option'0.C_None}
    {[%#sred_black_tree1] T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
    <> Option'0.C_None}
    {[%#sred_black_tree0] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_final
                  <Option'0.t_Option (Node'0.t_Node k v)>
                  {rnode'0}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id self) 1) 1}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_15 <- _ret' ] 
                    Node'0.t_Node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_left'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node (Tree'0.C_Tree _15.final) l_color'0 l_key'0 l_val'0 l_right'0 ; } ]
                            
                            s1)))))
      | s1 = -{inv'0 _15.final}- s2
      | s2 = as_mut'0 {_15} (fun (_ret':Option'0.t_Option (borrowed (Node'0.t_Node k v))) ->  [ &_14 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = unwrap'0 {_14} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_13 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Node'0.t_Node <k> <v> {_13.current}
              (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                 [ &_13 <- { _13 with current = Node'0.C_Node l_left'0 rcolor'0 l_key'0 l_val'0 l_right'0 ; } ] 
                s1))
      | s1 = {[@expl:type invariant] inv'1 _13} s2
      | s2 = -{resolve'0 _13}- s3
      | s3 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'1:Tree'0.t_Tree k v) (rcolor'1:Color'0.t_Color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_Tree k v) ->
            Borrow.borrow_final <Color'0.t_Color> {rcolor'1} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed (Color'0.t_Color)) ->
                 [ &_18 <- _ret' ] 
                Node'0.t_Node <k> <v> {self.current}
                  (fun (l_left'1:Tree'0.t_Tree k v) (l_color'1:Color'0.t_Color) (l_key'1:k) (l_val'1:v) (l_right'1:Tree'0.t_Tree k v) ->
                     [ &self <- { self with current = Node'0.C_Node l_left'1 _18.final l_key'1 l_val'1 l_right'1 ; } ] 
                    s4)))
      | s4 = Borrow.borrow_final <Color'0.t_Color> {_18.current} {Borrow.get_id _18}
          (fun (_ret':borrowed (Color'0.t_Color)) ->
             [ &_17 <- _ret' ] 
             [ &_18 <- { _18 with current = _17.final ; } ] 
            s5)
      | s5 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'2:Tree'0.t_Tree k v) (rcolor'2:Color'0.t_Color) (rkey'2:k) (rval'2:v) (rright'2:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rright'2}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_final
                  <Option'0.t_Option (Node'0.t_Node k v)>
                  {rnode'0}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id self) 5) 1}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_23 <- _ret' ] 
                    Node'0.t_Node <k> <v> {self.current}
                      (fun (l_left'2:Tree'0.t_Tree k v) (l_color'2:Color'0.t_Color) (l_key'2:k) (l_val'2:v) (l_right'2:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_right'2}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node l_left'2 l_color'2 l_key'2 l_val'2 (Tree'0.C_Tree _23.final) ; } ]
                            
                            s6)))))
      | s6 = -{inv'0 _23.final}- s7
      | s7 = as_mut'0 {_23} (fun (_ret':Option'0.t_Option (borrowed (Node'0.t_Node k v))) ->  [ &_22 <- _ret' ] s8)
      | s8 = bb3 ]
      
    | bb3 = s0 [ s0 = unwrap'0 {_22} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_21 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = Node'0.t_Node <k> <v> {_21.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_final <Color'0.t_Color> {rcolor'0} {Borrow.inherit_id (Borrow.get_id _21) 2}
              (fun (_ret':borrowed (Color'0.t_Color)) ->
                 [ &_20 <- _ret' ] 
                Node'0.t_Node <k> <v> {_21.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                     [ &_21 <- { _21 with current = Node'0.C_Node l_left'0 _20.final l_key'0 l_val'0 l_right'0 ; } ] 
                    s1)))
      | s1 = Borrow.borrow_final <Color'0.t_Color> {_20.current} {Borrow.get_id _20}
          (fun (_ret':borrowed (Color'0.t_Color)) ->
             [ &_19 <- _ret' ] 
             [ &_20 <- { _20 with current = _19.final ; } ] 
            s2)
      | s2 = swap'0 {_17} {_19} (fun (_ret':()) ->  [ &_16 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'1 _21} s1
      | s1 = -{resolve'0 _21}- s2
      | s2 = -{resolve'1 _20}- s3
      | s3 = -{resolve'1 _18}- s4
      | s4 = {[@expl:type invariant] inv'2 self} s5
      | s5 = -{resolve'2 self}- s6
      | s6 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Node'0.t_Node k v) = self
    | & _13 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _14 : Option'0.t_Option (borrowed (Node'0.t_Node k v)) = any_l ()
    | & _15 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _16 : () = any_l ()
    | & _17 : borrowed (Color'0.t_Color) = any_l ()
    | & _18 : borrowed (Color'0.t_Color) = any_l ()
    | & _19 : borrowed (Color'0.t_Color) = any_l ()
    | & _20 : borrowed (Color'0.t_Color) = any_l ()
    | & _21 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _22 : Option'0.t_Option (borrowed (Node'0.t_Node k v)) = any_l ()
    | & _23 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sred_black_tree10] exists r1 : Node'0.t_Node k v, r2 : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.current)
      = Option'0.C_Some r1
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.final) = Option'0.C_Some r2
      /\ T_red_black_tree__Node.t_Node__left r1 = T_red_black_tree__Node.t_Node__left r2
      /\ T_red_black_tree__Node.t_Node__right r1 = T_red_black_tree__Node.t_Node__right r2
      /\ T_red_black_tree__Node.t_Node__key r1 = T_red_black_tree__Node.t_Node__key r2
      /\ T_red_black_tree__Node.t_Node__color self.current = T_red_black_tree__Node.t_Node__color r2
      /\ T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color r1
      /\ T_red_black_tree__Node.t_Node__key r1 = T_red_black_tree__Node.t_Node__key r2}
      {[@expl:postcondition] [%#sred_black_tree9] exists l1 : Node'0.t_Node k v, l2 : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
      = Option'0.C_Some l1
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.final) = Option'0.C_Some l2
      /\ T_red_black_tree__Node.t_Node__left l1 = T_red_black_tree__Node.t_Node__left l2
      /\ T_red_black_tree__Node.t_Node__right l1 = T_red_black_tree__Node.t_Node__right l2
      /\ T_red_black_tree__Node.t_Node__key l1 = T_red_black_tree__Node.t_Node__key l2
      /\ T_red_black_tree__Node.t_Node__color self.current = T_red_black_tree__Node.t_Node__color l2
      /\ T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color l1}
      {[@expl:postcondition] [%#sred_black_tree8] T_red_black_tree__Node.t_Node__key self.current
      = T_red_black_tree__Node.t_Node__key self.final}
      {[@expl:postcondition] [%#sred_black_tree7] same_mappings'0 self.current self.final}
      {[@expl:postcondition] [%#sred_black_tree6] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] internal_invariant'0 self.final}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi50474196543815120__balance
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 490 15 490 43
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 491 4 492 47
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 493 4 494 48
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 495 4 495 110
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 509 20 509 24
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 496 14 496 42
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 497 14 497 42
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 498 14 498 50
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 499 4 500 34
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 501 4 502 39
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 503 4 504 63
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 505 4 506 61
  
  let%span sred_black_tree12 = "../red_black_tree.rs" 507 4 508 39
  
  let%span span13 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span14 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span28 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span29 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span30 = "../red_black_tree.rs" 286 20 286 102
  
  let%span span31 = "../red_black_tree.rs" 272 12 278 13
  
  let%span span32 = "../red_black_tree.rs" 238 12 243 13
  
  let%span span33 = "../red_black_tree.rs" 291 8 291 112
  
  let%span span34 = "../red_black_tree.rs" 250 12 253 13
  
  let%span span35 = "../red_black_tree.rs" 231 16 231 48
  
  let%span span36 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span37 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span38 = "../red_black_tree.rs" 330 4 331 77
  
  let%span span39 = "../red_black_tree.rs" 334 12 337 13
  
  let%span span40 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span41 = "../red_black_tree.rs" 142 4 143 86
  
  let%span span42 = "../red_black_tree.rs" 145 8 148 9
  
  let%span span43 = "../red_black_tree.rs" 153 8 155 9
  
  let%span span44 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span45 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span46 = "../red_black_tree.rs" 348 8 348 115
  
  let%span span47 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span48 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span49 = "../red_black_tree.rs" 197 8 199 9
  
  let%span span50 = "../red_black_tree.rs" 378 12 378 59
  
  let%span span51 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span52 = "../red_black_tree.rs" 471 15 471 43
  
  let%span span53 = "../red_black_tree.rs" 472 15 472 40
  
  let%span span54 = "../red_black_tree.rs" 473 15 473 41
  
  let%span span55 = "../red_black_tree.rs" 474 15 474 60
  
  let%span span56 = "../red_black_tree.rs" 485 24 485 28
  
  let%span span57 = "../red_black_tree.rs" 475 14 475 42
  
  let%span span58 = "../red_black_tree.rs" 476 14 476 50
  
  let%span span59 = "../red_black_tree.rs" 477 14 477 42
  
  let%span span60 = "../red_black_tree.rs" 478 14 478 40
  
  let%span span61 = "../red_black_tree.rs" 479 4 481 70
  
  let%span span62 = "../red_black_tree.rs" 482 4 484 90
  
  let%span span63 = "../red_black_tree.rs" 399 15 399 43
  
  let%span span64 = "../red_black_tree.rs" 400 15 400 42
  
  let%span span65 = "../red_black_tree.rs" 411 25 411 29
  
  let%span span66 = "../red_black_tree.rs" 401 14 401 42
  
  let%span span67 = "../red_black_tree.rs" 402 14 402 42
  
  let%span span68 = "../red_black_tree.rs" 403 14 403 50
  
  let%span span69 = "../red_black_tree.rs" 404 14 404 65
  
  let%span span70 = "../red_black_tree.rs" 405 14 405 42
  
  let%span span71 = "../red_black_tree.rs" 406 14 406 44
  
  let%span span72 = "../red_black_tree.rs" 407 4 410 36
  
  let%span span73 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span74 = "" 0 0 0 0
  
  let%span span75 = "" 0 0 0 0
  
  let%span span76 = "" 0 0 0 0
  
  let%span span77 = "../../../../creusot-contracts/src/std/option.rs" 66 16 66 60
  
  let%span span78 = "../../../../creusot-contracts/src/std/option.rs" 67 16 69 18
  
  let%span span79 = "" 0 0 0 0
  
  let%span span80 = "../red_black_tree.rs" 449 15 449 43
  
  let%span span81 = "../red_black_tree.rs" 450 15 450 43
  
  let%span span82 = "../red_black_tree.rs" 461 24 461 28
  
  let%span span83 = "../red_black_tree.rs" 451 14 451 42
  
  let%span span84 = "../red_black_tree.rs" 452 14 452 42
  
  let%span span85 = "../red_black_tree.rs" 453 14 453 50
  
  let%span span86 = "../red_black_tree.rs" 454 14 454 65
  
  let%span span87 = "../red_black_tree.rs" 455 14 455 41
  
  let%span span88 = "../red_black_tree.rs" 456 14 456 44
  
  let%span span89 = "../red_black_tree.rs" 457 4 460 36
  
  let%span span90 = "../red_black_tree.rs" 387 15 387 19
  
  let%span span91 = "../red_black_tree.rs" 386 14 386 45
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'0 (_1 : Node'0.t_Node k v)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'6 (self : Node'0.t_Node k v) =
    [%#span13] inv'0 self
  
  predicate inv'10 (_1 : Node'0.t_Node k v)
  
  axiom inv'10 [@rewrite] : forall x : Node'0.t_Node k v [inv'10 x] . inv'10 x = invariant'6 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'9 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'9 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'9 x] . inv'9 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'10 a_0
    end
  
  predicate invariant'5 (self : v)
  
  predicate inv'8 (_1 : v)
  
  axiom inv'8 : forall x : v [inv'8 x] . inv'8 x  -> invariant'5 x
  
  predicate invariant'4 (self : k)
  
  predicate inv'7 (_1 : k)
  
  axiom inv'7 : forall x : k [inv'7 x] . inv'7 x  -> invariant'4 x
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'6 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'6 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'6 x] . inv'6 x
  = match x with
    | Tree'0.C_Tree node -> inv'9 node
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : Node'0.t_Node k v) =
    [%#span14] inv'10 self
  
  predicate inv'5 (_1 : Node'0.t_Node k v)
  
  axiom inv'5 [@rewrite] : forall x : Node'0.t_Node k v [inv'5 x] . inv'5 x = invariant'3 x
  
  predicate inv'4 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'4 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'4 x] . inv'4 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'5 a_0
    end
  
  predicate invariant'2 (self : Option'0.t_Option (Node'0.t_Node k v)) =
    [%#span14] inv'9 self
  
  predicate inv'3 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'3 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'3 x] . inv'3 x = invariant'2 x
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span15] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span16] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span17] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span18] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span19] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span20] cmp_log'0 x y
  = o)  -> ([%#span21] cmp_log'0 y z = o)  -> ([%#span22] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span23] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span24] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span25] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span26] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span27] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate invariant'1 (self : Tree'0.t_Tree k v) =
    [%#span14] inv'6 self
  
  predicate inv'2 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'2 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed (Node'0.t_Node k v)) =
    [%#span28] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Node'0.t_Node k v))
  
  axiom inv'1 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'1 x] . inv'1 x = invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Node'0.t_Node k v [inv'0 x] . inv'0 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'6 left /\ inv'7 key /\ inv'8 val' /\ inv'6 right
    end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  use T_red_black_tree__Color as Color'0
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span29] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 285 4 285 41] (self : Node'0.t_Node k v) =
    [%#span30] color'0 (T_red_black_tree__Node.t_Node__right self) = Color'0.C_Black
    /\ (T_red_black_tree__Node.t_Node__color self = Color'0.C_Black
    \/ color'0 (T_red_black_tree__Node.t_Node__left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 270 4 270 36] (self : Tree'0.t_Tree k v) =
    [%#span31] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use T_red_black_tree__CP as CP'0
  
  predicate match_t'0 [#"../red_black_tree.rs" 236 4 236 52] (self : CP'0.t_CP) (tree : Tree'0.t_Tree k v) =
    [%#span32] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node tree
      = Option'0.C_Some node
      /\ T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  predicate color_invariant'1 [#"../red_black_tree.rs" 290 4 290 36] (self : Node'0.t_Node k v) =
    [%#span33] color_invariant_here'0 self
    /\ color_invariant'0 (T_red_black_tree__Node.t_Node__left self)
    /\ color_invariant'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate match_n'0 [#"../red_black_tree.rs" 248 4 248 52] (self : CP'0.t_CP) (node : Node'0.t_Node k v) =
    [%#span34] match self with
      | CP'0.C_CPL color -> T_red_black_tree__Node.t_Node__color node = color /\ color_invariant'1 node
      | CP'0.C_CPN color l r -> T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  function cpn'0 [#"../red_black_tree.rs" 230 0 230 36] (c : Color'0.t_Color) (l : CP'0.t_CP) (r : CP'0.t_CP) : CP'0.t_CP
    
   =
    [%#span35] CP'0.C_CPN c l r
  
  use prelude.prelude.Int
  
  function height'1 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span37] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'1 left
        | Color'0.C_Black -> height'1 left + 1
        end
      end
  
  axiom height'1_spec : forall self : Tree'0.t_Tree k v . [%#span36] height'1 self >= 0
  
  function height'0 [#"../red_black_tree.rs" 332 4 332 26] (self : Node'0.t_Node k v) : int =
    [%#span39] match T_red_black_tree__Node.t_Node__color self with
      | Color'0.C_Red -> height'1 (T_red_black_tree__Node.t_Node__left self)
      | Color'0.C_Black -> height'1 (T_red_black_tree__Node.t_Node__left self) + 1
      end
  
  axiom height'0_spec : forall self : Node'0.t_Node k v . [%#span38] forall node : Node'0.t_Node k v . self = node
   -> height'0 self = height'1 (Tree'0.C_Tree (Option'0.C_Some node))
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span40] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'1 left k v
      \/ has_mapping'1 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 144 4 144 57] (self : Node'0.t_Node k v) (k : t_DeepModelTy'0) (v : v)
    
   =
    [%#span42] has_mapping'1 (T_red_black_tree__Node.t_Node__left self) k v
    \/ has_mapping'1 (T_red_black_tree__Node.t_Node__right self) k v
    \/ k = deep_model'0 (T_red_black_tree__Node.t_Node__key self) /\ v = T_red_black_tree__Node.t_Node__val self
  
  axiom has_mapping'0_spec : forall self : Node'0.t_Node k v, k : t_DeepModelTy'0, v : v . [%#span41] forall node : Node'0.t_Node k v . self
  = node  -> has_mapping'0 self k v = has_mapping'1 (Tree'0.C_Tree (Option'0.C_Some node)) k v
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 152 4 152 43] (self : Node'0.t_Node k v) (o : Node'0.t_Node k v) =
    [%#span43] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self k v = has_mapping'0 o k v
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span44] height'1 (T_red_black_tree__Node.t_Node__left self)
    = height'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span45] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'1 left /\ height_invariant'1 right
      end
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 347 4 347 37] (self : Node'0.t_Node k v) =
    [%#span46] height_invariant_here'0 self
    /\ height_invariant'1 (T_red_black_tree__Node.t_Node__left self)
    /\ height_invariant'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span47] (forall k : t_DeepModelTy'0, v : v . has_mapping'1 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'1 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span48] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'1 left /\ bst_invariant'1 right
      end
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 196 4 196 34] (self : Node'0.t_Node k v) =
    [%#span49] bst_invariant_here'0 self
    /\ bst_invariant'1 (T_red_black_tree__Node.t_Node__left self)
    /\ bst_invariant'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 376 4 376 39] (self : Node'0.t_Node k v) =
    [%#span50] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Node'0.t_Node k v)) =
    [%#span51] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'1 _1
  
  let rec flip_colors'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span56] inv'1 self}
    {[@expl:precondition] [%#span55] color'0 (T_red_black_tree__Node.t_Node__left self.current)
    = color'0 (T_red_black_tree__Node.t_Node__right self.current)}
    {[@expl:precondition] [%#span54] T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.current)
    <> Option'0.C_None}
    {[@expl:precondition] [%#span53] T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
    <> Option'0.C_None}
    {[@expl:precondition] [%#span52] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span62] exists r1 : Node'0.t_Node k v, r2 : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.current)
      = Option'0.C_Some r1
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.final) = Option'0.C_Some r2
      /\ T_red_black_tree__Node.t_Node__left r1 = T_red_black_tree__Node.t_Node__left r2
      /\ T_red_black_tree__Node.t_Node__right r1 = T_red_black_tree__Node.t_Node__right r2
      /\ T_red_black_tree__Node.t_Node__key r1 = T_red_black_tree__Node.t_Node__key r2
      /\ T_red_black_tree__Node.t_Node__color self.current = T_red_black_tree__Node.t_Node__color r2
      /\ T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color r1
      /\ T_red_black_tree__Node.t_Node__key r1 = T_red_black_tree__Node.t_Node__key r2}
      {[%#span61] exists l1 : Node'0.t_Node k v, l2 : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
      = Option'0.C_Some l1
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.final) = Option'0.C_Some l2
      /\ T_red_black_tree__Node.t_Node__left l1 = T_red_black_tree__Node.t_Node__left l2
      /\ T_red_black_tree__Node.t_Node__right l1 = T_red_black_tree__Node.t_Node__right l2
      /\ T_red_black_tree__Node.t_Node__key l1 = T_red_black_tree__Node.t_Node__key l2
      /\ T_red_black_tree__Node.t_Node__color self.current = T_red_black_tree__Node.t_Node__color l2
      /\ T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color l1}
      {[%#span60] T_red_black_tree__Node.t_Node__key self.current = T_red_black_tree__Node.t_Node__key self.final}
      {[%#span59] same_mappings'0 self.current self.final}
      {[%#span58] height'0 self.current = height'0 self.final}
      {[%#span57] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  let rec rotate_right'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span65] inv'1 self}
    {[@expl:precondition] [%#span64] color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red}
    {[@expl:precondition] [%#span63] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span72] exists l : Node'0.t_Node k v, r : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
      = Option'0.C_Some l
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.final) = Option'0.C_Some r
      /\ (T_red_black_tree__Node.t_Node__left self.final, T_red_black_tree__Node.t_Node__left r, T_red_black_tree__Node.t_Node__right r)
      = (T_red_black_tree__Node.t_Node__left l, T_red_black_tree__Node.t_Node__right l, T_red_black_tree__Node.t_Node__right self.current)
      /\ T_red_black_tree__Node.t_Node__key r = T_red_black_tree__Node.t_Node__key self.current}
      {[%#span71] T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color self.current}
      {[%#span70] color'0 (T_red_black_tree__Node.t_Node__right self.final) = Color'0.C_Red}
      {[%#span69] lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self.final)) (deep_model'0 (T_red_black_tree__Node.t_Node__key self.current))}
      {[%#span68] height'0 self.current = height'0 self.final}
      {[%#span67] internal_invariant'0 self.final}
      {[%#span66] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  let rec unwrap'0 (self:Option'0.t_Option (Node'0.t_Node k v)) (return'  (ret:Node'0.t_Node k v))= {[@expl:precondition] [%#span74] inv'4 self}
    {[@expl:precondition] [%#span73] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_Node k v)-> {[%#span75] inv'5 result}
      {[%#span73] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_ref'0 (self:Option'0.t_Option (Node'0.t_Node k v)) (return'  (ret:Option'0.t_Option (Node'0.t_Node k v)))= {[@expl:precondition] [%#span76] inv'3 self}
    any
    [ return' (result:Option'0.t_Option (Node'0.t_Node k v))-> {[%#span79] inv'4 result}
      {[%#span78] self = Option'0.C_None
      \/ (exists r : Node'0.t_Node k v . result = Option'0.C_Some r /\ self = Option'0.C_Some r)}
      {[%#span77] self = Option'0.C_None  -> result = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec rotate_left'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span82] inv'1 self}
    {[@expl:precondition] [%#span81] color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Red}
    {[@expl:precondition] [%#span80] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span89] exists l : Node'0.t_Node k v, r : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.current)
      = Option'0.C_Some r
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.final) = Option'0.C_Some l
      /\ (T_red_black_tree__Node.t_Node__left l, T_red_black_tree__Node.t_Node__right l, T_red_black_tree__Node.t_Node__right self.final)
      = (T_red_black_tree__Node.t_Node__left self.current, T_red_black_tree__Node.t_Node__left r, T_red_black_tree__Node.t_Node__right r)
      /\ T_red_black_tree__Node.t_Node__key l = T_red_black_tree__Node.t_Node__key self.current}
      {[%#span88] T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color self.current}
      {[%#span87] color'0 (T_red_black_tree__Node.t_Node__left self.final) = Color'0.C_Red}
      {[%#span86] lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self.current)) (deep_model'0 (T_red_black_tree__Node.t_Node__key self.final))}
      {[%#span85] height'0 self.current = height'0 self.final}
      {[%#span84] internal_invariant'0 self.final}
      {[%#span83] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  let rec is_red'0 (self:Tree'0.t_Tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span90] inv'2 self}
    any [ return' (result:bool)-> {[%#span91] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  let rec balance (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[%#sred_black_tree4] inv'1 self}
    {[%#sred_black_tree3] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red  -> false}
    {[%#sred_black_tree2] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Red
     -> color_invariant'0 (T_red_black_tree__Node.t_Node__right self.current)}
    {[%#sred_black_tree1] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red
     -> color_invariant'0 (T_red_black_tree__Node.t_Node__left self.current)}
    {[%#sred_black_tree0] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rright'0} (fun (_ret':bool) ->  [ &_15 <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = any [ br0 -> {_15 = false} (! bb7) | br1 -> {_15} (! bb2) ] 
    | bb2 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s1))
      | s1 = bb3 ]
      
    | bb3 = any [ br0 -> {_17 = false} (! bb5) | br1 -> {_17} (! bb4) ] 
    | bb4 = bb8
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_Node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_20 <- _ret' ] 
             [ &self <- { self with current = _20.final ; } ] 
            s1)
      | s1 = -{inv'0 _20.final}- s2
      | s2 = rotate_left'0 {_20} (fun (_ret':()) ->  [ &_19 <- _ret' ] s3)
      | s3 = bb6 ]
      
    | bb6 = bb9
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_22 <- _ret' ] s1))
      | s1 = bb10 ]
      
    | bb10 = any [ br0 -> {_22 = false} (! bb18) | br1 -> {_22} (! bb11) ] 
    | bb11 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                as_ref'0 {rnode'0} (fun (_ret':Option'0.t_Option (Node'0.t_Node k v)) ->  [ &_27 <- _ret' ] s1)))
      | s1 = bb12 ]
      
    | bb12 = s0 [ s0 = unwrap'0 {_27} (fun (_ret':Node'0.t_Node k v) ->  [ &_26 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = s0
      [ s0 = Node'0.t_Node <k> <v> {_26}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_24 <- _ret' ] s1))
      | s1 = bb14 ]
      
    | bb14 = any [ br0 -> {_24 = false} (! bb17) | br1 -> {_24} (! bb15) ] 
    | bb15 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_Node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_30 <- _ret' ] 
             [ &self <- { self with current = _30.final ; } ] 
            s1)
      | s1 = -{inv'0 _30.final}- s2
      | s2 = rotate_right'0 {_30} (fun (_ret':()) ->  [ &_29 <- _ret' ] s3)
      | s3 = bb16 ]
      
    | bb16 = bb20
    | bb17 = bb19
    | bb18 = bb19
    | bb19 = bb20
    | bb20 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_31 <- _ret' ] s1))
      | s1 = bb21 ]
      
    | bb21 = any [ br0 -> {_31 = false} (! bb27) | br1 -> {_31} (! bb22) ] 
    | bb22 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rright'0} (fun (_ret':bool) ->  [ &_33 <- _ret' ] s1))
      | s1 = bb23 ]
      
    | bb23 = any [ br0 -> {_33 = false} (! bb26) | br1 -> {_33} (! bb24) ] 
    | bb24 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {self.current} {Borrow.get_id self}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_36 <- _ret' ] 
             [ &self <- { self with current = _36.final ; } ] 
            s1)
      | s1 = -{inv'0 _36.final}- s2
      | s2 = flip_colors'0 {_36} (fun (_ret':()) ->  [ &_35 <- _ret' ] s3)
      | s3 = bb25 ]
      
    | bb25 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb29 ] 
    | bb26 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb28 ] 
    | bb27 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb28 ] 
    | bb28 = bb29
    | bb29 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Node'0.t_Node k v) = self
    | & _15 : bool = any_l ()
    | & _17 : bool = any_l ()
    | & _19 : () = any_l ()
    | & _20 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _22 : bool = any_l ()
    | & _24 : bool = any_l ()
    | & _26 : Node'0.t_Node k v = any_l ()
    | & _27 : Option'0.t_Option (Node'0.t_Node k v) = any_l ()
    | & _29 : () = any_l ()
    | & _30 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _31 : bool = any_l ()
    | & _33 : bool = any_l ()
    | & _35 : () = any_l ()
    | & _36 : borrowed (Node'0.t_Node k v) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sred_black_tree12] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[@expl:postcondition] [%#sred_black_tree11] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[@expl:postcondition] [%#sred_black_tree10] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[@expl:postcondition] [%#sred_black_tree9] match_n'0 (cpn'0 (Color'0.C_Black) (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[@expl:postcondition] [%#sred_black_tree8] color_invariant'0 (T_red_black_tree__Node.t_Node__left self.current)
      /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Black  -> self.current = self.final}
      {[@expl:postcondition] [%#sred_black_tree7] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree6] internal_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi50474196543815120__move_red_left
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 523 15 523 41
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 524 15 524 43
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 525 15 525 86
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 541 26 541 30
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 526 14 526 44
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 527 4 529 48
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 530 4 530 97
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 531 14 531 42
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 532 4 532 105
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 533 4 534 47
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 535 4 536 108
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 537 14 538 61
  
  let%span sred_black_tree12 = "../red_black_tree.rs" 539 4 540 45
  
  let%span sred_black_tree13 = "../red_black_tree.rs" 541 35 541 44
  
  let%span span14 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span15 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span16 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span30 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span31 = "../red_black_tree.rs" 286 20 286 102
  
  let%span span32 = "../red_black_tree.rs" 272 12 278 13
  
  let%span span33 = "../red_black_tree.rs" 291 8 291 112
  
  let%span span34 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span35 = "../red_black_tree.rs" 142 4 143 86
  
  let%span span36 = "../red_black_tree.rs" 145 8 148 9
  
  let%span span37 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span38 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span39 = "../red_black_tree.rs" 330 4 331 77
  
  let%span span40 = "../red_black_tree.rs" 334 12 337 13
  
  let%span span41 = "../red_black_tree.rs" 238 12 243 13
  
  let%span span42 = "../red_black_tree.rs" 250 12 253 13
  
  let%span span43 = "../red_black_tree.rs" 231 16 231 48
  
  let%span span44 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span45 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span46 = "../red_black_tree.rs" 348 8 348 115
  
  let%span span47 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span48 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span49 = "../red_black_tree.rs" 197 8 199 9
  
  let%span span50 = "../red_black_tree.rs" 378 12 378 59
  
  let%span span51 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span52 = "../red_black_tree.rs" 153 8 155 9
  
  let%span span53 = "../red_black_tree.rs" 449 15 449 43
  
  let%span span54 = "../red_black_tree.rs" 450 15 450 43
  
  let%span span55 = "../red_black_tree.rs" 461 24 461 28
  
  let%span span56 = "../red_black_tree.rs" 451 14 451 42
  
  let%span span57 = "../red_black_tree.rs" 452 14 452 42
  
  let%span span58 = "../red_black_tree.rs" 453 14 453 50
  
  let%span span59 = "../red_black_tree.rs" 454 14 454 65
  
  let%span span60 = "../red_black_tree.rs" 455 14 455 41
  
  let%span span61 = "../red_black_tree.rs" 456 14 456 44
  
  let%span span62 = "../red_black_tree.rs" 457 4 460 36
  
  let%span span63 = "../red_black_tree.rs" 399 15 399 43
  
  let%span span64 = "../red_black_tree.rs" 400 15 400 42
  
  let%span span65 = "../red_black_tree.rs" 411 25 411 29
  
  let%span span66 = "../red_black_tree.rs" 401 14 401 42
  
  let%span span67 = "../red_black_tree.rs" 402 14 402 42
  
  let%span span68 = "../red_black_tree.rs" 403 14 403 50
  
  let%span span69 = "../red_black_tree.rs" 404 14 404 65
  
  let%span span70 = "../red_black_tree.rs" 405 14 405 42
  
  let%span span71 = "../red_black_tree.rs" 406 14 406 44
  
  let%span span72 = "../red_black_tree.rs" 407 4 410 36
  
  let%span span73 = "../red_black_tree.rs" 387 15 387 19
  
  let%span span74 = "../red_black_tree.rs" 386 14 386 45
  
  let%span span75 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span76 = "" 0 0 0 0
  
  let%span span77 = "" 0 0 0 0
  
  let%span span78 = "" 0 0 0 0
  
  let%span span79 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span80 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span81 = "" 0 0 0 0
  
  let%span span82 = "../red_black_tree.rs" 471 15 471 43
  
  let%span span83 = "../red_black_tree.rs" 472 15 472 40
  
  let%span span84 = "../red_black_tree.rs" 473 15 473 41
  
  let%span span85 = "../red_black_tree.rs" 474 15 474 60
  
  let%span span86 = "../red_black_tree.rs" 485 24 485 28
  
  let%span span87 = "../red_black_tree.rs" 475 14 475 42
  
  let%span span88 = "../red_black_tree.rs" 476 14 476 50
  
  let%span span89 = "../red_black_tree.rs" 477 14 477 42
  
  let%span span90 = "../red_black_tree.rs" 478 14 478 40
  
  let%span span91 = "../red_black_tree.rs" 479 4 481 70
  
  let%span span92 = "../red_black_tree.rs" 482 4 484 90
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'0 (_1 : Node'0.t_Node k v)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'6 (self : Node'0.t_Node k v) =
    [%#span14] inv'0 self
  
  predicate inv'10 (_1 : Node'0.t_Node k v)
  
  axiom inv'10 [@rewrite] : forall x : Node'0.t_Node k v [inv'10 x] . inv'10 x = invariant'6 x
  
  predicate invariant'5 (self : v)
  
  predicate inv'9 (_1 : v)
  
  axiom inv'9 : forall x : v [inv'9 x] . inv'9 x  -> invariant'5 x
  
  predicate invariant'4 (self : k)
  
  predicate inv'8 (_1 : k)
  
  axiom inv'8 : forall x : k [inv'8 x] . inv'8 x  -> invariant'4 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'1 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'7 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'7 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'7 x] . inv'7 x
  = match x with
    | Tree'0.C_Tree node -> inv'1 node
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : Tree'0.t_Tree k v) =
    [%#span15] inv'7 self
  
  predicate inv'6 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'6 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'6 x] . inv'6 x = invariant'3 x
  
  predicate inv'2 (_1 : borrowed (Node'0.t_Node k v))
  
  predicate inv'5 (_1 : Option'0.t_Option (borrowed (Node'0.t_Node k v)))
  
  axiom inv'5 [@rewrite] : forall x : Option'0.t_Option (borrowed (Node'0.t_Node k v)) [inv'5 x] . inv'5 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'2 a_0
    end
  
  predicate invariant'2 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span16] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'4 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v)))
  
  axiom inv'4 [@rewrite] : forall x : borrowed (Option'0.t_Option (Node'0.t_Node k v)) [inv'4 x] . inv'4 x
  = invariant'2 x
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span17] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span18] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span19] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span20] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span21] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span22] cmp_log'0 x y
  = o)  -> ([%#span23] cmp_log'0 y z = o)  -> ([%#span24] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span25] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span26] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span27] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span28] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span29] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate invariant'1 (self : borrowed (Node'0.t_Node k v)) =
    [%#span16] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed (Node'0.t_Node k v))
  
  axiom inv'3 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed (Node'0.t_Node k v)) =
    [%#span16] inv'10 self.current /\ inv'10 self.final
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'2 x] . inv'2 x = invariant'0 x
  
  axiom inv'1 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'1 x] . inv'1 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'10 a_0
    end
  
  axiom inv'0 [@rewrite] : forall x : Node'0.t_Node k v [inv'0 x] . inv'0 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'7 left /\ inv'8 key /\ inv'9 val' /\ inv'7 right
    end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  use T_red_black_tree__Color as Color'0
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span30] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 285 4 285 41] (self : Node'0.t_Node k v) =
    [%#span31] color'0 (T_red_black_tree__Node.t_Node__right self) = Color'0.C_Black
    /\ (T_red_black_tree__Node.t_Node__color self = Color'0.C_Black
    \/ color'0 (T_red_black_tree__Node.t_Node__left self) = Color'0.C_Black)
  
  predicate color_invariant'1 [#"../red_black_tree.rs" 270 4 270 36] (self : Tree'0.t_Tree k v) =
    [%#span32] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'1 left /\ color_invariant'1 right
      end
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 290 4 290 36] (self : Node'0.t_Node k v) =
    [%#span33] color_invariant_here'0 self
    /\ color_invariant'1 (T_red_black_tree__Node.t_Node__left self)
    /\ color_invariant'1 (T_red_black_tree__Node.t_Node__right self)
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span34] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'1 left k v
      \/ has_mapping'1 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 144 4 144 57] (self : Node'0.t_Node k v) (k : t_DeepModelTy'0) (v : v)
    
   =
    [%#span36] has_mapping'1 (T_red_black_tree__Node.t_Node__left self) k v
    \/ has_mapping'1 (T_red_black_tree__Node.t_Node__right self) k v
    \/ k = deep_model'0 (T_red_black_tree__Node.t_Node__key self) /\ v = T_red_black_tree__Node.t_Node__val self
  
  axiom has_mapping'0_spec : forall self : Node'0.t_Node k v, k : t_DeepModelTy'0, v : v . [%#span35] forall node : Node'0.t_Node k v . self
  = node  -> has_mapping'0 self k v = has_mapping'1 (Tree'0.C_Tree (Option'0.C_Some node)) k v
  
  use prelude.prelude.Int
  
  function height'1 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span38] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'1 left
        | Color'0.C_Black -> height'1 left + 1
        end
      end
  
  axiom height'1_spec : forall self : Tree'0.t_Tree k v . [%#span37] height'1 self >= 0
  
  function height'0 [#"../red_black_tree.rs" 332 4 332 26] (self : Node'0.t_Node k v) : int =
    [%#span40] match T_red_black_tree__Node.t_Node__color self with
      | Color'0.C_Red -> height'1 (T_red_black_tree__Node.t_Node__left self)
      | Color'0.C_Black -> height'1 (T_red_black_tree__Node.t_Node__left self) + 1
      end
  
  axiom height'0_spec : forall self : Node'0.t_Node k v . [%#span39] forall node : Node'0.t_Node k v . self = node
   -> height'0 self = height'1 (Tree'0.C_Tree (Option'0.C_Some node))
  
  use T_red_black_tree__CP as CP'0
  
  predicate match_t'0 [#"../red_black_tree.rs" 236 4 236 52] (self : CP'0.t_CP) (tree : Tree'0.t_Tree k v) =
    [%#span41] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'1 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node tree
      = Option'0.C_Some node
      /\ T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  predicate match_n'0 [#"../red_black_tree.rs" 248 4 248 52] (self : CP'0.t_CP) (node : Node'0.t_Node k v) =
    [%#span42] match self with
      | CP'0.C_CPL color -> T_red_black_tree__Node.t_Node__color node = color /\ color_invariant'0 node
      | CP'0.C_CPN color l r -> T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  function cpn'0 [#"../red_black_tree.rs" 230 0 230 36] (c : Color'0.t_Color) (l : CP'0.t_CP) (r : CP'0.t_CP) : CP'0.t_CP
    
   =
    [%#span43] CP'0.C_CPN c l r
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span44] height'1 (T_red_black_tree__Node.t_Node__left self)
    = height'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span45] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'1 left /\ height_invariant'1 right
      end
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 347 4 347 37] (self : Node'0.t_Node k v) =
    [%#span46] height_invariant_here'0 self
    /\ height_invariant'1 (T_red_black_tree__Node.t_Node__left self)
    /\ height_invariant'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span47] (forall k : t_DeepModelTy'0, v : v . has_mapping'1 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'1 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span48] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'1 left /\ bst_invariant'1 right
      end
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 196 4 196 34] (self : Node'0.t_Node k v) =
    [%#span49] bst_invariant_here'0 self
    /\ bst_invariant'1 (T_red_black_tree__Node.t_Node__left self)
    /\ bst_invariant'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 376 4 376 39] (self : Node'0.t_Node k v) =
    [%#span50] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (Node'0.t_Node k v)) =
    [%#span51] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'3 _1
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 152 4 152 43] (self : Node'0.t_Node k v) (o : Node'0.t_Node k v) =
    [%#span52] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self k v = has_mapping'0 o k v
  
  let rec rotate_left'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span55] inv'3 self}
    {[@expl:precondition] [%#span54] color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Red}
    {[@expl:precondition] [%#span53] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span62] exists l : Node'0.t_Node k v, r : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.current)
      = Option'0.C_Some r
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.final) = Option'0.C_Some l
      /\ (T_red_black_tree__Node.t_Node__left l, T_red_black_tree__Node.t_Node__right l, T_red_black_tree__Node.t_Node__right self.final)
      = (T_red_black_tree__Node.t_Node__left self.current, T_red_black_tree__Node.t_Node__left r, T_red_black_tree__Node.t_Node__right r)
      /\ T_red_black_tree__Node.t_Node__key l = T_red_black_tree__Node.t_Node__key self.current}
      {[%#span61] T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color self.current}
      {[%#span60] color'0 (T_red_black_tree__Node.t_Node__left self.final) = Color'0.C_Red}
      {[%#span59] lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self.current)) (deep_model'0 (T_red_black_tree__Node.t_Node__key self.final))}
      {[%#span58] height'0 self.current = height'0 self.final}
      {[%#span57] internal_invariant'0 self.final}
      {[%#span56] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  let rec rotate_right'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span65] inv'3 self}
    {[@expl:precondition] [%#span64] color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red}
    {[@expl:precondition] [%#span63] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span72] exists l : Node'0.t_Node k v, r : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
      = Option'0.C_Some l
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.final) = Option'0.C_Some r
      /\ (T_red_black_tree__Node.t_Node__left self.final, T_red_black_tree__Node.t_Node__left r, T_red_black_tree__Node.t_Node__right r)
      = (T_red_black_tree__Node.t_Node__left l, T_red_black_tree__Node.t_Node__right l, T_red_black_tree__Node.t_Node__right self.current)
      /\ T_red_black_tree__Node.t_Node__key r = T_red_black_tree__Node.t_Node__key self.current}
      {[%#span71] T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color self.current}
      {[%#span70] color'0 (T_red_black_tree__Node.t_Node__right self.final) = Color'0.C_Red}
      {[%#span69] lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self.final)) (deep_model'0 (T_red_black_tree__Node.t_Node__key self.current))}
      {[%#span68] height'0 self.current = height'0 self.final}
      {[%#span67] internal_invariant'0 self.final}
      {[%#span66] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (Node'0.t_Node k v)) =
    [%#span51] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'2 _1
  
  let rec is_red'0 (self:Tree'0.t_Tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span73] inv'6 self}
    any [ return' (result:bool)-> {[%#span74] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  let rec unwrap'0 (self:Option'0.t_Option (borrowed (Node'0.t_Node k v))) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span76] inv'5 self}
    {[@expl:precondition] [%#span75] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span77] inv'2 result}
      {[%#span75] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (borrowed (Node'0.t_Node k v))))= {[@expl:precondition] [%#span78] inv'4 self}
    any
    [ return' (result:Option'0.t_Option (borrowed (Node'0.t_Node k v)))-> {[%#span81] inv'5 result}
      {[%#span80] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_Node k v) . result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span79] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec flip_colors'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span86] inv'3 self}
    {[@expl:precondition] [%#span85] color'0 (T_red_black_tree__Node.t_Node__left self.current)
    = color'0 (T_red_black_tree__Node.t_Node__right self.current)}
    {[@expl:precondition] [%#span84] T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.current)
    <> Option'0.C_None}
    {[@expl:precondition] [%#span83] T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
    <> Option'0.C_None}
    {[@expl:precondition] [%#span82] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span92] exists r1 : Node'0.t_Node k v, r2 : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.current)
      = Option'0.C_Some r1
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.final) = Option'0.C_Some r2
      /\ T_red_black_tree__Node.t_Node__left r1 = T_red_black_tree__Node.t_Node__left r2
      /\ T_red_black_tree__Node.t_Node__right r1 = T_red_black_tree__Node.t_Node__right r2
      /\ T_red_black_tree__Node.t_Node__key r1 = T_red_black_tree__Node.t_Node__key r2
      /\ T_red_black_tree__Node.t_Node__color self.current = T_red_black_tree__Node.t_Node__color r2
      /\ T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color r1
      /\ T_red_black_tree__Node.t_Node__key r1 = T_red_black_tree__Node.t_Node__key r2}
      {[%#span91] exists l1 : Node'0.t_Node k v, l2 : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
      = Option'0.C_Some l1
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.final) = Option'0.C_Some l2
      /\ T_red_black_tree__Node.t_Node__left l1 = T_red_black_tree__Node.t_Node__left l2
      /\ T_red_black_tree__Node.t_Node__right l1 = T_red_black_tree__Node.t_Node__right l2
      /\ T_red_black_tree__Node.t_Node__key l1 = T_red_black_tree__Node.t_Node__key l2
      /\ T_red_black_tree__Node.t_Node__color self.current = T_red_black_tree__Node.t_Node__color l2
      /\ T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color l1}
      {[%#span90] T_red_black_tree__Node.t_Node__key self.current = T_red_black_tree__Node.t_Node__key self.final}
      {[%#span89] same_mappings'0 self.current self.final}
      {[%#span88] height'0 self.current = height'0 self.final}
      {[%#span87] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  let rec move_red_left (self:borrowed (Node'0.t_Node k v)) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[%#sred_black_tree3] inv'3 self}
    {[%#sred_black_tree2] match_n'0 (cpn'0 (Color'0.C_Red) (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[%#sred_black_tree1] internal_invariant'0 self.current}
    {[%#sred_black_tree0] T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.current)
    <> Option'0.C_None}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_Node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_16 <- _ret' ] 
             [ &self <- { self with current = _16.final ; } ] 
            s1)
      | s1 = -{inv'0 _16.final}- s2
      | s2 = flip_colors'0 {_16} (fun (_ret':()) ->  [ &_15 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rright'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_mut <Option'0.t_Option (Node'0.t_Node k v)> {rnode'0}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_22 <- _ret' ] 
                    Node'0.t_Node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_right'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 (Tree'0.C_Tree _22.final) ; } ]
                            
                            s1)))))
      | s1 = -{inv'1 _22.final}- s2
      | s2 = as_mut'0 {_22} (fun (_ret':Option'0.t_Option (borrowed (Node'0.t_Node k v))) ->  [ &_21 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0 [ s0 = unwrap'0 {_21} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_20 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = Node'0.t_Node <k> <v> {_20.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_18 <- _ret' ] s1))
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'2 _20} s1
      | s1 = -{resolve'0 _20}- s2
      | s2 = any [ br0 -> {_18 = false} (! bb13) | br1 -> {_18} (! bb5) ]  ]
      
    | bb5 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rright'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_mut <Option'0.t_Option (Node'0.t_Node k v)> {rnode'0}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_28 <- _ret' ] 
                    Node'0.t_Node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_right'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 (Tree'0.C_Tree _28.final) ; } ]
                            
                            s1)))))
      | s1 = -{inv'1 _28.final}- s2
      | s2 = as_mut'0 {_28} (fun (_ret':Option'0.t_Option (borrowed (Node'0.t_Node k v))) ->  [ &_27 <- _ret' ] s3)
      | s3 = bb6 ]
      
    | bb6 = s0 [ s0 = unwrap'0 {_27} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_26 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {_26.current} {Borrow.get_id _26}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_25 <- _ret' ] 
             [ &_26 <- { _26 with current = _25.final ; } ] 
            s1)
      | s1 = -{inv'0 _25.final}- s2
      | s2 = rotate_right'0 {_25} (fun (_ret':()) ->  [ &_24 <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'2 _26} s1
      | s1 = -{resolve'0 _26}- s2
      | s2 = Borrow.borrow_mut <Node'0.t_Node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_30 <- _ret' ] 
             [ &self <- { self with current = _30.final ; } ] 
            s3)
      | s3 = -{inv'0 _30.final}- s4
      | s4 = rotate_left'0 {_30} (fun (_ret':()) ->  [ &_29 <- _ret' ] s5)
      | s5 = bb9 ]
      
    | bb9 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_Node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_32 <- _ret' ] 
             [ &self <- { self with current = _32.final ; } ] 
            s1)
      | s1 = -{inv'0 _32.final}- s2
      | s2 = flip_colors'0 {_32} (fun (_ret':()) ->  [ &_31 <- _ret' ] s3)
      | s3 = bb10 ]
      
    | bb10 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_final
                  <Option'0.t_Option (Node'0.t_Node k v)>
                  {rnode'0}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id self) 1) 1}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_35 <- _ret' ] 
                    Node'0.t_Node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_left'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node (Tree'0.C_Tree _35.final) l_color'0 l_key'0 l_val'0 l_right'0 ; } ]
                            
                            s1)))))
      | s1 = -{inv'1 _35.final}- s2
      | s2 = as_mut'0 {_35} (fun (_ret':Option'0.t_Option (borrowed (Node'0.t_Node k v))) ->  [ &_34 <- _ret' ] s3)
      | s3 = bb11 ]
      
    | bb11 = s0 [ s0 = unwrap'0 {_34} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_33 <- _ret' ] s1) | s1 = bb12 ] 
    | bb12 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {_33.current} {Borrow.get_id _33}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_0 <- _ret' ] 
             [ &_33 <- { _33 with current = _0.final ; } ] 
            s1)
      | s1 = -{inv'0 _0.final}- s2
      | s2 = {[@expl:type invariant] inv'2 _33} s3
      | s3 = -{resolve'0 _33}- s4
      | s4 = bb16 ]
      
    | bb16 = s0 [ s0 = {[@expl:type invariant] inv'3 self} s1 | s1 = -{resolve'1 self}- s2 | s2 = bb14 ] 
    | bb13 = s0 [ s0 =  [ &_0 <- self ] s1 | s1 = bb14 ] 
    | bb14 = return' {_0} ]
    )
    [ & _0 : borrowed (Node'0.t_Node k v) = any_l ()
    | & self : borrowed (Node'0.t_Node k v) = self
    | & _15 : () = any_l ()
    | & _16 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _18 : bool = any_l ()
    | & _20 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _21 : Option'0.t_Option (borrowed (Node'0.t_Node k v)) = any_l ()
    | & _22 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _24 : () = any_l ()
    | & _25 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _26 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _27 : Option'0.t_Option (borrowed (Node'0.t_Node k v)) = any_l ()
    | & _28 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _29 : () = any_l ()
    | & _30 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _31 : () = any_l ()
    | & _32 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _33 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _34 : Option'0.t_Option (borrowed (Node'0.t_Node k v)) = any_l ()
    | & _35 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l () ]
    
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[@expl:postcondition] [%#sred_black_tree13] inv'3 result}
      {[@expl:postcondition] [%#sred_black_tree12] color_invariant'0 result.final
      /\ (color'0 (T_red_black_tree__Node.t_Node__right result.current) = Color'0.C_Black
       -> T_red_black_tree__Node.t_Node__color result.final = Color'0.C_Black)  -> color_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree11] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) result.current
      \/ match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) result.current}
      {[@expl:postcondition] [%#sred_black_tree10] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.final k v
      = (has_mapping'0 result.final k v \/ has_mapping'0 self.current k v /\ not has_mapping'0 result.current k v)}
      {[@expl:postcondition] [%#sred_black_tree9] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.current k v
      /\ le_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self.current))
       -> has_mapping'0 result.current k v}
      {[@expl:postcondition] [%#sred_black_tree8] forall k : t_DeepModelTy'0, v : v . has_mapping'0 result.current k v
       -> has_mapping'0 self.current k v}
      {[@expl:postcondition] [%#sred_black_tree7] T_red_black_tree__Node.t_Node__key self.current
      = T_red_black_tree__Node.t_Node__key result.current}
      {[@expl:postcondition] [%#sred_black_tree6] height'0 result.current = height'0 result.final
       -> height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] internal_invariant'0 result.final
      /\ height'0 result.current = height'0 result.final
      /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 result.final k v  -> has_mapping'0 result.current k v)
       -> internal_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree4] internal_invariant'0 result.current}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi50474196543815120__move_red_right
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 552 15 552 40
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 553 15 553 43
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 554 15 554 86
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 570 27 570 31
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 555 14 555 44
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 556 4 558 48
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 559 4 559 97
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 560 14 560 42
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 561 4 561 105
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 562 4 563 47
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 564 4 565 108
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 566 14 567 61
  
  let%span sred_black_tree12 = "../red_black_tree.rs" 568 4 569 45
  
  let%span sred_black_tree13 = "../red_black_tree.rs" 570 36 570 45
  
  let%span span14 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span15 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span16 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span30 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span31 = "../red_black_tree.rs" 286 20 286 102
  
  let%span span32 = "../red_black_tree.rs" 272 12 278 13
  
  let%span span33 = "../red_black_tree.rs" 291 8 291 112
  
  let%span span34 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span35 = "../red_black_tree.rs" 142 4 143 86
  
  let%span span36 = "../red_black_tree.rs" 145 8 148 9
  
  let%span span37 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span38 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span39 = "../red_black_tree.rs" 330 4 331 77
  
  let%span span40 = "../red_black_tree.rs" 334 12 337 13
  
  let%span span41 = "../red_black_tree.rs" 238 12 243 13
  
  let%span span42 = "../red_black_tree.rs" 250 12 253 13
  
  let%span span43 = "../red_black_tree.rs" 231 16 231 48
  
  let%span span44 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span45 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span46 = "../red_black_tree.rs" 348 8 348 115
  
  let%span span47 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span48 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span49 = "../red_black_tree.rs" 197 8 199 9
  
  let%span span50 = "../red_black_tree.rs" 378 12 378 59
  
  let%span span51 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span52 = "../red_black_tree.rs" 153 8 155 9
  
  let%span span53 = "../red_black_tree.rs" 399 15 399 43
  
  let%span span54 = "../red_black_tree.rs" 400 15 400 42
  
  let%span span55 = "../red_black_tree.rs" 411 25 411 29
  
  let%span span56 = "../red_black_tree.rs" 401 14 401 42
  
  let%span span57 = "../red_black_tree.rs" 402 14 402 42
  
  let%span span58 = "../red_black_tree.rs" 403 14 403 50
  
  let%span span59 = "../red_black_tree.rs" 404 14 404 65
  
  let%span span60 = "../red_black_tree.rs" 405 14 405 42
  
  let%span span61 = "../red_black_tree.rs" 406 14 406 44
  
  let%span span62 = "../red_black_tree.rs" 407 4 410 36
  
  let%span span63 = "../red_black_tree.rs" 387 15 387 19
  
  let%span span64 = "../red_black_tree.rs" 386 14 386 45
  
  let%span span65 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span66 = "" 0 0 0 0
  
  let%span span67 = "" 0 0 0 0
  
  let%span span68 = "" 0 0 0 0
  
  let%span span69 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span70 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span71 = "" 0 0 0 0
  
  let%span span72 = "../red_black_tree.rs" 471 15 471 43
  
  let%span span73 = "../red_black_tree.rs" 472 15 472 40
  
  let%span span74 = "../red_black_tree.rs" 473 15 473 41
  
  let%span span75 = "../red_black_tree.rs" 474 15 474 60
  
  let%span span76 = "../red_black_tree.rs" 485 24 485 28
  
  let%span span77 = "../red_black_tree.rs" 475 14 475 42
  
  let%span span78 = "../red_black_tree.rs" 476 14 476 50
  
  let%span span79 = "../red_black_tree.rs" 477 14 477 42
  
  let%span span80 = "../red_black_tree.rs" 478 14 478 40
  
  let%span span81 = "../red_black_tree.rs" 479 4 481 70
  
  let%span span82 = "../red_black_tree.rs" 482 4 484 90
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'0 (_1 : Node'0.t_Node k v)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'6 (self : Node'0.t_Node k v) =
    [%#span14] inv'0 self
  
  predicate inv'10 (_1 : Node'0.t_Node k v)
  
  axiom inv'10 [@rewrite] : forall x : Node'0.t_Node k v [inv'10 x] . inv'10 x = invariant'6 x
  
  predicate invariant'5 (self : v)
  
  predicate inv'9 (_1 : v)
  
  axiom inv'9 : forall x : v [inv'9 x] . inv'9 x  -> invariant'5 x
  
  predicate invariant'4 (self : k)
  
  predicate inv'8 (_1 : k)
  
  axiom inv'8 : forall x : k [inv'8 x] . inv'8 x  -> invariant'4 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'1 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'7 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'7 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'7 x] . inv'7 x
  = match x with
    | Tree'0.C_Tree node -> inv'1 node
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : Tree'0.t_Tree k v) =
    [%#span15] inv'7 self
  
  predicate inv'6 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'6 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'6 x] . inv'6 x = invariant'3 x
  
  predicate inv'2 (_1 : borrowed (Node'0.t_Node k v))
  
  predicate inv'5 (_1 : Option'0.t_Option (borrowed (Node'0.t_Node k v)))
  
  axiom inv'5 [@rewrite] : forall x : Option'0.t_Option (borrowed (Node'0.t_Node k v)) [inv'5 x] . inv'5 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'2 a_0
    end
  
  predicate invariant'2 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span16] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'4 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v)))
  
  axiom inv'4 [@rewrite] : forall x : borrowed (Option'0.t_Option (Node'0.t_Node k v)) [inv'4 x] . inv'4 x
  = invariant'2 x
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span17] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span18] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span19] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span20] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span21] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span22] cmp_log'0 x y
  = o)  -> ([%#span23] cmp_log'0 y z = o)  -> ([%#span24] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span25] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span26] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span27] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span28] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span29] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate invariant'1 (self : borrowed (Node'0.t_Node k v)) =
    [%#span16] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed (Node'0.t_Node k v))
  
  axiom inv'3 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed (Node'0.t_Node k v)) =
    [%#span16] inv'10 self.current /\ inv'10 self.final
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'2 x] . inv'2 x = invariant'0 x
  
  axiom inv'1 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'1 x] . inv'1 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'10 a_0
    end
  
  axiom inv'0 [@rewrite] : forall x : Node'0.t_Node k v [inv'0 x] . inv'0 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'7 left /\ inv'8 key /\ inv'9 val' /\ inv'7 right
    end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  use T_red_black_tree__Color as Color'0
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span30] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 285 4 285 41] (self : Node'0.t_Node k v) =
    [%#span31] color'0 (T_red_black_tree__Node.t_Node__right self) = Color'0.C_Black
    /\ (T_red_black_tree__Node.t_Node__color self = Color'0.C_Black
    \/ color'0 (T_red_black_tree__Node.t_Node__left self) = Color'0.C_Black)
  
  predicate color_invariant'1 [#"../red_black_tree.rs" 270 4 270 36] (self : Tree'0.t_Tree k v) =
    [%#span32] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'1 left /\ color_invariant'1 right
      end
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 290 4 290 36] (self : Node'0.t_Node k v) =
    [%#span33] color_invariant_here'0 self
    /\ color_invariant'1 (T_red_black_tree__Node.t_Node__left self)
    /\ color_invariant'1 (T_red_black_tree__Node.t_Node__right self)
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span34] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'1 left k v
      \/ has_mapping'1 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 144 4 144 57] (self : Node'0.t_Node k v) (k : t_DeepModelTy'0) (v : v)
    
   =
    [%#span36] has_mapping'1 (T_red_black_tree__Node.t_Node__left self) k v
    \/ has_mapping'1 (T_red_black_tree__Node.t_Node__right self) k v
    \/ k = deep_model'0 (T_red_black_tree__Node.t_Node__key self) /\ v = T_red_black_tree__Node.t_Node__val self
  
  axiom has_mapping'0_spec : forall self : Node'0.t_Node k v, k : t_DeepModelTy'0, v : v . [%#span35] forall node : Node'0.t_Node k v . self
  = node  -> has_mapping'0 self k v = has_mapping'1 (Tree'0.C_Tree (Option'0.C_Some node)) k v
  
  use prelude.prelude.Int
  
  function height'1 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span38] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'1 left
        | Color'0.C_Black -> height'1 left + 1
        end
      end
  
  axiom height'1_spec : forall self : Tree'0.t_Tree k v . [%#span37] height'1 self >= 0
  
  function height'0 [#"../red_black_tree.rs" 332 4 332 26] (self : Node'0.t_Node k v) : int =
    [%#span40] match T_red_black_tree__Node.t_Node__color self with
      | Color'0.C_Red -> height'1 (T_red_black_tree__Node.t_Node__left self)
      | Color'0.C_Black -> height'1 (T_red_black_tree__Node.t_Node__left self) + 1
      end
  
  axiom height'0_spec : forall self : Node'0.t_Node k v . [%#span39] forall node : Node'0.t_Node k v . self = node
   -> height'0 self = height'1 (Tree'0.C_Tree (Option'0.C_Some node))
  
  use T_red_black_tree__CP as CP'0
  
  predicate match_t'0 [#"../red_black_tree.rs" 236 4 236 52] (self : CP'0.t_CP) (tree : Tree'0.t_Tree k v) =
    [%#span41] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'1 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node tree
      = Option'0.C_Some node
      /\ T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  predicate match_n'0 [#"../red_black_tree.rs" 248 4 248 52] (self : CP'0.t_CP) (node : Node'0.t_Node k v) =
    [%#span42] match self with
      | CP'0.C_CPL color -> T_red_black_tree__Node.t_Node__color node = color /\ color_invariant'0 node
      | CP'0.C_CPN color l r -> T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  function cpn'0 [#"../red_black_tree.rs" 230 0 230 36] (c : Color'0.t_Color) (l : CP'0.t_CP) (r : CP'0.t_CP) : CP'0.t_CP
    
   =
    [%#span43] CP'0.C_CPN c l r
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span44] height'1 (T_red_black_tree__Node.t_Node__left self)
    = height'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span45] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'1 left /\ height_invariant'1 right
      end
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 347 4 347 37] (self : Node'0.t_Node k v) =
    [%#span46] height_invariant_here'0 self
    /\ height_invariant'1 (T_red_black_tree__Node.t_Node__left self)
    /\ height_invariant'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span47] (forall k : t_DeepModelTy'0, v : v . has_mapping'1 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'1 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span48] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'1 left /\ bst_invariant'1 right
      end
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 196 4 196 34] (self : Node'0.t_Node k v) =
    [%#span49] bst_invariant_here'0 self
    /\ bst_invariant'1 (T_red_black_tree__Node.t_Node__left self)
    /\ bst_invariant'1 (T_red_black_tree__Node.t_Node__right self)
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 376 4 376 39] (self : Node'0.t_Node k v) =
    [%#span50] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (Node'0.t_Node k v)) =
    [%#span51] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'3 _1
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 152 4 152 43] (self : Node'0.t_Node k v) (o : Node'0.t_Node k v) =
    [%#span52] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self k v = has_mapping'0 o k v
  
  let rec rotate_right'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span55] inv'3 self}
    {[@expl:precondition] [%#span54] color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red}
    {[@expl:precondition] [%#span53] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span62] exists l : Node'0.t_Node k v, r : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
      = Option'0.C_Some l
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.final) = Option'0.C_Some r
      /\ (T_red_black_tree__Node.t_Node__left self.final, T_red_black_tree__Node.t_Node__left r, T_red_black_tree__Node.t_Node__right r)
      = (T_red_black_tree__Node.t_Node__left l, T_red_black_tree__Node.t_Node__right l, T_red_black_tree__Node.t_Node__right self.current)
      /\ T_red_black_tree__Node.t_Node__key r = T_red_black_tree__Node.t_Node__key self.current}
      {[%#span61] T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color self.current}
      {[%#span60] color'0 (T_red_black_tree__Node.t_Node__right self.final) = Color'0.C_Red}
      {[%#span59] lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self.final)) (deep_model'0 (T_red_black_tree__Node.t_Node__key self.current))}
      {[%#span58] height'0 self.current = height'0 self.final}
      {[%#span57] internal_invariant'0 self.final}
      {[%#span56] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (Node'0.t_Node k v)) =
    [%#span51] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'2 _1
  
  let rec is_red'0 (self:Tree'0.t_Tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span63] inv'6 self}
    any [ return' (result:bool)-> {[%#span64] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  let rec unwrap'0 (self:Option'0.t_Option (borrowed (Node'0.t_Node k v))) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span66] inv'5 self}
    {[@expl:precondition] [%#span65] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span67] inv'2 result}
      {[%#span65] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (borrowed (Node'0.t_Node k v))))= {[@expl:precondition] [%#span68] inv'4 self}
    any
    [ return' (result:Option'0.t_Option (borrowed (Node'0.t_Node k v)))-> {[%#span71] inv'5 result}
      {[%#span70] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_Node k v) . result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span69] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec flip_colors'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span76] inv'3 self}
    {[@expl:precondition] [%#span75] color'0 (T_red_black_tree__Node.t_Node__left self.current)
    = color'0 (T_red_black_tree__Node.t_Node__right self.current)}
    {[@expl:precondition] [%#span74] T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.current)
    <> Option'0.C_None}
    {[@expl:precondition] [%#span73] T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
    <> Option'0.C_None}
    {[@expl:precondition] [%#span72] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span82] exists r1 : Node'0.t_Node k v, r2 : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.current)
      = Option'0.C_Some r1
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.final) = Option'0.C_Some r2
      /\ T_red_black_tree__Node.t_Node__left r1 = T_red_black_tree__Node.t_Node__left r2
      /\ T_red_black_tree__Node.t_Node__right r1 = T_red_black_tree__Node.t_Node__right r2
      /\ T_red_black_tree__Node.t_Node__key r1 = T_red_black_tree__Node.t_Node__key r2
      /\ T_red_black_tree__Node.t_Node__color self.current = T_red_black_tree__Node.t_Node__color r2
      /\ T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color r1
      /\ T_red_black_tree__Node.t_Node__key r1 = T_red_black_tree__Node.t_Node__key r2}
      {[%#span81] exists l1 : Node'0.t_Node k v, l2 : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
      = Option'0.C_Some l1
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.final) = Option'0.C_Some l2
      /\ T_red_black_tree__Node.t_Node__left l1 = T_red_black_tree__Node.t_Node__left l2
      /\ T_red_black_tree__Node.t_Node__right l1 = T_red_black_tree__Node.t_Node__right l2
      /\ T_red_black_tree__Node.t_Node__key l1 = T_red_black_tree__Node.t_Node__key l2
      /\ T_red_black_tree__Node.t_Node__color self.current = T_red_black_tree__Node.t_Node__color l2
      /\ T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color l1}
      {[%#span80] T_red_black_tree__Node.t_Node__key self.current = T_red_black_tree__Node.t_Node__key self.final}
      {[%#span79] same_mappings'0 self.current self.final}
      {[%#span78] height'0 self.current = height'0 self.final}
      {[%#span77] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  let rec move_red_right (self:borrowed (Node'0.t_Node k v)) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[%#sred_black_tree3] inv'3 self}
    {[%#sred_black_tree2] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Black)))) self.current}
    {[%#sred_black_tree1] internal_invariant'0 self.current}
    {[%#sred_black_tree0] T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
    <> Option'0.C_None}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_Node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_16 <- _ret' ] 
             [ &self <- { self with current = _16.final ; } ] 
            s1)
      | s1 = -{inv'0 _16.final}- s2
      | s2 = flip_colors'0 {_16} (fun (_ret':()) ->  [ &_15 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_mut <Option'0.t_Option (Node'0.t_Node k v)> {rnode'0}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_22 <- _ret' ] 
                    Node'0.t_Node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_left'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node (Tree'0.C_Tree _22.final) l_color'0 l_key'0 l_val'0 l_right'0 ; } ]
                            
                            s1)))))
      | s1 = -{inv'1 _22.final}- s2
      | s2 = as_mut'0 {_22} (fun (_ret':Option'0.t_Option (borrowed (Node'0.t_Node k v))) ->  [ &_21 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0 [ s0 = unwrap'0 {_21} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_20 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = Node'0.t_Node <k> <v> {_20.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_18 <- _ret' ] s1))
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'2 _20} s1
      | s1 = -{resolve'0 _20}- s2
      | s2 = any [ br0 -> {_18 = false} (! bb10) | br1 -> {_18} (! bb5) ]  ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_Node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_25 <- _ret' ] 
             [ &self <- { self with current = _25.final ; } ] 
            s1)
      | s1 = -{inv'0 _25.final}- s2
      | s2 = rotate_right'0 {_25} (fun (_ret':()) ->  [ &_24 <- _ret' ] s3)
      | s3 = bb6 ]
      
    | bb6 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_Node k v> {self.current}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_27 <- _ret' ] 
             [ &self <- { self with current = _27.final ; } ] 
            s1)
      | s1 = -{inv'0 _27.final}- s2
      | s2 = flip_colors'0 {_27} (fun (_ret':()) ->  [ &_26 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = s0
      [ s0 = Node'0.t_Node <k> <v> {self.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rright'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_final
                  <Option'0.t_Option (Node'0.t_Node k v)>
                  {rnode'0}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id self) 5) 1}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_30 <- _ret' ] 
                    Node'0.t_Node <k> <v> {self.current}
                      (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_right'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                            
                            [ &self <- { self with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 (Tree'0.C_Tree _30.final) ; } ]
                            
                            s1)))))
      | s1 = -{inv'1 _30.final}- s2
      | s2 = as_mut'0 {_30} (fun (_ret':Option'0.t_Option (borrowed (Node'0.t_Node k v))) ->  [ &_29 <- _ret' ] s3)
      | s3 = bb8 ]
      
    | bb8 = s0 [ s0 = unwrap'0 {_29} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_28 <- _ret' ] s1) | s1 = bb9 ] 
    | bb9 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {_28.current} {Borrow.get_id _28}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_0 <- _ret' ] 
             [ &_28 <- { _28 with current = _0.final ; } ] 
            s1)
      | s1 = -{inv'0 _0.final}- s2
      | s2 = {[@expl:type invariant] inv'2 _28} s3
      | s3 = -{resolve'0 _28}- s4
      | s4 = bb13 ]
      
    | bb13 = s0 [ s0 = {[@expl:type invariant] inv'3 self} s1 | s1 = -{resolve'1 self}- s2 | s2 = bb11 ] 
    | bb10 = s0 [ s0 =  [ &_0 <- self ] s1 | s1 = bb11 ] 
    | bb11 = return' {_0} ]
    )
    [ & _0 : borrowed (Node'0.t_Node k v) = any_l ()
    | & self : borrowed (Node'0.t_Node k v) = self
    | & _15 : () = any_l ()
    | & _16 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _18 : bool = any_l ()
    | & _20 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _21 : Option'0.t_Option (borrowed (Node'0.t_Node k v)) = any_l ()
    | & _22 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _24 : () = any_l ()
    | & _25 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _26 : () = any_l ()
    | & _27 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _28 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _29 : Option'0.t_Option (borrowed (Node'0.t_Node k v)) = any_l ()
    | & _30 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l () ]
    
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[@expl:postcondition] [%#sred_black_tree13] inv'3 result}
      {[@expl:postcondition] [%#sred_black_tree12] color_invariant'0 result.final
      /\ (color'0 (T_red_black_tree__Node.t_Node__left result.current) = Color'0.C_Black
       -> T_red_black_tree__Node.t_Node__color result.final = Color'0.C_Black)  -> color_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree11] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) result.current
      \/ match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) result.current}
      {[@expl:postcondition] [%#sred_black_tree10] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.final k v
      = (has_mapping'0 result.final k v \/ has_mapping'0 self.current k v /\ not has_mapping'0 result.current k v)}
      {[@expl:postcondition] [%#sred_black_tree9] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.current k v
      /\ le_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self.current)) k
       -> has_mapping'0 result.current k v}
      {[@expl:postcondition] [%#sred_black_tree8] forall k : t_DeepModelTy'0, v : v . has_mapping'0 result.current k v
       -> has_mapping'0 self.current k v}
      {[@expl:postcondition] [%#sred_black_tree7] T_red_black_tree__Node.t_Node__key result.current
      = T_red_black_tree__Node.t_Node__key self.current}
      {[@expl:postcondition] [%#sred_black_tree6] height'0 result.current = height'0 result.final
       -> height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] internal_invariant'0 result.final
      /\ height'0 result.current = height'0 result.final
      /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 result.final k v  -> has_mapping'0 result.current k v)
       -> internal_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree4] internal_invariant'0 result.current}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi9974039414958028887__insert_rec
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 585 15 585 43
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 586 15 586 40
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 593 23 593 27
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 593 29 593 32
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 593 37 593 40
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 587 14 587 42
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 588 14 588 50
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 589 14 590 39
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 591 14 591 56
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 592 4 592 127
  
  let%span span10 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span24 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span25 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span26 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span27 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span28 = "../red_black_tree.rs" 286 20 286 102
  
  let%span span29 = "../red_black_tree.rs" 272 12 278 13
  
  let%span span30 = "../red_black_tree.rs" 238 12 243 13
  
  let%span span31 = "../red_black_tree.rs" 231 16 231 48
  
  let%span span32 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span33 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span34 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span35 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span36 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span37 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span38 = "../red_black_tree.rs" 362 12 362 59
  
  let%span span39 = "../red_black_tree.rs" 291 8 291 112
  
  let%span span40 = "../red_black_tree.rs" 250 12 253 13
  
  let%span span41 = "../red_black_tree.rs" 330 4 331 77
  
  let%span span42 = "../red_black_tree.rs" 334 12 337 13
  
  let%span span43 = "../red_black_tree.rs" 142 4 143 86
  
  let%span span44 = "../red_black_tree.rs" 145 8 148 9
  
  let%span span45 = "../red_black_tree.rs" 153 8 155 9
  
  let%span span46 = "../red_black_tree.rs" 348 8 348 115
  
  let%span span47 = "../red_black_tree.rs" 197 8 199 9
  
  let%span span48 = "../red_black_tree.rs" 378 12 378 59
  
  let%span span49 = "../red_black_tree.rs" 490 15 490 43
  
  let%span span50 = "../red_black_tree.rs" 491 4 492 47
  
  let%span span51 = "../red_black_tree.rs" 493 4 494 48
  
  let%span span52 = "../red_black_tree.rs" 495 4 495 110
  
  let%span span53 = "../red_black_tree.rs" 509 20 509 24
  
  let%span span54 = "../red_black_tree.rs" 496 14 496 42
  
  let%span span55 = "../red_black_tree.rs" 497 14 497 42
  
  let%span span56 = "../red_black_tree.rs" 498 14 498 50
  
  let%span span57 = "../red_black_tree.rs" 499 4 500 34
  
  let%span span58 = "../red_black_tree.rs" 501 4 502 39
  
  let%span span59 = "../red_black_tree.rs" 503 4 504 63
  
  let%span span60 = "../red_black_tree.rs" 505 4 506 61
  
  let%span span61 = "../red_black_tree.rs" 507 4 508 39
  
  let%span span62 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span63 = "" 0 0 0 0
  
  let%span span64 = "" 0 0 0 0
  
  let%span span65 = "../../../../creusot-contracts/src/std/cmp.rs" 50 26 50 85
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'8 (_1 : Node'0.t_Node k v)
  
  use prelude.prelude.Borrow
  
  predicate invariant'7 (self : borrowed (Node'0.t_Node k v)) =
    [%#span10] inv'8 self.current /\ inv'8 self.final
  
  predicate inv'10 (_1 : borrowed (Node'0.t_Node k v))
  
  axiom inv'10 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'10 x] . inv'10 x = invariant'7 x
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span11] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span12] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span13] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span14] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span15] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span16] cmp_log'0 x y
  = o)  -> ([%#span17] cmp_log'0 y z = o)  -> ([%#span18] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span19] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span20] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span21] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span22] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span23] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate inv'5 (_1 : k)
  
  predicate invariant'6 (self : k) =
    [%#span24] inv'5 self
  
  predicate inv'9 (_1 : k)
  
  axiom inv'9 [@rewrite] : forall x : k [inv'9 x] . inv'9 x = invariant'6 x
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'6 (_1 : v)
  
  predicate inv'4 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'8 [@rewrite] : forall x : Node'0.t_Node k v [inv'8 x] . inv'8 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'4 left /\ inv'5 key /\ inv'6 val' /\ inv'4 right
    end
  
  predicate inv'3 (_1 : Node'0.t_Node k v)
  
  predicate invariant'5 (self : borrowed (Node'0.t_Node k v)) =
    [%#span10] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'7 (_1 : borrowed (Node'0.t_Node k v))
  
  axiom inv'7 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'7 x] . inv'7 x = invariant'5 x
  
  predicate invariant'4 (self : v)
  
  axiom inv'6 : forall x : v [inv'6 x] . inv'6 x  -> invariant'4 x
  
  predicate invariant'3 (self : k)
  
  axiom inv'5 : forall x : k [inv'5 x] . inv'5 x  -> invariant'3 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'0 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'4 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'4 x] . inv'4 x
  = match x with
    | Tree'0.C_Tree node -> inv'0 node
    end
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'2 (self : Node'0.t_Node k v) =
    [%#span25] inv'8 self
  
  axiom inv'3 [@rewrite] : forall x : Node'0.t_Node k v [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'1 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span10] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'2 (_1 : borrowed (Tree'0.t_Tree k v))
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Tree'0.t_Tree k v) [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span10] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v)))
  
  axiom inv'1 [@rewrite] : forall x : borrowed (Option'0.t_Option (Node'0.t_Node k v)) [inv'1 x] . inv'1 x
  = invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'0 x] . inv'0 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span26] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  use T_red_black_tree__Color as Color'0
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span27] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 285 4 285 41] (self : Node'0.t_Node k v) =
    [%#span28] color'0 (T_red_black_tree__Node.t_Node__right self) = Color'0.C_Black
    /\ (T_red_black_tree__Node.t_Node__color self = Color'0.C_Black
    \/ color'0 (T_red_black_tree__Node.t_Node__left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 270 4 270 36] (self : Tree'0.t_Tree k v) =
    [%#span29] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use T_red_black_tree__CP as CP'0
  
  predicate match_t'0 [#"../red_black_tree.rs" 236 4 236 52] (self : CP'0.t_CP) (tree : Tree'0.t_Tree k v) =
    [%#span30] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node tree
      = Option'0.C_Some node
      /\ T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  function cpn'0 [#"../red_black_tree.rs" 230 0 230 36] (c : Color'0.t_Color) (l : CP'0.t_CP) (r : CP'0.t_CP) : CP'0.t_CP
    
   =
    [%#span31] CP'0.C_CPN c l r
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span33] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_Tree k v . [%#span32] height'0 self >= 0
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span34] height'0 (T_red_black_tree__Node.t_Node__left self)
    = height'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span35] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span36] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span37] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 360 4 360 39] (self : Tree'0.t_Tree k v) =
    [%#span38] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  predicate color_invariant'1 [#"../red_black_tree.rs" 290 4 290 36] (self : Node'0.t_Node k v) =
    [%#span39] color_invariant_here'0 self
    /\ color_invariant'0 (T_red_black_tree__Node.t_Node__left self)
    /\ color_invariant'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate match_n'0 [#"../red_black_tree.rs" 248 4 248 52] (self : CP'0.t_CP) (node : Node'0.t_Node k v) =
    [%#span40] match self with
      | CP'0.C_CPL color -> T_red_black_tree__Node.t_Node__color node = color /\ color_invariant'1 node
      | CP'0.C_CPN color l r -> T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  function height'1 [#"../red_black_tree.rs" 332 4 332 26] (self : Node'0.t_Node k v) : int =
    [%#span42] match T_red_black_tree__Node.t_Node__color self with
      | Color'0.C_Red -> height'0 (T_red_black_tree__Node.t_Node__left self)
      | Color'0.C_Black -> height'0 (T_red_black_tree__Node.t_Node__left self) + 1
      end
  
  axiom height'1_spec : forall self : Node'0.t_Node k v . [%#span41] forall node : Node'0.t_Node k v . self = node
   -> height'1 self = height'0 (Tree'0.C_Tree (Option'0.C_Some node))
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 144 4 144 57] (self : Node'0.t_Node k v) (k : t_DeepModelTy'0) (v : v)
    
   =
    [%#span44] has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
    \/ has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
    \/ k = deep_model'0 (T_red_black_tree__Node.t_Node__key self) /\ v = T_red_black_tree__Node.t_Node__val self
  
  axiom has_mapping'1_spec : forall self : Node'0.t_Node k v, k : t_DeepModelTy'0, v : v . [%#span43] forall node : Node'0.t_Node k v . self
  = node  -> has_mapping'1 self k v = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 152 4 152 43] (self : Node'0.t_Node k v) (o : Node'0.t_Node k v) =
    [%#span45] forall k : t_DeepModelTy'0, v : v . has_mapping'1 self k v = has_mapping'1 o k v
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 347 4 347 37] (self : Node'0.t_Node k v) =
    [%#span46] height_invariant_here'0 self
    /\ height_invariant'0 (T_red_black_tree__Node.t_Node__left self)
    /\ height_invariant'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 196 4 196 34] (self : Node'0.t_Node k v) =
    [%#span47] bst_invariant_here'0 self
    /\ bst_invariant'0 (T_red_black_tree__Node.t_Node__left self)
    /\ bst_invariant'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate internal_invariant'1 [#"../red_black_tree.rs" 376 4 376 39] (self : Node'0.t_Node k v) =
    [%#span48] bst_invariant'1 self /\ height_invariant'1 self
  
  let rec balance'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span53] inv'10 self}
    {[@expl:precondition] [%#span52] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red  -> false}
    {[@expl:precondition] [%#span51] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Red
     -> color_invariant'0 (T_red_black_tree__Node.t_Node__right self.current)}
    {[@expl:precondition] [%#span50] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red
     -> color_invariant'0 (T_red_black_tree__Node.t_Node__left self.current)}
    {[@expl:precondition] [%#span49] internal_invariant'1 self.current}
    any
    [ return' (result:())-> {[%#span61] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span60] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span59] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span58] match_n'0 (cpn'0 (Color'0.C_Black) (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span57] color_invariant'0 (T_red_black_tree__Node.t_Node__left self.current)
      /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Black  -> self.current = self.final}
      {[%#span56] height'1 self.current = height'1 self.final}
      {[%#span55] internal_invariant'1 self.final}
      {[%#span54] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  predicate resolve'9 (self : borrowed (Node'0.t_Node k v)) =
    [%#span62] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'9 _1
  
  predicate resolve'3 (_1 : v)
  
  predicate resolve'2 (_1 : k)
  
  let rec cmp'0 (self:k) (other:k) (return'  (ret:Ordering'0.t_Ordering))= {[@expl:precondition] [%#span64] inv'9 other}
    {[@expl:precondition] [%#span63] inv'9 self}
    any
    [ return' (result:Ordering'0.t_Ordering)-> {[%#span65] result = cmp_log'0 (deep_model'0 self) (deep_model'0 other)}
      (! return' {result}) ]
    
  
  predicate resolve'6 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span62] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Tree'0.t_Tree k v)) =
    resolve'6 _1
  
  predicate resolve'5 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span62] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    resolve'5 _1
  
  let rec insert_rec (self:borrowed (Tree'0.t_Tree k v)) (key:k) (val':v) (return'  (ret:()))= {[%#sred_black_tree4] inv'6 val'}
    {[%#sred_black_tree3] inv'5 key}
    {[%#sred_black_tree2] inv'2 self}
    {[%#sred_black_tree1] color_invariant'0 self.current}
    {[%#sred_black_tree0] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0
      [ s0 = Tree'0.t_Tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
            Borrow.borrow_mut <Option'0.t_Option (Node'0.t_Node k v)> {rnode'0}
              (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                 [ &_11 <- _ret' ] 
                Tree'0.t_Tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _11.final ; } ] 
                    s1)))
      | s1 = -{inv'0 _11.final}- s2
      | s2 = any
        [ br0 -> {_11.current = Option'0.C_None } (! bb19)
        | br1 (a:Node'0.t_Node k v)-> {_11.current = Option'0.C_Some a} (! bb3) ]
         ]
      
    | bb19 = s0
      [ s0 = {[@expl:type invariant] inv'1 _11} s1
      | s1 = -{resolve'0 _11}- s2
      | s2 =  [ &_35 <- Option'0.C_None ] s3
      | s3 =  [ &_34 <- Tree'0.C_Tree _35 ] s4
      | s4 = bb20 ]
      
    | bb20 = s0
      [ s0 =  [ &_36 <- Color'0.C_Red ] s1
      | s1 =  [ &_40 <- Option'0.C_None ] s2
      | s2 =  [ &_39 <- Tree'0.C_Tree _40 ] s3
      | s3 = bb21 ]
      
    | bb21 = s0 [ s0 =  [ &_33 <- Node'0.C_Node _34 _36 key val' _39 ] s1 | s1 = bb22 ] 
    | bb22 = bb23
    | bb23 = bb24
    | bb24 = bb25
    | bb25 = bb26
    | bb26 = s0 [ s0 =  [ &_31 <- Option'0.C_Some _33 ] s1 | s1 = bb27 ] 
    | bb27 = bb28
    | bb28 = s0
      [ s0 = Tree'0.t_Tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) -> {[@expl:type invariant] inv'0 rnode'0} s1)
      | s1 = Tree'0.t_Tree <k> <v> {self.current}
          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
             [ &self <- { self with current = Tree'0.C_Tree _31 ; } ] 
            s2)
      | s2 = {[@expl:type invariant] inv'2 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = bb30 ]
      
    | bb30 = bb32
    | bb3 = bb4
    | bb4 = s0
      [ s0 = Option'0.v_Some <Node'0.t_Node k v> {_11.current}
          (fun (r0'0:Node'0.t_Node k v) ->
            Borrow.borrow_mut <Node'0.t_Node k v> {r0'0}
              (fun (_ret':borrowed (Node'0.t_Node k v)) ->
                 [ &node <- _ret' ] 
                Option'0.v_Some <Node'0.t_Node k v> {_11.current}
                  (fun (l_0'0:Node'0.t_Node k v) ->
                     [ &_11 <- { _11 with current = Option'0.C_Some node.final ; } ] 
                    s1)))
      | s1 = -{inv'3 node.final}- s2
      | s2 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
             [ &_18 <- rkey'0 ] 
            s3)
      | s3 = cmp'0 {key} {_18} (fun (_ret':Ordering'0.t_Ordering) ->  [ &_15 <- _ret' ] s4)
      | s4 = bb5 ]
      
    | bb5 = any
      [ br0 -> {_15 = Ordering'0.C_Less } (! bb7)
      | br1 -> {_15 = Ordering'0.C_Equal } (! bb8)
      | br2 -> {_15 = Ordering'0.C_Greater } (! bb9) ]
      
    | bb9 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {rright'0}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_25 <- _ret' ] 
                Node'0.t_Node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _25.final ; } ] 
                    s1)))
      | s1 = -{inv'4 _25.final}- s2
      | s2 = insert_rec {_25} {key} {val'} (fun (_ret':()) ->  [ &_14 <- _ret' ] s3)
      | s3 = bb16 ]
      
    | bb16 = bb17
    | bb8 = s0 [ s0 = {[@expl:type invariant] inv'5 key} s1 | s1 = -{resolve'2 key}- s2 | s2 = bb12 ] 
    | bb12 = bb13
    | bb13 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            {[@expl:type invariant] inv'6 rval'0}
            s1)
      | s1 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'1:Tree'0.t_Tree k v) (rcolor'1:Color'0.t_Color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_Tree k v) ->
            -{resolve'3 rval'1}-
            s2)
      | s2 = Node'0.t_Node <k> <v> {node.current}
          (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
             [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 val' l_right'0 ; } ] 
            s3)
      | s3 = {[@expl:type invariant] inv'7 node} s4
      | s4 = -{resolve'4 node}- s5
      | s5 = {[@expl:type invariant] inv'1 _11} s6
      | s6 = -{resolve'0 _11}- s7
      | s7 = {[@expl:type invariant] inv'2 self} s8
      | s8 = -{resolve'1 self}- s9
      | s9 = bb15 ]
      
    | bb15 = bb32
    | bb32 = bb33
    | bb33 = bb34
    | bb7 = bb10
    | bb10 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {rleft'0}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_20 <- _ret' ] 
                Node'0.t_Node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node _20.final l_color'0 l_key'0 l_val'0 l_right'0 ; } ] 
                    s1)))
      | s1 = -{inv'4 _20.final}- s2
      | s2 = insert_rec {_20} {key} {val'} (fun (_ret':()) ->  [ &_14 <- _ret' ] s3)
      | s3 = bb11 ]
      
    | bb11 = bb17
    | bb17 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_29 <- _ret' ] 
             [ &node <- { node with current = _29.final ; } ] 
            s1)
      | s1 = -{inv'8 _29.final}- s2
      | s2 = balance'0 {_29} (fun (_ret':()) ->  [ &_28 <- _ret' ] s3)
      | s3 = bb18 ]
      
    | bb18 = s0
      [ s0 = {[@expl:type invariant] inv'7 node} s1
      | s1 = -{resolve'4 node}- s2
      | s2 = {[@expl:type invariant] inv'1 _11} s3
      | s3 = -{resolve'0 _11}- s4
      | s4 = {[@expl:type invariant] inv'2 self} s5
      | s5 = -{resolve'1 self}- s6
      | s6 = bb31 ]
      
    | bb31 = bb34
    | bb34 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Tree'0.t_Tree k v) = self
    | & key : k = key
    | & val' : v = val'
    | & _11 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & node : borrowed (Node'0.t_Node k v) = any_l ()
    | & _14 : () = any_l ()
    | & _15 : Ordering'0.t_Ordering = any_l ()
    | & _18 : k = any_l ()
    | & _20 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _25 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _28 : () = any_l ()
    | & _29 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _31 : Option'0.t_Option (Node'0.t_Node k v) = any_l ()
    | & _33 : Node'0.t_Node k v = any_l ()
    | & _34 : Tree'0.t_Tree k v = any_l ()
    | & _35 : Option'0.t_Option (Node'0.t_Node k v) = any_l ()
    | & _36 : Color'0.t_Color = any_l ()
    | & _39 : Tree'0.t_Tree k v = any_l ()
    | & _40 : Option'0.t_Option (Node'0.t_Node k v) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sred_black_tree9] forall k : t_DeepModelTy'0, v : v . k
      = deep_model'0 key
      \/ has_mapping'0 self.current k v = has_mapping'0 self.final k v}
      {[@expl:postcondition] [%#sred_black_tree8] has_mapping'0 self.final (deep_model'0 key) val'}
      {[@expl:postcondition] [%#sred_black_tree7] match_t'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final
      /\ color'0 self.current = Color'0.C_Red
      \/ color_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree6] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] internal_invariant'0 self.final}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi9974039414958028887__delete_max_rec
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 616 15 616 43
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 617 15 618 62
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 627 27 627 31
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 619 14 619 42
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 620 14 620 50
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 621 14 621 66
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 622 4 622 104
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 623 4 624 73
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 625 14 625 39
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 626 4 626 69
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 627 36 627 42
  
  let%span span11 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span25 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span26 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span27 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span28 = "../red_black_tree.rs" 286 20 286 102
  
  let%span span29 = "../red_black_tree.rs" 272 12 278 13
  
  let%span span30 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span31 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span32 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span33 = "../red_black_tree.rs" 231 16 231 48
  
  let%span span34 = "../red_black_tree.rs" 238 12 243 13
  
  let%span span35 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span36 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span37 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span38 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span39 = "../red_black_tree.rs" 362 12 362 59
  
  let%span span40 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span41 = "" 0 0 0 0
  
  let%span span42 = "" 0 0 0 0
  
  let%span span43 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span44 = "../../../../creusot-contracts/src/std/option.rs" 147 20 147 32
  
  let%span span45 = "" 0 0 0 0
  
  let%span span46 = "../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  
  let%span span47 = "../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  
  let%span span48 = "" 0 0 0 0
  
  let%span span49 = "../red_black_tree.rs" 291 8 291 112
  
  let%span span50 = "../red_black_tree.rs" 250 12 253 13
  
  let%span span51 = "../red_black_tree.rs" 330 4 331 77
  
  let%span span52 = "../red_black_tree.rs" 334 12 337 13
  
  let%span span53 = "../red_black_tree.rs" 142 4 143 86
  
  let%span span54 = "../red_black_tree.rs" 145 8 148 9
  
  let%span span55 = "../red_black_tree.rs" 153 8 155 9
  
  let%span span56 = "../red_black_tree.rs" 348 8 348 115
  
  let%span span57 = "../red_black_tree.rs" 197 8 199 9
  
  let%span span58 = "../red_black_tree.rs" 378 12 378 59
  
  let%span span59 = "../red_black_tree.rs" 490 15 490 43
  
  let%span span60 = "../red_black_tree.rs" 491 4 492 47
  
  let%span span61 = "../red_black_tree.rs" 493 4 494 48
  
  let%span span62 = "../red_black_tree.rs" 495 4 495 110
  
  let%span span63 = "../red_black_tree.rs" 509 20 509 24
  
  let%span span64 = "../red_black_tree.rs" 496 14 496 42
  
  let%span span65 = "../red_black_tree.rs" 497 14 497 42
  
  let%span span66 = "../red_black_tree.rs" 498 14 498 50
  
  let%span span67 = "../red_black_tree.rs" 499 4 500 34
  
  let%span span68 = "../red_black_tree.rs" 501 4 502 39
  
  let%span span69 = "../red_black_tree.rs" 503 4 504 63
  
  let%span span70 = "../red_black_tree.rs" 505 4 506 61
  
  let%span span71 = "../red_black_tree.rs" 507 4 508 39
  
  let%span span72 = "../red_black_tree.rs" 552 15 552 40
  
  let%span span73 = "../red_black_tree.rs" 553 15 553 43
  
  let%span span74 = "../red_black_tree.rs" 554 15 554 86
  
  let%span span75 = "../red_black_tree.rs" 570 27 570 31
  
  let%span span76 = "../red_black_tree.rs" 555 14 555 44
  
  let%span span77 = "../red_black_tree.rs" 556 4 558 48
  
  let%span span78 = "../red_black_tree.rs" 559 4 559 97
  
  let%span span79 = "../red_black_tree.rs" 560 14 560 42
  
  let%span span80 = "../red_black_tree.rs" 561 4 561 105
  
  let%span span81 = "../red_black_tree.rs" 562 4 563 47
  
  let%span span82 = "../red_black_tree.rs" 564 4 565 108
  
  let%span span83 = "../red_black_tree.rs" 566 14 567 61
  
  let%span span84 = "../red_black_tree.rs" 568 4 569 45
  
  let%span span85 = "../red_black_tree.rs" 570 36 570 45
  
  let%span span86 = "" 0 0 0 0
  
  let%span span87 = "../../../../creusot-contracts/src/std/option.rs" 66 16 66 60
  
  let%span span88 = "../../../../creusot-contracts/src/std/option.rs" 67 16 69 18
  
  let%span span89 = "" 0 0 0 0
  
  let%span span90 = "../red_black_tree.rs" 399 15 399 43
  
  let%span span91 = "../red_black_tree.rs" 400 15 400 42
  
  let%span span92 = "../red_black_tree.rs" 411 25 411 29
  
  let%span span93 = "../red_black_tree.rs" 401 14 401 42
  
  let%span span94 = "../red_black_tree.rs" 402 14 402 42
  
  let%span span95 = "../red_black_tree.rs" 403 14 403 50
  
  let%span span96 = "../red_black_tree.rs" 404 14 404 65
  
  let%span span97 = "../red_black_tree.rs" 405 14 405 42
  
  let%span span98 = "../red_black_tree.rs" 406 14 406 44
  
  let%span span99 = "../red_black_tree.rs" 407 4 410 36
  
  let%span span100 = "../red_black_tree.rs" 387 15 387 19
  
  let%span span101 = "../red_black_tree.rs" 386 14 386 45
  
  let%span span102 = "" 0 0 0 0
  
  let%span span103 = "../../../../creusot-contracts/src/std/boxed.rs" 43 26 43 43
  
  let%span span104 = "../../../../creusot-contracts/src/std/boxed.rs" 44 26 44 43
  
  let%span span105 = "" 0 0 0 0
  
  let%span span106 = "" 0 0 0 0
  
  let%span span107 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span108 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span109 = "" 0 0 0 0
  
  predicate invariant'9 (self : v)
  
  predicate inv'15 (_1 : v)
  
  axiom inv'15 : forall x : v [inv'15 x] . inv'15 x  -> invariant'9 x
  
  predicate invariant'8 (self : k)
  
  predicate inv'14 (_1 : k)
  
  axiom inv'14 : forall x : k [inv'14 x] . inv'14 x  -> invariant'8 x
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'1 (_1 : Node'0.t_Node k v)
  
  use prelude.prelude.Borrow
  
  predicate invariant'7 (self : Node'0.t_Node k v) =
    [%#span11] inv'1 self
  
  predicate inv'13 (_1 : Node'0.t_Node k v)
  
  axiom inv'13 [@rewrite] : forall x : Node'0.t_Node k v [inv'13 x] . inv'13 x = invariant'7 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'12 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'12 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'12 x] . inv'12 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'13 a_0
    end
  
  predicate inv'0 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  predicate invariant'6 (self : Option'0.t_Option (Node'0.t_Node k v)) =
    [%#span11] inv'0 self
  
  predicate inv'11 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'11 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'11 x] . inv'11 x = invariant'6 x
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'5 (_1 : Tree'0.t_Tree k v)
  
  predicate invariant'5 (self : Tree'0.t_Tree k v) =
    [%#span11] inv'5 self
  
  predicate inv'10 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'10 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'10 x] . inv'10 x = invariant'5 x
  
  predicate inv'2 (_1 : borrowed (Node'0.t_Node k v))
  
  predicate inv'9 (_1 : Option'0.t_Option (borrowed (Node'0.t_Node k v)))
  
  axiom inv'9 [@rewrite] : forall x : Option'0.t_Option (borrowed (Node'0.t_Node k v)) [inv'9 x] . inv'9 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'2 a_0
    end
  
  predicate inv'8 (_1 : (k, v))
  
  axiom inv'8 [@rewrite] : forall x : (k, v) [inv'8 x] . inv'8 x = (let (a, b) = x in inv'14 a /\ inv'15 b)
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span12] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span13] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span14] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span15] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span16] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span17] cmp_log'0 x y
  = o)  -> ([%#span18] cmp_log'0 y z = o)  -> ([%#span19] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span20] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span21] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span22] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span23] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span24] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate invariant'4 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span25] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'7 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v)))
  
  axiom inv'7 [@rewrite] : forall x : borrowed (Option'0.t_Option (Node'0.t_Node k v)) [inv'7 x] . inv'7 x
  = invariant'4 x
  
  predicate invariant'3 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span25] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'6 (_1 : borrowed (Tree'0.t_Tree k v))
  
  axiom inv'6 [@rewrite] : forall x : borrowed (Tree'0.t_Tree k v) [inv'6 x] . inv'6 x = invariant'3 x
  
  axiom inv'5 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'5 x] . inv'5 x
  = match x with
    | Tree'0.C_Tree node -> inv'0 node
    end
  
  predicate inv'3 (_1 : Node'0.t_Node k v)
  
  predicate invariant'2 (self : borrowed (Node'0.t_Node k v)) =
    [%#span25] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_1 : borrowed (Node'0.t_Node k v))
  
  axiom inv'4 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'4 x] . inv'4 x = invariant'2 x
  
  axiom inv'3 [@rewrite] : forall x : Node'0.t_Node k v [inv'3 x] . inv'3 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'5 left /\ inv'14 key /\ inv'15 val' /\ inv'5 right
    end
  
  predicate invariant'1 (self : borrowed (Node'0.t_Node k v)) =
    [%#span25] inv'1 self.current /\ inv'1 self.final
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'2 x] . inv'2 x = invariant'1 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'0 (self : Node'0.t_Node k v) =
    [%#span26] inv'3 self
  
  axiom inv'1 [@rewrite] : forall x : Node'0.t_Node k v [inv'1 x] . inv'1 x = invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'0 x] . inv'0 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'1 a_0
    end
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  use T_red_black_tree__Color as Color'0
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span27] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 285 4 285 41] (self : Node'0.t_Node k v) =
    [%#span28] color'0 (T_red_black_tree__Node.t_Node__right self) = Color'0.C_Black
    /\ (T_red_black_tree__Node.t_Node__color self = Color'0.C_Black
    \/ color'0 (T_red_black_tree__Node.t_Node__left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 270 4 270 36] (self : Tree'0.t_Tree k v) =
    [%#span29] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span30] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span32] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_Tree k v . [%#span31] height'0 self >= 0
  
  use T_red_black_tree__CP as CP'0
  
  function cpn'0 [#"../red_black_tree.rs" 230 0 230 36] (c : Color'0.t_Color) (l : CP'0.t_CP) (r : CP'0.t_CP) : CP'0.t_CP
    
   =
    [%#span33] CP'0.C_CPN c l r
  
  predicate match_t'0 [#"../red_black_tree.rs" 236 4 236 52] (self : CP'0.t_CP) (tree : Tree'0.t_Tree k v) =
    [%#span34] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node tree
      = Option'0.C_Some node
      /\ T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span35] height'0 (T_red_black_tree__Node.t_Node__left self)
    = height'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span36] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span37] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span38] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 360 4 360 39] (self : Tree'0.t_Tree k v) =
    [%#span39] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  let rec unwrap'2 (self:Option'0.t_Option (Node'0.t_Node k v)) (return'  (ret:Node'0.t_Node k v))= {[@expl:precondition] [%#span41] inv'0 self}
    {[@expl:precondition] [%#span40] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_Node k v)-> {[%#span42] inv'1 result}
      {[%#span40] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  predicate resolve'7 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span43] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    resolve'7 _1
  
  predicate is_default'0 (self : Option'0.t_Option (Node'0.t_Node k v)) =
    [%#span44] self = Option'0.C_None
  
  let rec take'0 (dest:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (Node'0.t_Node k v)))= {[@expl:precondition] [%#span45] inv'7 dest}
    any
    [ return' (result:Option'0.t_Option (Node'0.t_Node k v))-> {[%#span48] inv'0 result}
      {[%#span47] is_default'0 dest.final}
      {[%#span46] result = dest.current}
      (! return' {result}) ]
    
  
  predicate resolve'6 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Tree'0.t_Tree k v)) =
    resolve'6 _1
  
  predicate color_invariant'1 [#"../red_black_tree.rs" 290 4 290 36] (self : Node'0.t_Node k v) =
    [%#span49] color_invariant_here'0 self
    /\ color_invariant'0 (T_red_black_tree__Node.t_Node__left self)
    /\ color_invariant'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate match_n'0 [#"../red_black_tree.rs" 248 4 248 52] (self : CP'0.t_CP) (node : Node'0.t_Node k v) =
    [%#span50] match self with
      | CP'0.C_CPL color -> T_red_black_tree__Node.t_Node__color node = color /\ color_invariant'1 node
      | CP'0.C_CPN color l r -> T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  function height'1 [#"../red_black_tree.rs" 332 4 332 26] (self : Node'0.t_Node k v) : int =
    [%#span52] match T_red_black_tree__Node.t_Node__color self with
      | Color'0.C_Red -> height'0 (T_red_black_tree__Node.t_Node__left self)
      | Color'0.C_Black -> height'0 (T_red_black_tree__Node.t_Node__left self) + 1
      end
  
  axiom height'1_spec : forall self : Node'0.t_Node k v . [%#span51] forall node : Node'0.t_Node k v . self = node
   -> height'1 self = height'0 (Tree'0.C_Tree (Option'0.C_Some node))
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 144 4 144 57] (self : Node'0.t_Node k v) (k : t_DeepModelTy'0) (v : v)
    
   =
    [%#span54] has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
    \/ has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
    \/ k = deep_model'0 (T_red_black_tree__Node.t_Node__key self) /\ v = T_red_black_tree__Node.t_Node__val self
  
  axiom has_mapping'1_spec : forall self : Node'0.t_Node k v, k : t_DeepModelTy'0, v : v . [%#span53] forall node : Node'0.t_Node k v . self
  = node  -> has_mapping'1 self k v = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 152 4 152 43] (self : Node'0.t_Node k v) (o : Node'0.t_Node k v) =
    [%#span55] forall k : t_DeepModelTy'0, v : v . has_mapping'1 self k v = has_mapping'1 o k v
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 347 4 347 37] (self : Node'0.t_Node k v) =
    [%#span56] height_invariant_here'0 self
    /\ height_invariant'0 (T_red_black_tree__Node.t_Node__left self)
    /\ height_invariant'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 196 4 196 34] (self : Node'0.t_Node k v) =
    [%#span57] bst_invariant_here'0 self
    /\ bst_invariant'0 (T_red_black_tree__Node.t_Node__left self)
    /\ bst_invariant'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate internal_invariant'1 [#"../red_black_tree.rs" 376 4 376 39] (self : Node'0.t_Node k v) =
    [%#span58] bst_invariant'1 self /\ height_invariant'1 self
  
  let rec balance'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span63] inv'4 self}
    {[@expl:precondition] [%#span62] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red  -> false}
    {[@expl:precondition] [%#span61] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Red
     -> color_invariant'0 (T_red_black_tree__Node.t_Node__right self.current)}
    {[@expl:precondition] [%#span60] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red
     -> color_invariant'0 (T_red_black_tree__Node.t_Node__left self.current)}
    {[@expl:precondition] [%#span59] internal_invariant'1 self.current}
    any
    [ return' (result:())-> {[%#span71] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span70] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span69] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span68] match_n'0 (cpn'0 (Color'0.C_Black) (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span67] color_invariant'0 (T_red_black_tree__Node.t_Node__left self.current)
      /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Black  -> self.current = self.final}
      {[%#span66] height'1 self.current = height'1 self.final}
      {[%#span65] internal_invariant'1 self.final}
      {[%#span64] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : borrowed (Node'0.t_Node k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'5 _1
  
  let rec move_red_right'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span75] inv'4 self}
    {[@expl:precondition] [%#span74] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Black)))) self.current}
    {[@expl:precondition] [%#span73] internal_invariant'1 self.current}
    {[@expl:precondition] [%#span72] T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
    <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span85] inv'4 result}
      {[%#span84] color_invariant'1 result.final
      /\ (color'0 (T_red_black_tree__Node.t_Node__left result.current) = Color'0.C_Black
       -> T_red_black_tree__Node.t_Node__color result.final = Color'0.C_Black)  -> color_invariant'1 self.final}
      {[%#span83] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) result.current
      \/ match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) result.current}
      {[%#span82] forall k : t_DeepModelTy'0, v : v . has_mapping'1 self.final k v
      = (has_mapping'1 result.final k v \/ has_mapping'1 self.current k v /\ not has_mapping'1 result.current k v)}
      {[%#span81] forall k : t_DeepModelTy'0, v : v . has_mapping'1 self.current k v
      /\ le_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self.current)) k
       -> has_mapping'1 result.current k v}
      {[%#span80] forall k : t_DeepModelTy'0, v : v . has_mapping'1 result.current k v
       -> has_mapping'1 self.current k v}
      {[%#span79] T_red_black_tree__Node.t_Node__key result.current = T_red_black_tree__Node.t_Node__key self.current}
      {[%#span78] height'1 result.current = height'1 result.final  -> height'1 self.current = height'1 self.final}
      {[%#span77] internal_invariant'1 result.final
      /\ height'1 result.current = height'1 result.final
      /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'1 result.final k v  -> has_mapping'1 result.current k v)
       -> internal_invariant'1 self.final}
      {[%#span76] internal_invariant'1 result.current}
      (! return' {result}) ]
    
  
  let rec unwrap'1 (self:Option'0.t_Option (Node'0.t_Node k v)) (return'  (ret:Node'0.t_Node k v))= {[@expl:precondition] [%#span41] inv'12 self}
    {[@expl:precondition] [%#span40] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_Node k v)-> {[%#span42] inv'13 result}
      {[%#span40] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_ref'0 (self:Option'0.t_Option (Node'0.t_Node k v)) (return'  (ret:Option'0.t_Option (Node'0.t_Node k v)))= {[@expl:precondition] [%#span86] inv'11 self}
    any
    [ return' (result:Option'0.t_Option (Node'0.t_Node k v))-> {[%#span89] inv'12 result}
      {[%#span88] self = Option'0.C_None
      \/ (exists r : Node'0.t_Node k v . result = Option'0.C_Some r /\ self = Option'0.C_Some r)}
      {[%#span87] self = Option'0.C_None  -> result = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec rotate_right'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span92] inv'4 self}
    {[@expl:precondition] [%#span91] color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red}
    {[@expl:precondition] [%#span90] internal_invariant'1 self.current}
    any
    [ return' (result:())-> {[%#span99] exists l : Node'0.t_Node k v, r : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
      = Option'0.C_Some l
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.final) = Option'0.C_Some r
      /\ (T_red_black_tree__Node.t_Node__left self.final, T_red_black_tree__Node.t_Node__left r, T_red_black_tree__Node.t_Node__right r)
      = (T_red_black_tree__Node.t_Node__left l, T_red_black_tree__Node.t_Node__right l, T_red_black_tree__Node.t_Node__right self.current)
      /\ T_red_black_tree__Node.t_Node__key r = T_red_black_tree__Node.t_Node__key self.current}
      {[%#span98] T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color self.current}
      {[%#span97] color'0 (T_red_black_tree__Node.t_Node__right self.final) = Color'0.C_Red}
      {[%#span96] lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self.final)) (deep_model'0 (T_red_black_tree__Node.t_Node__key self.current))}
      {[%#span95] height'1 self.current = height'1 self.final}
      {[%#span94] internal_invariant'1 self.final}
      {[%#span93] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  let rec is_red'0 (self:Tree'0.t_Tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span100] inv'10 self}
    any [ return' (result:bool)-> {[%#span101] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  predicate resolve'4 (self : borrowed (Node'0.t_Node k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'4 _1
  
  let rec as_mut'1 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span102] inv'2 self}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span105] inv'4 result}
      {[%#span104] self.final = result.final}
      {[%#span103] self.current = result.current}
      (! return' {result}) ]
    
  
  let rec unwrap'0 (self:Option'0.t_Option (borrowed (Node'0.t_Node k v))) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span41] inv'9 self}
    {[@expl:precondition] [%#span40] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span42] inv'2 result}
      {[%#span40] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (borrowed (Node'0.t_Node k v))))= {[@expl:precondition] [%#span106] inv'7 self}
    any
    [ return' (result:Option'0.t_Option (borrowed (Node'0.t_Node k v)))-> {[%#span109] inv'9 result}
      {[%#span108] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_Node k v) . result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span107] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec delete_max_rec (self:borrowed (Tree'0.t_Tree k v)) (return'  (ret:(k, v)))= {[%#sred_black_tree2] inv'6 self}
    {[%#sred_black_tree1] match_t'0 (CP'0.C_CPL (Color'0.C_Red)) self.current
    \/ match_t'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[%#sred_black_tree0] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Tree'0.t_Tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
            Borrow.borrow_mut <Option'0.t_Option (Node'0.t_Node k v)> {rnode'0}
              (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                 [ &_15 <- _ret' ] 
                Tree'0.t_Tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _15.final ; } ] 
                    s1)))
      | s1 = -{inv'0 _15.final}- s2
      | s2 = as_mut'0 {_15} (fun (_ret':Option'0.t_Option (borrowed (Node'0.t_Node k v))) ->  [ &_14 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = unwrap'0 {_14} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_13 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {_13.current} {Borrow.get_id _13}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_12 <- _ret' ] 
             [ &_13 <- { _13 with current = _12.final ; } ] 
            s1)
      | s1 = -{inv'1 _12.final}- s2
      | s2 = as_mut'1 {_12} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &node <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'2 _13} s1
      | s1 = -{resolve'0 _13}- s2
      | s2 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s3))
      | s3 = bb4 ]
      
    | bb4 = any [ br0 -> {_17 = false} (! bb7) | br1 -> {_17} (! bb5) ] 
    | bb5 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_Node k v> {node.current}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_19 <- _ret' ] 
             [ &node <- { node with current = _19.final ; } ] 
            s1)
      | s1 = -{inv'3 _19.final}- s2
      | s2 = rotate_right'0 {_19} (fun (_ret':()) ->  [ &_16 <- _ret' ] s3)
      | s3 = bb6 ]
      
    | bb6 = bb8
    | bb7 = bb8
    | bb8 = Node'0.t_Node <k> <v> {node.current}
        (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
          Tree'0.t_Tree <k> <v> {rright'0}
            (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
              any
              [ br0 -> {rnode'0 = Option'0.C_None } (! bb9)
              | br1 (a:Node'0.t_Node k v)-> {rnode'0 = Option'0.C_Some a} (! bb15) ]
              ))
    | bb15 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rright'0} (fun (_ret':bool) ->  [ &_30 <- _ret' ] s1))
      | s1 = bb16 ]
      
    | bb16 = any [ br0 -> {_30 = false} (! bb18) | br1 -> {_30} (! bb17) ] 
    | bb17 = bb25
    | bb18 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rright'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                as_ref'0 {rnode'0} (fun (_ret':Option'0.t_Option (Node'0.t_Node k v)) ->  [ &_35 <- _ret' ] s1)))
      | s1 = bb19 ]
      
    | bb19 = s0 [ s0 = unwrap'1 {_35} (fun (_ret':Node'0.t_Node k v) ->  [ &_34 <- _ret' ] s1) | s1 = bb20 ] 
    | bb20 = s0
      [ s0 = Node'0.t_Node <k> <v> {_34}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_32 <- _ret' ] s1))
      | s1 = bb21 ]
      
    | bb21 = any [ br0 -> {_32 = false} (! bb23) | br1 -> {_32} (! bb22) ] 
    | bb22 = bb25
    | bb25 = bb26
    | bb23 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_39 <- _ret' ] 
             [ &node <- { node with current = _39.final ; } ] 
            s1)
      | s1 = -{inv'3 _39.final}- s2
      | s2 = move_red_right'0 {_39} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_38 <- _ret' ] s3)
      | s3 = bb24 ]
      
    | bb24 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {_38.current} {Borrow.get_id _38}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_37 <- _ret' ] 
             [ &_38 <- { _38 with current = _37.final ; } ] 
            s1)
      | s1 = -{inv'3 _37.final}- s2
      | s2 = {[@expl:type invariant] inv'4 node} s3
      | s3 = -{resolve'1 node}- s4
      | s4 =  [ &node <- _37 ] s5
      | s5 = {[@expl:type invariant] inv'4 _38} s6
      | s6 = -{resolve'1 _38}- s7
      | s7 = bb26 ]
      
    | bb26 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {rright'0}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_41 <- _ret' ] 
                Node'0.t_Node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _41.final ; } ] 
                    s1)))
      | s1 = -{inv'5 _41.final}- s2
      | s2 = delete_max_rec {_41} (fun (_ret':(k, v)) ->  [ &r <- _ret' ] s3)
      | s3 = bb27 ]
      
    | bb27 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_43 <- _ret' ] 
             [ &node <- { node with current = _43.final ; } ] 
            s1)
      | s1 = -{inv'3 _43.final}- s2
      | s2 = balance'0 {_43} (fun (_ret':()) ->  [ &_42 <- _ret' ] s3)
      | s3 = bb28 ]
      
    | bb28 = s0
      [ s0 = {[@expl:type invariant] inv'4 node} s1
      | s1 = -{resolve'1 node}- s2
      | s2 = {[@expl:type invariant] inv'6 self} s3
      | s3 = -{resolve'2 self}- s4
      | s4 =  [ &_0 <- r ] s5
      | s5 = bb29 ]
      
    | bb29 = bb31
    | bb9 = s0 [ s0 = {[@expl:type invariant] inv'4 node} s1 | s1 = -{resolve'1 node}- s2 | s2 = bb10 ] 
    | bb10 = s0
      [ s0 = Tree'0.t_Tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
            Borrow.borrow_final
              <Option'0.t_Option (Node'0.t_Node k v)>
              {rnode'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                 [ &_26 <- _ret' ] 
                Tree'0.t_Tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _26.final ; } ] 
                    s1)))
      | s1 = -{inv'0 _26.final}- s2
      | s2 = Borrow.borrow_final <Option'0.t_Option (Node'0.t_Node k v)> {_26.current} {Borrow.get_id _26}
          (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
             [ &_25 <- _ret' ] 
             [ &_26 <- { _26 with current = _25.final ; } ] 
            s3)
      | s3 = -{inv'0 _25.final}- s4
      | s4 = take'0 {_25} (fun (_ret':Option'0.t_Option (Node'0.t_Node k v)) ->  [ &_24 <- _ret' ] s5)
      | s5 = bb11 ]
      
    | bb11 = s0
      [ s0 = {[@expl:type invariant] inv'7 _26} s1
      | s1 = -{resolve'3 _26}- s2
      | s2 = {[@expl:type invariant] inv'6 self} s3
      | s3 = -{resolve'2 self}- s4
      | s4 = unwrap'2 {_24} (fun (_ret':Node'0.t_Node k v) ->  [ &node1 <- _ret' ] s5)
      | s5 = bb12 ]
      
    | bb12 = s0
      [ s0 = Node'0.t_Node <k> <v> {node1}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            {[@expl:type invariant] inv'5 rright'0}
            s1)
      | s1 = Node'0.t_Node <k> <v> {node1}
          (fun (rleft'1:Tree'0.t_Tree k v) (rcolor'1:Color'0.t_Color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_Tree k v) ->
            {[@expl:type invariant] inv'5 rleft'1}
            s2)
      | s2 = Node'0.t_Node <k> <v> {node1}
          (fun (rleft'2:Tree'0.t_Tree k v) (rcolor'2:Color'0.t_Color) (rkey'2:k) (rval'2:v) (rright'2:Tree'0.t_Tree k v) ->
            Node'0.t_Node <k> <v> {node1}
              (fun (rleft'3:Tree'0.t_Tree k v) (rcolor'3:Color'0.t_Color) (rkey'3:k) (rval'3:v) (rright'3:Tree'0.t_Tree k v) ->
                 [ &_0 <- (rkey'2, rval'3) ] 
                s3))
      | s3 = bb13 ]
      
    | bb13 = bb14
    | bb14 = bb30
    | bb30 = bb31
    | bb31 = return' {_0} ]
    )
    [ & _0 : (k, v) = any_l ()
    | & self : borrowed (Tree'0.t_Tree k v) = self
    | & node : borrowed (Node'0.t_Node k v) = any_l ()
    | & _12 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _13 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _14 : Option'0.t_Option (borrowed (Node'0.t_Node k v)) = any_l ()
    | & _15 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _16 : () = any_l ()
    | & _17 : bool = any_l ()
    | & _19 : borrowed (Node'0.t_Node k v) = any_l ()
    | & node1 : Node'0.t_Node k v = any_l ()
    | & _24 : Option'0.t_Option (Node'0.t_Node k v) = any_l ()
    | & _25 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _26 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _30 : bool = any_l ()
    | & _32 : bool = any_l ()
    | & _34 : Node'0.t_Node k v = any_l ()
    | & _35 : Option'0.t_Option (Node'0.t_Node k v) = any_l ()
    | & _37 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _38 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _39 : borrowed (Node'0.t_Node k v) = any_l ()
    | & r : (k, v) = any_l ()
    | & _41 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _42 : () = any_l ()
    | & _43 : borrowed (Node'0.t_Node k v) = any_l () ]
    
    [ return' (result:(k, v))-> {[@expl:postcondition] [%#sred_black_tree10] inv'8 result}
      {[@expl:postcondition] [%#sred_black_tree9] color'0 self.current = Color'0.C_Black
       -> color'0 self.final = Color'0.C_Black}
      {[@expl:postcondition] [%#sred_black_tree8] color_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree7] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.final k v
      = (deep_model'0 (let (a, _) = result in a) <> k /\ has_mapping'0 self.current k v)}
      {[@expl:postcondition] [%#sred_black_tree6] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.current k v
       -> le_log'0 k (deep_model'0 (let (a, _) = result in a))}
      {[@expl:postcondition] [%#sred_black_tree5] has_mapping'0 self.current (deep_model'0 (let (a, _) = result in a)) (let (_, a) = result in a)}
      {[@expl:postcondition] [%#sred_black_tree4] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree3] internal_invariant'0 self.final}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi9974039414958028887__delete_min_rec
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 644 15 644 43
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 645 15 646 62
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 655 27 655 31
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 647 14 647 42
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 648 14 648 50
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 649 14 649 66
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 650 4 650 104
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 651 4 652 73
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 653 14 653 39
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 654 4 654 69
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 655 36 655 42
  
  let%span span11 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span25 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span26 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span27 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span28 = "../red_black_tree.rs" 286 20 286 102
  
  let%span span29 = "../red_black_tree.rs" 272 12 278 13
  
  let%span span30 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span31 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span32 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span33 = "../red_black_tree.rs" 231 16 231 48
  
  let%span span34 = "../red_black_tree.rs" 238 12 243 13
  
  let%span span35 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span36 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span37 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span38 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span39 = "../red_black_tree.rs" 362 12 362 59
  
  let%span span40 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span41 = "" 0 0 0 0
  
  let%span span42 = "" 0 0 0 0
  
  let%span span43 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span44 = "../../../../creusot-contracts/src/std/option.rs" 147 20 147 32
  
  let%span span45 = "" 0 0 0 0
  
  let%span span46 = "../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  
  let%span span47 = "../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  
  let%span span48 = "" 0 0 0 0
  
  let%span span49 = "../red_black_tree.rs" 291 8 291 112
  
  let%span span50 = "../red_black_tree.rs" 250 12 253 13
  
  let%span span51 = "../red_black_tree.rs" 330 4 331 77
  
  let%span span52 = "../red_black_tree.rs" 334 12 337 13
  
  let%span span53 = "../red_black_tree.rs" 142 4 143 86
  
  let%span span54 = "../red_black_tree.rs" 145 8 148 9
  
  let%span span55 = "../red_black_tree.rs" 153 8 155 9
  
  let%span span56 = "../red_black_tree.rs" 348 8 348 115
  
  let%span span57 = "../red_black_tree.rs" 197 8 199 9
  
  let%span span58 = "../red_black_tree.rs" 378 12 378 59
  
  let%span span59 = "../red_black_tree.rs" 490 15 490 43
  
  let%span span60 = "../red_black_tree.rs" 491 4 492 47
  
  let%span span61 = "../red_black_tree.rs" 493 4 494 48
  
  let%span span62 = "../red_black_tree.rs" 495 4 495 110
  
  let%span span63 = "../red_black_tree.rs" 509 20 509 24
  
  let%span span64 = "../red_black_tree.rs" 496 14 496 42
  
  let%span span65 = "../red_black_tree.rs" 497 14 497 42
  
  let%span span66 = "../red_black_tree.rs" 498 14 498 50
  
  let%span span67 = "../red_black_tree.rs" 499 4 500 34
  
  let%span span68 = "../red_black_tree.rs" 501 4 502 39
  
  let%span span69 = "../red_black_tree.rs" 503 4 504 63
  
  let%span span70 = "../red_black_tree.rs" 505 4 506 61
  
  let%span span71 = "../red_black_tree.rs" 507 4 508 39
  
  let%span span72 = "../red_black_tree.rs" 523 15 523 41
  
  let%span span73 = "../red_black_tree.rs" 524 15 524 43
  
  let%span span74 = "../red_black_tree.rs" 525 15 525 86
  
  let%span span75 = "../red_black_tree.rs" 541 26 541 30
  
  let%span span76 = "../red_black_tree.rs" 526 14 526 44
  
  let%span span77 = "../red_black_tree.rs" 527 4 529 48
  
  let%span span78 = "../red_black_tree.rs" 530 4 530 97
  
  let%span span79 = "../red_black_tree.rs" 531 14 531 42
  
  let%span span80 = "../red_black_tree.rs" 532 4 532 105
  
  let%span span81 = "../red_black_tree.rs" 533 4 534 47
  
  let%span span82 = "../red_black_tree.rs" 535 4 536 108
  
  let%span span83 = "../red_black_tree.rs" 537 14 538 61
  
  let%span span84 = "../red_black_tree.rs" 539 4 540 45
  
  let%span span85 = "../red_black_tree.rs" 541 35 541 44
  
  let%span span86 = "" 0 0 0 0
  
  let%span span87 = "../../../../creusot-contracts/src/std/option.rs" 66 16 66 60
  
  let%span span88 = "../../../../creusot-contracts/src/std/option.rs" 67 16 69 18
  
  let%span span89 = "" 0 0 0 0
  
  let%span span90 = "../red_black_tree.rs" 387 15 387 19
  
  let%span span91 = "../red_black_tree.rs" 386 14 386 45
  
  let%span span92 = "" 0 0 0 0
  
  let%span span93 = "../../../../creusot-contracts/src/std/boxed.rs" 43 26 43 43
  
  let%span span94 = "../../../../creusot-contracts/src/std/boxed.rs" 44 26 44 43
  
  let%span span95 = "" 0 0 0 0
  
  let%span span96 = "" 0 0 0 0
  
  let%span span97 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span98 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span99 = "" 0 0 0 0
  
  predicate invariant'9 (self : v)
  
  predicate inv'15 (_1 : v)
  
  axiom inv'15 : forall x : v [inv'15 x] . inv'15 x  -> invariant'9 x
  
  predicate invariant'8 (self : k)
  
  predicate inv'14 (_1 : k)
  
  axiom inv'14 : forall x : k [inv'14 x] . inv'14 x  -> invariant'8 x
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'1 (_1 : Node'0.t_Node k v)
  
  use prelude.prelude.Borrow
  
  predicate invariant'7 (self : Node'0.t_Node k v) =
    [%#span11] inv'1 self
  
  predicate inv'13 (_1 : Node'0.t_Node k v)
  
  axiom inv'13 [@rewrite] : forall x : Node'0.t_Node k v [inv'13 x] . inv'13 x = invariant'7 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'12 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'12 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'12 x] . inv'12 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'13 a_0
    end
  
  predicate inv'0 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  predicate invariant'6 (self : Option'0.t_Option (Node'0.t_Node k v)) =
    [%#span11] inv'0 self
  
  predicate inv'11 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'11 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'11 x] . inv'11 x = invariant'6 x
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'5 (_1 : Tree'0.t_Tree k v)
  
  predicate invariant'5 (self : Tree'0.t_Tree k v) =
    [%#span11] inv'5 self
  
  predicate inv'10 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'10 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'10 x] . inv'10 x = invariant'5 x
  
  predicate inv'2 (_1 : borrowed (Node'0.t_Node k v))
  
  predicate inv'9 (_1 : Option'0.t_Option (borrowed (Node'0.t_Node k v)))
  
  axiom inv'9 [@rewrite] : forall x : Option'0.t_Option (borrowed (Node'0.t_Node k v)) [inv'9 x] . inv'9 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'2 a_0
    end
  
  predicate inv'8 (_1 : (k, v))
  
  axiom inv'8 [@rewrite] : forall x : (k, v) [inv'8 x] . inv'8 x = (let (a, b) = x in inv'14 a /\ inv'15 b)
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span12] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span13] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span14] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span15] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span16] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span17] cmp_log'0 x y
  = o)  -> ([%#span18] cmp_log'0 y z = o)  -> ([%#span19] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span20] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span21] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span22] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span23] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span24] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate invariant'4 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span25] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'7 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v)))
  
  axiom inv'7 [@rewrite] : forall x : borrowed (Option'0.t_Option (Node'0.t_Node k v)) [inv'7 x] . inv'7 x
  = invariant'4 x
  
  predicate invariant'3 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span25] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'6 (_1 : borrowed (Tree'0.t_Tree k v))
  
  axiom inv'6 [@rewrite] : forall x : borrowed (Tree'0.t_Tree k v) [inv'6 x] . inv'6 x = invariant'3 x
  
  axiom inv'5 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'5 x] . inv'5 x
  = match x with
    | Tree'0.C_Tree node -> inv'0 node
    end
  
  predicate inv'3 (_1 : Node'0.t_Node k v)
  
  predicate invariant'2 (self : borrowed (Node'0.t_Node k v)) =
    [%#span25] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_1 : borrowed (Node'0.t_Node k v))
  
  axiom inv'4 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'4 x] . inv'4 x = invariant'2 x
  
  axiom inv'3 [@rewrite] : forall x : Node'0.t_Node k v [inv'3 x] . inv'3 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'5 left /\ inv'14 key /\ inv'15 val' /\ inv'5 right
    end
  
  predicate invariant'1 (self : borrowed (Node'0.t_Node k v)) =
    [%#span25] inv'1 self.current /\ inv'1 self.final
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'2 x] . inv'2 x = invariant'1 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'0 (self : Node'0.t_Node k v) =
    [%#span26] inv'3 self
  
  axiom inv'1 [@rewrite] : forall x : Node'0.t_Node k v [inv'1 x] . inv'1 x = invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'0 x] . inv'0 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'1 a_0
    end
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  use T_red_black_tree__Color as Color'0
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span27] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 285 4 285 41] (self : Node'0.t_Node k v) =
    [%#span28] color'0 (T_red_black_tree__Node.t_Node__right self) = Color'0.C_Black
    /\ (T_red_black_tree__Node.t_Node__color self = Color'0.C_Black
    \/ color'0 (T_red_black_tree__Node.t_Node__left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 270 4 270 36] (self : Tree'0.t_Tree k v) =
    [%#span29] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span30] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span32] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_Tree k v . [%#span31] height'0 self >= 0
  
  use T_red_black_tree__CP as CP'0
  
  function cpn'0 [#"../red_black_tree.rs" 230 0 230 36] (c : Color'0.t_Color) (l : CP'0.t_CP) (r : CP'0.t_CP) : CP'0.t_CP
    
   =
    [%#span33] CP'0.C_CPN c l r
  
  predicate match_t'0 [#"../red_black_tree.rs" 236 4 236 52] (self : CP'0.t_CP) (tree : Tree'0.t_Tree k v) =
    [%#span34] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node tree
      = Option'0.C_Some node
      /\ T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span35] height'0 (T_red_black_tree__Node.t_Node__left self)
    = height'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span36] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span37] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span38] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 360 4 360 39] (self : Tree'0.t_Tree k v) =
    [%#span39] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Intrinsic
  
  let rec unwrap'2 (self:Option'0.t_Option (Node'0.t_Node k v)) (return'  (ret:Node'0.t_Node k v))= {[@expl:precondition] [%#span41] inv'0 self}
    {[@expl:precondition] [%#span40] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_Node k v)-> {[%#span42] inv'1 result}
      {[%#span40] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  predicate resolve'7 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span43] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    resolve'7 _1
  
  predicate is_default'0 (self : Option'0.t_Option (Node'0.t_Node k v)) =
    [%#span44] self = Option'0.C_None
  
  let rec take'0 (dest:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (Node'0.t_Node k v)))= {[@expl:precondition] [%#span45] inv'7 dest}
    any
    [ return' (result:Option'0.t_Option (Node'0.t_Node k v))-> {[%#span48] inv'0 result}
      {[%#span47] is_default'0 dest.final}
      {[%#span46] result = dest.current}
      (! return' {result}) ]
    
  
  predicate resolve'6 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Tree'0.t_Tree k v)) =
    resolve'6 _1
  
  predicate color_invariant'1 [#"../red_black_tree.rs" 290 4 290 36] (self : Node'0.t_Node k v) =
    [%#span49] color_invariant_here'0 self
    /\ color_invariant'0 (T_red_black_tree__Node.t_Node__left self)
    /\ color_invariant'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate match_n'0 [#"../red_black_tree.rs" 248 4 248 52] (self : CP'0.t_CP) (node : Node'0.t_Node k v) =
    [%#span50] match self with
      | CP'0.C_CPL color -> T_red_black_tree__Node.t_Node__color node = color /\ color_invariant'1 node
      | CP'0.C_CPN color l r -> T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  function height'1 [#"../red_black_tree.rs" 332 4 332 26] (self : Node'0.t_Node k v) : int =
    [%#span52] match T_red_black_tree__Node.t_Node__color self with
      | Color'0.C_Red -> height'0 (T_red_black_tree__Node.t_Node__left self)
      | Color'0.C_Black -> height'0 (T_red_black_tree__Node.t_Node__left self) + 1
      end
  
  axiom height'1_spec : forall self : Node'0.t_Node k v . [%#span51] forall node : Node'0.t_Node k v . self = node
   -> height'1 self = height'0 (Tree'0.C_Tree (Option'0.C_Some node))
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 144 4 144 57] (self : Node'0.t_Node k v) (k : t_DeepModelTy'0) (v : v)
    
   =
    [%#span54] has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
    \/ has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
    \/ k = deep_model'0 (T_red_black_tree__Node.t_Node__key self) /\ v = T_red_black_tree__Node.t_Node__val self
  
  axiom has_mapping'1_spec : forall self : Node'0.t_Node k v, k : t_DeepModelTy'0, v : v . [%#span53] forall node : Node'0.t_Node k v . self
  = node  -> has_mapping'1 self k v = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 152 4 152 43] (self : Node'0.t_Node k v) (o : Node'0.t_Node k v) =
    [%#span55] forall k : t_DeepModelTy'0, v : v . has_mapping'1 self k v = has_mapping'1 o k v
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 347 4 347 37] (self : Node'0.t_Node k v) =
    [%#span56] height_invariant_here'0 self
    /\ height_invariant'0 (T_red_black_tree__Node.t_Node__left self)
    /\ height_invariant'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 196 4 196 34] (self : Node'0.t_Node k v) =
    [%#span57] bst_invariant_here'0 self
    /\ bst_invariant'0 (T_red_black_tree__Node.t_Node__left self)
    /\ bst_invariant'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate internal_invariant'1 [#"../red_black_tree.rs" 376 4 376 39] (self : Node'0.t_Node k v) =
    [%#span58] bst_invariant'1 self /\ height_invariant'1 self
  
  let rec balance'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span63] inv'4 self}
    {[@expl:precondition] [%#span62] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red  -> false}
    {[@expl:precondition] [%#span61] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Red
     -> color_invariant'0 (T_red_black_tree__Node.t_Node__right self.current)}
    {[@expl:precondition] [%#span60] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red
     -> color_invariant'0 (T_red_black_tree__Node.t_Node__left self.current)}
    {[@expl:precondition] [%#span59] internal_invariant'1 self.current}
    any
    [ return' (result:())-> {[%#span71] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span70] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span69] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span68] match_n'0 (cpn'0 (Color'0.C_Black) (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span67] color_invariant'0 (T_red_black_tree__Node.t_Node__left self.current)
      /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Black  -> self.current = self.final}
      {[%#span66] height'1 self.current = height'1 self.final}
      {[%#span65] internal_invariant'1 self.final}
      {[%#span64] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : borrowed (Node'0.t_Node k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'5 _1
  
  let rec move_red_left'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span75] inv'4 self}
    {[@expl:precondition] [%#span74] match_n'0 (cpn'0 (Color'0.C_Red) (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[@expl:precondition] [%#span73] internal_invariant'1 self.current}
    {[@expl:precondition] [%#span72] T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.current)
    <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span85] inv'4 result}
      {[%#span84] color_invariant'1 result.final
      /\ (color'0 (T_red_black_tree__Node.t_Node__right result.current) = Color'0.C_Black
       -> T_red_black_tree__Node.t_Node__color result.final = Color'0.C_Black)  -> color_invariant'1 self.final}
      {[%#span83] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) result.current
      \/ match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) result.current}
      {[%#span82] forall k : t_DeepModelTy'0, v : v . has_mapping'1 self.final k v
      = (has_mapping'1 result.final k v \/ has_mapping'1 self.current k v /\ not has_mapping'1 result.current k v)}
      {[%#span81] forall k : t_DeepModelTy'0, v : v . has_mapping'1 self.current k v
      /\ le_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self.current))
       -> has_mapping'1 result.current k v}
      {[%#span80] forall k : t_DeepModelTy'0, v : v . has_mapping'1 result.current k v
       -> has_mapping'1 self.current k v}
      {[%#span79] T_red_black_tree__Node.t_Node__key self.current = T_red_black_tree__Node.t_Node__key result.current}
      {[%#span78] height'1 result.current = height'1 result.final  -> height'1 self.current = height'1 self.final}
      {[%#span77] internal_invariant'1 result.final
      /\ height'1 result.current = height'1 result.final
      /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'1 result.final k v  -> has_mapping'1 result.current k v)
       -> internal_invariant'1 self.final}
      {[%#span76] internal_invariant'1 result.current}
      (! return' {result}) ]
    
  
  let rec unwrap'1 (self:Option'0.t_Option (Node'0.t_Node k v)) (return'  (ret:Node'0.t_Node k v))= {[@expl:precondition] [%#span41] inv'12 self}
    {[@expl:precondition] [%#span40] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_Node k v)-> {[%#span42] inv'13 result}
      {[%#span40] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_ref'0 (self:Option'0.t_Option (Node'0.t_Node k v)) (return'  (ret:Option'0.t_Option (Node'0.t_Node k v)))= {[@expl:precondition] [%#span86] inv'11 self}
    any
    [ return' (result:Option'0.t_Option (Node'0.t_Node k v))-> {[%#span89] inv'12 result}
      {[%#span88] self = Option'0.C_None
      \/ (exists r : Node'0.t_Node k v . result = Option'0.C_Some r /\ self = Option'0.C_Some r)}
      {[%#span87] self = Option'0.C_None  -> result = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec is_red'0 (self:Tree'0.t_Tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span90] inv'10 self}
    any [ return' (result:bool)-> {[%#span91] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  predicate resolve'4 (self : borrowed (Node'0.t_Node k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'4 _1
  
  let rec as_mut'1 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span92] inv'2 self}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span95] inv'4 result}
      {[%#span94] self.final = result.final}
      {[%#span93] self.current = result.current}
      (! return' {result}) ]
    
  
  let rec unwrap'0 (self:Option'0.t_Option (borrowed (Node'0.t_Node k v))) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span41] inv'9 self}
    {[@expl:precondition] [%#span40] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span42] inv'2 result}
      {[%#span40] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (borrowed (Node'0.t_Node k v))))= {[@expl:precondition] [%#span96] inv'7 self}
    any
    [ return' (result:Option'0.t_Option (borrowed (Node'0.t_Node k v)))-> {[%#span99] inv'9 result}
      {[%#span98] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_Node k v) . result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span97] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec delete_min_rec (self:borrowed (Tree'0.t_Tree k v)) (return'  (ret:(k, v)))= {[%#sred_black_tree2] inv'6 self}
    {[%#sred_black_tree1] match_t'0 (CP'0.C_CPL (Color'0.C_Red)) self.current
    \/ match_t'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[%#sred_black_tree0] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Tree'0.t_Tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
            Borrow.borrow_mut <Option'0.t_Option (Node'0.t_Node k v)> {rnode'0}
              (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                 [ &_15 <- _ret' ] 
                Tree'0.t_Tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _15.final ; } ] 
                    s1)))
      | s1 = -{inv'0 _15.final}- s2
      | s2 = as_mut'0 {_15} (fun (_ret':Option'0.t_Option (borrowed (Node'0.t_Node k v))) ->  [ &_14 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = unwrap'0 {_14} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_13 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {_13.current} {Borrow.get_id _13}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_12 <- _ret' ] 
             [ &_13 <- { _13 with current = _12.final ; } ] 
            s1)
      | s1 = -{inv'1 _12.final}- s2
      | s2 = as_mut'1 {_12} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &node <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'2 _13} s1
      | s1 = -{resolve'0 _13}- s2
      | s2 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                any
                [ br0 -> {rnode'0 = Option'0.C_None } (! bb4)
                | br1 (a:Node'0.t_Node k v)-> {rnode'0 = Option'0.C_Some a} (! bb10) ]
                )) ]
      
    | bb10 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_26 <- _ret' ] s1))
      | s1 = bb11 ]
      
    | bb11 = any [ br0 -> {_26 = false} (! bb13) | br1 -> {_26} (! bb12) ] 
    | bb12 = bb20
    | bb13 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                as_ref'0 {rnode'0} (fun (_ret':Option'0.t_Option (Node'0.t_Node k v)) ->  [ &_31 <- _ret' ] s1)))
      | s1 = bb14 ]
      
    | bb14 = s0 [ s0 = unwrap'1 {_31} (fun (_ret':Node'0.t_Node k v) ->  [ &_30 <- _ret' ] s1) | s1 = bb15 ] 
    | bb15 = s0
      [ s0 = Node'0.t_Node <k> <v> {_30}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_28 <- _ret' ] s1))
      | s1 = bb16 ]
      
    | bb16 = any [ br0 -> {_28 = false} (! bb18) | br1 -> {_28} (! bb17) ] 
    | bb17 = bb20
    | bb20 = bb21
    | bb18 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_35 <- _ret' ] 
             [ &node <- { node with current = _35.final ; } ] 
            s1)
      | s1 = -{inv'3 _35.final}- s2
      | s2 = move_red_left'0 {_35} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_34 <- _ret' ] s3)
      | s3 = bb19 ]
      
    | bb19 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {_34.current} {Borrow.get_id _34}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_33 <- _ret' ] 
             [ &_34 <- { _34 with current = _33.final ; } ] 
            s1)
      | s1 = -{inv'3 _33.final}- s2
      | s2 = {[@expl:type invariant] inv'4 node} s3
      | s3 = -{resolve'1 node}- s4
      | s4 =  [ &node <- _33 ] s5
      | s5 = {[@expl:type invariant] inv'4 _34} s6
      | s6 = -{resolve'1 _34}- s7
      | s7 = bb21 ]
      
    | bb21 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {rleft'0}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_37 <- _ret' ] 
                Node'0.t_Node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node _37.final l_color'0 l_key'0 l_val'0 l_right'0 ; } ] 
                    s1)))
      | s1 = -{inv'5 _37.final}- s2
      | s2 = delete_min_rec {_37} (fun (_ret':(k, v)) ->  [ &r <- _ret' ] s3)
      | s3 = bb22 ]
      
    | bb22 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_39 <- _ret' ] 
             [ &node <- { node with current = _39.final ; } ] 
            s1)
      | s1 = -{inv'3 _39.final}- s2
      | s2 = balance'0 {_39} (fun (_ret':()) ->  [ &_38 <- _ret' ] s3)
      | s3 = bb23 ]
      
    | bb23 = s0
      [ s0 = {[@expl:type invariant] inv'4 node} s1
      | s1 = -{resolve'1 node}- s2
      | s2 = {[@expl:type invariant] inv'6 self} s3
      | s3 = -{resolve'2 self}- s4
      | s4 =  [ &_0 <- r ] s5
      | s5 = bb24 ]
      
    | bb24 = bb26
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'4 node} s1 | s1 = -{resolve'1 node}- s2 | s2 = bb5 ] 
    | bb5 = s0
      [ s0 = Tree'0.t_Tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
            Borrow.borrow_final
              <Option'0.t_Option (Node'0.t_Node k v)>
              {rnode'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                 [ &_22 <- _ret' ] 
                Tree'0.t_Tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _22.final ; } ] 
                    s1)))
      | s1 = -{inv'0 _22.final}- s2
      | s2 = Borrow.borrow_final <Option'0.t_Option (Node'0.t_Node k v)> {_22.current} {Borrow.get_id _22}
          (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
             [ &_21 <- _ret' ] 
             [ &_22 <- { _22 with current = _21.final ; } ] 
            s3)
      | s3 = -{inv'0 _21.final}- s4
      | s4 = take'0 {_21} (fun (_ret':Option'0.t_Option (Node'0.t_Node k v)) ->  [ &_20 <- _ret' ] s5)
      | s5 = bb6 ]
      
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'7 _22} s1
      | s1 = -{resolve'3 _22}- s2
      | s2 = {[@expl:type invariant] inv'6 self} s3
      | s3 = -{resolve'2 self}- s4
      | s4 = unwrap'2 {_20} (fun (_ret':Node'0.t_Node k v) ->  [ &node1 <- _ret' ] s5)
      | s5 = bb7 ]
      
    | bb7 = s0
      [ s0 = Node'0.t_Node <k> <v> {node1}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            {[@expl:type invariant] inv'5 rright'0}
            s1)
      | s1 = Node'0.t_Node <k> <v> {node1}
          (fun (rleft'1:Tree'0.t_Tree k v) (rcolor'1:Color'0.t_Color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_Tree k v) ->
            {[@expl:type invariant] inv'5 rleft'1}
            s2)
      | s2 = Node'0.t_Node <k> <v> {node1}
          (fun (rleft'2:Tree'0.t_Tree k v) (rcolor'2:Color'0.t_Color) (rkey'2:k) (rval'2:v) (rright'2:Tree'0.t_Tree k v) ->
            Node'0.t_Node <k> <v> {node1}
              (fun (rleft'3:Tree'0.t_Tree k v) (rcolor'3:Color'0.t_Color) (rkey'3:k) (rval'3:v) (rright'3:Tree'0.t_Tree k v) ->
                 [ &_0 <- (rkey'2, rval'3) ] 
                s3))
      | s3 = bb8 ]
      
    | bb8 = bb9
    | bb9 = bb25
    | bb25 = bb26
    | bb26 = return' {_0} ]
    )
    [ & _0 : (k, v) = any_l ()
    | & self : borrowed (Tree'0.t_Tree k v) = self
    | & node : borrowed (Node'0.t_Node k v) = any_l ()
    | & _12 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _13 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _14 : Option'0.t_Option (borrowed (Node'0.t_Node k v)) = any_l ()
    | & _15 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & node1 : Node'0.t_Node k v = any_l ()
    | & _20 : Option'0.t_Option (Node'0.t_Node k v) = any_l ()
    | & _21 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _22 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _26 : bool = any_l ()
    | & _28 : bool = any_l ()
    | & _30 : Node'0.t_Node k v = any_l ()
    | & _31 : Option'0.t_Option (Node'0.t_Node k v) = any_l ()
    | & _33 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _34 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _35 : borrowed (Node'0.t_Node k v) = any_l ()
    | & r : (k, v) = any_l ()
    | & _37 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _38 : () = any_l ()
    | & _39 : borrowed (Node'0.t_Node k v) = any_l () ]
    
    [ return' (result:(k, v))-> {[@expl:postcondition] [%#sred_black_tree10] inv'8 result}
      {[@expl:postcondition] [%#sred_black_tree9] color'0 self.current = Color'0.C_Black
       -> color'0 self.final = Color'0.C_Black}
      {[@expl:postcondition] [%#sred_black_tree8] color_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree7] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.final k v
      = (deep_model'0 (let (a, _) = result in a) <> k /\ has_mapping'0 self.current k v)}
      {[@expl:postcondition] [%#sred_black_tree6] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.current k v
       -> le_log'0 (deep_model'0 (let (a, _) = result in a)) k}
      {[@expl:postcondition] [%#sred_black_tree5] has_mapping'0 self.current (deep_model'0 (let (a, _) = result in a)) (let (_, a) = result in a)}
      {[@expl:postcondition] [%#sred_black_tree4] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree3] internal_invariant'0 self.final}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi9974039414958028887__delete_rec
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 711 24 711 59
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 669 15 669 43
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 670 15 671 62
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 681 23 681 27
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 681 29 681 32
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 672 14 672 42
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 673 14 673 50
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 674 14 677 5
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 678 4 678 129
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 679 14 679 39
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 680 4 680 69
  
  let%span sred_black_tree11 = "../red_black_tree.rs" 681 41 681 55
  
  let%span span12 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span26 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span27 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span28 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span29 = "../red_black_tree.rs" 286 20 286 102
  
  let%span span30 = "../red_black_tree.rs" 272 12 278 13
  
  let%span span31 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span32 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span33 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span34 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span35 = "../red_black_tree.rs" 231 16 231 48
  
  let%span span36 = "../red_black_tree.rs" 238 12 243 13
  
  let%span span37 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span38 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span39 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span40 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span41 = "../red_black_tree.rs" 362 12 362 59
  
  let%span span42 = "../red_black_tree.rs" 291 8 291 112
  
  let%span span43 = "../red_black_tree.rs" 250 12 253 13
  
  let%span span44 = "../red_black_tree.rs" 330 4 331 77
  
  let%span span45 = "../red_black_tree.rs" 334 12 337 13
  
  let%span span46 = "../red_black_tree.rs" 142 4 143 86
  
  let%span span47 = "../red_black_tree.rs" 145 8 148 9
  
  let%span span48 = "../red_black_tree.rs" 153 8 155 9
  
  let%span span49 = "../red_black_tree.rs" 348 8 348 115
  
  let%span span50 = "../red_black_tree.rs" 197 8 199 9
  
  let%span span51 = "../red_black_tree.rs" 378 12 378 59
  
  let%span span52 = "../red_black_tree.rs" 490 15 490 43
  
  let%span span53 = "../red_black_tree.rs" 491 4 492 47
  
  let%span span54 = "../red_black_tree.rs" 493 4 494 48
  
  let%span span55 = "../red_black_tree.rs" 495 4 495 110
  
  let%span span56 = "../red_black_tree.rs" 509 20 509 24
  
  let%span span57 = "../red_black_tree.rs" 496 14 496 42
  
  let%span span58 = "../red_black_tree.rs" 497 14 497 42
  
  let%span span59 = "../red_black_tree.rs" 498 14 498 50
  
  let%span span60 = "../red_black_tree.rs" 499 4 500 34
  
  let%span span61 = "../red_black_tree.rs" 501 4 502 39
  
  let%span span62 = "../red_black_tree.rs" 503 4 504 63
  
  let%span span63 = "../red_black_tree.rs" 505 4 506 61
  
  let%span span64 = "../red_black_tree.rs" 507 4 508 39
  
  let%span span65 = "../red_black_tree.rs" 523 15 523 41
  
  let%span span66 = "../red_black_tree.rs" 524 15 524 43
  
  let%span span67 = "../red_black_tree.rs" 525 15 525 86
  
  let%span span68 = "../red_black_tree.rs" 541 26 541 30
  
  let%span span69 = "../red_black_tree.rs" 526 14 526 44
  
  let%span span70 = "../red_black_tree.rs" 527 4 529 48
  
  let%span span71 = "../red_black_tree.rs" 530 4 530 97
  
  let%span span72 = "../red_black_tree.rs" 531 14 531 42
  
  let%span span73 = "../red_black_tree.rs" 532 4 532 105
  
  let%span span74 = "../red_black_tree.rs" 533 4 534 47
  
  let%span span75 = "../red_black_tree.rs" 535 4 536 108
  
  let%span span76 = "../red_black_tree.rs" 537 14 538 61
  
  let%span span77 = "../red_black_tree.rs" 539 4 540 45
  
  let%span span78 = "../red_black_tree.rs" 541 35 541 44
  
  let%span span79 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span80 = "" 0 0 0 0
  
  let%span span81 = "" 0 0 0 0
  
  let%span span82 = "../../../../creusot-contracts/src/std/mem.rs" 13 22 13 30
  
  let%span span83 = "../../../../creusot-contracts/src/std/mem.rs" 14 22 14 30
  
  let%span span84 = "../red_black_tree.rs" 58 12 65 13
  
  let%span span85 = "../red_black_tree.rs" 177 20 177 54
  
  let%span span86 = "../red_black_tree.rs" 70 4 71 93
  
  let%span span87 = "../red_black_tree.rs" 78 12 86 13
  
  let%span span88 = "../red_black_tree.rs" 91 15 91 35
  
  let%span span89 = "../red_black_tree.rs" 92 4 92 94
  
  let%span span90 = "../red_black_tree.rs" 98 12 107 13
  
  let%span span91 = "../red_black_tree.rs" 112 15 112 35
  
  let%span span92 = "../red_black_tree.rs" 113 4 113 80
  
  let%span span93 = "../red_black_tree.rs" 119 12 119 61
  
  let%span span94 = "../red_black_tree.rs" 125 15 125 35
  
  let%span span95 = "../red_black_tree.rs" 126 15 126 38
  
  let%span span96 = "../red_black_tree.rs" 127 15 127 38
  
  let%span span97 = "../red_black_tree.rs" 128 14 128 22
  
  let%span span98 = "../red_black_tree.rs" 134 12 134 37
  
  let%span span99 = "../red_black_tree.rs" 644 15 644 43
  
  let%span span100 = "../red_black_tree.rs" 645 15 646 62
  
  let%span span101 = "../red_black_tree.rs" 655 27 655 31
  
  let%span span102 = "../red_black_tree.rs" 647 14 647 42
  
  let%span span103 = "../red_black_tree.rs" 648 14 648 50
  
  let%span span104 = "../red_black_tree.rs" 649 14 649 66
  
  let%span span105 = "../red_black_tree.rs" 650 4 650 104
  
  let%span span106 = "../red_black_tree.rs" 651 4 652 73
  
  let%span span107 = "../red_black_tree.rs" 653 14 653 39
  
  let%span span108 = "../red_black_tree.rs" 654 4 654 69
  
  let%span span109 = "../red_black_tree.rs" 655 36 655 42
  
  let%span span110 = "../red_black_tree.rs" 552 15 552 40
  
  let%span span111 = "../red_black_tree.rs" 553 15 553 43
  
  let%span span112 = "../red_black_tree.rs" 554 15 554 86
  
  let%span span113 = "../red_black_tree.rs" 570 27 570 31
  
  let%span span114 = "../red_black_tree.rs" 555 14 555 44
  
  let%span span115 = "../red_black_tree.rs" 556 4 558 48
  
  let%span span116 = "../red_black_tree.rs" 559 4 559 97
  
  let%span span117 = "../red_black_tree.rs" 560 14 560 42
  
  let%span span118 = "../red_black_tree.rs" 561 4 561 105
  
  let%span span119 = "../red_black_tree.rs" 562 4 563 47
  
  let%span span120 = "../red_black_tree.rs" 564 4 565 108
  
  let%span span121 = "../red_black_tree.rs" 566 14 567 61
  
  let%span span122 = "../red_black_tree.rs" 568 4 569 45
  
  let%span span123 = "../red_black_tree.rs" 570 36 570 45
  
  let%span span124 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span125 = "" 0 0 0 0
  
  let%span span126 = "" 0 0 0 0
  
  let%span span127 = "" 0 0 0 0
  
  let%span span128 = "../../../../creusot-contracts/src/std/option.rs" 66 16 66 60
  
  let%span span129 = "../../../../creusot-contracts/src/std/option.rs" 67 16 69 18
  
  let%span span130 = "" 0 0 0 0
  
  let%span span131 = "../../../../creusot-contracts/src/std/option.rs" 147 20 147 32
  
  let%span span132 = "" 0 0 0 0
  
  let%span span133 = "../../../../creusot-contracts/src/std/mem.rs" 17 22 17 37
  
  let%span span134 = "../../../../creusot-contracts/src/std/mem.rs" 18 22 18 42
  
  let%span span135 = "" 0 0 0 0
  
  let%span span136 = "" 0 0 0 0
  
  let%span span137 = "../../../../creusot-contracts/src/std/option.rs" 39 26 39 51
  
  let%span span138 = "../red_black_tree.rs" 399 15 399 43
  
  let%span span139 = "../red_black_tree.rs" 400 15 400 42
  
  let%span span140 = "../red_black_tree.rs" 411 25 411 29
  
  let%span span141 = "../red_black_tree.rs" 401 14 401 42
  
  let%span span142 = "../red_black_tree.rs" 402 14 402 42
  
  let%span span143 = "../red_black_tree.rs" 403 14 403 50
  
  let%span span144 = "../red_black_tree.rs" 404 14 404 65
  
  let%span span145 = "../red_black_tree.rs" 405 14 405 42
  
  let%span span146 = "../red_black_tree.rs" 406 14 406 44
  
  let%span span147 = "../red_black_tree.rs" 407 4 410 36
  
  let%span span148 = "../red_black_tree.rs" 387 15 387 19
  
  let%span span149 = "../red_black_tree.rs" 386 14 386 45
  
  let%span span150 = "" 0 0 0 0
  
  let%span span151 = "" 0 0 0 0
  
  let%span span152 = "../../../../creusot-contracts/src/std/cmp.rs" 50 26 50 85
  
  let%span span153 = "" 0 0 0 0
  
  let%span span154 = "../../../../creusot-contracts/src/std/boxed.rs" 43 26 43 43
  
  let%span span155 = "../../../../creusot-contracts/src/std/boxed.rs" 44 26 44 43
  
  let%span span156 = "" 0 0 0 0
  
  let%span span157 = "" 0 0 0 0
  
  let%span span158 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span159 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span160 = "" 0 0 0 0
  
  predicate inv'10 (_1 : v)
  
  predicate inv'8 (_1 : k)
  
  predicate inv'19 (_1 : (k, v))
  
  axiom inv'19 [@rewrite] : forall x : (k, v) [inv'19 x] . inv'19 x = (let (a, b) = x in inv'8 a /\ inv'10 b)
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'1 (_1 : Node'0.t_Node k v)
  
  use prelude.prelude.Borrow
  
  predicate invariant'12 (self : Node'0.t_Node k v) =
    [%#span12] inv'1 self
  
  predicate inv'18 (_1 : Node'0.t_Node k v)
  
  axiom inv'18 [@rewrite] : forall x : Node'0.t_Node k v [inv'18 x] . inv'18 x = invariant'12 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'17 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'17 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'17 x] . inv'17 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'18 a_0
    end
  
  predicate inv'0 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  predicate invariant'11 (self : Option'0.t_Option (Node'0.t_Node k v)) =
    [%#span12] inv'0 self
  
  predicate inv'16 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'16 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'16 x] . inv'16 x = invariant'11 x
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'4 (_1 : Tree'0.t_Tree k v)
  
  predicate invariant'10 (self : Tree'0.t_Tree k v) =
    [%#span12] inv'4 self
  
  predicate inv'15 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'15 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'15 x] . inv'15 x = invariant'10 x
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span13] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span14] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span15] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span16] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span17] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span18] cmp_log'0 x y
  = o)  -> ([%#span19] cmp_log'0 y z = o)  -> ([%#span20] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span21] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span22] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span23] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span24] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span25] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate inv'2 (_1 : borrowed (Node'0.t_Node k v))
  
  predicate inv'14 (_1 : Option'0.t_Option (borrowed (Node'0.t_Node k v)))
  
  axiom inv'14 [@rewrite] : forall x : Option'0.t_Option (borrowed (Node'0.t_Node k v)) [inv'14 x] . inv'14 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'2 a_0
    end
  
  predicate inv'13 (_1 : Option'0.t_Option (k, v))
  
  axiom inv'13 [@rewrite] : forall x : Option'0.t_Option (k, v) [inv'13 x] . inv'13 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'19 a_0
    end
  
  predicate invariant'9 (self : k) =
    [%#span12] inv'8 self
  
  predicate inv'12 (_1 : k)
  
  axiom inv'12 [@rewrite] : forall x : k [inv'12 x] . inv'12 x = invariant'9 x
  
  predicate invariant'8 (self : borrowed v) =
    [%#span26] inv'10 self.current /\ inv'10 self.final
  
  predicate inv'11 (_1 : borrowed v)
  
  axiom inv'11 [@rewrite] : forall x : borrowed v [inv'11 x] . inv'11 x = invariant'8 x
  
  predicate invariant'7 (self : v)
  
  axiom inv'10 : forall x : v [inv'10 x] . inv'10 x  -> invariant'7 x
  
  predicate invariant'6 (self : borrowed k) =
    [%#span26] inv'8 self.current /\ inv'8 self.final
  
  predicate inv'9 (_1 : borrowed k)
  
  axiom inv'9 [@rewrite] : forall x : borrowed k [inv'9 x] . inv'9 x = invariant'6 x
  
  predicate invariant'5 (self : k)
  
  axiom inv'8 : forall x : k [inv'8 x] . inv'8 x  -> invariant'5 x
  
  predicate invariant'4 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span26] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'7 (_1 : borrowed (Tree'0.t_Tree k v))
  
  axiom inv'7 [@rewrite] : forall x : borrowed (Tree'0.t_Tree k v) [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate invariant'3 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span26] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'6 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v)))
  
  axiom inv'6 [@rewrite] : forall x : borrowed (Option'0.t_Option (Node'0.t_Node k v)) [inv'6 x] . inv'6 x
  = invariant'3 x
  
  predicate inv'3 (_1 : Node'0.t_Node k v)
  
  predicate invariant'2 (self : borrowed (Node'0.t_Node k v)) =
    [%#span26] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'5 (_1 : borrowed (Node'0.t_Node k v))
  
  axiom inv'5 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'5 x] . inv'5 x = invariant'2 x
  
  axiom inv'4 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'4 x] . inv'4 x
  = match x with
    | Tree'0.C_Tree node -> inv'0 node
    end
  
  axiom inv'3 [@rewrite] : forall x : Node'0.t_Node k v [inv'3 x] . inv'3 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'4 left /\ inv'8 key /\ inv'10 val' /\ inv'4 right
    end
  
  predicate invariant'1 (self : borrowed (Node'0.t_Node k v)) =
    [%#span26] inv'1 self.current /\ inv'1 self.final
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'2 x] . inv'2 x = invariant'1 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'0 (self : Node'0.t_Node k v) =
    [%#span27] inv'3 self
  
  axiom inv'1 [@rewrite] : forall x : Node'0.t_Node k v [inv'1 x] . inv'1 x = invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'0 x] . inv'0 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'1 a_0
    end
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  use T_red_black_tree__Color as Color'0
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span28] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 285 4 285 41] (self : Node'0.t_Node k v) =
    [%#span29] color'0 (T_red_black_tree__Node.t_Node__right self) = Color'0.C_Black
    /\ (T_red_black_tree__Node.t_Node__color self = Color'0.C_Black
    \/ color'0 (T_red_black_tree__Node.t_Node__left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 270 4 270 36] (self : Tree'0.t_Tree k v) =
    [%#span30] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  function deep_model'1 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span31] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'1 key /\ v = val'
      end
  
  function deep_model'0 (self : k) : t_DeepModelTy'0 =
    [%#span32] deep_model'1 self
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span34] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_Tree k v . [%#span33] height'0 self >= 0
  
  use T_red_black_tree__CP as CP'0
  
  function cpn'0 [#"../red_black_tree.rs" 230 0 230 36] (c : Color'0.t_Color) (l : CP'0.t_CP) (r : CP'0.t_CP) : CP'0.t_CP
    
   =
    [%#span35] CP'0.C_CPN c l r
  
  predicate match_t'0 [#"../red_black_tree.rs" 236 4 236 52] (self : CP'0.t_CP) (tree : Tree'0.t_Tree k v) =
    [%#span36] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node tree
      = Option'0.C_Some node
      /\ T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span37] height'0 (T_red_black_tree__Node.t_Node__left self)
    = height'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span38] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span39] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'1 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'1 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span40] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 360 4 360 39] (self : Tree'0.t_Tree k v) =
    [%#span41] bst_invariant'0 self /\ height_invariant'0 self
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate color_invariant'1 [#"../red_black_tree.rs" 290 4 290 36] (self : Node'0.t_Node k v) =
    [%#span42] color_invariant_here'0 self
    /\ color_invariant'0 (T_red_black_tree__Node.t_Node__left self)
    /\ color_invariant'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate match_n'0 [#"../red_black_tree.rs" 248 4 248 52] (self : CP'0.t_CP) (node : Node'0.t_Node k v) =
    [%#span43] match self with
      | CP'0.C_CPL color -> T_red_black_tree__Node.t_Node__color node = color /\ color_invariant'1 node
      | CP'0.C_CPN color l r -> T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  function height'1 [#"../red_black_tree.rs" 332 4 332 26] (self : Node'0.t_Node k v) : int =
    [%#span45] match T_red_black_tree__Node.t_Node__color self with
      | Color'0.C_Red -> height'0 (T_red_black_tree__Node.t_Node__left self)
      | Color'0.C_Black -> height'0 (T_red_black_tree__Node.t_Node__left self) + 1
      end
  
  axiom height'1_spec : forall self : Node'0.t_Node k v . [%#span44] forall node : Node'0.t_Node k v . self = node
   -> height'1 self = height'0 (Tree'0.C_Tree (Option'0.C_Some node))
  
  predicate has_mapping'1 [#"../red_black_tree.rs" 144 4 144 57] (self : Node'0.t_Node k v) (k : t_DeepModelTy'0) (v : v)
    
   =
    [%#span47] has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
    \/ has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
    \/ k = deep_model'1 (T_red_black_tree__Node.t_Node__key self) /\ v = T_red_black_tree__Node.t_Node__val self
  
  axiom has_mapping'1_spec : forall self : Node'0.t_Node k v, k : t_DeepModelTy'0, v : v . [%#span46] forall node : Node'0.t_Node k v . self
  = node  -> has_mapping'1 self k v = has_mapping'0 (Tree'0.C_Tree (Option'0.C_Some node)) k v
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 152 4 152 43] (self : Node'0.t_Node k v) (o : Node'0.t_Node k v) =
    [%#span48] forall k : t_DeepModelTy'0, v : v . has_mapping'1 self k v = has_mapping'1 o k v
  
  predicate height_invariant'1 [#"../red_black_tree.rs" 347 4 347 37] (self : Node'0.t_Node k v) =
    [%#span49] height_invariant_here'0 self
    /\ height_invariant'0 (T_red_black_tree__Node.t_Node__left self)
    /\ height_invariant'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate bst_invariant'1 [#"../red_black_tree.rs" 196 4 196 34] (self : Node'0.t_Node k v) =
    [%#span50] bst_invariant_here'0 self
    /\ bst_invariant'0 (T_red_black_tree__Node.t_Node__left self)
    /\ bst_invariant'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate internal_invariant'1 [#"../red_black_tree.rs" 376 4 376 39] (self : Node'0.t_Node k v) =
    [%#span51] bst_invariant'1 self /\ height_invariant'1 self
  
  let rec balance'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span56] inv'5 self}
    {[@expl:precondition] [%#span55] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red  -> false}
    {[@expl:precondition] [%#span54] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Red
     -> color_invariant'0 (T_red_black_tree__Node.t_Node__right self.current)}
    {[@expl:precondition] [%#span53] T_red_black_tree__Node.t_Node__color self.current = Color'0.C_Red
    /\ color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red
     -> color_invariant'0 (T_red_black_tree__Node.t_Node__left self.current)}
    {[@expl:precondition] [%#span52] internal_invariant'1 self.current}
    any
    [ return' (result:())-> {[%#span64] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span63] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span62] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) self.current
       -> match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final}
      {[%#span61] match_n'0 (cpn'0 (Color'0.C_Black) (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current
       -> match_n'0 (CP'0.C_CPL (Color'0.C_Red)) self.final}
      {[%#span60] color_invariant'0 (T_red_black_tree__Node.t_Node__left self.current)
      /\ color'0 (T_red_black_tree__Node.t_Node__right self.current) = Color'0.C_Black  -> self.current = self.final}
      {[%#span59] height'1 self.current = height'1 self.final}
      {[%#span58] internal_invariant'1 self.final}
      {[%#span57] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  let rec move_red_left'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span68] inv'5 self}
    {[@expl:precondition] [%#span67] match_n'0 (cpn'0 (Color'0.C_Red) (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Black))) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[@expl:precondition] [%#span66] internal_invariant'1 self.current}
    {[@expl:precondition] [%#span65] T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.current)
    <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span78] inv'5 result}
      {[%#span77] color_invariant'1 result.final
      /\ (color'0 (T_red_black_tree__Node.t_Node__right result.current) = Color'0.C_Black
       -> T_red_black_tree__Node.t_Node__color result.final = Color'0.C_Black)  -> color_invariant'1 self.final}
      {[%#span76] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) result.current
      \/ match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) result.current}
      {[%#span75] forall k : t_DeepModelTy'0, v : v . has_mapping'1 self.final k v
      = (has_mapping'1 result.final k v \/ has_mapping'1 self.current k v /\ not has_mapping'1 result.current k v)}
      {[%#span74] forall k : t_DeepModelTy'0, v : v . has_mapping'1 self.current k v
      /\ le_log'0 k (deep_model'1 (T_red_black_tree__Node.t_Node__key self.current))
       -> has_mapping'1 result.current k v}
      {[%#span73] forall k : t_DeepModelTy'0, v : v . has_mapping'1 result.current k v
       -> has_mapping'1 self.current k v}
      {[%#span72] T_red_black_tree__Node.t_Node__key self.current = T_red_black_tree__Node.t_Node__key result.current}
      {[%#span71] height'1 result.current = height'1 result.final  -> height'1 self.current = height'1 self.final}
      {[%#span70] internal_invariant'1 result.final
      /\ height'1 result.current = height'1 result.final
      /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'1 result.final k v  -> has_mapping'1 result.current k v)
       -> internal_invariant'1 self.final}
      {[%#span69] internal_invariant'1 result.current}
      (! return' {result}) ]
    
  
  predicate resolve'11 (self : borrowed v) =
    [%#span79] self.final = self.current
  
  predicate resolve'5 (_1 : borrowed v) =
    resolve'11 _1
  
  let rec swap'1 (x:borrowed v) (y:borrowed v) (return'  (ret:()))= {[@expl:precondition] [%#span81] inv'11 y}
    {[@expl:precondition] [%#span80] inv'11 x}
    any
    [ return' (result:())-> {[%#span83] y.final = x.current} {[%#span82] x.final = y.current} (! return' {result}) ]
    
  
  predicate resolve'10 (self : borrowed k) =
    [%#span79] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed k) =
    resolve'10 _1
  
  let rec swap'0 (x:borrowed k) (y:borrowed k) (return'  (ret:()))= {[@expl:precondition] [%#span81] inv'9 y}
    {[@expl:precondition] [%#span80] inv'9 x}
    any
    [ return' (result:())-> {[%#span83] y.final = x.current} {[%#span82] x.final = y.current} (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use map.Map
  
  use map.Map
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 53 4 56 47] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span84] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  use map.Const
  
  function shallow_model'0 [#"../red_black_tree.rs" 176 4 176 50] (self : Tree'0.t_Tree k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span85] model_acc'0 self (Const.const (Option'0.C_None))
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 72 4 76 5] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span87] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . [%#span86] Map.get (model_acc'0 self accu) k
  = Map.get accu k
  \/ (exists v : v . Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v)
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 93 4 95 33] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span90] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . ([%#span88] bst_invariant'0 self)
   -> ([%#span89] forall v : v . has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 114 4 116 33] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span93] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_Tree k v, k : t_DeepModelTy'0 . ([%#span91] bst_invariant'0 self)
   -> ([%#span92] forall v : v . has_mapping'0 self k v = (Map.get (shallow_model'0 self) k = Option'0.C_Some v))
  
  function has_mapping_inj'0 [#"../red_black_tree.rs" 129 4 131 33] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v1 : v) (v2 : v) : ()
    
   =
    [%#span98] let _ = has_mapping_model'0 self k in match Map.get (shallow_model'0 self) k with
      | Option'0.C_None -> ()
      | Option'0.C_Some _v -> ()
      end
  
  axiom has_mapping_inj'0_spec : forall self : Tree'0.t_Tree k v, k : t_DeepModelTy'0, v1 : v, v2 : v . ([%#span94] bst_invariant'0 self)
   -> ([%#span95] has_mapping'0 self k v1)  -> ([%#span96] has_mapping'0 self k v2)  -> ([%#span97] v1 = v2)
  
  let rec delete_min_rec'0 (self:borrowed (Tree'0.t_Tree k v)) (return'  (ret:(k, v)))= {[@expl:precondition] [%#span101] inv'7 self}
    {[@expl:precondition] [%#span100] match_t'0 (CP'0.C_CPL (Color'0.C_Red)) self.current
    \/ match_t'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[@expl:precondition] [%#span99] internal_invariant'0 self.current}
    any
    [ return' (result:(k, v))-> {[%#span109] inv'19 result}
      {[%#span108] color'0 self.current = Color'0.C_Black  -> color'0 self.final = Color'0.C_Black}
      {[%#span107] color_invariant'0 self.final}
      {[%#span106] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.final k v
      = (deep_model'1 (let (a, _) = result in a) <> k /\ has_mapping'0 self.current k v)}
      {[%#span105] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.current k v
       -> le_log'0 (deep_model'1 (let (a, _) = result in a)) k}
      {[%#span104] has_mapping'0 self.current (deep_model'1 (let (a, _) = result in a)) (let (_, a) = result in a)}
      {[%#span103] height'0 self.current = height'0 self.final}
      {[%#span102] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  let rec move_red_right'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span113] inv'5 self}
    {[@expl:precondition] [%#span112] match_n'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Black)) (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Black)))) self.current}
    {[@expl:precondition] [%#span111] internal_invariant'1 self.current}
    {[@expl:precondition] [%#span110] T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
    <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span123] inv'5 result}
      {[%#span122] color_invariant'1 result.final
      /\ (color'0 (T_red_black_tree__Node.t_Node__left result.current) = Color'0.C_Black
       -> T_red_black_tree__Node.t_Node__color result.final = Color'0.C_Black)  -> color_invariant'1 self.final}
      {[%#span121] match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Black)) (CP'0.C_CPL (Color'0.C_Red))) result.current
      \/ match_n'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Red))) result.current}
      {[%#span120] forall k : t_DeepModelTy'0, v : v . has_mapping'1 self.final k v
      = (has_mapping'1 result.final k v \/ has_mapping'1 self.current k v /\ not has_mapping'1 result.current k v)}
      {[%#span119] forall k : t_DeepModelTy'0, v : v . has_mapping'1 self.current k v
      /\ le_log'0 (deep_model'1 (T_red_black_tree__Node.t_Node__key self.current)) k
       -> has_mapping'1 result.current k v}
      {[%#span118] forall k : t_DeepModelTy'0, v : v . has_mapping'1 result.current k v
       -> has_mapping'1 self.current k v}
      {[%#span117] T_red_black_tree__Node.t_Node__key result.current = T_red_black_tree__Node.t_Node__key self.current}
      {[%#span116] height'1 result.current = height'1 result.final  -> height'1 self.current = height'1 self.final}
      {[%#span115] internal_invariant'1 result.final
      /\ height'1 result.current = height'1 result.final
      /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'1 result.final k v  -> has_mapping'1 result.current k v)
       -> internal_invariant'1 self.final}
      {[%#span114] internal_invariant'1 result.current}
      (! return' {result}) ]
    
  
  let rec unwrap'2 (self:Option'0.t_Option (Node'0.t_Node k v)) (return'  (ret:Node'0.t_Node k v))= {[@expl:precondition] [%#span125] inv'17 self}
    {[@expl:precondition] [%#span124] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_Node k v)-> {[%#span126] inv'18 result}
      {[%#span124] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_ref'0 (self:Option'0.t_Option (Node'0.t_Node k v)) (return'  (ret:Option'0.t_Option (Node'0.t_Node k v)))= {[@expl:precondition] [%#span127] inv'16 self}
    any
    [ return' (result:Option'0.t_Option (Node'0.t_Node k v))-> {[%#span130] inv'17 result}
      {[%#span129] self = Option'0.C_None
      \/ (exists r : Node'0.t_Node k v . result = Option'0.C_Some r /\ self = Option'0.C_Some r)}
      {[%#span128] self = Option'0.C_None  -> result = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec unwrap'1 (self:Option'0.t_Option (Node'0.t_Node k v)) (return'  (ret:Node'0.t_Node k v))= {[@expl:precondition] [%#span125] inv'0 self}
    {[@expl:precondition] [%#span124] self <> Option'0.C_None}
    any
    [ return' (result:Node'0.t_Node k v)-> {[%#span126] inv'1 result}
      {[%#span124] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  predicate resolve'9 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span79] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed (Tree'0.t_Tree k v)) =
    resolve'9 _1
  
  predicate resolve'8 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span79] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    resolve'8 _1
  
  predicate is_default'0 (self : Option'0.t_Option (Node'0.t_Node k v)) =
    [%#span131] self = Option'0.C_None
  
  let rec take'0 (dest:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (Node'0.t_Node k v)))= {[@expl:precondition] [%#span132] inv'6 dest}
    any
    [ return' (result:Option'0.t_Option (Node'0.t_Node k v))-> {[%#span135] inv'0 result}
      {[%#span134] is_default'0 dest.final}
      {[%#span133] result = dest.current}
      (! return' {result}) ]
    
  
  predicate resolve'7 (self : borrowed (Node'0.t_Node k v)) =
    [%#span79] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'7 _1
  
  let rec is_none'0 (self:Option'0.t_Option (Node'0.t_Node k v)) (return'  (ret:bool))= {[@expl:precondition] [%#span136] inv'16 self}
    any [ return' (result:bool)-> {[%#span137] result = (self = Option'0.C_None)} (! return' {result}) ] 
  
  let rec rotate_right'0 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:()))= {[@expl:precondition] [%#span140] inv'5 self}
    {[@expl:precondition] [%#span139] color'0 (T_red_black_tree__Node.t_Node__left self.current) = Color'0.C_Red}
    {[@expl:precondition] [%#span138] internal_invariant'1 self.current}
    any
    [ return' (result:())-> {[%#span147] exists l : Node'0.t_Node k v, r : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__left self.current)
      = Option'0.C_Some l
      /\ T_red_black_tree__Tree.t_Tree__node (T_red_black_tree__Node.t_Node__right self.final) = Option'0.C_Some r
      /\ (T_red_black_tree__Node.t_Node__left self.final, T_red_black_tree__Node.t_Node__left r, T_red_black_tree__Node.t_Node__right r)
      = (T_red_black_tree__Node.t_Node__left l, T_red_black_tree__Node.t_Node__right l, T_red_black_tree__Node.t_Node__right self.current)
      /\ T_red_black_tree__Node.t_Node__key r = T_red_black_tree__Node.t_Node__key self.current}
      {[%#span146] T_red_black_tree__Node.t_Node__color self.final = T_red_black_tree__Node.t_Node__color self.current}
      {[%#span145] color'0 (T_red_black_tree__Node.t_Node__right self.final) = Color'0.C_Red}
      {[%#span144] lt_log'0 (deep_model'1 (T_red_black_tree__Node.t_Node__key self.final)) (deep_model'1 (T_red_black_tree__Node.t_Node__key self.current))}
      {[%#span143] height'1 self.current = height'1 self.final}
      {[%#span142] internal_invariant'1 self.final}
      {[%#span141] same_mappings'0 self.current self.final}
      (! return' {result}) ]
    
  
  let rec is_red'0 (self:Tree'0.t_Tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span148] inv'15 self}
    any [ return' (result:bool)-> {[%#span149] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  let rec cmp'0 (self:k) (other:k) (return'  (ret:Ordering'0.t_Ordering))= {[@expl:precondition] [%#span151] inv'12 other}
    {[@expl:precondition] [%#span150] inv'12 self}
    any
    [ return' (result:Ordering'0.t_Ordering)-> {[%#span152] result = cmp_log'0 (deep_model'1 self) (deep_model'1 other)}
      (! return' {result}) ]
    
  
  predicate resolve'6 (self : borrowed (Node'0.t_Node k v)) =
    [%#span79] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'6 _1
  
  let rec as_mut'1 (self:borrowed (Node'0.t_Node k v)) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span153] inv'2 self}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span156] inv'5 result}
      {[%#span155] self.final = result.final}
      {[%#span154] self.current = result.current}
      (! return' {result}) ]
    
  
  let rec unwrap'0 (self:Option'0.t_Option (borrowed (Node'0.t_Node k v))) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span125] inv'14 self}
    {[@expl:precondition] [%#span124] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span126] inv'2 result}
      {[%#span124] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (borrowed (Node'0.t_Node k v))))= {[@expl:precondition] [%#span157] inv'6 self}
    any
    [ return' (result:Option'0.t_Option (borrowed (Node'0.t_Node k v)))-> {[%#span160] inv'14 result}
      {[%#span159] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_Node k v) . result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span158] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  let rec delete_rec (self:borrowed (Tree'0.t_Tree k v)) (key:k) (return'  (ret:Option'0.t_Option (k, v)))= {[%#sred_black_tree4] inv'12 key}
    {[%#sred_black_tree3] inv'7 self}
    {[%#sred_black_tree2] match_t'0 (CP'0.C_CPL (Color'0.C_Red)) self.current
    \/ match_t'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[%#sred_black_tree1] internal_invariant'0 self.current}
    (! bb0
    [ bb0 = s0
      [ s0 = Tree'0.t_Tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
            Borrow.borrow_mut <Option'0.t_Option (Node'0.t_Node k v)> {rnode'0}
              (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                 [ &_16 <- _ret' ] 
                Tree'0.t_Tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _16.final ; } ] 
                    s1)))
      | s1 = -{inv'0 _16.final}- s2
      | s2 = as_mut'0 {_16} (fun (_ret':Option'0.t_Option (borrowed (Node'0.t_Node k v))) ->  [ &_15 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0 [ s0 = unwrap'0 {_15} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_14 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {_14.current} {Borrow.get_id _14}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_13 <- _ret' ] 
             [ &_14 <- { _14 with current = _13.final ; } ] 
            s1)
      | s1 = -{inv'1 _13.final}- s2
      | s2 = as_mut'1 {_13} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &node <- _ret' ] s3)
      | s3 = bb3 ]
      
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'2 _14} s1
      | s1 = -{resolve'0 _14}- s2
      | s2 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
             [ &_21 <- rkey'0 ] 
            s3)
      | s3 = cmp'0 {key} {_21} (fun (_ret':Ordering'0.t_Ordering) ->  [ &_18 <- _ret' ] s4)
      | s4 = bb4 ]
      
    | bb4 = any
      [ br0 -> {_18 = Ordering'0.C_Less } (! bb6)
      | br1 -> {_18 = Ordering'0.C_Equal } (! bb5)
      | br2 -> {_18 = Ordering'0.C_Greater } (! bb5) ]
      
    | bb5 = s0
      [ s0 =  [ &ord <- _18 ] s1
      | s1 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_42 <- _ret' ] s2))
      | s2 = bb26 ]
      
    | bb26 = any [ br0 -> {_42 = false} (! bb33) | br1 -> {_42} (! bb27) ] 
    | bb27 = s0
      [ s0 = Borrow.borrow_mut <Node'0.t_Node k v> {node.current}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_45 <- _ret' ] 
             [ &node <- { node with current = _45.final ; } ] 
            s1)
      | s1 = -{inv'3 _45.final}- s2
      | s2 = rotate_right'0 {_45} (fun (_ret':()) ->  [ &_44 <- _ret' ] s3)
      | s3 = bb28 ]
      
    | bb28 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {rright'0}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_47 <- _ret' ] 
                Node'0.t_Node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _47.final ; } ] 
                    s1)))
      | s1 = -{inv'4 _47.final}- s2
      | s2 = delete_rec {_47} {key} (fun (_ret':Option'0.t_Option (k, v)) ->  [ &_46 <- _ret' ] s3)
      | s3 = bb29 ]
      
    | bb29 = bb30
    | bb30 = s0 [ s0 =  [ &r <- _46 ] s1 | s1 = bb32 ] 
    | bb32 = bb68
    | bb33 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rright'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                is_none'0 {rnode'0} (fun (_ret':bool) ->  [ &_50 <- _ret' ] s1)))
      | s1 = bb34 ]
      
    | bb34 = any [ br0 -> {_50 = false} (! bb44) | br1 -> {_50} (! bb35) ] 
    | bb35 = s0
      [ s0 = {[@expl:type invariant] inv'5 node} s1
      | s1 = -{resolve'1 node}- s2
      | s2 = any
        [ br0 -> {ord = Ordering'0.C_Less } (! bb38)
        | br1 -> {ord = Ordering'0.C_Equal } (! bb38)
        | br2 -> {ord = Ordering'0.C_Greater } (! bb36) ]
         ]
      
    | bb38 = s0
      [ s0 = Tree'0.t_Tree <k> <v> {self.current}
          (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
            Borrow.borrow_final
              <Option'0.t_Option (Node'0.t_Node k v)>
              {rnode'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                 [ &_59 <- _ret' ] 
                Tree'0.t_Tree <k> <v> {self.current}
                  (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                     [ &self <- { self with current = Tree'0.C_Tree _59.final ; } ] 
                    s1)))
      | s1 = -{inv'0 _59.final}- s2
      | s2 = Borrow.borrow_final <Option'0.t_Option (Node'0.t_Node k v)> {_59.current} {Borrow.get_id _59}
          (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
             [ &_58 <- _ret' ] 
             [ &_59 <- { _59 with current = _58.final ; } ] 
            s3)
      | s3 = -{inv'0 _58.final}- s4
      | s4 = take'0 {_58} (fun (_ret':Option'0.t_Option (Node'0.t_Node k v)) ->  [ &_57 <- _ret' ] s5)
      | s5 = bb39 ]
      
    | bb39 = s0
      [ s0 = {[@expl:type invariant] inv'6 _59} s1
      | s1 = -{resolve'2 _59}- s2
      | s2 = {[@expl:type invariant] inv'7 self} s3
      | s3 = -{resolve'3 self}- s4
      | s4 = unwrap'1 {_57} (fun (_ret':Node'0.t_Node k v) ->  [ &node1 <- _ret' ] s5)
      | s5 = bb40 ]
      
    | bb40 = s0
      [ s0 = Node'0.t_Node <k> <v> {node1}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            {[@expl:type invariant] inv'4 rright'0}
            s1)
      | s1 = Node'0.t_Node <k> <v> {node1}
          (fun (rleft'1:Tree'0.t_Tree k v) (rcolor'1:Color'0.t_Color) (rkey'1:k) (rval'1:v) (rright'1:Tree'0.t_Tree k v) ->
            {[@expl:type invariant] inv'4 rleft'1}
            s2)
      | s2 = Node'0.t_Node <k> <v> {node1}
          (fun (rleft'2:Tree'0.t_Tree k v) (rcolor'2:Color'0.t_Color) (rkey'2:k) (rval'2:v) (rright'2:Tree'0.t_Tree k v) ->
            Node'0.t_Node <k> <v> {node1}
              (fun (rleft'3:Tree'0.t_Tree k v) (rcolor'3:Color'0.t_Color) (rkey'3:k) (rval'3:v) (rright'3:Tree'0.t_Tree k v) ->
                 [ &_60 <- (rkey'2, rval'3) ] 
                s3))
      | s3 = bb41 ]
      
    | bb41 = bb42
    | bb42 = s0 [ s0 =  [ &_0 <- Option'0.C_Some _60 ] s1 | s1 = bb43 ] 
    | bb43 = bb72
    | bb72 = bb73
    | bb36 = s0 [ s0 = {[@expl:type invariant] inv'7 self} s1 | s1 = -{resolve'3 self}- s2 | s2 = bb37 ] 
    | bb37 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb73 ] 
    | bb73 = bb74
    | bb44 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rright'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                as_ref'0 {rnode'0} (fun (_ret':Option'0.t_Option (Node'0.t_Node k v)) ->  [ &_67 <- _ret' ] s1)))
      | s1 = bb45 ]
      
    | bb45 = s0 [ s0 = unwrap'2 {_67} (fun (_ret':Node'0.t_Node k v) ->  [ &_66 <- _ret' ] s1) | s1 = bb46 ] 
    | bb46 = s0
      [ s0 = Node'0.t_Node <k> <v> {_66}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_64 <- _ret' ] s1))
      | s1 = bb47 ]
      
    | bb47 = any [ br0 -> {_64 = false} (! bb49) | br1 -> {_64} (! bb48) ] 
    | bb48 = bb51
    | bb49 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_71 <- _ret' ] 
             [ &node <- { node with current = _71.final ; } ] 
            s1)
      | s1 = -{inv'3 _71.final}- s2
      | s2 = move_red_right'0 {_71} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_70 <- _ret' ] s3)
      | s3 = bb50 ]
      
    | bb50 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {_70.current} {Borrow.get_id _70}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_69 <- _ret' ] 
             [ &_70 <- { _70 with current = _69.final ; } ] 
            s1)
      | s1 = -{inv'3 _69.final}- s2
      | s2 = {[@expl:type invariant] inv'5 node} s3
      | s3 = -{resolve'1 node}- s4
      | s4 =  [ &node <- _69 ] s5
      | s5 = {[@expl:type invariant] inv'5 _70} s6
      | s6 = -{resolve'1 _70}- s7
      | s7 = bb51 ]
      
    | bb51 = any
      [ br0 -> {ord = Ordering'0.C_Less } (! bb63)
      | br1 -> {ord = Ordering'0.C_Equal } (! bb52)
      | br2 -> {ord = Ordering'0.C_Greater } (! bb63) ]
      
    | bb63 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {rright'0}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_90 <- _ret' ] 
                Node'0.t_Node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _90.final ; } ] 
                    s1)))
      | s1 = -{inv'4 _90.final}- s2
      | s2 = delete_rec {_90} {key} (fun (_ret':Option'0.t_Option (k, v)) ->  [ &_89 <- _ret' ] s3)
      | s3 = bb64 ]
      
    | bb64 = bb65
    | bb65 = s0 [ s0 =  [ &r <- _89 ] s1 | s1 = bb67 ] 
    | bb67 = bb68
    | bb52 = bb53
    | bb53 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {rright'0}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_74 <- _ret' ] 
                Node'0.t_Node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _74.final ; } ] 
                    s1)))
      | s1 = -{inv'4 _74.final}- s2
      | s2 = delete_min_rec'0 {_74} (fun (_ret':(k, v)) ->  [ &kv <- _ret' ] s3)
      | s3 = bb54 ]
      
    | bb54 = s0 [ s0 =  [ &_75 <- [%#sred_black_tree0] Snapshot.new () ] s1 | s1 = bb55 ] 
    | bb55 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <k> {rkey'0}
              (fun (_ret':borrowed k) ->
                 [ &_79 <- _ret' ] 
                Node'0.t_Node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                    
                    [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 _79.final l_val'0 l_right'0 ; } ]
                    
                    s1)))
      | s1 = -{inv'8 _79.final}- s2
      | s2 = Borrow.borrow_final <k> {_79.current} {Borrow.get_id _79}
          (fun (_ret':borrowed k) ->  [ &_78 <- _ret' ]  [ &_79 <- { _79 with current = _78.final ; } ] s3)
      | s3 = -{inv'8 _78.final}- s4
      | s4 = Borrow.borrow_mut <k> {let (r'0, _) = kv in r'0}
          (fun (_ret':borrowed k) ->  [ &_81 <- _ret' ]  [ &kv <- let (_, l'2) = kv in (_81.final, l'2) ] s5)
      | s5 = -{inv'8 _81.final}- s6
      | s6 = Borrow.borrow_final <k> {_81.current} {Borrow.get_id _81}
          (fun (_ret':borrowed k) ->  [ &_80 <- _ret' ]  [ &_81 <- { _81 with current = _80.final ; } ] s7)
      | s7 = -{inv'8 _80.final}- s8
      | s8 = swap'0 {_78} {_80} (fun (_ret':()) ->  [ &_77 <- _ret' ] s9)
      | s9 = bb56 ]
      
    | bb56 = s0
      [ s0 = {[@expl:type invariant] inv'9 _81} s1
      | s1 = -{resolve'4 _81}- s2
      | s2 = {[@expl:type invariant] inv'9 _79} s3
      | s3 = -{resolve'4 _79}- s4
      | s4 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <v> {rval'0}
              (fun (_ret':borrowed v) ->
                 [ &_84 <- _ret' ] 
                Node'0.t_Node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                    
                    [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 _84.final l_right'0 ; } ]
                    
                    s5)))
      | s5 = -{inv'10 _84.final}- s6
      | s6 = Borrow.borrow_final <v> {_84.current} {Borrow.get_id _84}
          (fun (_ret':borrowed v) ->  [ &_83 <- _ret' ]  [ &_84 <- { _84 with current = _83.final ; } ] s7)
      | s7 = -{inv'10 _83.final}- s8
      | s8 = Borrow.borrow_mut <v> {let (_, r'0) = kv in r'0}
          (fun (_ret':borrowed v) ->  [ &_86 <- _ret' ]  [ &kv <- let (l'1, _) = kv in (l'1, _86.final) ] s9)
      | s9 = -{inv'10 _86.final}- s10
      | s10 = Borrow.borrow_final <v> {_86.current} {Borrow.get_id _86}
          (fun (_ret':borrowed v) ->  [ &_85 <- _ret' ]  [ &_86 <- { _86 with current = _85.final ; } ] s11)
      | s11 = -{inv'10 _85.final}- s12
      | s12 = swap'1 {_83} {_85} (fun (_ret':()) ->  [ &_82 <- _ret' ] s13)
      | s13 = bb57 ]
      
    | bb57 = s0
      [ s0 = {[@expl:type invariant] inv'11 _86} s1
      | s1 = -{resolve'5 _86}- s2
      | s2 = {[@expl:type invariant] inv'11 _84} s3
      | s3 = -{resolve'5 _84}- s4
      | s4 =  [ &_87 <- Option'0.C_Some kv ] s5
      | s5 = bb58 ]
      
    | bb58 = bb59
    | bb59 = s0 [ s0 =  [ &r <- _87 ] s1 | s1 = bb61 ] 
    | bb61 = bb62
    | bb62 = bb68
    | bb68 = bb69
    | bb6 = bb7
    | bb7 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                is_none'0 {rnode'0} (fun (_ret':bool) ->  [ &_24 <- _ret' ] s1)))
      | s1 = bb8 ]
      
    | bb8 = any [ br0 -> {_24 = false} (! bb10) | br1 -> {_24} (! bb9) ] 
    | bb9 = s0
      [ s0 = {[@expl:type invariant] inv'5 node} s1
      | s1 = -{resolve'1 node}- s2
      | s2 = {[@expl:type invariant] inv'7 self} s3
      | s3 = -{resolve'3 self}- s4
      | s4 =  [ &_0 <- Option'0.C_None ] s5
      | s5 = bb74 ]
      
    | bb74 = bb75
    | bb75 = bb76
    | bb10 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_28 <- _ret' ] s1))
      | s1 = bb11 ]
      
    | bb11 = any [ br0 -> {_28 = false} (! bb13) | br1 -> {_28} (! bb12) ] 
    | bb12 = bb20
    | bb13 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {rleft'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                as_ref'0 {rnode'0} (fun (_ret':Option'0.t_Option (Node'0.t_Node k v)) ->  [ &_33 <- _ret' ] s1)))
      | s1 = bb14 ]
      
    | bb14 = s0 [ s0 = unwrap'2 {_33} (fun (_ret':Node'0.t_Node k v) ->  [ &_32 <- _ret' ] s1) | s1 = bb15 ] 
    | bb15 = s0
      [ s0 = Node'0.t_Node <k> <v> {_32}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_30 <- _ret' ] s1))
      | s1 = bb16 ]
      
    | bb16 = any [ br0 -> {_30 = false} (! bb18) | br1 -> {_30} (! bb17) ] 
    | bb17 = bb20
    | bb20 = bb21
    | bb18 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_37 <- _ret' ] 
             [ &node <- { node with current = _37.final ; } ] 
            s1)
      | s1 = -{inv'3 _37.final}- s2
      | s2 = move_red_left'0 {_37} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_36 <- _ret' ] s3)
      | s3 = bb19 ]
      
    | bb19 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {_36.current} {Borrow.get_id _36}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_35 <- _ret' ] 
             [ &_36 <- { _36 with current = _35.final ; } ] 
            s1)
      | s1 = -{inv'3 _35.final}- s2
      | s2 = {[@expl:type invariant] inv'5 node} s3
      | s3 = -{resolve'1 node}- s4
      | s4 =  [ &node <- _35 ] s5
      | s5 = {[@expl:type invariant] inv'5 _36} s6
      | s6 = -{resolve'1 _36}- s7
      | s7 = bb21 ]
      
    | bb21 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {rleft'0}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_39 <- _ret' ] 
                Node'0.t_Node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                     [ &node <- { node with current = Node'0.C_Node _39.final l_color'0 l_key'0 l_val'0 l_right'0 ; } ] 
                    s1)))
      | s1 = -{inv'4 _39.final}- s2
      | s2 = delete_rec {_39} {key} (fun (_ret':Option'0.t_Option (k, v)) ->  [ &_38 <- _ret' ] s3)
      | s3 = bb22 ]
      
    | bb22 = bb23
    | bb23 = s0 [ s0 =  [ &r <- _38 ] s1 | s1 = bb25 ] 
    | bb25 = bb69
    | bb69 = s0
      [ s0 = Borrow.borrow_final <Node'0.t_Node k v> {node.current} {Borrow.get_id node}
          (fun (_ret':borrowed (Node'0.t_Node k v)) ->
             [ &_93 <- _ret' ] 
             [ &node <- { node with current = _93.final ; } ] 
            s1)
      | s1 = -{inv'3 _93.final}- s2
      | s2 = balance'0 {_93} (fun (_ret':()) ->  [ &_92 <- _ret' ] s3)
      | s3 = bb70 ]
      
    | bb70 = s0
      [ s0 = {[@expl:type invariant] inv'5 node} s1
      | s1 = -{resolve'1 node}- s2
      | s2 = {[@expl:type invariant] inv'7 self} s3
      | s3 = -{resolve'3 self}- s4
      | s4 =  [ &_0 <- r ] s5
      | s5 = bb71 ]
      
    | bb71 = bb76
    | bb76 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option (k, v) = any_l ()
    | & self : borrowed (Tree'0.t_Tree k v) = self
    | & key : k = key
    | & r : Option'0.t_Option (k, v) = any_l ()
    | & node : borrowed (Node'0.t_Node k v) = any_l ()
    | & _13 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _14 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _15 : Option'0.t_Option (borrowed (Node'0.t_Node k v)) = any_l ()
    | & _16 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _18 : Ordering'0.t_Ordering = any_l ()
    | & _21 : k = any_l ()
    | & _24 : bool = any_l ()
    | & _28 : bool = any_l ()
    | & _30 : bool = any_l ()
    | & _32 : Node'0.t_Node k v = any_l ()
    | & _33 : Option'0.t_Option (Node'0.t_Node k v) = any_l ()
    | & _35 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _36 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _37 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _38 : Option'0.t_Option (k, v) = any_l ()
    | & _39 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & ord : Ordering'0.t_Ordering = any_l ()
    | & _42 : bool = any_l ()
    | & _44 : () = any_l ()
    | & _45 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _46 : Option'0.t_Option (k, v) = any_l ()
    | & _47 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _50 : bool = any_l ()
    | & node1 : Node'0.t_Node k v = any_l ()
    | & _57 : Option'0.t_Option (Node'0.t_Node k v) = any_l ()
    | & _58 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _59 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _60 : (k, v) = any_l ()
    | & _64 : bool = any_l ()
    | & _66 : Node'0.t_Node k v = any_l ()
    | & _67 : Option'0.t_Option (Node'0.t_Node k v) = any_l ()
    | & _69 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _70 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _71 : borrowed (Node'0.t_Node k v) = any_l ()
    | & kv : (k, v) = any_l ()
    | & _74 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _75 : Snapshot.snap_ty () = any_l ()
    | & _77 : () = any_l ()
    | & _78 : borrowed k = any_l ()
    | & _79 : borrowed k = any_l ()
    | & _80 : borrowed k = any_l ()
    | & _81 : borrowed k = any_l ()
    | & _82 : () = any_l ()
    | & _83 : borrowed v = any_l ()
    | & _84 : borrowed v = any_l ()
    | & _85 : borrowed v = any_l ()
    | & _86 : borrowed v = any_l ()
    | & _87 : Option'0.t_Option (k, v) = any_l ()
    | & _89 : Option'0.t_Option (k, v) = any_l ()
    | & _90 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _92 : () = any_l ()
    | & _93 : borrowed (Node'0.t_Node k v) = any_l () ]
    
    [ return' (result:Option'0.t_Option (k, v))-> {[@expl:postcondition] [%#sred_black_tree11] inv'13 result}
      {[@expl:postcondition] [%#sred_black_tree10] color'0 self.current = Color'0.C_Black
       -> color'0 self.final = Color'0.C_Black}
      {[@expl:postcondition] [%#sred_black_tree9] color_invariant'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree8] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.final k v
      = (deep_model'0 key <> k /\ has_mapping'0 self.current k v)}
      {[@expl:postcondition] [%#sred_black_tree7] match result with
        | Option'0.C_None -> forall v : v . not has_mapping'0 self.current (deep_model'0 key) v
        | Option'0.C_Some (k, v) -> deep_model'0 key = deep_model'1 k /\ has_mapping'0 self.current (deep_model'1 k) v
        end}
      {[@expl:postcondition] [%#sred_black_tree6] height'0 self.current = height'0 self.final}
      {[@expl:postcondition] [%#sred_black_tree5] internal_invariant'0 self.final}
      (! return' {result}) ]
    
end
module T_red_black_tree__Map
  use T_red_black_tree__Tree as Tree'0
  
  type t_Map 'k 'v =
    | C_Map (Tree'0.t_Tree 'k 'v)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Map < 'k > < 'v > (input:t_Map 'k 'v) (ret  (field_0:Tree'0.t_Tree 'k 'v))= any
    [ good (field_0:Tree'0.t_Tree 'k 'v)-> {C_Map field_0 = input} (! ret {field_0})
    | bad (field_0:Tree'0.t_Tree 'k 'v)-> {C_Map field_0 <> input} {false} any ]
    
  
  function t_Map__0 (self : t_Map 'k 'v) : Tree'0.t_Tree 'k 'v =
    match self with
      | C_Map a -> a
      end
end
module M_red_black_tree__qyi1129371875592489445__new
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 757 14 757 43
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 758 20 758 24
  
  let%span span2 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span3 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span4 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span5 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span6 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span7 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span16 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span17 = "../red_black_tree.rs" 286 20 286 102
  
  let%span span18 = "../red_black_tree.rs" 272 12 278 13
  
  let%span span19 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span20 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span21 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span22 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span23 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span24 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span25 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span26 = "../red_black_tree.rs" 362 12 362 59
  
  let%span span27 = "../red_black_tree.rs" 747 8 749 9
  
  let%span span28 = "../red_black_tree.rs" 58 12 65 13
  
  let%span span29 = "../red_black_tree.rs" 177 20 177 54
  
  let%span span30 = "../red_black_tree.rs" 736 8 736 29
  
  predicate invariant'3 (self : v)
  
  predicate inv'6 (_1 : v)
  
  axiom inv'6 : forall x : v [inv'6 x] . inv'6 x  -> invariant'3 x
  
  predicate invariant'2 (self : k)
  
  predicate inv'5 (_1 : k)
  
  axiom inv'5 : forall x : k [inv'5 x] . inv'5 x  -> invariant'2 x
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'1 (_1 : Tree'0.t_Tree k v)
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'4 (_1 : Node'0.t_Node k v)
  
  axiom inv'4 [@rewrite] : forall x : Node'0.t_Node k v [inv'4 x] . inv'4 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'1 left /\ inv'5 key /\ inv'6 val' /\ inv'1 right
    end
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'1 (self : Node'0.t_Node k v) =
    [%#span2] inv'4 self
  
  predicate inv'3 (_1 : Node'0.t_Node k v)
  
  axiom inv'3 [@rewrite] : forall x : Node'0.t_Node k v [inv'3 x] . inv'3 x = invariant'1 x
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span3] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span4] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span5] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span6] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span7] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span8] cmp_log'0 x y
  = o)  -> ([%#span9] cmp_log'0 y z = o)  -> ([%#span10] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span11] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span12] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span13] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span14] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span15] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'2 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  axiom inv'1 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'1 x] . inv'1 x
  = match x with
    | Tree'0.C_Tree node -> inv'2 node
    end
  
  use T_red_black_tree__Color as Color'0
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span16] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 285 4 285 41] (self : Node'0.t_Node k v) =
    [%#span17] color'0 (T_red_black_tree__Node.t_Node__right self) = Color'0.C_Black
    /\ (T_red_black_tree__Node.t_Node__color self = Color'0.C_Black
    \/ color'0 (T_red_black_tree__Node.t_Node__left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 270 4 270 36] (self : Tree'0.t_Tree k v) =
    [%#span18] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span20] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_Tree k v . [%#span19] height'0 self >= 0
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span21] height'0 (T_red_black_tree__Node.t_Node__left self)
    = height'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span22] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span23] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span24] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span25] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 360 4 360 39] (self : Tree'0.t_Tree k v) =
    [%#span26] bst_invariant'0 self /\ height_invariant'0 self
  
  use T_red_black_tree__Map as T_red_black_tree__Map
  
  use T_red_black_tree__Map as Map'0
  
  predicate invariant'0 [#"../red_black_tree.rs" 746 4 746 30] (self : Map'0.t_Map k v) =
    [%#span27] internal_invariant'0 (T_red_black_tree__Map.t_Map__0 self)
    /\ color_invariant'0 (T_red_black_tree__Map.t_Map__0 self)
    /\ color'0 (T_red_black_tree__Map.t_Map__0 self) = Color'0.C_Black
  
  predicate inv'0 (_1 : Map'0.t_Map k v)
  
  axiom inv'0 [@rewrite] : forall x : Map'0.t_Map k v [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map a_0 -> inv'1 a_0
    end)
  
  use map.Const
  
  use map.Map
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 53 4 56 47] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span28] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  function shallow_model'1 [#"../red_black_tree.rs" 176 4 176 50] (self : Tree'0.t_Tree k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span29] model_acc'0 self (Const.const (Option'0.C_None))
  
  function shallow_model'0 [#"../red_black_tree.rs" 735 4 735 50] (self : Map'0.t_Map k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span30] shallow_model'1 (T_red_black_tree__Map.t_Map__0 self)
  
  use prelude.prelude.Intrinsic
  
  let rec new (_1:()) (return'  (ret:Map'0.t_Map k v))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_3 <- Option'0.C_None ] s1 | s1 =  [ &_2 <- Tree'0.C_Tree _3 ] s2 | s2 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &_0 <- Map'0.C_Map _2 ] s1 | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    )
    [ & _0 : Map'0.t_Map k v = any_l ()
    | & _2 : Tree'0.t_Tree k v = any_l ()
    | & _3 : Option'0.t_Option (Node'0.t_Node k v) = any_l () ]
    
    [ return' (result:Map'0.t_Map k v)-> {[@expl:postcondition] [%#sred_black_tree1] inv'0 result}
      {[@expl:postcondition] [%#sred_black_tree0] shallow_model'0 result = Const.const (Option'0.C_None)}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi1129371875592489445__insert
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 766 8 766 53
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 763 23 763 27
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 763 29 763 32
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 763 37 763 40
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 762 14 762 64
  
  let%span span5 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span6 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span7 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span8 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span9 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span11 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span12 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span13 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span14 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span16 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span17 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span18 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span19 = "../red_black_tree.rs" 286 20 286 102
  
  let%span span20 = "../red_black_tree.rs" 272 12 278 13
  
  let%span span21 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span22 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span23 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span24 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span25 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span26 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span27 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span28 = "../red_black_tree.rs" 362 12 362 59
  
  let%span span29 = "../red_black_tree.rs" 747 8 749 9
  
  let%span span30 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span31 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span32 = "../red_black_tree.rs" 58 12 65 13
  
  let%span span33 = "../red_black_tree.rs" 177 20 177 54
  
  let%span span34 = "../red_black_tree.rs" 736 8 736 29
  
  let%span span35 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span36 = "../red_black_tree.rs" 70 4 71 93
  
  let%span span37 = "../red_black_tree.rs" 78 12 86 13
  
  let%span span38 = "../red_black_tree.rs" 91 15 91 35
  
  let%span span39 = "../red_black_tree.rs" 92 4 92 94
  
  let%span span40 = "../red_black_tree.rs" 98 12 107 13
  
  let%span span41 = "../red_black_tree.rs" 112 15 112 35
  
  let%span span42 = "../red_black_tree.rs" 113 4 113 80
  
  let%span span43 = "../red_black_tree.rs" 119 12 119 61
  
  let%span span44 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span45 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span46 = "" 0 0 0 0
  
  let%span span47 = "" 0 0 0 0
  
  let%span span48 = "" 0 0 0 0
  
  let%span span49 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span50 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span51 = "" 0 0 0 0
  
  let%span span52 = "../red_black_tree.rs" 238 12 243 13
  
  let%span span53 = "../red_black_tree.rs" 231 16 231 48
  
  let%span span54 = "../red_black_tree.rs" 585 15 585 43
  
  let%span span55 = "../red_black_tree.rs" 586 15 586 40
  
  let%span span56 = "../red_black_tree.rs" 593 23 593 27
  
  let%span span57 = "../red_black_tree.rs" 593 29 593 32
  
  let%span span58 = "../red_black_tree.rs" 593 37 593 40
  
  let%span span59 = "../red_black_tree.rs" 587 14 587 42
  
  let%span span60 = "../red_black_tree.rs" 588 14 588 50
  
  let%span span61 = "../red_black_tree.rs" 589 14 590 39
  
  let%span span62 = "../red_black_tree.rs" 591 14 591 56
  
  let%span span63 = "../red_black_tree.rs" 592 4 592 127
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'5 (_1 : v)
  
  predicate inv'4 (_1 : k)
  
  predicate inv'0 (_1 : Tree'0.t_Tree k v)
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'11 (_1 : Node'0.t_Node k v)
  
  axiom inv'11 [@rewrite] : forall x : Node'0.t_Node k v [inv'11 x] . inv'11 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'0 left /\ inv'4 key /\ inv'5 val' /\ inv'0 right
    end
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span5] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span6] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span7] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span8] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span9] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span10] cmp_log'0 x y
  = o)  -> ([%#span11] cmp_log'0 y z = o)  -> ([%#span12] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span13] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span14] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span15] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span16] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span17] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  use T_red_black_tree__Color as Color'0
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  use T_core__option__Option as Option'0
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span18] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 285 4 285 41] (self : Node'0.t_Node k v) =
    [%#span19] color'0 (T_red_black_tree__Node.t_Node__right self) = Color'0.C_Black
    /\ (T_red_black_tree__Node.t_Node__color self = Color'0.C_Black
    \/ color'0 (T_red_black_tree__Node.t_Node__left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 270 4 270 36] (self : Tree'0.t_Tree k v) =
    [%#span20] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span22] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_Tree k v . [%#span21] height'0 self >= 0
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span23] height'0 (T_red_black_tree__Node.t_Node__left self)
    = height'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span24] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span25] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span26] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span27] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 360 4 360 39] (self : Tree'0.t_Tree k v) =
    [%#span28] bst_invariant'0 self /\ height_invariant'0 self
  
  use T_red_black_tree__Map as T_red_black_tree__Map
  
  use T_red_black_tree__Map as Map'0
  
  predicate invariant'7 [#"../red_black_tree.rs" 746 4 746 30] (self : Map'0.t_Map k v) =
    [%#span29] internal_invariant'0 (T_red_black_tree__Map.t_Map__0 self)
    /\ color_invariant'0 (T_red_black_tree__Map.t_Map__0 self)
    /\ color'0 (T_red_black_tree__Map.t_Map__0 self) = Color'0.C_Black
  
  predicate inv'10 (_1 : Map'0.t_Map k v)
  
  axiom inv'10 [@rewrite] : forall x : Map'0.t_Map k v [inv'10 x] . inv'10 x
  = (invariant'7 x
  /\ match x with
    | Map'0.C_Map a_0 -> inv'0 a_0
    end)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'6 (self : Node'0.t_Node k v) =
    [%#span30] inv'11 self
  
  predicate inv'9 (_1 : Node'0.t_Node k v)
  
  axiom inv'9 [@rewrite] : forall x : Node'0.t_Node k v [inv'9 x] . inv'9 x = invariant'6 x
  
  use prelude.prelude.Borrow
  
  predicate inv'2 (_1 : borrowed (Node'0.t_Node k v))
  
  predicate inv'8 (_1 : Option'0.t_Option (borrowed (Node'0.t_Node k v)))
  
  axiom inv'8 [@rewrite] : forall x : Option'0.t_Option (borrowed (Node'0.t_Node k v)) [inv'8 x] . inv'8 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'2 a_0
    end
  
  predicate inv'1 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  predicate invariant'5 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span31] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'7 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v)))
  
  axiom inv'7 [@rewrite] : forall x : borrowed (Option'0.t_Option (Node'0.t_Node k v)) [inv'7 x] . inv'7 x
  = invariant'5 x
  
  predicate invariant'4 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span31] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'6 (_1 : borrowed (Tree'0.t_Tree k v))
  
  axiom inv'6 [@rewrite] : forall x : borrowed (Tree'0.t_Tree k v) [inv'6 x] . inv'6 x = invariant'4 x
  
  predicate invariant'3 (self : v)
  
  axiom inv'5 : forall x : v [inv'5 x] . inv'5 x  -> invariant'3 x
  
  predicate invariant'2 (self : k)
  
  axiom inv'4 : forall x : k [inv'4 x] . inv'4 x  -> invariant'2 x
  
  predicate invariant'1 (self : borrowed (Map'0.t_Map k v)) =
    [%#span31] inv'10 self.current /\ inv'10 self.final
  
  predicate inv'3 (_1 : borrowed (Map'0.t_Map k v))
  
  axiom inv'3 [@rewrite] : forall x : borrowed (Map'0.t_Map k v) [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed (Node'0.t_Node k v)) =
    [%#span31] inv'9 self.current /\ inv'9 self.final
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'2 x] . inv'2 x = invariant'0 x
  
  axiom inv'1 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'1 x] . inv'1 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'9 a_0
    end
  
  axiom inv'0 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'0 x] . inv'0 x
  = match x with
    | Tree'0.C_Tree node -> inv'1 node
    end
  
  use map.Map
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 53 4 56 47] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span32] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  use map.Const
  
  function shallow_model'2 [#"../red_black_tree.rs" 176 4 176 50] (self : Tree'0.t_Tree k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span33] model_acc'0 self (Const.const (Option'0.C_None))
  
  function shallow_model'0 [#"../red_black_tree.rs" 735 4 735 50] (self : Map'0.t_Map k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span34] shallow_model'2 (T_red_black_tree__Map.t_Map__0 self)
  
  function shallow_model'1 (self : borrowed (Map'0.t_Map k v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v) =
    [%#span35] shallow_model'0 self.current
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use map.Map
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 72 4 76 5] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span37] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . [%#span36] Map.get (model_acc'0 self accu) k
  = Map.get accu k
  \/ (exists v : v . Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v)
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 93 4 95 33] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span40] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . ([%#span38] bst_invariant'0 self)
   -> ([%#span39] forall v : v . has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 114 4 116 33] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span43] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_Tree k v, k : t_DeepModelTy'0 . ([%#span41] bst_invariant'0 self)
   -> ([%#span42] forall v : v . has_mapping'0 self k v = (Map.get (shallow_model'2 self) k = Option'0.C_Some v))
  
  predicate resolve'3 (self : borrowed (Map'0.t_Map k v)) =
    [%#span44] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Map'0.t_Map k v)) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed (Node'0.t_Node k v)) =
    [%#span44] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'2 _1
  
  let rec unwrap'0 (self:Option'0.t_Option (borrowed (Node'0.t_Node k v))) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span46] inv'8 self}
    {[@expl:precondition] [%#span45] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span47] inv'2 result}
      {[%#span45] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (borrowed (Node'0.t_Node k v))))= {[@expl:precondition] [%#span48] inv'7 self}
    any
    [ return' (result:Option'0.t_Option (borrowed (Node'0.t_Node k v)))-> {[%#span51] inv'8 result}
      {[%#span50] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_Node k v) . result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span49] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  use T_red_black_tree__CP as CP'0
  
  predicate match_t'0 [#"../red_black_tree.rs" 236 4 236 52] (self : CP'0.t_CP) (tree : Tree'0.t_Tree k v) =
    [%#span52] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node tree
      = Option'0.C_Some node
      /\ T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  function cpn'0 [#"../red_black_tree.rs" 230 0 230 36] (c : Color'0.t_Color) (l : CP'0.t_CP) (r : CP'0.t_CP) : CP'0.t_CP
    
   =
    [%#span53] CP'0.C_CPN c l r
  
  let rec insert_rec'0 (self:borrowed (Tree'0.t_Tree k v)) (key:k) (val':v) (return'  (ret:()))= {[@expl:precondition] [%#span58] inv'5 val'}
    {[@expl:precondition] [%#span57] inv'4 key}
    {[@expl:precondition] [%#span56] inv'6 self}
    {[@expl:precondition] [%#span55] color_invariant'0 self.current}
    {[@expl:precondition] [%#span54] internal_invariant'0 self.current}
    any
    [ return' (result:())-> {[%#span63] forall k : t_DeepModelTy'0, v : v . k = deep_model'0 key
      \/ has_mapping'0 self.current k v = has_mapping'0 self.final k v}
      {[%#span62] has_mapping'0 self.final (deep_model'0 key) val'}
      {[%#span61] match_t'0 (cpn'0 (Color'0.C_Red) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.final
      /\ color'0 self.current = Color'0.C_Red
      \/ color_invariant'0 self.final}
      {[%#span60] height'0 self.current = height'0 self.final}
      {[%#span59] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  let rec insert (self:borrowed (Map'0.t_Map k v)) (key:k) (val':v) (return'  (ret:()))= {[%#sred_black_tree3] inv'5 val'}
    {[%#sred_black_tree2] inv'4 key}
    {[%#sred_black_tree1] inv'3 self}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {r0'0}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_6 <- _ret' ] 
                Map'0.t_Map <k> <v> {self.current}
                  (fun (l_0'0:Tree'0.t_Tree k v) ->  [ &self <- { self with current = Map'0.C_Map _6.final ; } ] s1)))
      | s1 = -{inv'0 _6.final}- s2
      | s2 = insert_rec'0 {_6} {key} {val'} (fun (_ret':()) ->  [ &_5 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_9 <- Color'0.C_Black ] s1
      | s1 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {r0'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_final
                  <Option'0.t_Option (Node'0.t_Node k v)>
                  {rnode'0}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id self) 1) 1}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_12 <- _ret' ] 
                    Map'0.t_Map <k> <v> {self.current}
                      (fun (l_0'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_0'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                             [ &self <- { self with current = Map'0.C_Map (Tree'0.C_Tree _12.final) ; } ] 
                            s2)))))
      | s2 = -{inv'1 _12.final}- s3
      | s3 = as_mut'0 {_12} (fun (_ret':Option'0.t_Option (borrowed (Node'0.t_Node k v))) ->  [ &_11 <- _ret' ] s4)
      | s4 = bb3 ]
      
    | bb3 = s0 [ s0 = unwrap'0 {_11} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_10 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = Node'0.t_Node <k> <v> {_10.current}
          (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
             [ &_10 <- { _10 with current = Node'0.C_Node l_left'0 _9 l_key'0 l_val'0 l_right'0 ; } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'2 _10} s2
      | s2 = -{resolve'0 _10}- s3
      | s3 = {[@expl:type invariant] inv'3 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 =  [ &_13 <- [%#sred_black_tree0] Snapshot.new () ] s6
      | s6 = bb5 ]
      
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (Map'0.t_Map k v) = self
    | & key : k = key
    | & val' : v = val'
    | & _5 : () = any_l ()
    | & _6 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _9 : Color'0.t_Color = any_l ()
    | & _10 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _11 : Option'0.t_Option (borrowed (Node'0.t_Node k v)) = any_l ()
    | & _12 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _13 : Snapshot.snap_ty () = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#sred_black_tree4] shallow_model'0 self.final
      = Map.set (shallow_model'1 self) (deep_model'0 key) (Option'0.C_Some val')}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi1129371875592489445__delete_max
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 776 23 776 41
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 784 8 784 58
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 789 8 789 53
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 775 27 775 31
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 769 14 774 5
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 775 36 775 50
  
  let%span span6 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span7 = "../red_black_tree.rs" 286 20 286 102
  
  let%span span8 = "../red_black_tree.rs" 272 12 278 13
  
  let%span span9 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span10 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span11 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span12 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span13 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span14 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span15 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span16 = "../red_black_tree.rs" 362 12 362 59
  
  let%span span17 = "../red_black_tree.rs" 747 8 749 9
  
  let%span span18 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span19 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span33 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span34 = "../red_black_tree.rs" 58 12 65 13
  
  let%span span35 = "../red_black_tree.rs" 177 20 177 54
  
  let%span span36 = "../red_black_tree.rs" 736 8 736 29
  
  let%span span37 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span38 = "../red_black_tree.rs" 70 4 71 93
  
  let%span span39 = "../red_black_tree.rs" 78 12 86 13
  
  let%span span40 = "../red_black_tree.rs" 91 15 91 35
  
  let%span span41 = "../red_black_tree.rs" 92 4 92 94
  
  let%span span42 = "../red_black_tree.rs" 98 12 107 13
  
  let%span span43 = "../red_black_tree.rs" 112 15 112 35
  
  let%span span44 = "../red_black_tree.rs" 113 4 113 80
  
  let%span span45 = "../red_black_tree.rs" 119 12 119 61
  
  let%span span46 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span47 = "" 0 0 0 0
  
  let%span span48 = "" 0 0 0 0
  
  let%span span49 = "" 0 0 0 0
  
  let%span span50 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span51 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span52 = "" 0 0 0 0
  
  let%span span53 = "../red_black_tree.rs" 231 16 231 48
  
  let%span span54 = "../red_black_tree.rs" 238 12 243 13
  
  let%span span55 = "../red_black_tree.rs" 616 15 616 43
  
  let%span span56 = "../red_black_tree.rs" 617 15 618 62
  
  let%span span57 = "../red_black_tree.rs" 627 27 627 31
  
  let%span span58 = "../red_black_tree.rs" 619 14 619 42
  
  let%span span59 = "../red_black_tree.rs" 620 14 620 50
  
  let%span span60 = "../red_black_tree.rs" 621 14 621 66
  
  let%span span61 = "../red_black_tree.rs" 622 4 622 104
  
  let%span span62 = "../red_black_tree.rs" 623 4 624 73
  
  let%span span63 = "../red_black_tree.rs" 625 14 625 39
  
  let%span span64 = "../red_black_tree.rs" 626 4 626 69
  
  let%span span65 = "../red_black_tree.rs" 627 36 627 42
  
  let%span span66 = "../red_black_tree.rs" 47 8 49 9
  
  let%span span67 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span68 = "../red_black_tree.rs" 387 15 387 19
  
  let%span span69 = "../red_black_tree.rs" 386 14 386 45
  
  predicate invariant'8 (self : v)
  
  predicate inv'14 (_1 : v)
  
  axiom inv'14 : forall x : v [inv'14 x] . inv'14 x  -> invariant'8 x
  
  predicate invariant'7 (self : k)
  
  predicate inv'13 (_1 : k)
  
  axiom inv'13 : forall x : k [inv'13 x] . inv'13 x  -> invariant'7 x
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'5 (_1 : Tree'0.t_Tree k v)
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'12 (_1 : Node'0.t_Node k v)
  
  axiom inv'12 [@rewrite] : forall x : Node'0.t_Node k v [inv'12 x] . inv'12 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'5 left /\ inv'13 key /\ inv'14 val' /\ inv'5 right
    end
  
  use T_red_black_tree__Color as Color'0
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  use T_core__option__Option as Option'0
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span6] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 285 4 285 41] (self : Node'0.t_Node k v) =
    [%#span7] color'0 (T_red_black_tree__Node.t_Node__right self) = Color'0.C_Black
    /\ (T_red_black_tree__Node.t_Node__color self = Color'0.C_Black
    \/ color'0 (T_red_black_tree__Node.t_Node__left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 270 4 270 36] (self : Tree'0.t_Tree k v) =
    [%#span8] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span10] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_Tree k v . [%#span9] height'0 self >= 0
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span11] height'0 (T_red_black_tree__Node.t_Node__left self)
    = height'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span12] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span13] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span14] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span15] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 360 4 360 39] (self : Tree'0.t_Tree k v) =
    [%#span16] bst_invariant'0 self /\ height_invariant'0 self
  
  use T_red_black_tree__Map as T_red_black_tree__Map
  
  use T_red_black_tree__Map as Map'0
  
  predicate invariant'6 [#"../red_black_tree.rs" 746 4 746 30] (self : Map'0.t_Map k v) =
    [%#span17] internal_invariant'0 (T_red_black_tree__Map.t_Map__0 self)
    /\ color_invariant'0 (T_red_black_tree__Map.t_Map__0 self)
    /\ color'0 (T_red_black_tree__Map.t_Map__0 self) = Color'0.C_Black
  
  predicate inv'11 (_1 : Map'0.t_Map k v)
  
  axiom inv'11 [@rewrite] : forall x : Map'0.t_Map k v [inv'11 x] . inv'11 x
  = (invariant'6 x
  /\ match x with
    | Map'0.C_Map a_0 -> inv'5 a_0
    end)
  
  use prelude.prelude.Borrow
  
  predicate inv'4 (_1 : borrowed (Node'0.t_Node k v))
  
  predicate inv'10 (_1 : Option'0.t_Option (borrowed (Node'0.t_Node k v)))
  
  axiom inv'10 [@rewrite] : forall x : Option'0.t_Option (borrowed (Node'0.t_Node k v)) [inv'10 x] . inv'10 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'4 a_0
    end
  
  predicate inv'9 (_1 : (k, v))
  
  axiom inv'9 [@rewrite] : forall x : (k, v) [inv'9 x] . inv'9 x = (let (a, b) = x in inv'13 a /\ inv'14 b)
  
  predicate invariant'5 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span18] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'8 (_1 : borrowed (Tree'0.t_Tree k v))
  
  axiom inv'8 [@rewrite] : forall x : borrowed (Tree'0.t_Tree k v) [inv'8 x] . inv'8 x = invariant'5 x
  
  predicate invariant'4 (self : Tree'0.t_Tree k v) =
    [%#span19] inv'5 self
  
  predicate inv'7 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'7 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate inv'6 (_1 : Option'0.t_Option (k, v))
  
  axiom inv'6 [@rewrite] : forall x : Option'0.t_Option (k, v) [inv'6 x] . inv'6 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'9 a_0
    end
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span20] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span21] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span22] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span23] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span24] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span25] cmp_log'0 x y
  = o)  -> ([%#span26] cmp_log'0 y z = o)  -> ([%#span27] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span28] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span29] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span30] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span31] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span32] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate inv'0 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'5 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'5 x] . inv'5 x
  = match x with
    | Tree'0.C_Tree node -> inv'0 node
    end
  
  predicate inv'3 (_1 : Node'0.t_Node k v)
  
  predicate invariant'3 (self : borrowed (Node'0.t_Node k v)) =
    [%#span18] inv'3 self.current /\ inv'3 self.final
  
  axiom inv'4 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'4 x] . inv'4 x = invariant'3 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'2 (self : Node'0.t_Node k v) =
    [%#span33] inv'12 self
  
  axiom inv'3 [@rewrite] : forall x : Node'0.t_Node k v [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'1 (self : borrowed (Map'0.t_Map k v)) =
    [%#span18] inv'11 self.current /\ inv'11 self.final
  
  predicate inv'2 (_1 : borrowed (Map'0.t_Map k v))
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Map'0.t_Map k v) [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span18] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v)))
  
  axiom inv'1 [@rewrite] : forall x : borrowed (Option'0.t_Option (Node'0.t_Node k v)) [inv'1 x] . inv'1 x
  = invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'0 x] . inv'0 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  use map.Const
  
  use map.Map
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 53 4 56 47] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span34] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  function shallow_model'2 [#"../red_black_tree.rs" 176 4 176 50] (self : Tree'0.t_Tree k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span35] model_acc'0 self (Const.const (Option'0.C_None))
  
  function shallow_model'1 [#"../red_black_tree.rs" 735 4 735 50] (self : Map'0.t_Map k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span36] shallow_model'2 (T_red_black_tree__Map.t_Map__0 self)
  
  use map.Map
  
  function shallow_model'0 (self : borrowed (Map'0.t_Map k v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v) =
    [%#span37] shallow_model'1 self.current
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 72 4 76 5] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span39] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . [%#span38] Map.get (model_acc'0 self accu) k
  = Map.get accu k
  \/ (exists v : v . Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v)
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 93 4 95 33] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span42] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . ([%#span40] bst_invariant'0 self)
   -> ([%#span41] forall v : v . has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 114 4 116 33] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span45] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_Tree k v, k : t_DeepModelTy'0 . ([%#span43] bst_invariant'0 self)
   -> ([%#span44] forall v : v . has_mapping'0 self k v = (Map.get (shallow_model'2 self) k = Option'0.C_Some v))
  
  let rec unwrap'0 (self:Option'0.t_Option (borrowed (Node'0.t_Node k v))) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span47] inv'10 self}
    {[@expl:precondition] [%#span46] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span48] inv'4 result}
      {[%#span46] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (borrowed (Node'0.t_Node k v))))= {[@expl:precondition] [%#span49] inv'1 self}
    any
    [ return' (result:Option'0.t_Option (borrowed (Node'0.t_Node k v)))-> {[%#span52] inv'10 result}
      {[%#span51] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_Node k v) . result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span50] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  use T_red_black_tree__CP as CP'0
  
  function cpn'0 [#"../red_black_tree.rs" 230 0 230 36] (c : Color'0.t_Color) (l : CP'0.t_CP) (r : CP'0.t_CP) : CP'0.t_CP
    
   =
    [%#span53] CP'0.C_CPN c l r
  
  predicate match_t'0 [#"../red_black_tree.rs" 236 4 236 52] (self : CP'0.t_CP) (tree : Tree'0.t_Tree k v) =
    [%#span54] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node tree
      = Option'0.C_Some node
      /\ T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  let rec delete_max_rec'0 (self:borrowed (Tree'0.t_Tree k v)) (return'  (ret:(k, v)))= {[@expl:precondition] [%#span57] inv'8 self}
    {[@expl:precondition] [%#span56] match_t'0 (CP'0.C_CPL (Color'0.C_Red)) self.current
    \/ match_t'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[@expl:precondition] [%#span55] internal_invariant'0 self.current}
    any
    [ return' (result:(k, v))-> {[%#span65] inv'9 result}
      {[%#span64] color'0 self.current = Color'0.C_Black  -> color'0 self.final = Color'0.C_Black}
      {[%#span63] color_invariant'0 self.final}
      {[%#span62] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.final k v
      = (deep_model'0 (let (a, _) = result in a) <> k /\ has_mapping'0 self.current k v)}
      {[%#span61] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.current k v
       -> le_log'0 k (deep_model'0 (let (a, _) = result in a))}
      {[%#span60] has_mapping'0 self.current (deep_model'0 (let (a, _) = result in a)) (let (_, a) = result in a)}
      {[%#span59] height'0 self.current = height'0 self.final}
      {[%#span58] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  predicate same_mappings'0 [#"../red_black_tree.rs" 46 4 46 43] (self : Tree'0.t_Tree k v) (o : Tree'0.t_Tree k v) =
    [%#span66] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self k v = has_mapping'0 o k v
  
  use prelude.prelude.Snapshot
  
  predicate resolve'5 (self : borrowed (Node'0.t_Node k v)) =
    [%#span67] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'5 _1
  
  let rec is_red'0 (self:Tree'0.t_Tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span68] inv'7 self}
    any [ return' (result:bool)-> {[%#span69] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  predicate resolve'4 (self : borrowed (Map'0.t_Map k v)) =
    [%#span67] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Map'0.t_Map k v)) =
    resolve'4 _1
  
  predicate resolve'3 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span67] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    resolve'3 _1
  
  use prelude.prelude.Snapshot
  
  let rec delete_max (self:borrowed (Map'0.t_Map k v)) (return'  (ret:Option'0.t_Option (k, v)))= {[%#sred_black_tree3] inv'2 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#sred_black_tree0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {r0'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_mut <Option'0.t_Option (Node'0.t_Node k v)> {rnode'0}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_6 <- _ret' ] 
                    Map'0.t_Map <k> <v> {self.current}
                      (fun (l_0'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_0'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                             [ &self <- { self with current = Map'0.C_Map (Tree'0.C_Tree _6.final) ; } ] 
                            s1)))))
      | s1 = -{inv'0 _6.final}- s2
      | s2 = any
        [ br0 -> {_6.current = Option'0.C_None } (! bb8)
        | br1 (a:Node'0.t_Node k v)-> {_6.current = Option'0.C_Some a} (! bb2) ]
         ]
      
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'1 _6} s1
      | s1 = -{resolve'0 _6}- s2
      | s2 = {[@expl:type invariant] inv'2 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 =  [ &_0 <- Option'0.C_None ] s5
      | s5 = bb19 ]
      
    | bb2 = bb3
    | bb3 = s0
      [ s0 = Option'0.v_Some <Node'0.t_Node k v> {_6.current}
          (fun (r0'0:Node'0.t_Node k v) ->
            Borrow.borrow_mut <Node'0.t_Node k v> {r0'0}
              (fun (_ret':borrowed (Node'0.t_Node k v)) ->
                 [ &node <- _ret' ] 
                Option'0.v_Some <Node'0.t_Node k v> {_6.current}
                  (fun (l_0'0:Node'0.t_Node k v) ->  [ &_6 <- { _6 with current = Option'0.C_Some node.final ; } ] s1)))
      | s1 = -{inv'3 node.final}- s2
      | s2 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s3))
      | s3 = bb4 ]
      
    | bb4 = any [ br0 -> {_9 = false} (! bb6) | br1 -> {_9} (! bb5) ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'4 node} s1
      | s1 = -{resolve'2 node}- s2
      | s2 = {[@expl:type invariant] inv'1 _6} s3
      | s3 = -{resolve'0 _6}- s4
      | s4 = bb7 ]
      
    | bb6 = s0
      [ s0 =  [ &_11 <- Color'0.C_Red ] s1
      | s1 = Node'0.t_Node <k> <v> {node.current}
          (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
             [ &node <- { node with current = Node'0.C_Node l_left'0 _11 l_key'0 l_val'0 l_right'0 ; } ] 
            s2)
      | s2 = {[@expl:type invariant] inv'4 node} s3
      | s3 = -{resolve'2 node}- s4
      | s4 = {[@expl:type invariant] inv'1 _6} s5
      | s5 = -{resolve'0 _6}- s6
      | s6 = bb7 ]
      
    | bb7 = s0
      [ s0 = {[@expl:assertion] [%#sred_black_tree1] same_mappings'0 (T_red_black_tree__Map.t_Map__0 (Snapshot.inner old_self).current) (T_red_black_tree__Map.t_Map__0 self.current)}
        s1
      | s1 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {r0'0}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_16 <- _ret' ] 
                Map'0.t_Map <k> <v> {self.current}
                  (fun (l_0'0:Tree'0.t_Tree k v) ->  [ &self <- { self with current = Map'0.C_Map _16.final ; } ] s2)))
      | s2 = -{inv'5 _16.final}- s3
      | s3 = delete_max_rec'0 {_16} (fun (_ret':(k, v)) ->  [ &r <- _ret' ] s4)
      | s4 = bb9 ]
      
    | bb9 = s0
      [ s0 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) -> is_red'0 {r0'0} (fun (_ret':bool) ->  [ &_18 <- _ret' ] s1))
      | s1 = bb10 ]
      
    | bb10 = any [ br0 -> {_18 = false} (! bb14) | br1 -> {_18} (! bb11) ] 
    | bb11 = s0
      [ s0 =  [ &_20 <- Color'0.C_Black ] s1
      | s1 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {r0'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_final
                  <Option'0.t_Option (Node'0.t_Node k v)>
                  {rnode'0}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id self) 1) 1}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_23 <- _ret' ] 
                    Map'0.t_Map <k> <v> {self.current}
                      (fun (l_0'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_0'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                             [ &self <- { self with current = Map'0.C_Map (Tree'0.C_Tree _23.final) ; } ] 
                            s2)))))
      | s2 = -{inv'0 _23.final}- s3
      | s3 = as_mut'0 {_23} (fun (_ret':Option'0.t_Option (borrowed (Node'0.t_Node k v))) ->  [ &_22 <- _ret' ] s4)
      | s4 = bb12 ]
      
    | bb12 = s0 [ s0 = unwrap'0 {_22} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_21 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = s0
      [ s0 = Node'0.t_Node <k> <v> {_21.current}
          (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
             [ &_21 <- { _21 with current = Node'0.C_Node l_left'0 _20 l_key'0 l_val'0 l_right'0 ; } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'4 _21} s2
      | s2 = -{resolve'2 _21}- s3
      | s3 = {[@expl:type invariant] inv'2 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 = bb15 ]
      
    | bb14 = s0 [ s0 = {[@expl:type invariant] inv'2 self} s1 | s1 = -{resolve'1 self}- s2 | s2 = bb15 ] 
    | bb15 = s0 [ s0 =  [ &_24 <- [%#sred_black_tree2] Snapshot.new () ] s1 | s1 = bb16 ] 
    | bb16 = s0 [ s0 =  [ &_0 <- Option'0.C_Some r ] s1 | s1 = bb17 ] 
    | bb17 = bb18
    | bb18 = bb19
    | bb19 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option (k, v) = any_l ()
    | & self : borrowed (Map'0.t_Map k v) = self
    | & old_self : Snapshot.snap_ty (borrowed (Map'0.t_Map k v)) = any_l ()
    | & _6 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & node : borrowed (Node'0.t_Node k v) = any_l ()
    | & _9 : bool = any_l ()
    | & _11 : Color'0.t_Color = any_l ()
    | & r : (k, v) = any_l ()
    | & _16 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _18 : bool = any_l ()
    | & _20 : Color'0.t_Color = any_l ()
    | & _21 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _22 : Option'0.t_Option (borrowed (Node'0.t_Node k v)) = any_l ()
    | & _23 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & _24 : Snapshot.snap_ty () = any_l () ]
    
    [ return' (result:Option'0.t_Option (k, v))-> {[@expl:postcondition] [%#sred_black_tree5] inv'6 result}
      {[@expl:postcondition] [%#sred_black_tree4] match result with
        | Option'0.C_Some (k, v) -> Map.get (shallow_model'0 self) (deep_model'0 k) = Option'0.C_Some v
        /\ (forall k2 : t_DeepModelTy'0 . Map.get (shallow_model'0 self) k2 = Option'0.C_None
        \/ le_log'0 k2 (deep_model'0 k))
        /\ shallow_model'1 self.final = Map.set (shallow_model'0 self) (deep_model'0 k) (Option'0.C_None)
        | Option'0.C_None -> shallow_model'1 self.final = shallow_model'0 self
        /\ shallow_model'0 self = Const.const (Option'0.C_None)
        end}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi1129371875592489445__delete_min
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 801 8 801 53
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 800 27 800 31
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 793 14 799 5
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 800 36 800 50
  
  let%span span4 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span5 = "../red_black_tree.rs" 286 20 286 102
  
  let%span span6 = "../red_black_tree.rs" 272 12 278 13
  
  let%span span7 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span8 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span9 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span10 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span11 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span12 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span13 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span14 = "../red_black_tree.rs" 362 12 362 59
  
  let%span span15 = "../red_black_tree.rs" 747 8 749 9
  
  let%span span16 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span17 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span31 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span32 = "../red_black_tree.rs" 58 12 65 13
  
  let%span span33 = "../red_black_tree.rs" 177 20 177 54
  
  let%span span34 = "../red_black_tree.rs" 736 8 736 29
  
  let%span span35 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span36 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span37 = "" 0 0 0 0
  
  let%span span38 = "" 0 0 0 0
  
  let%span span39 = "" 0 0 0 0
  
  let%span span40 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span41 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span42 = "" 0 0 0 0
  
  let%span span43 = "../red_black_tree.rs" 231 16 231 48
  
  let%span span44 = "../red_black_tree.rs" 238 12 243 13
  
  let%span span45 = "../red_black_tree.rs" 644 15 644 43
  
  let%span span46 = "../red_black_tree.rs" 645 15 646 62
  
  let%span span47 = "../red_black_tree.rs" 655 27 655 31
  
  let%span span48 = "../red_black_tree.rs" 647 14 647 42
  
  let%span span49 = "../red_black_tree.rs" 648 14 648 50
  
  let%span span50 = "../red_black_tree.rs" 649 14 649 66
  
  let%span span51 = "../red_black_tree.rs" 650 4 650 104
  
  let%span span52 = "../red_black_tree.rs" 651 4 652 73
  
  let%span span53 = "../red_black_tree.rs" 653 14 653 39
  
  let%span span54 = "../red_black_tree.rs" 654 4 654 69
  
  let%span span55 = "../red_black_tree.rs" 655 36 655 42
  
  let%span span56 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span57 = "../red_black_tree.rs" 387 15 387 19
  
  let%span span58 = "../red_black_tree.rs" 386 14 386 45
  
  let%span span59 = "../red_black_tree.rs" 70 4 71 93
  
  let%span span60 = "../red_black_tree.rs" 78 12 86 13
  
  let%span span61 = "../red_black_tree.rs" 91 15 91 35
  
  let%span span62 = "../red_black_tree.rs" 92 4 92 94
  
  let%span span63 = "../red_black_tree.rs" 98 12 107 13
  
  let%span span64 = "../red_black_tree.rs" 112 15 112 35
  
  let%span span65 = "../red_black_tree.rs" 113 4 113 80
  
  let%span span66 = "../red_black_tree.rs" 119 12 119 61
  
  predicate invariant'8 (self : v)
  
  predicate inv'14 (_1 : v)
  
  axiom inv'14 : forall x : v [inv'14 x] . inv'14 x  -> invariant'8 x
  
  predicate invariant'7 (self : k)
  
  predicate inv'13 (_1 : k)
  
  axiom inv'13 : forall x : k [inv'13 x] . inv'13 x  -> invariant'7 x
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'5 (_1 : Tree'0.t_Tree k v)
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'12 (_1 : Node'0.t_Node k v)
  
  axiom inv'12 [@rewrite] : forall x : Node'0.t_Node k v [inv'12 x] . inv'12 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'5 left /\ inv'13 key /\ inv'14 val' /\ inv'5 right
    end
  
  use T_red_black_tree__Color as Color'0
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  use T_core__option__Option as Option'0
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span4] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 285 4 285 41] (self : Node'0.t_Node k v) =
    [%#span5] color'0 (T_red_black_tree__Node.t_Node__right self) = Color'0.C_Black
    /\ (T_red_black_tree__Node.t_Node__color self = Color'0.C_Black
    \/ color'0 (T_red_black_tree__Node.t_Node__left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 270 4 270 36] (self : Tree'0.t_Tree k v) =
    [%#span6] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span8] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_Tree k v . [%#span7] height'0 self >= 0
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span9] height'0 (T_red_black_tree__Node.t_Node__left self) = height'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span10] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span11] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span12] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span13] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 360 4 360 39] (self : Tree'0.t_Tree k v) =
    [%#span14] bst_invariant'0 self /\ height_invariant'0 self
  
  use T_red_black_tree__Map as T_red_black_tree__Map
  
  use T_red_black_tree__Map as Map'0
  
  predicate invariant'6 [#"../red_black_tree.rs" 746 4 746 30] (self : Map'0.t_Map k v) =
    [%#span15] internal_invariant'0 (T_red_black_tree__Map.t_Map__0 self)
    /\ color_invariant'0 (T_red_black_tree__Map.t_Map__0 self)
    /\ color'0 (T_red_black_tree__Map.t_Map__0 self) = Color'0.C_Black
  
  predicate inv'11 (_1 : Map'0.t_Map k v)
  
  axiom inv'11 [@rewrite] : forall x : Map'0.t_Map k v [inv'11 x] . inv'11 x
  = (invariant'6 x
  /\ match x with
    | Map'0.C_Map a_0 -> inv'5 a_0
    end)
  
  use prelude.prelude.Borrow
  
  predicate inv'4 (_1 : borrowed (Node'0.t_Node k v))
  
  predicate inv'10 (_1 : Option'0.t_Option (borrowed (Node'0.t_Node k v)))
  
  axiom inv'10 [@rewrite] : forall x : Option'0.t_Option (borrowed (Node'0.t_Node k v)) [inv'10 x] . inv'10 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'4 a_0
    end
  
  predicate inv'9 (_1 : (k, v))
  
  axiom inv'9 [@rewrite] : forall x : (k, v) [inv'9 x] . inv'9 x = (let (a, b) = x in inv'13 a /\ inv'14 b)
  
  predicate invariant'5 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span16] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'8 (_1 : borrowed (Tree'0.t_Tree k v))
  
  axiom inv'8 [@rewrite] : forall x : borrowed (Tree'0.t_Tree k v) [inv'8 x] . inv'8 x = invariant'5 x
  
  predicate invariant'4 (self : Tree'0.t_Tree k v) =
    [%#span17] inv'5 self
  
  predicate inv'7 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'7 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate inv'6 (_1 : Option'0.t_Option (k, v))
  
  axiom inv'6 [@rewrite] : forall x : Option'0.t_Option (k, v) [inv'6 x] . inv'6 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'9 a_0
    end
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span18] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span19] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span20] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span21] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span22] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span23] cmp_log'0 x y
  = o)  -> ([%#span24] cmp_log'0 y z = o)  -> ([%#span25] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span26] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span27] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span28] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span29] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span30] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate inv'0 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'5 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'5 x] . inv'5 x
  = match x with
    | Tree'0.C_Tree node -> inv'0 node
    end
  
  predicate inv'3 (_1 : Node'0.t_Node k v)
  
  predicate invariant'3 (self : borrowed (Node'0.t_Node k v)) =
    [%#span16] inv'3 self.current /\ inv'3 self.final
  
  axiom inv'4 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'4 x] . inv'4 x = invariant'3 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'2 (self : Node'0.t_Node k v) =
    [%#span31] inv'12 self
  
  axiom inv'3 [@rewrite] : forall x : Node'0.t_Node k v [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'1 (self : borrowed (Map'0.t_Map k v)) =
    [%#span16] inv'11 self.current /\ inv'11 self.final
  
  predicate inv'2 (_1 : borrowed (Map'0.t_Map k v))
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Map'0.t_Map k v) [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span16] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v)))
  
  axiom inv'1 [@rewrite] : forall x : borrowed (Option'0.t_Option (Node'0.t_Node k v)) [inv'1 x] . inv'1 x
  = invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'0 x] . inv'0 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  use map.Const
  
  use map.Map
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 53 4 56 47] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span32] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  function shallow_model'2 [#"../red_black_tree.rs" 176 4 176 50] (self : Tree'0.t_Tree k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span33] model_acc'0 self (Const.const (Option'0.C_None))
  
  function shallow_model'1 [#"../red_black_tree.rs" 735 4 735 50] (self : Map'0.t_Map k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span34] shallow_model'2 (T_red_black_tree__Map.t_Map__0 self)
  
  use map.Map
  
  function shallow_model'0 (self : borrowed (Map'0.t_Map k v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v) =
    [%#span35] shallow_model'1 self.current
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  let rec unwrap'0 (self:Option'0.t_Option (borrowed (Node'0.t_Node k v))) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span37] inv'10 self}
    {[@expl:precondition] [%#span36] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span38] inv'4 result}
      {[%#span36] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (borrowed (Node'0.t_Node k v))))= {[@expl:precondition] [%#span39] inv'1 self}
    any
    [ return' (result:Option'0.t_Option (borrowed (Node'0.t_Node k v)))-> {[%#span42] inv'10 result}
      {[%#span41] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_Node k v) . result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span40] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  use T_red_black_tree__CP as CP'0
  
  function cpn'0 [#"../red_black_tree.rs" 230 0 230 36] (c : Color'0.t_Color) (l : CP'0.t_CP) (r : CP'0.t_CP) : CP'0.t_CP
    
   =
    [%#span43] CP'0.C_CPN c l r
  
  predicate match_t'0 [#"../red_black_tree.rs" 236 4 236 52] (self : CP'0.t_CP) (tree : Tree'0.t_Tree k v) =
    [%#span44] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node tree
      = Option'0.C_Some node
      /\ T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  let rec delete_min_rec'0 (self:borrowed (Tree'0.t_Tree k v)) (return'  (ret:(k, v)))= {[@expl:precondition] [%#span47] inv'8 self}
    {[@expl:precondition] [%#span46] match_t'0 (CP'0.C_CPL (Color'0.C_Red)) self.current
    \/ match_t'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[@expl:precondition] [%#span45] internal_invariant'0 self.current}
    any
    [ return' (result:(k, v))-> {[%#span55] inv'9 result}
      {[%#span54] color'0 self.current = Color'0.C_Black  -> color'0 self.final = Color'0.C_Black}
      {[%#span53] color_invariant'0 self.final}
      {[%#span52] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.final k v
      = (deep_model'0 (let (a, _) = result in a) <> k /\ has_mapping'0 self.current k v)}
      {[%#span51] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.current k v
       -> le_log'0 (deep_model'0 (let (a, _) = result in a)) k}
      {[%#span50] has_mapping'0 self.current (deep_model'0 (let (a, _) = result in a)) (let (_, a) = result in a)}
      {[%#span49] height'0 self.current = height'0 self.final}
      {[%#span48] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : borrowed (Node'0.t_Node k v)) =
    [%#span56] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'5 _1
  
  let rec is_red'0 (self:Tree'0.t_Tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span57] inv'7 self}
    any [ return' (result:bool)-> {[%#span58] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  predicate resolve'4 (self : borrowed (Map'0.t_Map k v)) =
    [%#span56] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Map'0.t_Map k v)) =
    resolve'4 _1
  
  predicate resolve'3 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span56] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    resolve'3 _1
  
  use prelude.prelude.Snapshot
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 72 4 76 5] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span60] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . [%#span59] Map.get (model_acc'0 self accu) k
  = Map.get accu k
  \/ (exists v : v . Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v)
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 93 4 95 33] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span63] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . ([%#span61] bst_invariant'0 self)
   -> ([%#span62] forall v : v . has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 114 4 116 33] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span66] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_Tree k v, k : t_DeepModelTy'0 . ([%#span64] bst_invariant'0 self)
   -> ([%#span65] forall v : v . has_mapping'0 self k v = (Map.get (shallow_model'2 self) k = Option'0.C_Some v))
  
  let rec delete_min (self:borrowed (Map'0.t_Map k v)) (return'  (ret:Option'0.t_Option (k, v)))= {[%#sred_black_tree1] inv'2 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_3 <- [%#sred_black_tree0] Snapshot.new () ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {r0'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_mut <Option'0.t_Option (Node'0.t_Node k v)> {rnode'0}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_6 <- _ret' ] 
                    Map'0.t_Map <k> <v> {self.current}
                      (fun (l_0'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_0'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                             [ &self <- { self with current = Map'0.C_Map (Tree'0.C_Tree _6.final) ; } ] 
                            s1)))))
      | s1 = -{inv'0 _6.final}- s2
      | s2 = any
        [ br0 -> {_6.current = Option'0.C_None } (! bb8)
        | br1 (a:Node'0.t_Node k v)-> {_6.current = Option'0.C_Some a} (! bb2) ]
         ]
      
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'1 _6} s1
      | s1 = -{resolve'0 _6}- s2
      | s2 = {[@expl:type invariant] inv'2 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 =  [ &_0 <- Option'0.C_None ] s5
      | s5 = bb18 ]
      
    | bb2 = bb3
    | bb3 = s0
      [ s0 = Option'0.v_Some <Node'0.t_Node k v> {_6.current}
          (fun (r0'0:Node'0.t_Node k v) ->
            Borrow.borrow_mut <Node'0.t_Node k v> {r0'0}
              (fun (_ret':borrowed (Node'0.t_Node k v)) ->
                 [ &node <- _ret' ] 
                Option'0.v_Some <Node'0.t_Node k v> {_6.current}
                  (fun (l_0'0:Node'0.t_Node k v) ->  [ &_6 <- { _6 with current = Option'0.C_Some node.final ; } ] s1)))
      | s1 = -{inv'3 node.final}- s2
      | s2 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s3))
      | s3 = bb4 ]
      
    | bb4 = any [ br0 -> {_9 = false} (! bb6) | br1 -> {_9} (! bb5) ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'4 node} s1
      | s1 = -{resolve'2 node}- s2
      | s2 = {[@expl:type invariant] inv'1 _6} s3
      | s3 = -{resolve'0 _6}- s4
      | s4 = bb7 ]
      
    | bb6 = s0
      [ s0 =  [ &_11 <- Color'0.C_Red ] s1
      | s1 = Node'0.t_Node <k> <v> {node.current}
          (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
             [ &node <- { node with current = Node'0.C_Node l_left'0 _11 l_key'0 l_val'0 l_right'0 ; } ] 
            s2)
      | s2 = {[@expl:type invariant] inv'4 node} s3
      | s3 = -{resolve'2 node}- s4
      | s4 = {[@expl:type invariant] inv'1 _6} s5
      | s5 = -{resolve'0 _6}- s6
      | s6 = bb7 ]
      
    | bb7 = s0
      [ s0 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {r0'0}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_14 <- _ret' ] 
                Map'0.t_Map <k> <v> {self.current}
                  (fun (l_0'0:Tree'0.t_Tree k v) ->  [ &self <- { self with current = Map'0.C_Map _14.final ; } ] s1)))
      | s1 = -{inv'5 _14.final}- s2
      | s2 = delete_min_rec'0 {_14} (fun (_ret':(k, v)) ->  [ &r <- _ret' ] s3)
      | s3 = bb9 ]
      
    | bb9 = s0
      [ s0 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) -> is_red'0 {r0'0} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s1))
      | s1 = bb10 ]
      
    | bb10 = any [ br0 -> {_16 = false} (! bb14) | br1 -> {_16} (! bb11) ] 
    | bb11 = s0
      [ s0 =  [ &_18 <- Color'0.C_Black ] s1
      | s1 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {r0'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_final
                  <Option'0.t_Option (Node'0.t_Node k v)>
                  {rnode'0}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id self) 1) 1}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_21 <- _ret' ] 
                    Map'0.t_Map <k> <v> {self.current}
                      (fun (l_0'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_0'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                             [ &self <- { self with current = Map'0.C_Map (Tree'0.C_Tree _21.final) ; } ] 
                            s2)))))
      | s2 = -{inv'0 _21.final}- s3
      | s3 = as_mut'0 {_21} (fun (_ret':Option'0.t_Option (borrowed (Node'0.t_Node k v))) ->  [ &_20 <- _ret' ] s4)
      | s4 = bb12 ]
      
    | bb12 = s0 [ s0 = unwrap'0 {_20} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_19 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = s0
      [ s0 = Node'0.t_Node <k> <v> {_19.current}
          (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
             [ &_19 <- { _19 with current = Node'0.C_Node l_left'0 _18 l_key'0 l_val'0 l_right'0 ; } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'4 _19} s2
      | s2 = -{resolve'2 _19}- s3
      | s3 = {[@expl:type invariant] inv'2 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 = bb15 ]
      
    | bb14 = s0 [ s0 = {[@expl:type invariant] inv'2 self} s1 | s1 = -{resolve'1 self}- s2 | s2 = bb15 ] 
    | bb15 = s0 [ s0 =  [ &_0 <- Option'0.C_Some r ] s1 | s1 = bb16 ] 
    | bb16 = bb17
    | bb17 = bb18
    | bb18 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option (k, v) = any_l ()
    | & self : borrowed (Map'0.t_Map k v) = self
    | & _3 : Snapshot.snap_ty () = any_l ()
    | & _6 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & node : borrowed (Node'0.t_Node k v) = any_l ()
    | & _9 : bool = any_l ()
    | & _11 : Color'0.t_Color = any_l ()
    | & r : (k, v) = any_l ()
    | & _14 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _16 : bool = any_l ()
    | & _18 : Color'0.t_Color = any_l ()
    | & _19 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _20 : Option'0.t_Option (borrowed (Node'0.t_Node k v)) = any_l ()
    | & _21 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l () ]
    
    [ return' (result:Option'0.t_Option (k, v))-> {[@expl:postcondition] [%#sred_black_tree3] inv'6 result}
      {[@expl:postcondition] [%#sred_black_tree2] match result with
        | Option'0.C_Some (k, v) -> Map.get (shallow_model'0 self) (deep_model'0 k) = Option'0.C_Some v
        /\ (forall k2 : t_DeepModelTy'0 . Map.get (shallow_model'0 self) k2 = Option'0.C_None
        \/ le_log'0 (deep_model'0 k) k2)
        /\ shallow_model'1 self.final = Map.set (shallow_model'0 self) (deep_model'0 k) (Option'0.C_None)
        | Option'0.C_None -> shallow_model'1 self.final = shallow_model'0 self
        /\ shallow_model'0 self = Const.const (Option'0.C_None)
        end}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi1129371875592489445__delete
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 824 8 824 53
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 823 23 823 27
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 823 29 823 32
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 817 14 821 5
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 822 14 822 59
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 823 41 823 55
  
  let%span span6 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span7 = "../red_black_tree.rs" 286 20 286 102
  
  let%span span8 = "../red_black_tree.rs" 272 12 278 13
  
  let%span span9 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span10 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span11 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span12 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span13 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span14 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span15 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span16 = "../red_black_tree.rs" 362 12 362 59
  
  let%span span17 = "../red_black_tree.rs" 747 8 749 9
  
  let%span span18 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span19 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span20 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span21 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span31 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span32 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span33 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span34 = "../red_black_tree.rs" 58 12 65 13
  
  let%span span35 = "../red_black_tree.rs" 177 20 177 54
  
  let%span span36 = "../red_black_tree.rs" 736 8 736 29
  
  let%span span37 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span38 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span39 = "../../../../creusot-contracts/src/std/option.rs" 30 0 141 1
  
  let%span span40 = "" 0 0 0 0
  
  let%span span41 = "" 0 0 0 0
  
  let%span span42 = "" 0 0 0 0
  
  let%span span43 = "../../../../creusot-contracts/src/std/option.rs" 58 16 58 77
  
  let%span span44 = "../../../../creusot-contracts/src/std/option.rs" 59 16 62 18
  
  let%span span45 = "" 0 0 0 0
  
  let%span span46 = "../red_black_tree.rs" 231 16 231 48
  
  let%span span47 = "../red_black_tree.rs" 238 12 243 13
  
  let%span span48 = "../red_black_tree.rs" 669 15 669 43
  
  let%span span49 = "../red_black_tree.rs" 670 15 671 62
  
  let%span span50 = "../red_black_tree.rs" 681 23 681 27
  
  let%span span51 = "../red_black_tree.rs" 681 29 681 32
  
  let%span span52 = "../red_black_tree.rs" 672 14 672 42
  
  let%span span53 = "../red_black_tree.rs" 673 14 673 50
  
  let%span span54 = "../red_black_tree.rs" 674 14 677 5
  
  let%span span55 = "../red_black_tree.rs" 678 4 678 129
  
  let%span span56 = "../red_black_tree.rs" 679 14 679 39
  
  let%span span57 = "../red_black_tree.rs" 680 4 680 69
  
  let%span span58 = "../red_black_tree.rs" 681 41 681 55
  
  let%span span59 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span60 = "../red_black_tree.rs" 387 15 387 19
  
  let%span span61 = "../red_black_tree.rs" 386 14 386 45
  
  let%span span62 = "../red_black_tree.rs" 70 4 71 93
  
  let%span span63 = "../red_black_tree.rs" 78 12 86 13
  
  let%span span64 = "../red_black_tree.rs" 91 15 91 35
  
  let%span span65 = "../red_black_tree.rs" 92 4 92 94
  
  let%span span66 = "../red_black_tree.rs" 98 12 107 13
  
  let%span span67 = "../red_black_tree.rs" 112 15 112 35
  
  let%span span68 = "../red_black_tree.rs" 113 4 113 80
  
  let%span span69 = "../red_black_tree.rs" 119 12 119 61
  
  predicate invariant'9 (self : v)
  
  predicate inv'15 (_1 : v)
  
  axiom inv'15 : forall x : v [inv'15 x] . inv'15 x  -> invariant'9 x
  
  predicate invariant'8 (self : k)
  
  predicate inv'14 (_1 : k)
  
  axiom inv'14 : forall x : k [inv'14 x] . inv'14 x  -> invariant'8 x
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'5 (_1 : Tree'0.t_Tree k v)
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'13 (_1 : Node'0.t_Node k v)
  
  axiom inv'13 [@rewrite] : forall x : Node'0.t_Node k v [inv'13 x] . inv'13 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'5 left /\ inv'14 key /\ inv'15 val' /\ inv'5 right
    end
  
  use T_red_black_tree__Color as Color'0
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  use T_core__option__Option as Option'0
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span6] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 285 4 285 41] (self : Node'0.t_Node k v) =
    [%#span7] color'0 (T_red_black_tree__Node.t_Node__right self) = Color'0.C_Black
    /\ (T_red_black_tree__Node.t_Node__color self = Color'0.C_Black
    \/ color'0 (T_red_black_tree__Node.t_Node__left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 270 4 270 36] (self : Tree'0.t_Tree k v) =
    [%#span8] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span10] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_Tree k v . [%#span9] height'0 self >= 0
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span11] height'0 (T_red_black_tree__Node.t_Node__left self)
    = height'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span12] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span13] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'0 key /\ v = val'
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span14] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'0 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'0 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span15] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 360 4 360 39] (self : Tree'0.t_Tree k v) =
    [%#span16] bst_invariant'0 self /\ height_invariant'0 self
  
  use T_red_black_tree__Map as T_red_black_tree__Map
  
  use T_red_black_tree__Map as Map'0
  
  predicate invariant'7 [#"../red_black_tree.rs" 746 4 746 30] (self : Map'0.t_Map k v) =
    [%#span17] internal_invariant'0 (T_red_black_tree__Map.t_Map__0 self)
    /\ color_invariant'0 (T_red_black_tree__Map.t_Map__0 self)
    /\ color'0 (T_red_black_tree__Map.t_Map__0 self) = Color'0.C_Black
  
  predicate inv'12 (_1 : Map'0.t_Map k v)
  
  axiom inv'12 [@rewrite] : forall x : Map'0.t_Map k v [inv'12 x] . inv'12 x
  = (invariant'7 x
  /\ match x with
    | Map'0.C_Map a_0 -> inv'5 a_0
    end)
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span18] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span19] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span20] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span21] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span22] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span23] cmp_log'0 x y
  = o)  -> ([%#span24] cmp_log'0 y z = o)  -> ([%#span25] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span26] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span27] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span28] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span29] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span30] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate inv'11 (_1 : (k, v))
  
  axiom inv'11 [@rewrite] : forall x : (k, v) [inv'11 x] . inv'11 x = (let (a, b) = x in inv'14 a /\ inv'15 b)
  
  use prelude.prelude.Borrow
  
  predicate inv'4 (_1 : borrowed (Node'0.t_Node k v))
  
  predicate inv'10 (_1 : Option'0.t_Option (borrowed (Node'0.t_Node k v)))
  
  axiom inv'10 [@rewrite] : forall x : Option'0.t_Option (borrowed (Node'0.t_Node k v)) [inv'10 x] . inv'10 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'4 a_0
    end
  
  predicate invariant'6 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span31] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'9 (_1 : borrowed (Tree'0.t_Tree k v))
  
  axiom inv'9 [@rewrite] : forall x : borrowed (Tree'0.t_Tree k v) [inv'9 x] . inv'9 x = invariant'6 x
  
  predicate invariant'5 (self : Tree'0.t_Tree k v) =
    [%#span32] inv'5 self
  
  predicate inv'8 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'8 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'8 x] . inv'8 x = invariant'5 x
  
  predicate inv'7 (_1 : Option'0.t_Option (k, v))
  
  axiom inv'7 [@rewrite] : forall x : Option'0.t_Option (k, v) [inv'7 x] . inv'7 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'11 a_0
    end
  
  predicate invariant'4 (self : k) =
    [%#span32] inv'14 self
  
  predicate inv'6 (_1 : k)
  
  axiom inv'6 [@rewrite] : forall x : k [inv'6 x] . inv'6 x = invariant'4 x
  
  predicate inv'0 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'5 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'5 x] . inv'5 x
  = match x with
    | Tree'0.C_Tree node -> inv'0 node
    end
  
  predicate inv'3 (_1 : Node'0.t_Node k v)
  
  predicate invariant'3 (self : borrowed (Node'0.t_Node k v)) =
    [%#span31] inv'3 self.current /\ inv'3 self.final
  
  axiom inv'4 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'4 x] . inv'4 x = invariant'3 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'2 (self : Node'0.t_Node k v) =
    [%#span33] inv'13 self
  
  axiom inv'3 [@rewrite] : forall x : Node'0.t_Node k v [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'1 (self : borrowed (Map'0.t_Map k v)) =
    [%#span31] inv'12 self.current /\ inv'12 self.final
  
  predicate inv'2 (_1 : borrowed (Map'0.t_Map k v))
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Map'0.t_Map k v) [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span31] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v)))
  
  axiom inv'1 [@rewrite] : forall x : borrowed (Option'0.t_Option (Node'0.t_Node k v)) [inv'1 x] . inv'1 x
  = invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'0 x] . inv'0 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  use map.Map
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 53 4 56 47] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span34] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  use map.Const
  
  function shallow_model'2 [#"../red_black_tree.rs" 176 4 176 50] (self : Tree'0.t_Tree k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span35] model_acc'0 self (Const.const (Option'0.C_None))
  
  function shallow_model'1 [#"../red_black_tree.rs" 735 4 735 50] (self : Map'0.t_Map k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span36] shallow_model'2 (T_red_black_tree__Map.t_Map__0 self)
  
  use map.Map
  
  function shallow_model'0 (self : borrowed (Map'0.t_Map k v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v) =
    [%#span37] shallow_model'1 self.current
  
  function deep_model'1 (self : k) : t_DeepModelTy'0 =
    [%#span38] deep_model'0 self
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  let rec unwrap'0 (self:Option'0.t_Option (borrowed (Node'0.t_Node k v))) (return'  (ret:borrowed (Node'0.t_Node k v)))= {[@expl:precondition] [%#span40] inv'10 self}
    {[@expl:precondition] [%#span39] self <> Option'0.C_None}
    any
    [ return' (result:borrowed (Node'0.t_Node k v))-> {[%#span41] inv'4 result}
      {[%#span39] Option'0.C_Some result = self}
      (! return' {result}) ]
    
  
  let rec as_mut'0 (self:borrowed (Option'0.t_Option (Node'0.t_Node k v))) (return'  (ret:Option'0.t_Option (borrowed (Node'0.t_Node k v))))= {[@expl:precondition] [%#span42] inv'1 self}
    any
    [ return' (result:Option'0.t_Option (borrowed (Node'0.t_Node k v)))-> {[%#span45] inv'10 result}
      {[%#span44] self.current = Option'0.C_None
      \/ (exists r : borrowed (Node'0.t_Node k v) . result = Option'0.C_Some r
      /\ self.current = Option'0.C_Some (r.current) /\ self.final = Option'0.C_Some (r.final))}
      {[%#span43] self.current = Option'0.C_None  -> result = Option'0.C_None /\ self.final = Option'0.C_None}
      (! return' {result}) ]
    
  
  use T_red_black_tree__CP as CP'0
  
  function cpn'0 [#"../red_black_tree.rs" 230 0 230 36] (c : Color'0.t_Color) (l : CP'0.t_CP) (r : CP'0.t_CP) : CP'0.t_CP
    
   =
    [%#span46] CP'0.C_CPN c l r
  
  predicate match_t'0 [#"../red_black_tree.rs" 236 4 236 52] (self : CP'0.t_CP) (tree : Tree'0.t_Tree k v) =
    [%#span47] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node tree
      = Option'0.C_Some node
      /\ T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  let rec delete_rec'0 (self:borrowed (Tree'0.t_Tree k v)) (key:k) (return'  (ret:Option'0.t_Option (k, v)))= {[@expl:precondition] [%#span51] inv'6 key}
    {[@expl:precondition] [%#span50] inv'9 self}
    {[@expl:precondition] [%#span49] match_t'0 (CP'0.C_CPL (Color'0.C_Red)) self.current
    \/ match_t'0 (cpn'0 (Color'0.C_Black) (CP'0.C_CPL (Color'0.C_Red)) (CP'0.C_CPL (Color'0.C_Black))) self.current}
    {[@expl:precondition] [%#span48] internal_invariant'0 self.current}
    any
    [ return' (result:Option'0.t_Option (k, v))-> {[%#span58] inv'7 result}
      {[%#span57] color'0 self.current = Color'0.C_Black  -> color'0 self.final = Color'0.C_Black}
      {[%#span56] color_invariant'0 self.final}
      {[%#span55] forall k : t_DeepModelTy'0, v : v . has_mapping'0 self.final k v
      = (deep_model'1 key <> k /\ has_mapping'0 self.current k v)}
      {[%#span54] match result with
        | Option'0.C_None -> forall v : v . not has_mapping'0 self.current (deep_model'1 key) v
        | Option'0.C_Some (k, v) -> deep_model'1 key = deep_model'0 k /\ has_mapping'0 self.current (deep_model'0 k) v
        end}
      {[%#span53] height'0 self.current = height'0 self.final}
      {[%#span52] internal_invariant'0 self.final}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : borrowed (Node'0.t_Node k v)) =
    [%#span59] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'5 _1
  
  let rec is_red'0 (self:Tree'0.t_Tree k v) (return'  (ret:bool))= {[@expl:precondition] [%#span60] inv'8 self}
    any [ return' (result:bool)-> {[%#span61] result = (color'0 self = Color'0.C_Red)} (! return' {result}) ] 
  
  predicate resolve'4 (self : borrowed (Map'0.t_Map k v)) =
    [%#span59] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Map'0.t_Map k v)) =
    resolve'4 _1
  
  predicate resolve'3 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span59] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    resolve'3 _1
  
  use prelude.prelude.Snapshot
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 72 4 76 5] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span63] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . [%#span62] Map.get (model_acc'0 self accu) k
  = Map.get accu k
  \/ (exists v : v . Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v)
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 93 4 95 33] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span66] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'0 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . ([%#span64] bst_invariant'0 self)
   -> ([%#span65] forall v : v . has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 114 4 116 33] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span69] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_Tree k v, k : t_DeepModelTy'0 . ([%#span67] bst_invariant'0 self)
   -> ([%#span68] forall v : v . has_mapping'0 self k v = (Map.get (shallow_model'2 self) k = Option'0.C_Some v))
  
  let rec delete (self:borrowed (Map'0.t_Map k v)) (key:k) (return'  (ret:Option'0.t_Option (k, v)))= {[%#sred_black_tree2] inv'6 key}
    {[%#sred_black_tree1] inv'2 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_5 <- [%#sred_black_tree0] Snapshot.new () ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {r0'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_mut <Option'0.t_Option (Node'0.t_Node k v)> {rnode'0}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_8 <- _ret' ] 
                    Map'0.t_Map <k> <v> {self.current}
                      (fun (l_0'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_0'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                             [ &self <- { self with current = Map'0.C_Map (Tree'0.C_Tree _8.final) ; } ] 
                            s1)))))
      | s1 = -{inv'0 _8.final}- s2
      | s2 = any
        [ br0 -> {_8.current = Option'0.C_None } (! bb8)
        | br1 (a:Node'0.t_Node k v)-> {_8.current = Option'0.C_Some a} (! bb2) ]
         ]
      
    | bb8 = s0
      [ s0 = {[@expl:type invariant] inv'1 _8} s1
      | s1 = -{resolve'0 _8}- s2
      | s2 = {[@expl:type invariant] inv'2 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 =  [ &_0 <- Option'0.C_None ] s5
      | s5 = bb17 ]
      
    | bb2 = bb3
    | bb3 = s0
      [ s0 = Option'0.v_Some <Node'0.t_Node k v> {_8.current}
          (fun (r0'0:Node'0.t_Node k v) ->
            Borrow.borrow_mut <Node'0.t_Node k v> {r0'0}
              (fun (_ret':borrowed (Node'0.t_Node k v)) ->
                 [ &node <- _ret' ] 
                Option'0.v_Some <Node'0.t_Node k v> {_8.current}
                  (fun (l_0'0:Node'0.t_Node k v) ->  [ &_8 <- { _8 with current = Option'0.C_Some node.final ; } ] s1)))
      | s1 = -{inv'3 node.final}- s2
      | s2 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            is_red'0 {rleft'0} (fun (_ret':bool) ->  [ &_11 <- _ret' ] s3))
      | s3 = bb4 ]
      
    | bb4 = any [ br0 -> {_11 = false} (! bb6) | br1 -> {_11} (! bb5) ] 
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'4 node} s1
      | s1 = -{resolve'2 node}- s2
      | s2 = {[@expl:type invariant] inv'1 _8} s3
      | s3 = -{resolve'0 _8}- s4
      | s4 = bb7 ]
      
    | bb6 = s0
      [ s0 =  [ &_13 <- Color'0.C_Red ] s1
      | s1 = Node'0.t_Node <k> <v> {node.current}
          (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
             [ &node <- { node with current = Node'0.C_Node l_left'0 _13 l_key'0 l_val'0 l_right'0 ; } ] 
            s2)
      | s2 = {[@expl:type invariant] inv'4 node} s3
      | s3 = -{resolve'2 node}- s4
      | s4 = {[@expl:type invariant] inv'1 _8} s5
      | s5 = -{resolve'0 _8}- s6
      | s6 = bb7 ]
      
    | bb7 = s0
      [ s0 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_mut <Tree'0.t_Tree k v> {r0'0}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_16 <- _ret' ] 
                Map'0.t_Map <k> <v> {self.current}
                  (fun (l_0'0:Tree'0.t_Tree k v) ->  [ &self <- { self with current = Map'0.C_Map _16.final ; } ] s1)))
      | s1 = -{inv'5 _16.final}- s2
      | s2 = delete_rec'0 {_16} {key} (fun (_ret':Option'0.t_Option (k, v)) ->  [ &r <- _ret' ] s3)
      | s3 = bb9 ]
      
    | bb9 = s0
      [ s0 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) -> is_red'0 {r0'0} (fun (_ret':bool) ->  [ &_19 <- _ret' ] s1))
      | s1 = bb10 ]
      
    | bb10 = any [ br0 -> {_19 = false} (! bb14) | br1 -> {_19} (! bb11) ] 
    | bb11 = s0
      [ s0 =  [ &_21 <- Color'0.C_Black ] s1
      | s1 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) ->
            Tree'0.t_Tree <k> <v> {r0'0}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_final
                  <Option'0.t_Option (Node'0.t_Node k v)>
                  {rnode'0}
                  {Borrow.inherit_id (Borrow.inherit_id (Borrow.get_id self) 1) 1}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_24 <- _ret' ] 
                    Map'0.t_Map <k> <v> {self.current}
                      (fun (l_0'0:Tree'0.t_Tree k v) ->
                        Tree'0.t_Tree <k> <v> {l_0'0}
                          (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                             [ &self <- { self with current = Map'0.C_Map (Tree'0.C_Tree _24.final) ; } ] 
                            s2)))))
      | s2 = -{inv'0 _24.final}- s3
      | s3 = as_mut'0 {_24} (fun (_ret':Option'0.t_Option (borrowed (Node'0.t_Node k v))) ->  [ &_23 <- _ret' ] s4)
      | s4 = bb12 ]
      
    | bb12 = s0 [ s0 = unwrap'0 {_23} (fun (_ret':borrowed (Node'0.t_Node k v)) ->  [ &_22 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = s0
      [ s0 = Node'0.t_Node <k> <v> {_22.current}
          (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
             [ &_22 <- { _22 with current = Node'0.C_Node l_left'0 _21 l_key'0 l_val'0 l_right'0 ; } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'4 _22} s2
      | s2 = -{resolve'2 _22}- s3
      | s3 = {[@expl:type invariant] inv'2 self} s4
      | s4 = -{resolve'1 self}- s5
      | s5 = bb15 ]
      
    | bb14 = s0 [ s0 = {[@expl:type invariant] inv'2 self} s1 | s1 = -{resolve'1 self}- s2 | s2 = bb15 ] 
    | bb15 = s0 [ s0 =  [ &_0 <- r ] s1 | s1 = bb16 ] 
    | bb16 = bb17
    | bb17 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option (k, v) = any_l ()
    | & self : borrowed (Map'0.t_Map k v) = self
    | & key : k = key
    | & _5 : Snapshot.snap_ty () = any_l ()
    | & _8 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & node : borrowed (Node'0.t_Node k v) = any_l ()
    | & _11 : bool = any_l ()
    | & _13 : Color'0.t_Color = any_l ()
    | & r : Option'0.t_Option (k, v) = any_l ()
    | & _16 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _19 : bool = any_l ()
    | & _21 : Color'0.t_Color = any_l ()
    | & _22 : borrowed (Node'0.t_Node k v) = any_l ()
    | & _23 : Option'0.t_Option (borrowed (Node'0.t_Node k v)) = any_l ()
    | & _24 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l () ]
    
    [ return' (result:Option'0.t_Option (k, v))-> {[@expl:postcondition] [%#sred_black_tree5] inv'7 result}
      {[@expl:postcondition] [%#sred_black_tree4] shallow_model'1 self.final
      = Map.set (shallow_model'0 self) (deep_model'1 key) (Option'0.C_None)}
      {[@expl:postcondition] [%#sred_black_tree3] match result with
        | Option'0.C_Some (k, v) -> deep_model'0 k = deep_model'1 key
        /\ Map.get (shallow_model'0 self) (deep_model'1 key) = Option'0.C_Some v
        | Option'0.C_None -> Map.get (shallow_model'0 self) (deep_model'1 key) = Option'0.C_None
        end}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi1129371875592489445__get
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 845 8 845 53
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 848 20 848 29
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 849 20 849 40
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 848 8 848 31
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 844 16 844 20
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 844 22 844 25
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 840 14 843 5
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 844 34 844 44
  
  let%span span8 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span9 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span10 = "../red_black_tree.rs" 286 20 286 102
  
  let%span span11 = "../red_black_tree.rs" 272 12 278 13
  
  let%span span12 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span13 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span14 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span15 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span16 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span17 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span18 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span19 = "../red_black_tree.rs" 362 12 362 59
  
  let%span span20 = "../red_black_tree.rs" 747 8 749 9
  
  let%span span21 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span22 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span35 = "../red_black_tree.rs" 58 12 65 13
  
  let%span span36 = "../red_black_tree.rs" 177 20 177 54
  
  let%span span37 = "../red_black_tree.rs" 736 8 736 29
  
  let%span span38 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span39 = "" 0 0 0 0
  
  let%span span40 = "" 0 0 0 0
  
  let%span span41 = "../../../../creusot-contracts/src/std/cmp.rs" 50 26 50 85
  
  let%span span42 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span43 = "../red_black_tree.rs" 70 4 71 93
  
  let%span span44 = "../red_black_tree.rs" 78 12 86 13
  
  let%span span45 = "../red_black_tree.rs" 91 15 91 35
  
  let%span span46 = "../red_black_tree.rs" 92 4 92 94
  
  let%span span47 = "../red_black_tree.rs" 98 12 107 13
  
  let%span span48 = "../red_black_tree.rs" 112 15 112 35
  
  let%span span49 = "../red_black_tree.rs" 113 4 113 80
  
  let%span span50 = "../red_black_tree.rs" 119 12 119 61
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'9 (_1 : v)
  
  predicate inv'7 (_1 : k)
  
  predicate inv'5 (_1 : Tree'0.t_Tree k v)
  
  use T_red_black_tree__Node as Node'0
  
  predicate inv'11 (_1 : Node'0.t_Node k v)
  
  axiom inv'11 [@rewrite] : forall x : Node'0.t_Node k v [inv'11 x] . inv'11 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'5 left /\ inv'7 key /\ inv'9 val' /\ inv'5 right
    end
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'7 (self : Node'0.t_Node k v) =
    [%#span8] inv'11 self
  
  predicate inv'10 (_1 : Node'0.t_Node k v)
  
  axiom inv'10 [@rewrite] : forall x : Node'0.t_Node k v [inv'10 x] . inv'10 x = invariant'7 x
  
  predicate invariant'6 (self : v)
  
  axiom inv'9 : forall x : v [inv'9 x] . inv'9 x  -> invariant'6 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'8 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  axiom inv'8 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'8 x] . inv'8 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'10 a_0
    end
  
  predicate invariant'5 (self : k)
  
  axiom inv'7 : forall x : k [inv'7 x] . inv'7 x  -> invariant'5 x
  
  use T_red_black_tree__Color as Color'0
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span9] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 285 4 285 41] (self : Node'0.t_Node k v) =
    [%#span10] color'0 (T_red_black_tree__Node.t_Node__right self) = Color'0.C_Black
    /\ (T_red_black_tree__Node.t_Node__color self = Color'0.C_Black
    \/ color'0 (T_red_black_tree__Node.t_Node__left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 270 4 270 36] (self : Tree'0.t_Tree k v) =
    [%#span11] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span13] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_Tree k v . [%#span12] height'0 self >= 0
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span14] height'0 (T_red_black_tree__Node.t_Node__left self)
    = height'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span15] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function deep_model'1 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span16] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'1 key /\ v = val'
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span17] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'1 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'1 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span18] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 360 4 360 39] (self : Tree'0.t_Tree k v) =
    [%#span19] bst_invariant'0 self /\ height_invariant'0 self
  
  use T_red_black_tree__Map as T_red_black_tree__Map
  
  use T_red_black_tree__Map as Map'0
  
  predicate invariant'4 [#"../red_black_tree.rs" 746 4 746 30] (self : Map'0.t_Map k v) =
    [%#span20] internal_invariant'0 (T_red_black_tree__Map.t_Map__0 self)
    /\ color_invariant'0 (T_red_black_tree__Map.t_Map__0 self)
    /\ color'0 (T_red_black_tree__Map.t_Map__0 self) = Color'0.C_Black
  
  predicate inv'6 (_1 : Map'0.t_Map k v)
  
  axiom inv'6 [@rewrite] : forall x : Map'0.t_Map k v [inv'6 x] . inv'6 x
  = (invariant'4 x
  /\ match x with
    | Map'0.C_Map a_0 -> inv'5 a_0
    end)
  
  axiom inv'5 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'5 x] . inv'5 x
  = match x with
    | Tree'0.C_Tree node -> inv'8 node
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : v) =
    [%#span21] inv'9 self
  
  predicate inv'4 (_1 : v)
  
  axiom inv'4 [@rewrite] : forall x : v [inv'4 x] . inv'4 x = invariant'3 x
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span22] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span23] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span24] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span25] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span26] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span27] cmp_log'0 x y
  = o)  -> ([%#span28] cmp_log'0 y z = o)  -> ([%#span29] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span30] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span31] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span32] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span33] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span34] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  predicate inv'3 (_1 : Option'0.t_Option v)
  
  axiom inv'3 [@rewrite] : forall x : Option'0.t_Option v [inv'3 x] . inv'3 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'4 a_0
    end
  
  predicate invariant'2 (self : k) =
    [%#span21] inv'7 self
  
  predicate inv'2 (_1 : k)
  
  axiom inv'2 [@rewrite] : forall x : k [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'1 (self : Map'0.t_Map k v) =
    [%#span21] inv'6 self
  
  predicate inv'1 (_1 : Map'0.t_Map k v)
  
  axiom inv'1 [@rewrite] : forall x : Map'0.t_Map k v [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : Tree'0.t_Tree k v) =
    [%#span21] inv'5 self
  
  predicate inv'0 (_1 : Tree'0.t_Tree k v)
  
  axiom inv'0 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'0 x] . inv'0 x = invariant'0 x
  
  use map.Map
  
  use map.Map
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 53 4 56 47] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span35] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  use map.Const
  
  function shallow_model'1 [#"../red_black_tree.rs" 176 4 176 50] (self : Tree'0.t_Tree k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span36] model_acc'0 self (Const.const (Option'0.C_None))
  
  function shallow_model'2 [#"../red_black_tree.rs" 735 4 735 50] (self : Map'0.t_Map k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span37] shallow_model'1 (T_red_black_tree__Map.t_Map__0 self)
  
  function shallow_model'0 (self : Map'0.t_Map k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v) =
    [%#span38] shallow_model'2 self
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  let rec cmp'0 (self:k) (other:k) (return'  (ret:Ordering'0.t_Ordering))= {[@expl:precondition] [%#span40] inv'2 other}
    {[@expl:precondition] [%#span39] inv'2 self}
    any
    [ return' (result:Ordering'0.t_Ordering)-> {[%#span41] result = cmp_log'0 (deep_model'1 self) (deep_model'1 other)}
      (! return' {result}) ]
    
  
  function deep_model'0 (self : k) : t_DeepModelTy'0 =
    [%#span42] deep_model'1 self
  
  use prelude.prelude.Snapshot
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 72 4 76 5] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span44] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . [%#span43] Map.get (model_acc'0 self accu) k
  = Map.get accu k
  \/ (exists v : v . Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v)
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 93 4 95 33] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span47] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . ([%#span45] bst_invariant'0 self)
   -> ([%#span46] forall v : v . has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 114 4 116 33] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span50] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_Tree k v, k : t_DeepModelTy'0 . ([%#span48] bst_invariant'0 self)
   -> ([%#span49] forall v : v . has_mapping'0 self k v = (Map.get (shallow_model'1 self) k = Option'0.C_Some v))
  
  let rec get (self:Map'0.t_Map k v) (key:k) (return'  (ret:Option'0.t_Option v))= {[%#sred_black_tree5] inv'2 key}
    {[%#sred_black_tree4] inv'1 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_5 <- [%#sred_black_tree0] Snapshot.new () ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = Map'0.t_Map <k> <v> {self} (fun (r0'0:Tree'0.t_Tree k v) ->  [ &tree <- r0'0 ] s1) | s1 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:loop invariant] [%#sred_black_tree3] forall v : v . has_mapping'0 (T_red_black_tree__Map.t_Map__0 self) (deep_model'0 key) v
        = has_mapping'0 tree (deep_model'0 key) v}
        {[@expl:loop invariant] [%#sred_black_tree2] bst_invariant'0 tree}
        {[@expl:loop invariant] [%#sred_black_tree1] inv'0 tree}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 = Tree'0.t_Tree <k> <v> {tree}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->  [ &_13 <- rnode'0 ] s1)
          | s1 = any
            [ br0 -> {_13 = Option'0.C_None } (! bb14) | br1 (a:Node'0.t_Node k v)-> {_13 = Option'0.C_Some a} (! bb4) ]
             ]
          
        | bb4 = bb5
        | bb5 = s0
          [ s0 = Option'0.v_Some <Node'0.t_Node k v> {_13} (fun (r0'0:Node'0.t_Node k v) ->  [ &node <- r0'0 ] s1)
          | s1 = Node'0.t_Node <k> <v> {node}
              (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
                 [ &_19 <- rkey'0 ] 
                s2)
          | s2 = cmp'0 {key} {_19} (fun (_ret':Ordering'0.t_Ordering) ->  [ &_16 <- _ret' ] s3)
          | s3 = bb6 ]
          
        | bb6 = any
          [ br0 -> {_16 = Ordering'0.C_Less } (! bb8)
          | br1 -> {_16 = Ordering'0.C_Equal } (! bb9)
          | br2 -> {_16 = Ordering'0.C_Greater } (! bb10) ]
          
        | bb10 = s0
          [ s0 = Node'0.t_Node <k> <v> {node}
              (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
                 [ &_27 <- rright'0 ] 
                s1)
          | s1 =  [ &tree <- _27 ] s2
          | s2 = bb13 ]
          
        | bb8 = bb11
        | bb11 = s0
          [ s0 = Node'0.t_Node <k> <v> {node}
              (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
                 [ &_22 <- rleft'0 ] 
                s1)
          | s1 =  [ &tree <- _22 ] s2
          | s2 = bb13 ]
          
        | bb13 = bb2 ]
         ]
      
    | bb14 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb15 ] 
    | bb9 = bb12
    | bb12 = s0
      [ s0 = Node'0.t_Node <k> <v> {node}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
             [ &_25 <- rval'0 ] 
            s1)
      | s1 =  [ &_0 <- Option'0.C_Some _25 ] s2
      | s2 = bb15 ]
      
    | bb15 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option v = any_l ()
    | & self : Map'0.t_Map k v = self
    | & key : k = key
    | & _5 : Snapshot.snap_ty () = any_l ()
    | & tree : Tree'0.t_Tree k v = any_l ()
    | & _13 : Option'0.t_Option (Node'0.t_Node k v) = any_l ()
    | & node : Node'0.t_Node k v = any_l ()
    | & _16 : Ordering'0.t_Ordering = any_l ()
    | & _19 : k = any_l ()
    | & _22 : Tree'0.t_Tree k v = any_l ()
    | & _25 : v = any_l ()
    | & _27 : Tree'0.t_Tree k v = any_l () ]
    
    [ return' (result:Option'0.t_Option v)-> {[@expl:postcondition] [%#sred_black_tree7] inv'3 result}
      {[@expl:postcondition] [%#sred_black_tree6] match result with
        | Option'0.C_Some v -> Map.get (shallow_model'0 self) (deep_model'0 key) = Option'0.C_Some v
        | Option'0.C_None -> Map.get (shallow_model'0 self) (deep_model'0 key) = Option'0.C_None
        end}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi1129371875592489445__get_mut
  type k
  
  type v
  
  let%span sred_black_tree0 = "../red_black_tree.rs" 866 8 866 53
  
  let%span sred_black_tree1 = "../red_black_tree.rs" 869 23 869 41
  
  let%span sred_black_tree2 = "../red_black_tree.rs" 871 20 871 29
  
  let%span sred_black_tree3 = "../red_black_tree.rs" 872 20 872 40
  
  let%span sred_black_tree4 = "../red_black_tree.rs" 873 20 873 43
  
  let%span sred_black_tree5 = "../red_black_tree.rs" 874 20 874 42
  
  let%span sred_black_tree6 = "../red_black_tree.rs" 871 8 871 31
  
  let%span sred_black_tree7 = "../red_black_tree.rs" 865 24 865 28
  
  let%span sred_black_tree8 = "../red_black_tree.rs" 865 30 865 33
  
  let%span sred_black_tree9 = "../red_black_tree.rs" 861 14 864 5
  
  let%span sred_black_tree10 = "../red_black_tree.rs" 865 42 865 56
  
  let%span span11 = "../red_black_tree.rs" 262 12 265 13
  
  let%span span12 = "../red_black_tree.rs" 286 20 286 102
  
  let%span span13 = "../red_black_tree.rs" 272 12 278 13
  
  let%span span14 = "../red_black_tree.rs" 299 14 299 25
  
  let%span span15 = "../red_black_tree.rs" 302 12 310 13
  
  let%span span16 = "../red_black_tree.rs" 343 20 343 61
  
  let%span span17 = "../red_black_tree.rs" 317 12 323 13
  
  let%span span18 = "../red_black_tree.rs" 37 12 41 13
  
  let%span span19 = "../red_black_tree.rs" 190 12 191 104
  
  let%span span20 = "../red_black_tree.rs" 210 12 216 13
  
  let%span span21 = "../red_black_tree.rs" 362 12 362 59
  
  let%span span22 = "../red_black_tree.rs" 747 8 749 9
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ord.rs" 69 14 69 59
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48
  
  let%span span25 = "../../../../creusot-contracts/src/logic/ord.rs" 65 14 65 44
  
  let%span span26 = "../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45
  
  let%span span27 = "../../../../creusot-contracts/src/logic/ord.rs" 60 14 60 47
  
  let%span span28 = "../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32
  
  let%span span29 = "../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ord.rs" 55 14 55 31
  
  let%span span31 = "../../../../creusot-contracts/src/logic/ord.rs" 49 14 49 45
  
  let%span span32 = "../../../../creusot-contracts/src/logic/ord.rs" 45 14 45 64
  
  let%span span33 = "../../../../creusot-contracts/src/logic/ord.rs" 35 14 35 61
  
  let%span span34 = "../../../../creusot-contracts/src/logic/ord.rs" 25 14 25 61
  
  let%span span35 = "../../../../creusot-contracts/src/logic/ord.rs" 15 14 15 64
  
  let%span span36 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span37 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span38 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span39 = "../red_black_tree.rs" 58 12 65 13
  
  let%span span40 = "../red_black_tree.rs" 177 20 177 54
  
  let%span span41 = "../red_black_tree.rs" 736 8 736 29
  
  let%span span42 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span43 = "../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span44 = "" 0 0 0 0
  
  let%span span45 = "" 0 0 0 0
  
  let%span span46 = "../../../../creusot-contracts/src/std/cmp.rs" 50 26 50 85
  
  let%span span47 = "../red_black_tree.rs" 238 12 243 13
  
  let%span span48 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span49 = "../red_black_tree.rs" 70 4 71 93
  
  let%span span50 = "../red_black_tree.rs" 78 12 86 13
  
  let%span span51 = "../red_black_tree.rs" 91 15 91 35
  
  let%span span52 = "../red_black_tree.rs" 92 4 92 94
  
  let%span span53 = "../red_black_tree.rs" 98 12 107 13
  
  let%span span54 = "../red_black_tree.rs" 112 15 112 35
  
  let%span span55 = "../red_black_tree.rs" 113 4 113 80
  
  let%span span56 = "../red_black_tree.rs" 119 12 119 61
  
  predicate invariant'9 (self : k)
  
  predicate inv'13 (_1 : k)
  
  axiom inv'13 : forall x : k [inv'13 x] . inv'13 x  -> invariant'9 x
  
  use T_red_black_tree__Tree as Tree'0
  
  predicate inv'0 (_1 : Tree'0.t_Tree k v)
  
  use T_red_black_tree__Color as Color'0
  
  use T_red_black_tree__Tree as T_red_black_tree__Tree
  
  use T_red_black_tree__Node as Node'0
  
  use T_core__option__Option as Option'0
  
  function color'0 [#"../red_black_tree.rs" 260 4 260 27] (self : Tree'0.t_Tree k v) : Color'0.t_Color =
    [%#span11] match T_red_black_tree__Tree.t_Tree__node self with
      | Option'0.C_Some (Node'0.C_Node _ color _ _ _) -> color
      | _ -> Color'0.C_Black
      end
  
  use T_red_black_tree__Node as T_red_black_tree__Node
  
  predicate color_invariant_here'0 [#"../red_black_tree.rs" 285 4 285 41] (self : Node'0.t_Node k v) =
    [%#span12] color'0 (T_red_black_tree__Node.t_Node__right self) = Color'0.C_Black
    /\ (T_red_black_tree__Node.t_Node__color self = Color'0.C_Black
    \/ color'0 (T_red_black_tree__Node.t_Node__left self) = Color'0.C_Black)
  
  predicate color_invariant'0 [#"../red_black_tree.rs" 270 4 270 36] (self : Tree'0.t_Tree k v) =
    [%#span13] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in color_invariant_here'0 node
      /\ color_invariant'0 left /\ color_invariant'0 right
      end
  
  use prelude.prelude.Int
  
  function height'0 [#"../red_black_tree.rs" 300 4 300 26] (self : Tree'0.t_Tree k v) : int =
    [%#span15] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> 0
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left color _ _ _)) -> match color with
        | Color'0.C_Red -> height'0 left
        | Color'0.C_Black -> height'0 left + 1
        end
      end
  
  axiom height'0_spec : forall self : Tree'0.t_Tree k v . [%#span14] height'0 self >= 0
  
  predicate height_invariant_here'0 [#"../red_black_tree.rs" 342 4 342 42] (self : Node'0.t_Node k v) =
    [%#span16] height'0 (T_red_black_tree__Node.t_Node__left self)
    = height'0 (T_red_black_tree__Node.t_Node__right self)
  
  predicate height_invariant'0 [#"../red_black_tree.rs" 315 4 315 37] (self : Tree'0.t_Tree k v) =
    [%#span17] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in height_invariant_here'0 node
      /\ height_invariant'0 left /\ height_invariant'0 right
      end
  
  use T_core__cmp__Ordering as Ordering'0
  
  type t_DeepModelTy'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (_2 : t_DeepModelTy'0) : Ordering'0.t_Ordering
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function deep_model'1 (self : k) : t_DeepModelTy'0
  
  predicate has_mapping'0 [#"../red_black_tree.rs" 35 4 35 57] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) (v : v)
   =
    [%#span18] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> false
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> has_mapping'0 left k v
      \/ has_mapping'0 right k v \/ k = deep_model'1 key /\ v = val'
      end
  
  predicate bst_invariant_here'0 [#"../red_black_tree.rs" 188 4 188 39] (self : Node'0.t_Node k v) =
    [%#span19] (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__left self) k v
     -> lt_log'0 k (deep_model'1 (T_red_black_tree__Node.t_Node__key self)))
    /\ (forall k : t_DeepModelTy'0, v : v . has_mapping'0 (T_red_black_tree__Node.t_Node__right self) k v
     -> lt_log'0 (deep_model'1 (T_red_black_tree__Node.t_Node__key self)) k)
  
  predicate bst_invariant'0 [#"../red_black_tree.rs" 208 4 208 34] (self : Tree'0.t_Tree k v) =
    [%#span20] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> true
      | Tree'0.C_Tree (Option'0.C_Some node) -> let Node'0.C_Node left _ _ _ right = node in bst_invariant_here'0 node
      /\ bst_invariant'0 left /\ bst_invariant'0 right
      end
  
  predicate internal_invariant'0 [#"../red_black_tree.rs" 360 4 360 39] (self : Tree'0.t_Tree k v) =
    [%#span21] bst_invariant'0 self /\ height_invariant'0 self
  
  use T_red_black_tree__Map as T_red_black_tree__Map
  
  use T_red_black_tree__Map as Map'0
  
  predicate invariant'8 [#"../red_black_tree.rs" 746 4 746 30] (self : Map'0.t_Map k v) =
    [%#span22] internal_invariant'0 (T_red_black_tree__Map.t_Map__0 self)
    /\ color_invariant'0 (T_red_black_tree__Map.t_Map__0 self)
    /\ color'0 (T_red_black_tree__Map.t_Map__0 self) = Color'0.C_Black
  
  predicate inv'12 (_1 : Map'0.t_Map k v)
  
  axiom inv'12 [@rewrite] : forall x : Map'0.t_Map k v [inv'12 x] . inv'12 x
  = (invariant'8 x
  /\ match x with
    | Map'0.C_Map a_0 -> inv'0 a_0
    end)
  
  predicate inv'6 (_1 : v)
  
  predicate inv'11 (_1 : Node'0.t_Node k v)
  
  axiom inv'11 [@rewrite] : forall x : Node'0.t_Node k v [inv'11 x] . inv'11 x
  = match x with
    | Node'0.C_Node left color key val' right -> inv'0 left /\ inv'13 key /\ inv'6 val' /\ inv'0 right
    end
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span23] (x = y)
  = (cmp_log'0 x y = Ordering'0.C_Equal)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span24] cmp_log'0 x y
  = Ordering'0.C_Greater)  -> ([%#span25] cmp_log'0 y x = Ordering'0.C_Less)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#span26] cmp_log'0 x y
  = Ordering'0.C_Less)  -> ([%#span27] cmp_log'0 y x = Ordering'0.C_Greater)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : Ordering'0.t_Ordering) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : Ordering'0.t_Ordering . ([%#span28] cmp_log'0 x y
  = o)  -> ([%#span29] cmp_log'0 y z = o)  -> ([%#span30] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#span31] cmp_log'0 x x = Ordering'0.C_Equal
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span32] gt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Greater)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span33] ge_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Less)
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span34] lt_log'0 x y
  = (cmp_log'0 x y = Ordering'0.C_Less)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#span35] le_log'0 x y
  = (cmp_log'0 x y <> Ordering'0.C_Greater)
  
  use prelude.prelude.Borrow
  
  predicate inv'7 (_1 : borrowed v)
  
  predicate inv'10 (_1 : Option'0.t_Option (borrowed v))
  
  axiom inv'10 [@rewrite] : forall x : Option'0.t_Option (borrowed v) [inv'10 x] . inv'10 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'7 a_0
    end
  
  predicate invariant'7 (self : k) =
    [%#span36] inv'13 self
  
  predicate inv'9 (_1 : k)
  
  axiom inv'9 [@rewrite] : forall x : k [inv'9 x] . inv'9 x = invariant'7 x
  
  predicate invariant'6 (self : borrowed (Map'0.t_Map k v)) =
    [%#span37] inv'12 self.current /\ inv'12 self.final
  
  predicate inv'8 (_1 : borrowed (Map'0.t_Map k v))
  
  axiom inv'8 [@rewrite] : forall x : borrowed (Map'0.t_Map k v) [inv'8 x] . inv'8 x = invariant'6 x
  
  predicate invariant'5 (self : borrowed v) =
    [%#span37] inv'6 self.current /\ inv'6 self.final
  
  axiom inv'7 [@rewrite] : forall x : borrowed v [inv'7 x] . inv'7 x = invariant'5 x
  
  predicate invariant'4 (self : v)
  
  axiom inv'6 : forall x : v [inv'6 x] . inv'6 x  -> invariant'4 x
  
  predicate inv'2 (_1 : Option'0.t_Option (Node'0.t_Node k v))
  
  predicate invariant'3 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span37] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'5 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v)))
  
  axiom inv'5 [@rewrite] : forall x : borrowed (Option'0.t_Option (Node'0.t_Node k v)) [inv'5 x] . inv'5 x
  = invariant'3 x
  
  predicate inv'3 (_1 : Node'0.t_Node k v)
  
  predicate invariant'2 (self : borrowed (Node'0.t_Node k v)) =
    [%#span37] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_1 : borrowed (Node'0.t_Node k v))
  
  axiom inv'4 [@rewrite] : forall x : borrowed (Node'0.t_Node k v) [inv'4 x] . inv'4 x = invariant'2 x
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'1 (self : Node'0.t_Node k v) =
    [%#span38] inv'11 self
  
  axiom inv'3 [@rewrite] : forall x : Node'0.t_Node k v [inv'3 x] . inv'3 x = invariant'1 x
  
  axiom inv'2 [@rewrite] : forall x : Option'0.t_Option (Node'0.t_Node k v) [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  predicate invariant'0 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span37] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Tree'0.t_Tree k v))
  
  axiom inv'1 [@rewrite] : forall x : borrowed (Tree'0.t_Tree k v) [inv'1 x] . inv'1 x = invariant'0 x
  
  axiom inv'0 [@rewrite] : forall x : Tree'0.t_Tree k v [inv'0 x] . inv'0 x
  = match x with
    | Tree'0.C_Tree node -> inv'2 node
    end
  
  use map.Map
  
  use map.Map
  
  function model_acc'0 [#"../red_black_tree.rs" 53 4 56 47] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span39] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> accu
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in model_acc'0 right accu2
      end
  
  use map.Const
  
  function shallow_model'2 [#"../red_black_tree.rs" 176 4 176 50] (self : Tree'0.t_Tree k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span40] model_acc'0 self (Const.const (Option'0.C_None))
  
  function shallow_model'1 [#"../red_black_tree.rs" 735 4 735 50] (self : Map'0.t_Map k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span41] shallow_model'2 (T_red_black_tree__Map.t_Map__0 self)
  
  use map.Map
  
  function shallow_model'0 (self : borrowed (Map'0.t_Map k v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v) =
    [%#span42] shallow_model'1 self.current
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'9 (self : borrowed (Map'0.t_Map k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed (Map'0.t_Map k v)) =
    resolve'9 _1
  
  predicate resolve'8 (self : borrowed v) =
    [%#span43] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed v) =
    resolve'8 _1
  
  predicate resolve'7 (self : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    [%#span43] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (Option'0.t_Option (Node'0.t_Node k v))) =
    resolve'7 _1
  
  predicate resolve'6 (self : borrowed (Node'0.t_Node k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Node'0.t_Node k v)) =
    resolve'6 _1
  
  predicate resolve'5 (self : borrowed (Tree'0.t_Tree k v)) =
    [%#span43] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Tree'0.t_Tree k v)) =
    resolve'5 _1
  
  let rec cmp'0 (self:k) (other:k) (return'  (ret:Ordering'0.t_Ordering))= {[@expl:precondition] [%#span45] inv'9 other}
    {[@expl:precondition] [%#span44] inv'9 self}
    any
    [ return' (result:Ordering'0.t_Ordering)-> {[%#span46] result = cmp_log'0 (deep_model'1 self) (deep_model'1 other)}
      (! return' {result}) ]
    
  
  use T_red_black_tree__CP as CP'0
  
  predicate match_t'0 [#"../red_black_tree.rs" 236 4 236 52] (self : CP'0.t_CP) (tree : Tree'0.t_Tree k v) =
    [%#span47] match self with
      | CP'0.C_CPL color -> color'0 tree = color /\ color_invariant'0 tree
      | CP'0.C_CPN color l r -> exists node : Node'0.t_Node k v . T_red_black_tree__Tree.t_Tree__node tree
      = Option'0.C_Some node
      /\ T_red_black_tree__Node.t_Node__color node = color
      /\ match_t'0 l (T_red_black_tree__Node.t_Node__left node)
      /\ match_t'0 r (T_red_black_tree__Node.t_Node__right node)
      end
  
  use prelude.prelude.Snapshot
  
  function deep_model'0 (self : k) : t_DeepModelTy'0 =
    [%#span48] deep_model'1 self
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function model_acc_has_mapping'0 [#"../red_black_tree.rs" 72 4 76 5] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span50] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = model_acc_has_mapping'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom model_acc_has_mapping'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . [%#span49] Map.get (model_acc'0 self accu) k
  = Map.get accu k
  \/ (exists v : v . Map.get (model_acc'0 self accu) k = Option'0.C_Some v /\ has_mapping'0 self k v)
  
  function has_mapping_model_acc'0 [#"../red_black_tree.rs" 93 4 95 33] (self : Tree'0.t_Tree k v) (accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v)) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span53] match self with
      | Tree'0.C_Tree (Option'0.C_None) -> ()
      | Tree'0.C_Tree (Option'0.C_Some (Node'0.C_Node left _ key val' right)) -> let _ = has_mapping_model_acc'0 left accu k in let accu1 = model_acc'0 left accu in let accu2 = Map.set accu1 (deep_model'1 key) (Option'0.C_Some val') in let _ = has_mapping_model_acc'0 right accu2 k in model_acc_has_mapping'0 right accu2 k
      end
  
  axiom has_mapping_model_acc'0_spec : forall self : Tree'0.t_Tree k v, accu : Map.map t_DeepModelTy'0 (Option'0.t_Option v), k : t_DeepModelTy'0 . ([%#span51] bst_invariant'0 self)
   -> ([%#span52] forall v : v . has_mapping'0 self k v  -> Map.get (model_acc'0 self accu) k = Option'0.C_Some v)
  
  function has_mapping_model'0 [#"../red_black_tree.rs" 114 4 116 33] (self : Tree'0.t_Tree k v) (k : t_DeepModelTy'0) : ()
    
   =
    [%#span56] let _ = model_acc_has_mapping'0 self (Const.const (Option'0.C_None)) k in has_mapping_model_acc'0 self (Const.const (Option'0.C_None)) k
  
  axiom has_mapping_model'0_spec : forall self : Tree'0.t_Tree k v, k : t_DeepModelTy'0 . ([%#span54] bst_invariant'0 self)
   -> ([%#span55] forall v : v . has_mapping'0 self k v = (Map.get (shallow_model'2 self) k = Option'0.C_Some v))
  
  let rec get_mut (self:borrowed (Map'0.t_Map k v)) (key:k) (return'  (ret:Option'0.t_Option (borrowed v)))= {[%#sred_black_tree8] inv'9 key}
    {[%#sred_black_tree7] inv'8 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_5 <- [%#sred_black_tree0] Snapshot.new () ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Map'0.t_Map <k> <v> {self.current}
          (fun (r0'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_final <Tree'0.t_Tree k v> {r0'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &tree <- _ret' ] 
                Map'0.t_Map <k> <v> {self.current}
                  (fun (l_0'0:Tree'0.t_Tree k v) ->  [ &self <- { self with current = Map'0.C_Map tree.final ; } ] s1)))
      | s1 = -{inv'0 tree.final}- s2
      | s2 =  [ &old_tree <- [%#sred_black_tree1] Snapshot.new tree ] s3
      | s3 = bb2 ]
      
    | bb2 = bb3
    | bb3 = bb3
      [ bb3 = {[@expl:loop invariant] [%#sred_black_tree6] forall k : t_DeepModelTy'0, v : v . has_mapping'0 tree.current k v
        = has_mapping'0 tree.final k v
         -> has_mapping'0 (Snapshot.inner old_tree).current k v = has_mapping'0 (Snapshot.inner old_tree).final k v}
        {[@expl:loop invariant] [%#sred_black_tree6] match_t'0 (CP'0.C_CPL (color'0 tree.current)) tree.final
         -> match_t'0 (CP'0.C_CPL (Color'0.C_Black)) (Snapshot.inner old_tree).final}
        {[@expl:loop invariant] [%#sred_black_tree6] height'0 tree.current = height'0 tree.final
        /\ height_invariant'0 tree.final  -> height_invariant'0 (Snapshot.inner old_tree).final}
        {[@expl:loop invariant] [%#sred_black_tree6] (forall k : t_DeepModelTy'0, v : v . k = deep_model'0 key
        \/ has_mapping'0 tree.current k v = has_mapping'0 tree.final k v)
         -> bst_invariant'0 tree.final  -> bst_invariant'0 (Snapshot.inner old_tree).final}
        {[@expl:loop invariant] [%#sred_black_tree6] forall v : v . has_mapping'0 tree.current (deep_model'0 key) v
        = has_mapping'0 (Snapshot.inner old_tree).current (deep_model'0 key) v}
        {[@expl:loop invariant] [%#sred_black_tree6] forall v : v . has_mapping'0 tree.final (deep_model'0 key) v
        = has_mapping'0 (Snapshot.inner old_tree).final (deep_model'0 key) v}
        {[@expl:loop invariant] [%#sred_black_tree5] color_invariant'0 tree.current}
        {[@expl:loop invariant] [%#sred_black_tree4] height_invariant'0 tree.current}
        {[@expl:loop invariant] [%#sred_black_tree3] bst_invariant'0 tree.current}
        {[@expl:loop invariant] [%#sred_black_tree2] inv'1 tree}
        (! s0) [ s0 = bb4 ] 
        [ bb4 = s0
          [ s0 = Tree'0.t_Tree <k> <v> {tree.current}
              (fun (rnode'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                Borrow.borrow_final
                  <Option'0.t_Option (Node'0.t_Node k v)>
                  {rnode'0}
                  {Borrow.inherit_id (Borrow.get_id tree) 1}
                  (fun (_ret':borrowed (Option'0.t_Option (Node'0.t_Node k v))) ->
                     [ &_22 <- _ret' ] 
                    Tree'0.t_Tree <k> <v> {tree.current}
                      (fun (l_node'0:Option'0.t_Option (Node'0.t_Node k v)) ->
                         [ &tree <- { tree with current = Tree'0.C_Tree _22.final ; } ] 
                        s1)))
          | s1 = -{inv'2 _22.final}- s2
          | s2 = any
            [ br0 -> {_22.current = Option'0.C_None } (! bb15)
            | br1 (a:Node'0.t_Node k v)-> {_22.current = Option'0.C_Some a} (! bb5) ]
             ]
          
        | bb5 = bb6
        | bb6 = s0
          [ s0 = Option'0.v_Some <Node'0.t_Node k v> {_22.current}
              (fun (r0'0:Node'0.t_Node k v) ->
                Borrow.borrow_mut <Node'0.t_Node k v> {r0'0}
                  (fun (_ret':borrowed (Node'0.t_Node k v)) ->
                     [ &node <- _ret' ] 
                    Option'0.v_Some <Node'0.t_Node k v> {_22.current}
                      (fun (l_0'0:Node'0.t_Node k v) ->
                         [ &_22 <- { _22 with current = Option'0.C_Some node.final ; } ] 
                        s1)))
          | s1 = -{inv'3 node.final}- s2
          | s2 = Node'0.t_Node <k> <v> {node.current}
              (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
                 [ &_28 <- rkey'0 ] 
                s3)
          | s3 = cmp'0 {key} {_28} (fun (_ret':Ordering'0.t_Ordering) ->  [ &_25 <- _ret' ] s4)
          | s4 = bb7 ]
          
        | bb7 = any
          [ br0 -> {_25 = Ordering'0.C_Less } (! bb9)
          | br1 -> {_25 = Ordering'0.C_Equal } (! bb10)
          | br2 -> {_25 = Ordering'0.C_Greater } (! bb11) ]
          
        | bb11 = s0
          [ s0 = Node'0.t_Node <k> <v> {node.current}
              (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
                Borrow.borrow_final <Tree'0.t_Tree k v> {rright'0} {Borrow.inherit_id (Borrow.get_id node) 5}
                  (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                     [ &_36 <- _ret' ] 
                    Node'0.t_Node <k> <v> {node.current}
                      (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                        
                        [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 l_val'0 _36.final ; } ]
                        
                        s1)))
          | s1 = -{inv'0 _36.final}- s2
          | s2 = Borrow.borrow_final <Tree'0.t_Tree k v> {_36.current} {Borrow.get_id _36}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_35 <- _ret' ] 
                 [ &_36 <- { _36 with current = _35.final ; } ] 
                s3)
          | s3 = -{inv'0 _35.final}- s4
          | s4 = {[@expl:type invariant] inv'1 tree} s5
          | s5 = -{resolve'0 tree}- s6
          | s6 =  [ &tree <- _35 ] s7
          | s7 = {[@expl:type invariant] inv'1 _36} s8
          | s8 = -{resolve'0 _36}- s9
          | s9 = bb14 ]
          
        | bb9 = bb12
        | bb12 = s0
          [ s0 = Node'0.t_Node <k> <v> {node.current}
              (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
                Borrow.borrow_final <Tree'0.t_Tree k v> {rleft'0} {Borrow.inherit_id (Borrow.get_id node) 1}
                  (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                     [ &_31 <- _ret' ] 
                    Node'0.t_Node <k> <v> {node.current}
                      (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                        
                        [ &node <- { node with current = Node'0.C_Node _31.final l_color'0 l_key'0 l_val'0 l_right'0 ; } ]
                        
                        s1)))
          | s1 = -{inv'0 _31.final}- s2
          | s2 = Borrow.borrow_final <Tree'0.t_Tree k v> {_31.current} {Borrow.get_id _31}
              (fun (_ret':borrowed (Tree'0.t_Tree k v)) ->
                 [ &_30 <- _ret' ] 
                 [ &_31 <- { _31 with current = _30.final ; } ] 
                s3)
          | s3 = -{inv'0 _30.final}- s4
          | s4 = {[@expl:type invariant] inv'1 tree} s5
          | s5 = -{resolve'0 tree}- s6
          | s6 =  [ &tree <- _30 ] s7
          | s7 = {[@expl:type invariant] inv'1 _31} s8
          | s8 = -{resolve'0 _31}- s9
          | s9 = bb14 ]
          
        | bb14 = s0
          [ s0 = {[@expl:type invariant] inv'4 node} s1
          | s1 = -{resolve'1 node}- s2
          | s2 = {[@expl:type invariant] inv'5 _22} s3
          | s3 = -{resolve'2 _22}- s4
          | s4 = bb3 ]
           ]
         ]
      
    | bb15 = s0
      [ s0 = {[@expl:type invariant] inv'5 _22} s1
      | s1 = -{resolve'2 _22}- s2
      | s2 =  [ &_0 <- Option'0.C_None ] s3
      | s3 = bb16 ]
      
    | bb10 = bb13
    | bb13 = s0
      [ s0 = Node'0.t_Node <k> <v> {node.current}
          (fun (rleft'0:Tree'0.t_Tree k v) (rcolor'0:Color'0.t_Color) (rkey'0:k) (rval'0:v) (rright'0:Tree'0.t_Tree k v) ->
            Borrow.borrow_final <v> {rval'0} {Borrow.inherit_id (Borrow.get_id node) 4}
              (fun (_ret':borrowed v) ->
                 [ &_34 <- _ret' ] 
                Node'0.t_Node <k> <v> {node.current}
                  (fun (l_left'0:Tree'0.t_Tree k v) (l_color'0:Color'0.t_Color) (l_key'0:k) (l_val'0:v) (l_right'0:Tree'0.t_Tree k v) ->
                    
                    [ &node <- { node with current = Node'0.C_Node l_left'0 l_color'0 l_key'0 _34.final l_right'0 ; } ]
                    
                    s1)))
      | s1 = -{inv'6 _34.final}- s2
      | s2 = Borrow.borrow_final <v> {_34.current} {Borrow.get_id _34}
          (fun (_ret':borrowed v) ->  [ &_33 <- _ret' ]  [ &_34 <- { _34 with current = _33.final ; } ] s3)
      | s3 = -{inv'6 _33.final}- s4
      | s4 =  [ &_0 <- Option'0.C_Some _33 ] s5
      | s5 = {[@expl:type invariant] inv'7 _34} s6
      | s6 = -{resolve'3 _34}- s7
      | s7 = {[@expl:type invariant] inv'4 node} s8
      | s8 = -{resolve'1 node}- s9
      | s9 = {[@expl:type invariant] inv'5 _22} s10
      | s10 = -{resolve'2 _22}- s11
      | s11 = bb16 ]
      
    | bb16 = s0
      [ s0 = {[@expl:type invariant] inv'1 tree} s1
      | s1 = -{resolve'0 tree}- s2
      | s2 = {[@expl:type invariant] inv'8 self} s3
      | s3 = -{resolve'4 self}- s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : Option'0.t_Option (borrowed v) = any_l ()
    | & self : borrowed (Map'0.t_Map k v) = self
    | & key : k = key
    | & _5 : Snapshot.snap_ty () = any_l ()
    | & tree : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & old_tree : Snapshot.snap_ty (borrowed (Tree'0.t_Tree k v)) = any_l ()
    | & _22 : borrowed (Option'0.t_Option (Node'0.t_Node k v)) = any_l ()
    | & node : borrowed (Node'0.t_Node k v) = any_l ()
    | & _25 : Ordering'0.t_Ordering = any_l ()
    | & _28 : k = any_l ()
    | & _30 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _31 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _33 : borrowed v = any_l ()
    | & _34 : borrowed v = any_l ()
    | & _35 : borrowed (Tree'0.t_Tree k v) = any_l ()
    | & _36 : borrowed (Tree'0.t_Tree k v) = any_l () ]
    
    [ return' (result:Option'0.t_Option (borrowed v))-> {[@expl:postcondition] [%#sred_black_tree10] inv'10 result}
      {[@expl:postcondition] [%#sred_black_tree9] match result with
        | Option'0.C_Some v -> Map.get (shallow_model'0 self) (deep_model'0 key) = Option'0.C_Some (v.current)
        /\ shallow_model'1 self.final = Map.set (shallow_model'0 self) (deep_model'0 key) (Option'0.C_Some (v.final))
        | Option'0.C_None -> Map.get (shallow_model'0 self) (deep_model'0 key) = Option'0.C_None
        /\ shallow_model'1 self.final = shallow_model'0 self
        end}
      (! return' {result}) ]
    
end
module M_red_black_tree__qyi5152850904912270561
  let%span sred_black_tree0 = "../red_black_tree.rs" 12 9 12 14
  
  let%span span1 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use T_red_black_tree__Color as Color'0
  
  predicate inv'1 (_1 : Color'0.t_Color)
  
  axiom inv'1 [@rewrite] : forall x : Color'0.t_Color [inv'1 x] . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : Color'0.t_Color) =
    [%#span1] inv'1 self
  
  predicate inv'0 (_1 : Color'0.t_Color)
  
  axiom inv'0 [@rewrite] : forall x : Color'0.t_Color [inv'0 x] . inv'0 x = true
  
  goal clone'_refn : [%#sred_black_tree0] forall self : Color'0.t_Color . inv'0 self
   -> (forall result : Color'0.t_Color . result = self  -> inv'1 result /\ result = self)
end
module M_red_black_tree__qyi580812329622037333
  
end
module M_red_black_tree__qyi17193504791406986506
  type k
  
  type v
end
module M_red_black_tree__qyi14622944306967329419
  type k
  
  type v
end
module M_red_black_tree__qyi14223591782905668273
  type k
  
  type v
end
module M_red_black_tree__qyi1789263220212925074
  type k
  
  type v
end
