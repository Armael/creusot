module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type redblacktree_color  = 
    | RedBlackTree_Color_Red
    | RedBlackTree_Color_Black
    
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  function core_option_option_Some_0 (self : core_option_option 't) : 't
  val core_option_option_Some_0 (self : core_option_option 't) : 't
    ensures { result = core_option_option_Some_0 self }
    
  axiom core_option_option_Some_0_acc : forall a : 't . core_option_option_Some_0 (Core_Option_Option_Some a : core_option_option 't) = a
  type redblacktree_node 'k 'v = 
    | RedBlackTree_Node (redblacktree_tree 'k 'v) (redblacktree_color) 'k 'v (redblacktree_tree 'k 'v)
    with redblacktree_tree 'k 'v = 
    | RedBlackTree_Tree (core_option_option (redblacktree_node 'k 'v))
    
  function redblacktree_tree_Tree_node (self : redblacktree_tree 'k 'v) : core_option_option (redblacktree_node 'k 'v)
  val redblacktree_tree_Tree_node (self : redblacktree_tree 'k 'v) : core_option_option (redblacktree_node 'k 'v)
    ensures { result = redblacktree_tree_Tree_node self }
    
  axiom redblacktree_tree_Tree_node_acc : forall a : core_option_option (redblacktree_node 'k 'v) . redblacktree_tree_Tree_node (RedBlackTree_Tree a : redblacktree_tree 'k 'v) = a
  function redblacktree_node_Node_key (self : redblacktree_node 'k 'v) : 'k
  val redblacktree_node_Node_key (self : redblacktree_node 'k 'v) : 'k
    ensures { result = redblacktree_node_Node_key self }
    
  axiom redblacktree_node_Node_key_acc : forall a : redblacktree_tree 'k 'v, b : redblacktree_color, c : 'k, d : 'v, e : redblacktree_tree 'k 'v . redblacktree_node_Node_key (RedBlackTree_Node a b c d e : redblacktree_node 'k 'v) = c
  function redblacktree_node_Node_right (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v
  val redblacktree_node_Node_right (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v
    ensures { result = redblacktree_node_Node_right self }
    
  axiom redblacktree_node_Node_right_acc : forall a : redblacktree_tree 'k 'v, b : redblacktree_color, c : 'k, d : 'v, e : redblacktree_tree 'k 'v . redblacktree_node_Node_right (RedBlackTree_Node a b c d e : redblacktree_node 'k 'v) = e
  function redblacktree_node_Node_val (self : redblacktree_node 'k 'v) : 'v
  val redblacktree_node_Node_val (self : redblacktree_node 'k 'v) : 'v
    ensures { result = redblacktree_node_Node_val self }
    
  axiom redblacktree_node_Node_val_acc : forall a : redblacktree_tree 'k 'v, b : redblacktree_color, c : 'k, d : 'v, e : redblacktree_tree 'k 'v . redblacktree_node_Node_val (RedBlackTree_Node a b c d e : redblacktree_node 'k 'v) = d
  function redblacktree_node_Node_left (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v
  val redblacktree_node_Node_left (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v
    ensures { result = redblacktree_node_Node_left self }
    
  axiom redblacktree_node_Node_left_acc : forall a : redblacktree_tree 'k 'v, b : redblacktree_color, c : 'k, d : 'v, e : redblacktree_tree 'k 'v . redblacktree_node_Node_left (RedBlackTree_Node a b c d e : redblacktree_node 'k 'v) = a
  function redblacktree_node_Node_color (self : redblacktree_node 'k 'v) : redblacktree_color
  val redblacktree_node_Node_color (self : redblacktree_node 'k 'v) : redblacktree_color
    ensures { result = redblacktree_node_Node_color self }
    
  axiom redblacktree_node_Node_color_acc : forall a : redblacktree_tree 'k 'v, b : redblacktree_color, c : 'k, d : 'v, e : redblacktree_tree 'k 'v . redblacktree_node_Node_color (RedBlackTree_Node a b c d e : redblacktree_node 'k 'v) = b
  type core_cmp_ordering  = 
    | Core_Cmp_Ordering_Less
    | Core_Cmp_Ordering_Equal
    | Core_Cmp_Ordering_Greater
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Type
  function cmp_log (self : self) (_2' : self) : Type.core_cmp_ordering
end
module Core_Cmp_Ord_Cmp_Interface
  type self
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module Core_Cmp_Ord_Cmp
  type self
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    ensures { result = CmpLog0.cmp_log (Model0.model self) (Model1.model other) }
    
end
module Core_Cmp_Ord_Max_Interface
  type self
  val max [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Max
  type self
  val max [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Min_Interface
  type self
  val min [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Min
  type self
  val min [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Clamp_Interface
  type self
  val clamp [@cfg:stackify] (self : self) (min : self) (max : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Clamp
  type self
  val clamp [@cfg:stackify] (self : self) (min : self) (max : self) : self
    requires {false}
    
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) = 
    not (CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = not (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) = 
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) = 
    not (CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = not (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) = 
    CmpLog0.cmp_log self o = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Type.Core_Cmp_Ordering_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Type.core_cmp_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Type.core_cmp_ordering . CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Less -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Greater -> CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Less
end
module CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface
  type self
  predicate log_eq (self : self) (_2' : self)
end
module CreusotContracts_Logic_Eq_EqLogic_LogEq
  type self
  predicate log_eq (self : self) (_2' : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Type
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Type
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (LogEq0.log_eq x y -> CmpLog0.cmp_log x y = Type.Core_Cmp_Ordering_Equal) && (CmpLog0.cmp_log y x = Type.Core_Cmp_Ordering_Equal -> LogEq0.log_eq x y)
end
module CreusotContracts_Logic_Eq_EqLogic_LogNe_Interface
  type self
  predicate log_ne (self : self) (_2' : self)
end
module CreusotContracts_Logic_Eq_EqLogic_LogNe
  type self
  predicate log_ne (self : self) (_2' : self)
end
module CreusotContracts_Logic_Eq_EqLogic_EqNe_Interface
  type self
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe_Interface as LogNe0 with type self = self
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function eq_ne (a : self) (b : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_EqNe
  type self
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe_Interface as LogNe0 with type self = self
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function eq_ne (a : self) (b : self) : ()
  axiom eq_ne_spec : forall a : self, b : self . not (LogEq0.log_eq a b = LogNe0.log_ne a b)
end
module CreusotContracts_Logic_Eq_EqLogic_Refl_Interface
  type self
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_Refl
  type self
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . LogEq0.log_eq x x
end
module CreusotContracts_Logic_Eq_EqLogic_Symmetry_Interface
  type self
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function symmetry (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_Symmetry
  type self
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function symmetry (x : self) (y : self) : ()
  axiom symmetry_spec : forall x : self, y : self . LogEq0.log_eq x y -> LogEq0.log_eq y x
end
module CreusotContracts_Logic_Eq_EqLogic_Transitivity_Interface
  type self
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function transitivity (x : self) (y : self) (z : self) : ()
end
module CreusotContracts_Logic_Eq_EqLogic_Transitivity
  type self
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq_Interface as LogEq0 with type self = self
  function transitivity (x : self) (y : self) (z : self) : ()
  axiom transitivity_spec : forall x : self, y : self, z : self . LogEq0.log_eq y z -> LogEq0.log_eq x y -> LogEq0.log_eq x z
end
module RedBlackTree_Impl2_Get_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  val get [@cfg:stackify] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v
end
module RedBlackTree_Impl2_Get
  type k
  type v
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl1 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, predicate LogNe0.log_ne = LogNe0.log_ne, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model0.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  let rec cfg get [@cfg:stackify] (self : Type.redblacktree_tree k v) (key : k) : Type.core_option_option v = 
  var _0 : Type.core_option_option v;
  var self_1 : Type.redblacktree_tree k v;
  var key_2 : k;
  var _3 : Type.core_option_option (Type.redblacktree_node k v);
  var _4 : isize;
  var node_5 : Type.redblacktree_node k v;
  var _6 : Type.core_cmp_ordering;
  var _7 : k;
  var _8 : k;
  var _9 : k;
  var _10 : int8;
  var _11 : Type.redblacktree_tree k v;
  var _12 : k;
  var _13 : v;
  var _14 : v;
  var _15 : Type.redblacktree_tree k v;
  var _16 : k;
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _3 <- Type.redblacktree_tree_Tree_node self_1;
    assume { Resolve0.resolve self_1 };
    switch (_3)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB1
      end
  }
  BB1 {
    node_5 <- Type.core_option_option_Some_0 _3;
    assume { Resolve2.resolve _3 };
    _7 <- key_2;
    _9 <- Type.redblacktree_node_Node_key node_5;
    _8 <- _9;
    assume { Resolve1.resolve _9 };
    _6 <- Cmp0.cmp _7 _8;
    goto BB4
  }
  BB2 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _3 };
    absurd
  }
  BB3 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _3 };
    _0 <- Type.Core_Option_Option_None;
    goto BB12
  }
  BB4 {
    switch (_6)
      | Type.Core_Cmp_Ordering_Less -> goto BB7
      | Type.Core_Cmp_Ordering_Equal -> goto BB9
      | Type.Core_Cmp_Ordering_Greater -> goto BB5
      end
  }
  BB5 {
    _15 <- Type.redblacktree_node_Node_right node_5;
    assume { Resolve3.resolve node_5 };
    _16 <- key_2;
    assume { Resolve1.resolve key_2 };
    _0 <- get _15 _16;
    goto BB10
  }
  BB6 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_5 };
    absurd
  }
  BB7 {
    _11 <- Type.redblacktree_node_Node_left node_5;
    assume { Resolve3.resolve node_5 };
    _12 <- key_2;
    assume { Resolve1.resolve key_2 };
    _0 <- get _11 _12;
    goto BB8
  }
  BB8 {
    goto BB11
  }
  BB9 {
    assume { Resolve1.resolve key_2 };
    _14 <- Type.redblacktree_node_Node_val node_5;
    assume { Resolve3.resolve node_5 };
    _13 <- _14;
    assume { Resolve4.resolve _14 };
    _0 <- Type.Core_Option_Option_Some _13;
    goto BB11
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module RedBlackTree_Impl2_GetMut_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  val get_mut [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    
end
module RedBlackTree_Impl2_GetMut
  type k
  type v
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl1 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, predicate LogNe0.log_ne = LogNe0.log_ne, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model0.model,
  function Model1.model = Model1.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_tree k v
  let rec cfg get_mut [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) : Type.core_option_option (borrowed v)
    
   = 
  var _0 : Type.core_option_option (borrowed v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var _3 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _4 : isize;
  var node_5 : borrowed (Type.redblacktree_node k v);
  var _6 : Type.core_cmp_ordering;
  var _7 : k;
  var _8 : k;
  var _9 : k;
  var _10 : int8;
  var _11 : borrowed (Type.redblacktree_tree k v);
  var _12 : k;
  var _13 : borrowed v;
  var _14 : borrowed v;
  var _15 : borrowed (Type.redblacktree_tree k v);
  var _16 : k;
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _3)) };
    assume { Resolve0.resolve self_1 };
    switch ( * _3)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB1
      end
  }
  BB1 {
    node_5 <- borrow_mut (Type.core_option_option_Some_0 ( * _3));
    _3 <- { _3 with current = (let Type.Core_Option_Option_Some a =  * _3 in Type.Core_Option_Option_Some ( ^ node_5)) };
    assume { Resolve2.resolve _3 };
    _7 <- key_2;
    _9 <- Type.redblacktree_node_Node_key ( * node_5);
    _8 <- _9;
    assume { Resolve1.resolve _9 };
    _6 <- Cmp0.cmp _7 _8;
    goto BB4
  }
  BB2 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _3 };
    absurd
  }
  BB3 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve _3 };
    _0 <- Type.Core_Option_Option_None;
    goto BB12
  }
  BB4 {
    switch (_6)
      | Type.Core_Cmp_Ordering_Less -> goto BB7
      | Type.Core_Cmp_Ordering_Equal -> goto BB9
      | Type.Core_Cmp_Ordering_Greater -> goto BB5
      end
  }
  BB5 {
    _15 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_5));
    node_5 <- { node_5 with current = (let Type.RedBlackTree_Node a b c d e =  * node_5 in Type.RedBlackTree_Node a b c d ( ^ _15)) };
    _16 <- key_2;
    assume { Resolve1.resolve key_2 };
    _0 <- get_mut _15 _16;
    goto BB10
  }
  BB6 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve3.resolve node_5 };
    absurd
  }
  BB7 {
    _11 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_5));
    node_5 <- { node_5 with current = (let Type.RedBlackTree_Node a b c d e =  * node_5 in Type.RedBlackTree_Node ( ^ _11) b c d e) };
    _12 <- key_2;
    assume { Resolve1.resolve key_2 };
    _0 <- get_mut _11 _12;
    goto BB8
  }
  BB8 {
    assume { Resolve3.resolve node_5 };
    goto BB11
  }
  BB9 {
    assume { Resolve1.resolve key_2 };
    _14 <- borrow_mut (Type.redblacktree_node_Node_val ( * node_5));
    node_5 <- { node_5 with current = (let Type.RedBlackTree_Node a b c d e =  * node_5 in Type.RedBlackTree_Node a b c ( ^ _14) e) };
    assume { Resolve3.resolve node_5 };
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    _0 <- Type.Core_Option_Option_Some _13;
    assume { Resolve4.resolve _14 };
    goto BB11
  }
  BB10 {
    assume { Resolve3.resolve node_5 };
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module RedBlackTree_Impl8_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color
end
module RedBlackTree_Impl8_Clone
  use prelude.Prelude
  use Type
  let rec cfg clone' [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color = 
  var _0 : Type.redblacktree_color;
  var self_1 : Type.redblacktree_color;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    return _0
  }
  
end
module RedBlackTree_Impl0_FlipLog_Interface
  use Type
  function flip_log (self : Type.redblacktree_color) : Type.redblacktree_color
end
module RedBlackTree_Impl0_FlipLog
  use Type
  function flip_log (self : Type.redblacktree_color) : Type.redblacktree_color = 
    match (self) with
      | Type.RedBlackTree_Color_Black -> Type.RedBlackTree_Color_Red
      | Type.RedBlackTree_Color_Red -> Type.RedBlackTree_Color_Black
      end
end
module RedBlackTree_Impl0_Flip_Interface
  use Type
  clone RedBlackTree_Impl0_FlipLog_Interface as FlipLog0
  val flip [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color
    ensures { result = FlipLog0.flip_log self }
    
end
module RedBlackTree_Impl0_Flip
  use Type
  clone RedBlackTree_Impl0_FlipLog as FlipLog0
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  let rec cfg flip [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color
    ensures { result = FlipLog0.flip_log self }
    
   = 
  var _0 : Type.redblacktree_color;
  var self_1 : Type.redblacktree_color;
  var _2 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Type.RedBlackTree_Color_Red -> goto BB1
      | Type.RedBlackTree_Color_Black -> goto BB3
      end
  }
  BB1 {
    _0 <- Type.RedBlackTree_Color_Black;
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- Type.RedBlackTree_Color_Red;
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module RedBlackTree_Impl0_FlipMut_Interface
  use prelude.Prelude
  use Type
  clone RedBlackTree_Impl0_FlipLog_Interface as FlipLog0
  val flip_mut [@cfg:stackify] (self : borrowed (Type.redblacktree_color)) : ()
    ensures {  ^ self = FlipLog0.flip_log ( * self) }
    
end
module RedBlackTree_Impl0_FlipMut
  use prelude.Prelude
  use Type
  clone RedBlackTree_Impl0_FlipLog as FlipLog0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_color
  clone RedBlackTree_Impl0_Flip_Interface as Flip0 with function FlipLog0.flip_log = FlipLog0.flip_log
  let rec cfg flip_mut [@cfg:stackify] (self : borrowed (Type.redblacktree_color)) : ()
    ensures {  ^ self = FlipLog0.flip_log ( * self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_color);
  var _2 : Type.redblacktree_color;
  var _3 : Type.redblacktree_color;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <-  * self_1;
    _2 <- Flip0.flip _3;
    goto BB1
  }
  BB1 {
    self_1 <- { self_1 with current = _2 };
    assume { Resolve0.resolve self_1 };
    _0 <- ();
    return _0
  }
  
end
module RedBlackTree_Impl5_ModelAcc_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
end
module RedBlackTree_Impl5_ModelAcc
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) : Map.map ModelTy0.modelTy (Type.core_option_option v)
    
   = 
    match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> accu
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left color key val' right = node in let accu1 = model_acc left accu in let accu2 = Map.set accu1 (Model0.model key) (Type.Core_Option_Option_Some val') in model_acc right accu2
      end
end
module RedBlackTree_Impl7_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.redblacktree_tree k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl7_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  use map.Const
  clone RedBlackTree_Impl5_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : Type.redblacktree_tree k v) : Map.map ModelTy0.modelTy (Type.core_option_option v) = 
    ModelAcc0.model_acc self (Const.const (Type.Core_Option_Option_None))
end
module RedBlackTree_Impl1_OrdInvariantHere_Interface
  type k
  type v
  use Type
  predicate ord_invariant_here (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl1_OrdInvariantHere
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl7_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  predicate ord_invariant_here (self : Type.redblacktree_node k v) = 
    forall key : (ModelTy0.modelTy) . (Map.get (Model0.model (Type.redblacktree_node_Node_left self)) key = Type.Core_Option_Option_None || LeLog0.le_log key (Model1.model (Type.redblacktree_node_Node_key self))) && (Map.get (Model0.model (Type.redblacktree_node_Node_right self)) key = Type.Core_Option_Option_None || LeLog0.le_log (Model1.model (Type.redblacktree_node_Node_key self)) key)
end
module RedBlackTree_Impl2_OrdInvariant_Interface
  type k
  type v
  use Type
  predicate ord_invariant (self : Type.redblacktree_tree k v)
end
module RedBlackTree_Impl2_OrdInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl1_OrdInvariantHere_Interface as OrdInvariantHere0 with type k = k, type v = v
  predicate ord_invariant (self : Type.redblacktree_tree k v) = 
    match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> true
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left color key val' right = node in OrdInvariantHere0.ord_invariant_here node && ord_invariant left && ord_invariant right
      end
end
module RedBlackTree_Impl1_OrdInvariant_Interface
  type k
  type v
  use Type
  predicate ord_invariant (self : Type.redblacktree_node k v)
end
module RedBlackTree_Impl1_OrdInvariant
  type k
  type v
  use Type
  clone RedBlackTree_Impl2_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  clone RedBlackTree_Impl1_OrdInvariantHere_Interface as OrdInvariantHere0 with type k = k, type v = v
  predicate ord_invariant (self : Type.redblacktree_node k v) = 
    OrdInvariantHere0.ord_invariant_here self && OrdInvariant0.ord_invariant (Type.redblacktree_node_Node_left self) && OrdInvariant0.ord_invariant (Type.redblacktree_node_Node_right self)
end
module RedBlackTree_Impl6_Model_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  function model (self : Type.redblacktree_node k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl6_Model
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl5_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl7_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : Type.redblacktree_node k v) : Map.map ModelTy0.modelTy (Type.core_option_option v) = 
    ModelAcc0.model_acc (Type.redblacktree_node_Node_right self) (Map.set (Model0.model (Type.redblacktree_node_Node_left self)) (Model1.model (Type.redblacktree_node_Node_key self)) (Type.Core_Option_Option_Some (Type.redblacktree_node_Node_val self)))
end
module RedBlackTree_Impl6_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  = 
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl6
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl5_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model3.model
  clone RedBlackTree_Impl7_Model as Model2 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl6_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model, function Model1.model = Model3.model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl6_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.redblacktree_node k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.redblacktree_node k v,
  type modelTy = ModelTy0.modelTy
end
module RedBlackTree_Impl7_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  = 
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module RedBlackTree_Impl7
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone RedBlackTree_Impl5_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl7_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl7_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.redblacktree_tree k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.redblacktree_tree k v,
  type modelTy = ModelTy0.modelTy
end
module Core_Mem_Replace_Interface
  type t
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = src }
    
end
module Core_Mem_Replace
  type t
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = src }
    
end
module Core_Mem_Swap_Interface
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ y =  * x }
    ensures {  ^ x =  * y }
    
end
module Core_Mem_Swap
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    ensures {  ^ y =  * x }
    ensures {  ^ x =  * y }
    
end
module RedBlackTree_Impl1_RotateRight_Interface
  type k
  type v
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl6_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  val rotate_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {OrdInvariant0.ord_invariant ( * self)}
    requires {not (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_None)}
    ensures { OrdInvariant0.ord_invariant ( ^ self) }
    ensures { Model0.model ( * self) = Model0.model ( ^ self) }
    
end
module RedBlackTree_Impl1_RotateRight
  type k
  type v
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl1 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, predicate LogNe0.log_ne = LogNe0.log_ne, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl7_Model as Model1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl1_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, function Model1.model = Model2.model,
  predicate LeLog0.le_log = LeLog0.le_log
  clone RedBlackTree_Impl2_OrdInvariant as OrdInvariant1 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here,
  predicate OrdInvariant0.ord_invariant = OrdInvariant1.ord_invariant
  clone RedBlackTree_Impl6_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model, function Model1.model = Model2.model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone Core_Mem_Replace_Interface as Replace0 with type t = Type.core_option_option (Type.redblacktree_node k v)
  let rec cfg rotate_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {OrdInvariant0.ord_invariant ( * self)}
    requires {not (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self)) = Type.Core_Option_Option_None)}
    ensures { OrdInvariant0.ord_invariant ( ^ self) }
    ensures { Model0.model ( * self) = Model0.model ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var x_2 : Type.redblacktree_node k v;
  var _3 : Type.core_option_option (Type.redblacktree_node k v);
  var _4 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _5 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _6 : Type.core_option_option (Type.redblacktree_node k v);
  var _7 : isize;
  var x_8 : Type.redblacktree_node k v;
  var _9 : ();
  var _10 : ();
  var _11 : borrowed (Type.redblacktree_tree k v);
  var _12 : borrowed (Type.redblacktree_tree k v);
  var _13 : borrowed (Type.redblacktree_tree k v);
  var _14 : borrowed (Type.redblacktree_tree k v);
  var _15 : ();
  var _16 : borrowed (Type.redblacktree_node k v);
  var _17 : borrowed (Type.redblacktree_node k v);
  var _18 : borrowed (Type.redblacktree_node k v);
  var _19 : Type.redblacktree_tree k v;
  var _20 : Type.core_option_option (Type.redblacktree_node k v);
  var _21 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _5)) b c d e) };
    _4 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _4) };
    _6 <- Type.Core_Option_Option_None;
    _3 <- Replace0.replace _4 _6;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _5 };
    switch (_3)
      | Type.Core_Option_Option_None -> goto BB2
      | Type.Core_Option_Option_Some _ -> goto BB4
      end
  }
  BB2 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB14
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve _3 };
    absurd
  }
  BB4 {
    assume { Resolve3.resolve x_8 };
    x_8 <- Type.core_option_option_Some_0 _3;
    assume { Resolve3.resolve x_2 };
    x_2 <- x_8;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    assume { Resolve2.resolve _3 };
    _12 <- borrow_mut (Type.redblacktree_node_Node_left ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node ( ^ _12) b c d e) };
    _11 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    _14 <- borrow_mut (Type.redblacktree_node_Node_right x_2);
    x_2 <- (let Type.RedBlackTree_Node a b c d e = x_2 in Type.RedBlackTree_Node a b c d ( ^ _14));
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    _10 <- Swap0.swap _11 _13;
    goto BB7
  }
  BB7 {
    assume { Resolve4.resolve _12 };
    assume { Resolve4.resolve _14 };
    _16 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _16) };
    _18 <- borrow_mut x_2;
    x_2 <-  ^ _18;
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _15 <- Swap1.swap _16 _17;
    goto BB8
  }
  BB8 {
    assume { Resolve5.resolve _18 };
    assume { Resolve3.resolve _21 };
    _21 <- x_2;
    _20 <- Type.Core_Option_Option_Some _21;
    goto BB9
  }
  BB9 {
    _19 <- Type.RedBlackTree_Tree _20;
    goto BB10
  }
  BB10 {
    assume { Resolve6.resolve (Type.redblacktree_node_Node_right ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d _19) };
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    goto BB12
  }
  BB12 {
    _0 <- ();
    goto BB13
  }
  BB13 {
    goto BB15
  }
  BB14 {
    assume { Resolve2.resolve _3 };
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module RedBlackTree_Impl1_RotateLeft_Interface
  type k
  type v
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl6_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  val rotate_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {OrdInvariant0.ord_invariant ( * self)}
    requires {not (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_None)}
    ensures { OrdInvariant0.ord_invariant ( ^ self) }
    ensures { Model0.model ( * self) = Model0.model ( ^ self) }
    
end
module RedBlackTree_Impl1_RotateLeft
  type k
  type v
  use Type
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl1 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, predicate LogNe0.log_ne = LogNe0.log_ne, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl7_Model as Model1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl1_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, function Model1.model = Model2.model,
  predicate LeLog0.le_log = LeLog0.le_log
  clone RedBlackTree_Impl2_OrdInvariant as OrdInvariant1 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here,
  predicate OrdInvariant0.ord_invariant = OrdInvariant1.ord_invariant
  clone RedBlackTree_Impl6_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model, function Model1.model = Model2.model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone Core_Mem_Replace_Interface as Replace0 with type t = Type.core_option_option (Type.redblacktree_node k v)
  let rec cfg rotate_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {OrdInvariant0.ord_invariant ( * self)}
    requires {not (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self)) = Type.Core_Option_Option_None)}
    ensures { OrdInvariant0.ord_invariant ( ^ self) }
    ensures { Model0.model ( * self) = Model0.model ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var x_2 : Type.redblacktree_node k v;
  var _3 : Type.core_option_option (Type.redblacktree_node k v);
  var _4 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _5 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _6 : Type.core_option_option (Type.redblacktree_node k v);
  var _7 : isize;
  var x_8 : Type.redblacktree_node k v;
  var _9 : ();
  var _10 : ();
  var _11 : borrowed (Type.redblacktree_tree k v);
  var _12 : borrowed (Type.redblacktree_tree k v);
  var _13 : borrowed (Type.redblacktree_tree k v);
  var _14 : borrowed (Type.redblacktree_tree k v);
  var _15 : ();
  var _16 : borrowed (Type.redblacktree_node k v);
  var _17 : borrowed (Type.redblacktree_node k v);
  var _18 : borrowed (Type.redblacktree_node k v);
  var _19 : Type.redblacktree_tree k v;
  var _20 : Type.core_option_option (Type.redblacktree_node k v);
  var _21 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _5))) };
    _4 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _4) };
    _6 <- Type.Core_Option_Option_None;
    _3 <- Replace0.replace _4 _6;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _5 };
    switch (_3)
      | Type.Core_Option_Option_None -> goto BB2
      | Type.Core_Option_Option_Some _ -> goto BB4
      end
  }
  BB2 {
    assume { Resolve1.resolve self_1 };
    _0 <- ();
    goto BB14
  }
  BB3 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve2.resolve _3 };
    absurd
  }
  BB4 {
    assume { Resolve3.resolve x_8 };
    x_8 <- Type.core_option_option_Some_0 _3;
    assume { Resolve3.resolve x_2 };
    x_2 <- x_8;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    assume { Resolve2.resolve _3 };
    _12 <- borrow_mut (Type.redblacktree_node_Node_right ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d ( ^ _12)) };
    _11 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _11) };
    _14 <- borrow_mut (Type.redblacktree_node_Node_left x_2);
    x_2 <- (let Type.RedBlackTree_Node a b c d e = x_2 in Type.RedBlackTree_Node ( ^ _14) b c d e);
    _13 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _13) };
    _10 <- Swap0.swap _11 _13;
    goto BB7
  }
  BB7 {
    assume { Resolve4.resolve _12 };
    assume { Resolve4.resolve _14 };
    _16 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _16) };
    _18 <- borrow_mut x_2;
    x_2 <-  ^ _18;
    _17 <- borrow_mut ( * _18);
    _18 <- { _18 with current = ( ^ _17) };
    _15 <- Swap1.swap _16 _17;
    goto BB8
  }
  BB8 {
    assume { Resolve5.resolve _18 };
    assume { Resolve3.resolve _21 };
    _21 <- x_2;
    _20 <- Type.Core_Option_Option_Some _21;
    goto BB9
  }
  BB9 {
    _19 <- Type.RedBlackTree_Tree _20;
    goto BB10
  }
  BB10 {
    assume { Resolve6.resolve (Type.redblacktree_node_Node_left ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node _19 b c d e) };
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve self_1 };
    goto BB12
  }
  BB12 {
    _0 <- ();
    goto BB13
  }
  BB13 {
    goto BB15
  }
  BB14 {
    assume { Resolve2.resolve _3 };
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module RedBlackTree_Impl1_FlipColor_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl6_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  val flip_color [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {OrdInvariant0.ord_invariant ( * self)}
    ensures { OrdInvariant0.ord_invariant ( ^ self) }
    ensures { Type.redblacktree_node_Node_right ( * self) = Type.redblacktree_node_Node_right ( ^ self) }
    ensures { Type.redblacktree_node_Node_left ( * self) = Type.redblacktree_node_Node_left ( ^ self) }
    ensures { Model0.model ( * self) = Model0.model ( ^ self) }
    
end
module RedBlackTree_Impl1_FlipColor
  type k
  type v
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl1 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, predicate LogNe0.log_ne = LogNe0.log_ne, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl7_Model as Model1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl1_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, function Model1.model = Model2.model,
  predicate LeLog0.le_log = LeLog0.le_log
  clone RedBlackTree_Impl2_OrdInvariant as OrdInvariant1 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here,
  predicate OrdInvariant0.ord_invariant = OrdInvariant1.ord_invariant
  clone RedBlackTree_Impl6_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model, function Model1.model = Model2.model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl0_FlipLog as FlipLog0
  clone RedBlackTree_Impl0_FlipMut_Interface as FlipMut0 with function FlipLog0.flip_log = FlipLog0.flip_log
  let rec cfg flip_color [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
    requires {OrdInvariant0.ord_invariant ( * self)}
    ensures { OrdInvariant0.ord_invariant ( ^ self) }
    ensures { Type.redblacktree_node_Node_right ( * self) = Type.redblacktree_node_Node_right ( ^ self) }
    ensures { Type.redblacktree_node_Node_left ( * self) = Type.redblacktree_node_Node_left ( ^ self) }
    ensures { Model0.model ( * self) = Model0.model ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : ();
  var _3 : borrowed (Type.redblacktree_color);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- borrow_mut (Type.redblacktree_node_Node_color ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a ( ^ _3) c d e) };
    _2 <- FlipMut0.flip_mut _3;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    _0 <- ();
    return _0
  }
  
end
module RedBlackTree_Impl1_OrdInvariantStable_Interface
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl7_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  function ord_invariant_stable (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v) : ()
end
module RedBlackTree_Impl1_OrdInvariantStable
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl7_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  function ord_invariant_stable (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v) : () = 
    ()
  axiom ord_invariant_stable_spec : forall self : Type.redblacktree_node k v, o : Type.redblacktree_node k v . OrdInvariant0.ord_invariant o -> Model0.model (Type.redblacktree_node_Node_right self) = Model0.model (Type.redblacktree_node_Node_right o) -> Model0.model (Type.redblacktree_node_Node_left self) = Model0.model (Type.redblacktree_node_Node_left o) -> OrdInvariant0.ord_invariant o
end
module RedBlackTree_Impl1_OrdInvariantStable_Impl
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl1 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, predicate LogNe0.log_ne = LogNe0.log_ne, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl7_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl1_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model, function Model1.model = Model1.model,
  predicate LeLog0.le_log = LeLog0.le_log
  clone RedBlackTree_Impl2_OrdInvariant as OrdInvariant1 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here,
  predicate OrdInvariant0.ord_invariant = OrdInvariant1.ord_invariant
  let rec ghost function ord_invariant_stable (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v) : ()
    requires {OrdInvariant0.ord_invariant o}
    requires {Model0.model (Type.redblacktree_node_Node_right self) = Model0.model (Type.redblacktree_node_Node_right o)}
    requires {Model0.model (Type.redblacktree_node_Node_left self) = Model0.model (Type.redblacktree_node_Node_left o)}
    ensures { OrdInvariant0.ord_invariant o }
    
   = 
    ()
end
module RedBlackTree_Impl2_New_Interface
  type k
  type v
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl7_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  val new [@cfg:stackify] () : Type.redblacktree_tree k v
    ensures { OrdInvariant0.ord_invariant result }
    ensures { Model0.model result = Const.const (Type.Core_Option_Option_None) }
    
end
module RedBlackTree_Impl2_New
  type k
  type v
  use Type
  use map.Const
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl1 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, predicate LogNe0.log_ne = LogNe0.log_ne, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl7_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl1_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model, function Model1.model = Model1.model,
  predicate LeLog0.le_log = LeLog0.le_log
  clone RedBlackTree_Impl2_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  let rec cfg new [@cfg:stackify] () : Type.redblacktree_tree k v
    ensures { OrdInvariant0.ord_invariant result }
    ensures { Model0.model result = Const.const (Type.Core_Option_Option_None) }
    
   = 
  var _0 : Type.redblacktree_tree k v;
  var _1 : Type.core_option_option (Type.redblacktree_node k v);
  {
    goto BB0
  }
  BB0 {
    _1 <- Type.Core_Option_Option_None;
    _0 <- Type.RedBlackTree_Tree _1;
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module RedBlackTree_Impl5_ModelAccModel_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl7_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_model (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (key0 : ModelTy0.modelTy) : ()
    
end
module RedBlackTree_Impl5_ModelAccModel
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl7_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_acc_model (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (key0 : ModelTy0.modelTy) : ()
    
   = 
    match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left color key val' right = node in let accu1 = ModelAcc0.model_acc left accu in let accu2 = Map.set accu1 (Model1.model key) (Type.Core_Option_Option_Some val') in let _ = model_acc_model right accu2 key0 in let accu1_0 = Model0.model left in let accu2_0 = Map.set accu1_0 (Model1.model key) (Type.Core_Option_Option_Some (Type.redblacktree_node_Node_val node)) in let _ = model_acc_model right accu2_0 key0 in model_acc_model left accu key0
      end
  axiom model_acc_model_spec : forall self : Type.redblacktree_tree k v, accu : Map.map ModelTy0.modelTy (Type.core_option_option v), key0 : ModelTy0.modelTy . Map.get (ModelAcc0.model_acc self accu) key0 = match (Map.get (Model0.model self) key0) with
    | Type.Core_Option_Option_Some val' -> Type.Core_Option_Option_Some val'
    | Type.Core_Option_Option_None -> Map.get accu key0
    end
end
module RedBlackTree_Impl5_ModelAccModel_Impl
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl7_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  let rec ghost function model_acc_model (self : Type.redblacktree_tree k v) (accu : Map.map ModelTy0.modelTy (Type.core_option_option v)) (key0 : ModelTy0.modelTy) : ()
    ensures { Map.get (ModelAcc0.model_acc self accu) key0 = match (Map.get (Model0.model self) key0) with
      | Type.Core_Option_Option_Some val' -> Type.Core_Option_Option_Some val'
      | Type.Core_Option_Option_None -> Map.get accu key0
      end }
    
   = 
    match (self) with
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_None) -> ()
      | Type.RedBlackTree_Tree (Type.Core_Option_Option_Some node) -> let Type.RedBlackTree_Node left color key val' right = node in let accu1 = ModelAcc0.model_acc left accu in let accu2 = let b' = Model1.model key in Map.set accu1 b' (Type.Core_Option_Option_Some val') in let _ = model_acc_model right accu2 key0 in let accu1_0 = Model0.model left in let accu2_0 = let b' = Model1.model key in let c' = Type.Core_Option_Option_Some (Type.redblacktree_node_Node_val node) in Map.set accu1_0 b' c' in let _ = model_acc_model right accu2_0 key0 in model_acc_model left accu key0
      end
end
module RedBlackTree_Impl4_ModelLeftRight_Interface
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl7_Model_Interface as Model2 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl6_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_left_right (self : Type.redblacktree_node k v) (key0 : ModelTy0.modelTy) : ()
end
module RedBlackTree_Impl4_ModelLeftRight
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl7_Model_Interface as Model2 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl6_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_ModelAcc_Interface as ModelAcc0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_ModelAccModel_Interface as ModelAccModel0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, function Model0.model = Model2.model,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  function model_left_right (self : Type.redblacktree_node k v) (key0 : ModelTy0.modelTy) : () = 
    ModelAccModel0.model_acc_model (Type.redblacktree_node_Node_right self) (Map.set (Model2.model (Type.redblacktree_node_Node_left self)) (Model1.model (Type.redblacktree_node_Node_key self)) (Type.Core_Option_Option_Some (Type.redblacktree_node_Node_val self))) key0
  axiom model_left_right_spec : forall self : Type.redblacktree_node k v, key0 : ModelTy0.modelTy . Map.get (Model0.model self) key0 = match (Map.get (Model2.model (Type.redblacktree_node_Node_right self)) key0) with
    | Type.Core_Option_Option_Some v -> Type.Core_Option_Option_Some v
    | Type.Core_Option_Option_None -> if Model1.model (Type.redblacktree_node_Node_key self) = key0 then
      Type.Core_Option_Option_Some (Type.redblacktree_node_Node_val self)
    else
      Map.get (Model2.model (Type.redblacktree_node_Node_left self)) key0
    
    end
end
module RedBlackTree_Impl4_ModelLeftRight_Impl
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl7_Model as Model2 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl5_ModelAccModel as ModelAccModel0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, function Model0.model = Model2.model,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model1.model = Model1.model, axiom .
  clone RedBlackTree_Impl6_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model2.model, function Model1.model = Model1.model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  let rec ghost function model_left_right (self : Type.redblacktree_node k v) (key0 : ModelTy0.modelTy) : ()
    ensures { Map.get (Model0.model self) key0 = match (Map.get (Model2.model (Type.redblacktree_node_Node_right self)) key0) with
      | Type.Core_Option_Option_Some v -> Type.Core_Option_Option_Some v
      | Type.Core_Option_Option_None -> if Model1.model (Type.redblacktree_node_Node_key self) = key0 then
        Type.Core_Option_Option_Some (Type.redblacktree_node_Node_val self)
      else
        Map.get (Model2.model (Type.redblacktree_node_Node_left self)) key0
      
      end }
    
   = 
    let a' = Type.redblacktree_node_Node_right self in let b' = let a' = let a' = Type.redblacktree_node_Node_left self in Model2.model a' in let b' = let a' = Type.redblacktree_node_Node_key self in Model1.model a' in let c' = Type.Core_Option_Option_Some (Type.redblacktree_node_Node_val self) in Map.set a' b' c' in ModelAccModel0.model_acc_model a' b' key0
end
module RedBlackTree_Impl3_IsRed_Interface
  type k
  type v
  use Type
  use prelude.Prelude
  val is_red [@cfg:stackify] (self : Type.redblacktree_tree k v) : bool
    ensures { result = false && not (Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_None) -> (exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_Some node && Type.redblacktree_node_Node_color node = Type.RedBlackTree_Color_Black) }
    ensures { result = true -> (exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_Some node && Type.redblacktree_node_Node_color node = Type.RedBlackTree_Color_Red) }
    
end
module RedBlackTree_Impl3_IsRed
  type k
  type v
  use Type
  use prelude.Prelude
  use mach.int.Int
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.redblacktree_tree k v
  let rec cfg is_red [@cfg:stackify] (self : Type.redblacktree_tree k v) : bool
    ensures { result = false && not (Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_None) -> (exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_Some node && Type.redblacktree_node_Node_color node = Type.RedBlackTree_Color_Black) }
    ensures { result = true -> (exists node : (Type.redblacktree_node k v) . Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_Some node && Type.redblacktree_node_Node_color node = Type.RedBlackTree_Color_Red) }
    
   = 
  var _0 : bool;
  var self_1 : Type.redblacktree_tree k v;
  var _2 : isize;
  var _3 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (Type.redblacktree_tree_Tree_node self_1)
      | Type.Core_Option_Option_Some _ -> goto BB2
      | _ -> goto BB5
      end
  }
  BB1 {
    _0 <- false;
    goto BB4
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    switch (Type.redblacktree_node_Node_color (Type.core_option_option_Some_0 (Type.redblacktree_tree_Tree_node self_1)))
      | Type.RedBlackTree_Color_Red -> goto BB3
      | _ -> goto BB1
      end
  }
  BB3 {
    _0 <- true;
    goto BB4
  }
  BB4 {
    return _0
  }
  BB5 {
    assume { Resolve0.resolve self_1 };
    goto BB1
  }
  
end
module Core_Option_Impl0_AsRef_Interface
  type t
  use Type
  use prelude.Prelude
  val as_ref [@cfg:stackify] (self : Type.core_option_option t) : Type.core_option_option t
    ensures { not (self = Type.Core_Option_Option_None) -> (exists r : (borrowed t) . result = Type.Core_Option_Option_Some ( * r) && self = Type.Core_Option_Option_Some ( * r)) }
    ensures { self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None }
    
end
module Core_Option_Impl0_AsRef
  type t
  use Type
  use prelude.Prelude
  val as_ref [@cfg:stackify] (self : Type.core_option_option t) : Type.core_option_option t
    ensures { not (self = Type.Core_Option_Option_None) -> (exists r : (borrowed t) . result = Type.Core_Option_Option_Some ( * r) && self = Type.Core_Option_Option_Some ( * r)) }
    ensures { self = Type.Core_Option_Option_None -> result = Type.Core_Option_Option_None }
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {not (self = Type.Core_Option_Option_None)}
    ensures { Type.Core_Option_Option_Some result = self }
    
end
module Core_Option_Impl0_Unwrap
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {not (self = Type.Core_Option_Option_None)}
    ensures { Type.Core_Option_Option_Some result = self }
    
end
module RedBlackTree_Impl2_Insert_Interface
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl7_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl2_OrdInvariant_Interface as OrdInvariant0 with type k = k, type v = v
  val insert [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {OrdInvariant0.ord_invariant ( * self)}
    ensures { Model0.model ( ^ self) = Map.set (Model0.model ( * self)) (Model1.model key) (Type.Core_Option_Option_Some val') }
    ensures { OrdInvariant0.ord_invariant ( ^ self) }
    
end
module RedBlackTree_Impl2_Insert
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Eq_EqLogic_LogNe as LogNe0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_LogEq as LogEq0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Eq_EqLogic_Transitivity as Transitivity0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Symmetry as Symmetry0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_Refl as Refl1 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Eq_EqLogic_EqNe as EqNe0 with type self = ModelTy0.modelTy,
  predicate LogEq0.log_eq = LogEq0.log_eq, predicate LogNe0.log_ne = LogNe0.log_ne, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog as CmpLog0 with type self = ModelTy0.modelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog as GtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = ModelTy0.modelTy,
  predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog as GeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = ModelTy0.modelTy,
  predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog as LtLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = ModelTy0.modelTy,
  predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, predicate LogEq0.log_eq = LogEq0.log_eq, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog as LeLog0 with type self = ModelTy0.modelTy,
  function CmpLog0.cmp_log = CmpLog0.cmp_log
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = ModelTy0.modelTy,
  predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Model_Model_Model as Model0 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone RedBlackTree_Impl7_Model as Model1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl1_OrdInvariantHere as OrdInvariantHere0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model, function Model1.model = Model0.model,
  predicate LeLog0.le_log = LeLog0.le_log
  clone RedBlackTree_Impl2_OrdInvariant as OrdInvariant0 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here
  clone RedBlackTree_Impl1_OrdInvariant as OrdInvariant1 with type k = k, type v = v,
  predicate OrdInvariantHere0.ord_invariant_here = OrdInvariantHere0.ord_invariant_here,
  predicate OrdInvariant0.ord_invariant = OrdInvariant0.ord_invariant
  clone RedBlackTree_Impl5_ModelAccModel as ModelAccModel0 with type k = k, type v = v,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, function Model0.model = Model1.model,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model1.model = Model0.model, axiom .
  clone RedBlackTree_Impl6_Model as Model2 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model, function Model1.model = Model0.model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl4_ModelLeftRight as ModelLeftRight0 with type k = k, type v = v,
  function Model0.model = Model2.model, function Model1.model = Model0.model, function Model2.model = Model1.model,
  type ModelTy0.modelTy = ModelTy0.modelTy, function ModelAccModel0.model_acc_model = ModelAccModel0.model_acc_model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc, axiom .
  use mach.int.Int
  use mach.int.Int64
  use prelude.Int8
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = Type.redblacktree_node k v
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = Type.redblacktree_node k v
  clone Core_Option_Impl0_AsRef_Interface as AsRef0 with type t = Type.redblacktree_node k v
  clone RedBlackTree_Impl3_IsRed_Interface as IsRed0 with type k = k, type v = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve5 with type t = Type.redblacktree_node k v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.core_option_option (Type.redblacktree_node k v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = k
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.redblacktree_tree k v
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model0.model
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k, function Model0.model = Model3.model,
  function Model1.model = Model0.model, function CmpLog0.cmp_log = CmpLog0.cmp_log,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_FlipColor_Interface as FlipColor0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant1.ord_invariant, function Model0.model = Model2.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_RotateRight_Interface as RotateRight0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant1.ord_invariant, function Model0.model = Model2.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl1_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v,
  predicate OrdInvariant0.ord_invariant = OrdInvariant1.ord_invariant, function Model0.model = Model2.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  let rec cfg insert [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
    requires {OrdInvariant0.ord_invariant ( * self)}
    ensures { Model1.model ( ^ self) = Map.set (Model1.model ( * self)) (Model0.model key) (Type.Core_Option_Option_Some val') }
    ensures { OrdInvariant0.ord_invariant ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var _4 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _5 : isize;
  var _6 : Type.core_option_option (Type.redblacktree_node k v);
  var _7 : Type.redblacktree_node k v;
  var _8 : Type.redblacktree_node k v;
  var _9 : Type.redblacktree_tree k v;
  var _10 : Type.core_option_option (Type.redblacktree_node k v);
  var _11 : Type.redblacktree_color;
  var _12 : k;
  var _13 : v;
  var _14 : Type.redblacktree_tree k v;
  var _15 : Type.core_option_option (Type.redblacktree_node k v);
  var _16 : ();
  var node_17 : borrowed (Type.redblacktree_node k v);
  var _18 : ();
  var _19 : ();
  var _20 : Type.core_cmp_ordering;
  var _21 : k;
  var _22 : k;
  var _23 : k;
  var _24 : int8;
  var _25 : borrowed (Type.redblacktree_tree k v);
  var _26 : k;
  var _27 : v;
  var _28 : v;
  var _29 : borrowed (Type.redblacktree_tree k v);
  var _30 : k;
  var _31 : v;
  var _32 : ();
  var _33 : ();
  var _34 : ();
  var _35 : ();
  var _36 : bool;
  var _37 : bool;
  var _38 : Type.redblacktree_tree k v;
  var _39 : bool;
  var _40 : bool;
  var _41 : Type.redblacktree_tree k v;
  var _42 : ();
  var _43 : borrowed (Type.redblacktree_node k v);
  var _44 : ();
  var _45 : bool;
  var _46 : bool;
  var _47 : Type.redblacktree_tree k v;
  var _48 : bool;
  var _49 : bool;
  var _50 : Type.redblacktree_tree k v;
  var _51 : Type.redblacktree_node k v;
  var _52 : Type.core_option_option (Type.redblacktree_node k v);
  var _53 : Type.core_option_option (Type.redblacktree_node k v);
  var _54 : ();
  var _55 : borrowed (Type.redblacktree_node k v);
  var _56 : ();
  var _57 : bool;
  var _58 : bool;
  var _59 : Type.redblacktree_tree k v;
  var _60 : bool;
  var _61 : Type.redblacktree_tree k v;
  var _62 : ();
  var _63 : borrowed (Type.redblacktree_node k v);
  var _64 : borrowed (Type.redblacktree_node k v);
  var _65 : isize;
  var _66 : isize;
  var l_67 : borrowed (Type.redblacktree_node k v);
  var r_68 : borrowed (Type.redblacktree_node k v);
  var _69 : ();
  var _70 : borrowed (Type.redblacktree_node k v);
  var _71 : borrowed (Type.redblacktree_node k v);
  var _72 : ();
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _4 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _4)) };
    switch ( * _4)
      | Type.Core_Option_Option_None -> goto BB4
      | Type.Core_Option_Option_Some _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    node_17 <- borrow_mut (Type.core_option_option_Some_0 ( * _4));
    _4 <- { _4 with current = (let Type.Core_Option_Option_Some a =  * _4 in Type.Core_Option_Option_Some ( ^ node_17)) };
    assume { Resolve3.resolve _4 };
    assert { let _ = ModelLeftRight0.model_left_right ( * node_17) (Model0.model key_2) in true };
    goto BB15
  }
  BB3 {
    assume { Resolve0.resolve self_1 };
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve val'_3 };
    assume { Resolve3.resolve _4 };
    absurd
  }
  BB4 {
    assume { Resolve3.resolve _4 };
    _10 <- Type.Core_Option_Option_None;
    _9 <- Type.RedBlackTree_Tree _10;
    goto BB5
  }
  BB5 {
    _11 <- Type.RedBlackTree_Color_Black;
    assume { Resolve1.resolve _12 };
    _12 <- key_2;
    assume { Resolve2.resolve _13 };
    _13 <- val'_3;
    _15 <- Type.Core_Option_Option_None;
    _14 <- Type.RedBlackTree_Tree _15;
    goto BB6
  }
  BB6 {
    _8 <- Type.RedBlackTree_Node _9 _11 _12 _13 _14;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    _7 <- _8;
    goto BB11
  }
  BB11 {
    _6 <- Type.Core_Option_Option_Some _7;
    goto BB12
  }
  BB12 {
    assume { Resolve8.resolve (Type.redblacktree_tree_Tree_node ( * self_1)) };
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree _6) };
    goto BB13
  }
  BB13 {
    assume { Resolve0.resolve self_1 };
    goto BB14
  }
  BB14 {
    _0 <- ();
    goto BB61
  }
  BB15 {
    _18 <- ();
    _21 <- key_2;
    _23 <- Type.redblacktree_node_Node_key ( * node_17);
    _22 <- _23;
    assume { Resolve4.resolve _23 };
    _20 <- Cmp0.cmp _21 _22;
    goto BB16
  }
  BB16 {
    switch (_20)
      | Type.Core_Cmp_Ordering_Less -> goto BB19
      | Type.Core_Cmp_Ordering_Equal -> goto BB21
      | Type.Core_Cmp_Ordering_Greater -> goto BB17
      end
  }
  BB17 {
    _29 <- borrow_mut (Type.redblacktree_node_Node_right ( * node_17));
    node_17 <- { node_17 with current = (let Type.RedBlackTree_Node a b c d e =  * node_17 in Type.RedBlackTree_Node a b c d ( ^ _29)) };
    assume { Resolve1.resolve _30 };
    _30 <- key_2;
    assume { Resolve2.resolve _31 };
    _31 <- val'_3;
    _19 <- insert _29 _30 _31;
    goto BB24
  }
  BB18 {
    assume { Resolve1.resolve key_2 };
    assume { Resolve2.resolve val'_3 };
    assume { Resolve5.resolve node_17 };
    absurd
  }
  BB19 {
    _25 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_17));
    node_17 <- { node_17 with current = (let Type.RedBlackTree_Node a b c d e =  * node_17 in Type.RedBlackTree_Node ( ^ _25) b c d e) };
    assume { Resolve1.resolve _26 };
    _26 <- key_2;
    assume { Resolve2.resolve _27 };
    _27 <- val'_3;
    _19 <- insert _25 _26 _27;
    goto BB20
  }
  BB20 {
    goto BB25
  }
  BB21 {
    assume { Resolve2.resolve _28 };
    _28 <- val'_3;
    assume { Resolve2.resolve (Type.redblacktree_node_Node_val ( * node_17)) };
    node_17 <- { node_17 with current = (let Type.RedBlackTree_Node a b c d e =  * node_17 in Type.RedBlackTree_Node a b c _28 e) };
    goto BB22
  }
  BB22 {
    _19 <- ();
    goto BB23
  }
  BB23 {
    goto BB25
  }
  BB24 {
    goto BB25
  }
  BB25 {
    assert { OrdInvariant0.ord_invariant (Type.redblacktree_node_Node_left ( * node_17)) };
    _32 <- ();
    assert { OrdInvariant0.ord_invariant (Type.redblacktree_node_Node_right ( * node_17)) };
    _33 <- ();
    assert { OrdInvariant1.ord_invariant ( * node_17) };
    _34 <- ();
    _38 <- Type.redblacktree_node_Node_right ( * node_17);
    _37 <- IsRed0.is_red _38;
    goto BB29
  }
  BB26 {
    _36 <- false;
    goto BB28
  }
  BB27 {
    _41 <- Type.redblacktree_node_Node_left ( * node_17);
    _40 <- IsRed0.is_red _41;
    goto BB30
  }
  BB28 {
    switch (_36)
      | False -> goto BB33
      | _ -> goto BB31
      end
  }
  BB29 {
    switch (_37)
      | False -> goto BB26
      | _ -> goto BB27
      end
  }
  BB30 {
    _39 <- not _40;
    _36 <- _39;
    goto BB28
  }
  BB31 {
    _43 <- borrow_mut ( * node_17);
    node_17 <- { node_17 with current = ( ^ _43) };
    _42 <- RotateLeft0.rotate_left _43;
    goto BB32
  }
  BB32 {
    _35 <- ();
    goto BB34
  }
  BB33 {
    _35 <- ();
    goto BB34
  }
  BB34 {
    _47 <- Type.redblacktree_node_Node_left ( * node_17);
    _46 <- IsRed0.is_red _47;
    goto BB38
  }
  BB35 {
    _45 <- false;
    goto BB37
  }
  BB36 {
    _53 <- Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * node_17));
    _52 <- AsRef0.as_ref _53;
    goto BB39
  }
  BB37 {
    switch (_45)
      | False -> goto BB44
      | _ -> goto BB42
      end
  }
  BB38 {
    switch (_46)
      | False -> goto BB35
      | _ -> goto BB36
      end
  }
  BB39 {
    _51 <- Unwrap0.unwrap _52;
    goto BB40
  }
  BB40 {
    _50 <- Type.redblacktree_node_Node_left _51;
    assume { Resolve6.resolve _51 };
    _49 <- IsRed0.is_red _50;
    goto BB41
  }
  BB41 {
    _48 <- not _49;
    _45 <- _48;
    goto BB37
  }
  BB42 {
    _55 <- borrow_mut ( * node_17);
    node_17 <- { node_17 with current = ( ^ _55) };
    _54 <- RotateRight0.rotate_right _55;
    goto BB43
  }
  BB43 {
    _44 <- ();
    goto BB45
  }
  BB44 {
    _44 <- ();
    goto BB45
  }
  BB45 {
    _59 <- Type.redblacktree_node_Node_left ( * node_17);
    _58 <- IsRed0.is_red _59;
    goto BB49
  }
  BB46 {
    _57 <- false;
    goto BB48
  }
  BB47 {
    _61 <- Type.redblacktree_node_Node_right ( * node_17);
    _60 <- IsRed0.is_red _61;
    goto BB50
  }
  BB48 {
    switch (_57)
      | False -> goto BB58
      | _ -> goto BB51
      end
  }
  BB49 {
    switch (_58)
      | False -> goto BB46
      | _ -> goto BB47
      end
  }
  BB50 {
    _57 <- _60;
    goto BB48
  }
  BB51 {
    _63 <- borrow_mut ( * node_17);
    node_17 <- { node_17 with current = ( ^ _63) };
    _62 <- FlipColor0.flip_color _63;
    goto BB52
  }
  BB52 {
    _64 <- borrow_mut ( * node_17);
    node_17 <- { node_17 with current = ( ^ _64) };
    assume { Resolve5.resolve node_17 };
    switch (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * _64)))
      | Type.Core_Option_Option_Some _ -> goto BB54
      | _ -> goto BB53
      end
  }
  BB53 {
    assume { Resolve7.resolve _64 };
    absurd
  }
  BB54 {
    switch (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * _64)))
      | Type.Core_Option_Option_Some _ -> goto BB55
      | _ -> goto BB53
      end
  }
  BB55 {
    l_67 <- borrow_mut (Type.core_option_option_Some_0 (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * _64))));
    _64 <- { _64 with current = (let Type.RedBlackTree_Node a b c d e =  * _64 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * _64) in Type.RedBlackTree_Tree (let Type.Core_Option_Option_Some a = Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * _64)) in Type.Core_Option_Option_Some ( ^ l_67))) b c d e) };
    r_68 <- borrow_mut (Type.core_option_option_Some_0 (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * _64))));
    _64 <- { _64 with current = (let Type.RedBlackTree_Node a b c d e =  * _64 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * _64) in Type.RedBlackTree_Tree (let Type.Core_Option_Option_Some a = Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * _64)) in Type.Core_Option_Option_Some ( ^ r_68)))) };
    assume { Resolve7.resolve _64 };
    _70 <- borrow_mut ( * l_67);
    l_67 <- { l_67 with current = ( ^ _70) };
    _69 <- FlipColor0.flip_color _70;
    goto BB56
  }
  BB56 {
    assume { Resolve5.resolve l_67 };
    _71 <- borrow_mut ( * r_68);
    r_68 <- { r_68 with current = ( ^ _71) };
    _56 <- FlipColor0.flip_color _71;
    goto BB57
  }
  BB57 {
    assume { Resolve5.resolve r_68 };
    goto BB59
  }
  BB58 {
    assume { Resolve5.resolve node_17 };
    _56 <- ();
    goto BB59
  }
  BB59 {
    assert { OrdInvariant1.ord_invariant ( * node_17) };
    _0 <- ();
    goto BB60
  }
  BB60 {
    goto BB62
  }
  BB61 {
    goto BB62
  }
  BB62 {
    return _0
  }
  
end
module RedBlackTree_Impl4_ModelColor_Interface
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl6_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_color (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v) : ()
end
module RedBlackTree_Impl4_ModelColor
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl6_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_color (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v) : () = 
    ()
  axiom model_color_spec : forall self : Type.redblacktree_node k v, o : Type.redblacktree_node k v . Type.redblacktree_node_Node_val self = Type.redblacktree_node_Node_val o -> Type.redblacktree_node_Node_key self = Type.redblacktree_node_Node_key o -> Type.redblacktree_node_Node_right self = Type.redblacktree_node_Node_right o -> Type.redblacktree_node_Node_left self = Type.redblacktree_node_Node_left o -> Model0.model self = Model0.model o
end
module RedBlackTree_Impl4_ModelColor_Impl
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model2.model
  clone RedBlackTree_Impl7_Model as Model1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  clone RedBlackTree_Impl6_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model, function Model1.model = Model2.model,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  let rec ghost function model_color (self : Type.redblacktree_node k v) (o : Type.redblacktree_node k v) : ()
    requires {Type.redblacktree_node_Node_val self = Type.redblacktree_node_Node_val o}
    requires {Type.redblacktree_node_Node_key self = Type.redblacktree_node_Node_key o}
    requires {Type.redblacktree_node_Node_right self = Type.redblacktree_node_Node_right o}
    requires {Type.redblacktree_node_Node_left self = Type.redblacktree_node_Node_left o}
    ensures { Model0.model self = Model0.model o }
    
   = 
    ()
end
module RedBlackTree_Impl5_ModelLeaf_Interface
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl7_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_leaf (self : Type.redblacktree_tree k v) (key0 : ModelTy0.modelTy) : ()
end
module RedBlackTree_Impl5_ModelLeaf
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone RedBlackTree_Impl7_Model_Interface as Model0 with type k = k, type v = v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model_leaf (self : Type.redblacktree_tree k v) (key0 : ModelTy0.modelTy) : () = 
    ()
  axiom model_leaf_spec : forall self : Type.redblacktree_tree k v, key0 : ModelTy0.modelTy . Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_None -> Map.get (Model0.model self) key0 = Type.Core_Option_Option_None
end
module RedBlackTree_Impl5_ModelLeaf_Impl
  type k
  type v
  use Type
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone RedBlackTree_Impl5_ModelAcc as ModelAcc0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone RedBlackTree_Impl7_Model as Model0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy,
  function ModelAcc0.model_acc = ModelAcc0.model_acc
  let rec ghost function model_leaf (self : Type.redblacktree_tree k v) (key0 : ModelTy0.modelTy) : ()
    requires {Type.redblacktree_tree_Tree_node self = Type.Core_Option_Option_None}
    ensures { Map.get (Model0.model self) key0 = Type.Core_Option_Option_None }
    
   = 
    ()
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module RedBlackTree_Impl8
  use Type
  clone RedBlackTree_Impl8_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.redblacktree_color, val clone' = Clone0.clone'
end
module RedBlackTree_Impl9
  
end
