module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type redblacktree_color  = 
    | RedBlackTree_Color_Red
    | RedBlackTree_Color_Black
    
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  function core_option_option_Some_0 (self : core_option_option 't) : 't
  val core_option_option_Some_0 (self : core_option_option 't) : 't
    ensures { result = core_option_option_Some_0 self }
    
  axiom core_option_option_Some_0_acc : forall a : 't . core_option_option_Some_0 (Core_Option_Option_Some a : core_option_option 't) = a
  type redblacktree_tree 'k 'v = 
    | RedBlackTree_Tree (core_option_option (redblacktree_node 'k 'v))
    with redblacktree_node 'k 'v = 
    | RedBlackTree_Node (redblacktree_tree 'k 'v) (redblacktree_color) 'k 'v (redblacktree_tree 'k 'v)
    
  function redblacktree_node_Node_left (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v
  val redblacktree_node_Node_left (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v
    ensures { result = redblacktree_node_Node_left self }
    
  axiom redblacktree_node_Node_left_acc : forall a : redblacktree_tree 'k 'v, b : redblacktree_color, c : 'k, d : 'v, e : redblacktree_tree 'k 'v . redblacktree_node_Node_left (RedBlackTree_Node a b c d e : redblacktree_node 'k 'v) = a
  function redblacktree_node_Node_right (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v
  val redblacktree_node_Node_right (self : redblacktree_node 'k 'v) : redblacktree_tree 'k 'v
    ensures { result = redblacktree_node_Node_right self }
    
  axiom redblacktree_node_Node_right_acc : forall a : redblacktree_tree 'k 'v, b : redblacktree_color, c : 'k, d : 'v, e : redblacktree_tree 'k 'v . redblacktree_node_Node_right (RedBlackTree_Node a b c d e : redblacktree_node 'k 'v) = e
  function redblacktree_node_Node_color (self : redblacktree_node 'k 'v) : redblacktree_color
  val redblacktree_node_Node_color (self : redblacktree_node 'k 'v) : redblacktree_color
    ensures { result = redblacktree_node_Node_color self }
    
  axiom redblacktree_node_Node_color_acc : forall a : redblacktree_tree 'k 'v, b : redblacktree_color, c : 'k, d : 'v, e : redblacktree_tree 'k 'v . redblacktree_node_Node_color (RedBlackTree_Node a b c d e : redblacktree_node 'k 'v) = b
  function redblacktree_node_Node_key (self : redblacktree_node 'k 'v) : 'k
  val redblacktree_node_Node_key (self : redblacktree_node 'k 'v) : 'k
    ensures { result = redblacktree_node_Node_key self }
    
  axiom redblacktree_node_Node_key_acc : forall a : redblacktree_tree 'k 'v, b : redblacktree_color, c : 'k, d : 'v, e : redblacktree_tree 'k 'v . redblacktree_node_Node_key (RedBlackTree_Node a b c d e : redblacktree_node 'k 'v) = c
  function redblacktree_node_Node_val (self : redblacktree_node 'k 'v) : 'v
  val redblacktree_node_Node_val (self : redblacktree_node 'k 'v) : 'v
    ensures { result = redblacktree_node_Node_val self }
    
  axiom redblacktree_node_Node_val_acc : forall a : redblacktree_tree 'k 'v, b : redblacktree_color, c : 'k, d : 'v, e : redblacktree_tree 'k 'v . redblacktree_node_Node_val (RedBlackTree_Node a b c d e : redblacktree_node 'k 'v) = d
  function redblacktree_tree_Tree_node (self : redblacktree_tree 'k 'v) : core_option_option (redblacktree_node 'k 'v)
  val redblacktree_tree_Tree_node (self : redblacktree_tree 'k 'v) : core_option_option (redblacktree_node 'k 'v)
    ensures { result = redblacktree_tree_Tree_node self }
    
  axiom redblacktree_tree_Tree_node_acc : forall a : core_option_option (redblacktree_node 'k 'v) . redblacktree_tree_Tree_node (RedBlackTree_Tree a : redblacktree_tree 'k 'v) = a
  type core_cmp_ordering  = 
    | Core_Cmp_Ordering_Less
    | Core_Cmp_Ordering_Equal
    | Core_Cmp_Ordering_Greater
    
end
module RedBlackTree_Impl0_Flip_Interface
  use Type
  val flip [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color
end
module RedBlackTree_Impl0_Flip
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  let rec cfg flip [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color = 
  var _0 : Type.redblacktree_color;
  var self_1 : Type.redblacktree_color;
  var _2 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Type.RedBlackTree_Color_Red -> goto BB1
      | Type.RedBlackTree_Color_Black -> goto BB3
      end
  }
  BB1 {
    _0 <- Type.RedBlackTree_Color_Black;
    goto BB4
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- Type.RedBlackTree_Color_Red;
    goto BB4
  }
  BB4 {
    return _0
  }
  
end
module Core_Mem_Take_Interface
  type t
  use prelude.Prelude
  val take [@cfg:stackify] (dest : borrowed t) : t
    requires {false}
    
end
module Core_Mem_Take
  type t
  use prelude.Prelude
  val take [@cfg:stackify] (dest : borrowed t) : t
    requires {false}
    
end
module Core_Mem_Swap_Interface
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    requires {false}
    
end
module Core_Mem_Swap
  type t
  use prelude.Prelude
  val swap [@cfg:stackify] (x : borrowed t) (y : borrowed t) : ()
    requires {false}
    
end
module RedBlackTree_Impl1_RotateRight_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  val rotate_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
end
module RedBlackTree_Impl1_RotateRight
  type k
  type v
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v)
  let rec cfg rotate_right [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : () = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var x_2 : Type.redblacktree_node k v;
  var _3 : Type.core_option_option (Type.redblacktree_node k v);
  var _4 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _5 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _6 : isize;
  var x_7 : Type.redblacktree_node k v;
  var _8 : ();
  var _9 : ();
  var _10 : borrowed (Type.redblacktree_tree k v);
  var _11 : borrowed (Type.redblacktree_tree k v);
  var _12 : borrowed (Type.redblacktree_tree k v);
  var _13 : borrowed (Type.redblacktree_tree k v);
  var _14 : ();
  var _15 : borrowed (Type.redblacktree_node k v);
  var _16 : borrowed (Type.redblacktree_node k v);
  var _17 : borrowed (Type.redblacktree_node k v);
  var _18 : Type.redblacktree_tree k v;
  var _19 : Type.core_option_option (Type.redblacktree_node k v);
  var _20 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_left ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_left ( * self_1) in Type.RedBlackTree_Tree ( ^ _5)) b c d e) };
    _4 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _4) };
    _3 <- Take0.take _4;
    goto BB1
  }
  BB1 {
    switch (_3)
      | Type.Core_Option_Option_None -> goto BB2
      | Type.Core_Option_Option_Some _ -> goto BB4
      end
  }
  BB2 {
    _0 <- ();
    goto BB14
  }
  BB3 {
    absurd
  }
  BB4 {
    x_7 <- Type.core_option_option_Some_0 _3;
    x_2 <- x_7;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    _11 <- borrow_mut (Type.redblacktree_node_Node_left ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node ( ^ _11) b c d e) };
    _10 <- borrow_mut ( * _11);
    _11 <- { _11 with current = ( ^ _10) };
    _13 <- borrow_mut (Type.redblacktree_node_Node_right x_2);
    x_2 <- (let Type.RedBlackTree_Node a b c d e = x_2 in Type.RedBlackTree_Node a b c d ( ^ _13));
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    _9 <- Swap0.swap _10 _12;
    goto BB7
  }
  BB7 {
    _15 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _15) };
    _17 <- borrow_mut x_2;
    x_2 <-  ^ _17;
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    _14 <- Swap1.swap _15 _16;
    goto BB8
  }
  BB8 {
    _20 <- x_2;
    _19 <- Type.Core_Option_Option_Some _20;
    goto BB9
  }
  BB9 {
    _18 <- Type.RedBlackTree_Tree _19;
    goto BB10
  }
  BB10 {
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d _18) };
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    _0 <- ();
    goto BB13
  }
  BB13 {
    goto BB15
  }
  BB14 {
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module RedBlackTree_Impl1_RotateLeft_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  val rotate_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
end
module RedBlackTree_Impl1_RotateLeft
  type k
  type v
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  clone Core_Mem_Swap_Interface as Swap1 with type t = Type.redblacktree_node k v
  clone Core_Mem_Swap_Interface as Swap0 with type t = Type.redblacktree_tree k v
  clone Core_Mem_Take_Interface as Take0 with type t = Type.core_option_option (Type.redblacktree_node k v)
  let rec cfg rotate_left [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : () = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var x_2 : Type.redblacktree_node k v;
  var _3 : Type.core_option_option (Type.redblacktree_node k v);
  var _4 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _5 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  var _6 : isize;
  var x_7 : Type.redblacktree_node k v;
  var _8 : ();
  var _9 : ();
  var _10 : borrowed (Type.redblacktree_tree k v);
  var _11 : borrowed (Type.redblacktree_tree k v);
  var _12 : borrowed (Type.redblacktree_tree k v);
  var _13 : borrowed (Type.redblacktree_tree k v);
  var _14 : ();
  var _15 : borrowed (Type.redblacktree_node k v);
  var _16 : borrowed (Type.redblacktree_node k v);
  var _17 : borrowed (Type.redblacktree_node k v);
  var _18 : Type.redblacktree_tree k v;
  var _19 : Type.core_option_option (Type.redblacktree_node k v);
  var _20 : Type.redblacktree_node k v;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- borrow_mut (Type.redblacktree_tree_Tree_node (Type.redblacktree_node_Node_right ( * self_1)));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d (let Type.RedBlackTree_Tree a = Type.redblacktree_node_Node_right ( * self_1) in Type.RedBlackTree_Tree ( ^ _5))) };
    _4 <- borrow_mut ( * _5);
    _5 <- { _5 with current = ( ^ _4) };
    _3 <- Take0.take _4;
    goto BB1
  }
  BB1 {
    switch (_3)
      | Type.Core_Option_Option_None -> goto BB2
      | Type.Core_Option_Option_Some _ -> goto BB4
      end
  }
  BB2 {
    _0 <- ();
    goto BB14
  }
  BB3 {
    absurd
  }
  BB4 {
    x_7 <- Type.core_option_option_Some_0 _3;
    x_2 <- x_7;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    _11 <- borrow_mut (Type.redblacktree_node_Node_right x_2);
    x_2 <- (let Type.RedBlackTree_Node a b c d e = x_2 in Type.RedBlackTree_Node a b c d ( ^ _11));
    _10 <- borrow_mut ( * _11);
    _11 <- { _11 with current = ( ^ _10) };
    _13 <- borrow_mut (Type.redblacktree_node_Node_left ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node ( ^ _13) b c d e) };
    _12 <- borrow_mut ( * _13);
    _13 <- { _13 with current = ( ^ _12) };
    _9 <- Swap0.swap _10 _12;
    goto BB7
  }
  BB7 {
    _15 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _15) };
    _17 <- borrow_mut x_2;
    x_2 <-  ^ _17;
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    _14 <- Swap1.swap _15 _16;
    goto BB8
  }
  BB8 {
    _20 <- x_2;
    _19 <- Type.Core_Option_Option_Some _20;
    goto BB9
  }
  BB9 {
    _18 <- Type.RedBlackTree_Tree _19;
    goto BB10
  }
  BB10 {
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node _18 b c d e) };
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    _0 <- ();
    goto BB13
  }
  BB13 {
    goto BB15
  }
  BB14 {
    goto BB15
  }
  BB15 {
    return _0
  }
  
end
module Core_Option_Impl0_AsMut_Interface
  type t
  use prelude.Prelude
  use Type
  val as_mut [@cfg:stackify] (self : borrowed (Type.core_option_option t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Option_Impl0_AsMut
  type t
  use prelude.Prelude
  use Type
  val as_mut [@cfg:stackify] (self : borrowed (Type.core_option_option t)) : Type.core_option_option (borrowed t)
    requires {false}
    
end
module Core_Option_Impl0_Unwrap_Interface
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {false}
    
end
module Core_Option_Impl0_Unwrap
  type t
  use Type
  val unwrap [@cfg:stackify] (self : Type.core_option_option t) : t
    requires {false}
    
end
module RedBlackTree_Impl2_UnwrapMut_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  val unwrap_mut [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : borrowed (Type.redblacktree_node k v)
end
module RedBlackTree_Impl2_UnwrapMut
  type k
  type v
  use prelude.Prelude
  use Type
  clone Core_Option_Impl0_Unwrap_Interface as Unwrap0 with type t = borrowed (Type.redblacktree_node k v)
  clone Core_Option_Impl0_AsMut_Interface as AsMut0 with type t = Type.redblacktree_node k v
  let rec cfg unwrap_mut [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) : borrowed (Type.redblacktree_node k v)
    
   = 
  var _0 : borrowed (Type.redblacktree_node k v);
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var _2 : borrowed (Type.redblacktree_node k v);
  var _3 : borrowed (Type.redblacktree_node k v);
  var _4 : Type.core_option_option (borrowed (Type.redblacktree_node k v));
  var _5 : borrowed (Type.core_option_option (Type.redblacktree_node k v));
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _5 <- borrow_mut (Type.redblacktree_tree_Tree_node ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Tree a =  * self_1 in Type.RedBlackTree_Tree ( ^ _5)) };
    _4 <- AsMut0.as_mut _5;
    goto BB1
  }
  BB1 {
    _3 <- Unwrap0.unwrap _4;
    goto BB2
  }
  BB2 {
    _2 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _2) };
    _0 <- borrow_mut ( * _2);
    _2 <- { _2 with current = ( ^ _0) };
    return _0
  }
  
end
module RedBlackTree_Impl1_FlipColors_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  val flip_colors [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : ()
end
module RedBlackTree_Impl1_FlipColors
  type k
  type v
  use prelude.Prelude
  use Type
  clone RedBlackTree_Impl2_UnwrapMut_Interface as UnwrapMut0 with type k = k, type v = v
  clone RedBlackTree_Impl0_Flip_Interface as Flip0
  let rec cfg flip_colors [@cfg:stackify] (self : borrowed (Type.redblacktree_node k v)) : () = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_node k v);
  var _2 : Type.redblacktree_color;
  var _3 : Type.redblacktree_color;
  var left_4 : borrowed (Type.redblacktree_node k v);
  var _5 : borrowed (Type.redblacktree_tree k v);
  var _6 : Type.redblacktree_color;
  var _7 : Type.redblacktree_color;
  var right_8 : borrowed (Type.redblacktree_node k v);
  var _9 : borrowed (Type.redblacktree_tree k v);
  var _10 : Type.redblacktree_color;
  var _11 : Type.redblacktree_color;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- Type.redblacktree_node_Node_color ( * self_1);
    _2 <- Flip0.flip _3;
    goto BB1
  }
  BB1 {
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a _2 c d e) };
    _5 <- borrow_mut (Type.redblacktree_node_Node_left ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node ( ^ _5) b c d e) };
    left_4 <- UnwrapMut0.unwrap_mut _5;
    goto BB2
  }
  BB2 {
    _7 <- Type.redblacktree_node_Node_color ( * left_4);
    _6 <- Flip0.flip _7;
    goto BB3
  }
  BB3 {
    left_4 <- { left_4 with current = (let Type.RedBlackTree_Node a b c d e =  * left_4 in Type.RedBlackTree_Node a _6 c d e) };
    _9 <- borrow_mut (Type.redblacktree_node_Node_right ( * self_1));
    self_1 <- { self_1 with current = (let Type.RedBlackTree_Node a b c d e =  * self_1 in Type.RedBlackTree_Node a b c d ( ^ _9)) };
    right_8 <- UnwrapMut0.unwrap_mut _9;
    goto BB4
  }
  BB4 {
    _11 <- Type.redblacktree_node_Node_color ( * right_8);
    _10 <- Flip0.flip _11;
    goto BB5
  }
  BB5 {
    right_8 <- { right_8 with current = (let Type.RedBlackTree_Node a b c d e =  * right_8 in Type.RedBlackTree_Node a _10 c d e) };
    _0 <- ();
    return _0
  }
  
end
module Core_Cmp_Ord_Cmp_Interface
  type self
  use prelude.Prelude
  use Type
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    requires {false}
    
end
module Core_Cmp_Ord_Cmp
  type self
  use prelude.Prelude
  use Type
  val cmp [@cfg:stackify] (self : self) (other : self) : Type.core_cmp_ordering
    requires {false}
    
end
module Core_Cmp_Ord_Max_Interface
  type self
  val max [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Max
  type self
  val max [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Min_Interface
  type self
  val min [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Min
  type self
  val min [@cfg:stackify] (self : self) (other : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Clamp_Interface
  type self
  val clamp [@cfg:stackify] (self : self) (min : self) (max : self) : self
    requires {false}
    
end
module Core_Cmp_Ord_Clamp
  type self
  val clamp [@cfg:stackify] (self : self) (min : self) (max : self) : self
    requires {false}
    
end
module RedBlackTree_Impl2_IsRed_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  val is_red [@cfg:stackify] (self : Type.redblacktree_tree k v) : bool
end
module RedBlackTree_Impl2_IsRed
  type k
  type v
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  let rec cfg is_red [@cfg:stackify] (self : Type.redblacktree_tree k v) : bool = 
  var _0 : bool;
  var self_1 : Type.redblacktree_tree k v;
  var _2 : Type.core_option_option (Type.redblacktree_node k v);
  var _3 : isize;
  var n_4 : Type.redblacktree_node k v;
  var _5 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- Type.redblacktree_tree_Tree_node self_1;
    switch (_2)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB1
      end
  }
  BB1 {
    n_4 <- Type.core_option_option_Some_0 _2;
    switch (Type.redblacktree_node_Node_color n_4)
      | Type.RedBlackTree_Color_Red -> goto BB5
      | _ -> goto BB4
      end
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- false;
    goto BB7
  }
  BB4 {
    _0 <- false;
    goto BB6
  }
  BB5 {
    _0 <- true;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module RedBlackTree_Impl2_Insert_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  val insert [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : ()
end
module RedBlackTree_Impl2_Insert
  type k
  type v
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  use prelude.Int8
  clone RedBlackTree_Impl1_FlipColors_Interface as FlipColors0 with type k = k, type v = v
  clone RedBlackTree_Impl1_RotateRight_Interface as RotateRight0 with type k = k, type v = v
  clone RedBlackTree_Impl1_RotateLeft_Interface as RotateLeft0 with type k = k, type v = v
  clone RedBlackTree_Impl2_IsRed_Interface as IsRed0 with type k = k, type v = v
  clone Core_Cmp_Ord_Cmp_Interface as Cmp0 with type self = k
  clone RedBlackTree_Impl2_UnwrapMut_Interface as UnwrapMut0 with type k = k, type v = v
  let rec cfg insert [@cfg:stackify] (self : borrowed (Type.redblacktree_tree k v)) (key : k) (val' : v) : () = 
  var _0 : ();
  var self_1 : borrowed (Type.redblacktree_tree k v);
  var key_2 : k;
  var val'_3 : v;
  var _4 : ();
  var _5 : isize;
  var node_6 : borrowed (Type.redblacktree_node k v);
  var _7 : borrowed (Type.redblacktree_tree k v);
  var _8 : ();
  var _9 : Type.core_cmp_ordering;
  var _10 : k;
  var _11 : k;
  var _12 : k;
  var _13 : int8;
  var _14 : borrowed (Type.redblacktree_tree k v);
  var _15 : k;
  var _16 : v;
  var _17 : v;
  var _18 : borrowed (Type.redblacktree_tree k v);
  var _19 : k;
  var _20 : v;
  var _21 : ();
  var _22 : bool;
  var _23 : bool;
  var _24 : Type.redblacktree_tree k v;
  var _25 : bool;
  var _26 : bool;
  var _27 : Type.redblacktree_tree k v;
  var _28 : ();
  var _29 : borrowed (Type.redblacktree_node k v);
  var _30 : ();
  var _31 : bool;
  var _32 : bool;
  var _33 : Type.redblacktree_tree k v;
  var _34 : bool;
  var _35 : bool;
  var _36 : Type.redblacktree_tree k v;
  var _37 : borrowed (Type.redblacktree_node k v);
  var _38 : borrowed (Type.redblacktree_tree k v);
  var _39 : ();
  var _40 : borrowed (Type.redblacktree_node k v);
  var _41 : bool;
  var _42 : bool;
  var _43 : Type.redblacktree_tree k v;
  var _44 : bool;
  var _45 : Type.redblacktree_tree k v;
  var _46 : ();
  var _47 : borrowed (Type.redblacktree_node k v);
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    switch (Type.redblacktree_tree_Tree_node ( * self_1))
      | Type.Core_Option_Option_None -> goto BB1
      | _ -> goto BB2
      end
  }
  BB1 {
    _4 <- ();
    goto BB3
  }
  BB2 {
    _4 <- ();
    goto BB3
  }
  BB3 {
    _7 <- borrow_mut ( * self_1);
    self_1 <- { self_1 with current = ( ^ _7) };
    node_6 <- UnwrapMut0.unwrap_mut _7;
    goto BB4
  }
  BB4 {
    _10 <- key_2;
    _12 <- Type.redblacktree_node_Node_key ( * node_6);
    _11 <- _12;
    _9 <- Cmp0.cmp _10 _11;
    goto BB5
  }
  BB5 {
    switch (_9)
      | Type.Core_Cmp_Ordering_Less -> goto BB8
      | Type.Core_Cmp_Ordering_Equal -> goto BB10
      | Type.Core_Cmp_Ordering_Greater -> goto BB6
      end
  }
  BB6 {
    _18 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_6));
    node_6 <- { node_6 with current = (let Type.RedBlackTree_Node a b c d e =  * node_6 in Type.RedBlackTree_Node ( ^ _18) b c d e) };
    _19 <- key_2;
    _20 <- val'_3;
    _8 <- insert _18 _19 _20;
    goto BB13
  }
  BB7 {
    absurd
  }
  BB8 {
    _14 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_6));
    node_6 <- { node_6 with current = (let Type.RedBlackTree_Node a b c d e =  * node_6 in Type.RedBlackTree_Node ( ^ _14) b c d e) };
    _15 <- key_2;
    _16 <- val'_3;
    _8 <- insert _14 _15 _16;
    goto BB9
  }
  BB9 {
    goto BB14
  }
  BB10 {
    _17 <- val'_3;
    node_6 <- { node_6 with current = (let Type.RedBlackTree_Node a b c d e =  * node_6 in Type.RedBlackTree_Node a b c _17 e) };
    goto BB11
  }
  BB11 {
    _8 <- ();
    goto BB12
  }
  BB12 {
    goto BB14
  }
  BB13 {
    goto BB14
  }
  BB14 {
    _24 <- Type.redblacktree_node_Node_right ( * node_6);
    _23 <- IsRed0.is_red _24;
    goto BB18
  }
  BB15 {
    _22 <- false;
    goto BB17
  }
  BB16 {
    _27 <- Type.redblacktree_node_Node_left ( * node_6);
    _26 <- IsRed0.is_red _27;
    goto BB19
  }
  BB17 {
    switch (_22)
      | False -> goto BB22
      | _ -> goto BB20
      end
  }
  BB18 {
    switch (_23)
      | False -> goto BB15
      | _ -> goto BB16
      end
  }
  BB19 {
    _25 <- not _26;
    _22 <- _25;
    goto BB17
  }
  BB20 {
    _29 <- borrow_mut ( * node_6);
    node_6 <- { node_6 with current = ( ^ _29) };
    _28 <- RotateLeft0.rotate_left _29;
    goto BB21
  }
  BB21 {
    _21 <- ();
    goto BB23
  }
  BB22 {
    _21 <- ();
    goto BB23
  }
  BB23 {
    _33 <- Type.redblacktree_node_Node_left ( * node_6);
    _32 <- IsRed0.is_red _33;
    goto BB27
  }
  BB24 {
    _31 <- false;
    goto BB26
  }
  BB25 {
    _38 <- borrow_mut (Type.redblacktree_node_Node_left ( * node_6));
    node_6 <- { node_6 with current = (let Type.RedBlackTree_Node a b c d e =  * node_6 in Type.RedBlackTree_Node ( ^ _38) b c d e) };
    _37 <- UnwrapMut0.unwrap_mut _38;
    goto BB28
  }
  BB26 {
    switch (_31)
      | False -> goto BB32
      | _ -> goto BB30
      end
  }
  BB27 {
    switch (_32)
      | False -> goto BB24
      | _ -> goto BB25
      end
  }
  BB28 {
    _36 <- Type.redblacktree_node_Node_left ( * _37);
    _35 <- IsRed0.is_red _36;
    goto BB29
  }
  BB29 {
    _34 <- not _35;
    _31 <- _34;
    goto BB26
  }
  BB30 {
    _40 <- borrow_mut ( * node_6);
    node_6 <- { node_6 with current = ( ^ _40) };
    _39 <- RotateRight0.rotate_right _40;
    goto BB31
  }
  BB31 {
    _30 <- ();
    goto BB33
  }
  BB32 {
    _30 <- ();
    goto BB33
  }
  BB33 {
    _43 <- Type.redblacktree_node_Node_left ( * node_6);
    _42 <- IsRed0.is_red _43;
    goto BB37
  }
  BB34 {
    _41 <- false;
    goto BB36
  }
  BB35 {
    _45 <- Type.redblacktree_node_Node_right ( * node_6);
    _44 <- IsRed0.is_red _45;
    goto BB38
  }
  BB36 {
    switch (_41)
      | False -> goto BB41
      | _ -> goto BB39
      end
  }
  BB37 {
    switch (_42)
      | False -> goto BB34
      | _ -> goto BB35
      end
  }
  BB38 {
    _41 <- _44;
    goto BB36
  }
  BB39 {
    _47 <- borrow_mut ( * node_6);
    node_6 <- { node_6 with current = ( ^ _47) };
    _46 <- FlipColors0.flip_colors _47;
    goto BB40
  }
  BB40 {
    _0 <- ();
    goto BB42
  }
  BB41 {
    _0 <- ();
    goto BB42
  }
  BB42 {
    goto BB43
  }
  BB43 {
    goto BB44
  }
  BB44 {
    return _0
  }
  
end
module RedBlackTree_Impl2_IsBlack_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  val is_black [@cfg:stackify] (self : Type.redblacktree_tree k v) : bool
end
module RedBlackTree_Impl2_IsBlack
  type k
  type v
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  let rec cfg is_black [@cfg:stackify] (self : Type.redblacktree_tree k v) : bool = 
  var _0 : bool;
  var self_1 : Type.redblacktree_tree k v;
  var _2 : Type.core_option_option (Type.redblacktree_node k v);
  var _3 : isize;
  var n_4 : Type.redblacktree_node k v;
  var _5 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- Type.redblacktree_tree_Tree_node self_1;
    switch (_2)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB1
      end
  }
  BB1 {
    n_4 <- Type.core_option_option_Some_0 _2;
    switch (Type.redblacktree_node_Node_color n_4)
      | Type.RedBlackTree_Color_Black -> goto BB5
      | _ -> goto BB4
      end
  }
  BB2 {
    absurd
  }
  BB3 {
    _0 <- true;
    goto BB7
  }
  BB4 {
    _0 <- false;
    goto BB6
  }
  BB5 {
    _0 <- true;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module RedBlackTree_Impl3_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color
end
module RedBlackTree_Impl3_Clone
  use prelude.Prelude
  use Type
  let rec cfg clone' [@cfg:stackify] (self : Type.redblacktree_color) : Type.redblacktree_color = 
  var _0 : Type.redblacktree_color;
  var self_1 : Type.redblacktree_color;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    return _0
  }
  
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module RedBlackTree_Impl3
  use Type
  clone RedBlackTree_Impl3_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.redblacktree_color, val clone' = Clone0.clone'
end
module RedBlackTree_Impl4
  
end
