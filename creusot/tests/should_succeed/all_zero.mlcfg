
module AllZero_List_Type
  use mach.int.Int
  use mach.int.UInt32
  type allzero_list_type  =
    | AllZero_List_Cons_Type uint32 (allzero_list_type)
    | AllZero_List_Nil_Type
    
  let function allzero_list_type_Cons_0 (self : allzero_list_type) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | AllZero_List_Cons_Type a _ -> a
      | AllZero_List_Nil_Type -> any uint32
      end
  let function allzero_list_type_Cons_1 (self : allzero_list_type) : allzero_list_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | AllZero_List_Cons_Type _ a -> a
      | AllZero_List_Nil_Type -> any allzero_list_type
      end
end
module AllZero_Impl0_Len_Interface
  use mach.int.Int
  use AllZero_List_Type
  function len (self : AllZero_List_Type.allzero_list_type) : int
end
module AllZero_Impl0_Len
  use mach.int.Int
  use AllZero_List_Type
  use mach.int.Int32
  function len [#"../all_zero.rs" 13 4 13 23] (self : AllZero_List_Type.allzero_list_type) : int =
    [#"../all_zero.rs" 14 8 17 9] match (self) with
      | AllZero_List_Type.AllZero_List_Cons_Type _ ls -> 1 + len ls
      | AllZero_List_Type.AllZero_List_Nil_Type -> 0
      end
end
module Core_Option_Option_Type
  type core_option_option_type 't =
    | Core_Option_Option_None_Type
    | Core_Option_Option_Some_Type 't
    
end
module AllZero_Impl0_Get_Interface
  use mach.int.Int
  use mach.int.UInt32
  use Core_Option_Option_Type
  use AllZero_List_Type
  function get (self : AllZero_List_Type.allzero_list_type) (ix : int) : Core_Option_Option_Type.core_option_option_type uint32
    
end
module AllZero_Impl0_Get
  use mach.int.Int
  use mach.int.UInt32
  use Core_Option_Option_Type
  use AllZero_List_Type
  use mach.int.Int32
  function get [#"../all_zero.rs" 21 4 21 40] (self : AllZero_List_Type.allzero_list_type) (ix : int) : Core_Option_Option_Type.core_option_option_type uint32
    
   =
    [#"../all_zero.rs" 22 8 28 9] match (self) with
      | AllZero_List_Type.AllZero_List_Cons_Type x ls -> if ix = 0 then
        Core_Option_Option_Type.Core_Option_Option_Some_Type x
      else
        get ls (ix - 1)
      
      | AllZero_List_Type.AllZero_List_Nil_Type -> Core_Option_Option_Type.Core_Option_Option_None_Type
      end
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type core_ptr_nonnull_nonnull_type 't =
    | Core_Ptr_NonNull_NonNull_Type opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_ptr_unique_unique_type 't =
    | Core_Ptr_Unique_Unique_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type
  type alloc_boxed_box_type 't 'a =
    | Alloc_Boxed_Box_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type alloc_alloc_global_type  =
    | Alloc_Alloc_Global_Type
    
end
module AllZero_AllZero_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  use mach.int.UInt32
  use AllZero_List_Type
  use Core_Option_Option_Type
  clone AllZero_Impl0_Get_Interface as Get0
  clone AllZero_Impl0_Len_Interface as Len0
  val all_zero [@cfg:stackify] (l : borrowed (AllZero_List_Type.allzero_list_type)) : ()
    ensures { [#"../all_zero.rs" 32 0 32 77] forall i : int . 0 <= i /\ i < Len0.len ( * l) -> Get0.get ( ^ l) i = Core_Option_Option_Type.Core_Option_Option_Some_Type (0 : uint32) }
    ensures { [#"../all_zero.rs" 33 10 33 34] Len0.len ( * l) = Len0.len ( ^ l) }
    
end
module AllZero_AllZero
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  use mach.int.UInt32
  use AllZero_List_Type
  use Core_Option_Option_Type
  clone AllZero_Impl0_Get as Get0
  clone AllZero_Impl0_Len as Len0
  use prelude.IntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = AllZero_List_Type.allzero_list_type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = AllZero_List_Type.allzero_list_type
  let rec cfg all_zero [@cfg:stackify] [#"../all_zero.rs" 34 0 34 29] (l : borrowed (AllZero_List_Type.allzero_list_type)) : ()
    ensures { [#"../all_zero.rs" 32 0 32 77] forall i : int . 0 <= i /\ i < Len0.len ( * l) -> Get0.get ( ^ l) i = Core_Option_Option_Type.Core_Option_Option_Some_Type (0 : uint32) }
    ensures { [#"../all_zero.rs" 33 10 33 34] Len0.len ( * l) = Len0.len ( ^ l) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l_1 : borrowed (AllZero_List_Type.allzero_list_type);
  ghost var old_l_4 : borrowed (AllZero_List_Type.allzero_list_type);
  var _7 : ();
  var loop_l_8 : borrowed (AllZero_List_Type.allzero_list_type);
  var _11 : ();
  var _12 : isize;
  var value_13 : borrowed uint32;
  var next_14 : borrowed (AllZero_List_Type.allzero_list_type);
  var _15 : borrowed (AllZero_List_Type.allzero_list_type);
  var _16 : ();
  var _17 : ();
  var _18 : ();
  {
    l_1 <- l;
    goto BB0
  }
  BB0 {
    _7 <- ();
    old_l_4 <- ghost ([#"../all_zero.rs" 36 16 36 28] l_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve loop_l_8 };
    loop_l_8 <- l_1;
    l_1 <- any borrowed (AllZero_List_Type.allzero_list_type);
    goto BB2
  }
  BB2 {
    invariant zeroed { [#"../all_zero.rs" 39 4 41 88] (forall i : int . 0 <= i /\ i < Len0.len ( * loop_l_8) -> Get0.get ( ^ loop_l_8) i = Core_Option_Option_Type.Core_Option_Option_Some_Type (0 : uint32)) -> (forall i : int . 0 <= i /\ i < Len0.len ( * old_l_4) -> Get0.get ( ^ old_l_4) i = Core_Option_Option_Type.Core_Option_Option_Some_Type (0 : uint32)) };
    invariant in_len { [#"../all_zero.rs" 39 4 41 88] Len0.len ( ^ loop_l_8) = Len0.len ( * loop_l_8) -> Len0.len ( ^ old_l_4) = Len0.len ( * old_l_4) };
    switch ( * loop_l_8)
      | AllZero_List_Type.AllZero_List_Cons_Type _ _ -> goto BB3
      | _ -> goto BB4
      end
  }
  BB3 {
    value_13 <- borrow_mut (AllZero_List_Type.allzero_list_type_Cons_0 ( * loop_l_8));
    loop_l_8 <- { loop_l_8 with current = (let AllZero_List_Type.AllZero_List_Cons_Type a b =  * loop_l_8 in AllZero_List_Type.AllZero_List_Cons_Type ( ^ value_13) b) };
    next_14 <- borrow_mut (AllZero_List_Type.allzero_list_type_Cons_1 ( * loop_l_8));
    loop_l_8 <- { loop_l_8 with current = (let AllZero_List_Type.AllZero_List_Cons_Type a b =  * loop_l_8 in AllZero_List_Type.AllZero_List_Cons_Type a ( ^ next_14)) };
    assume { Resolve0.resolve loop_l_8 };
    value_13 <- { value_13 with current = (0 : uint32) };
    assume { Resolve1.resolve value_13 };
    _15 <- borrow_mut ( * next_14);
    next_14 <- { next_14 with current = ( ^ _15) };
    assume { Resolve2.resolve next_14 };
    assume { Resolve0.resolve loop_l_8 };
    loop_l_8 <- _15;
    _15 <- any borrowed (AllZero_List_Type.allzero_list_type);
    _11 <- ();
    goto BB2
  }
  BB4 {
    assume { Resolve0.resolve loop_l_8 };
    _0 <- ();
    return _0
  }
  
end
