
module Core_Ops_Range_RangeInclusive_Type
  type t_rangeinclusive 'idx =
    | C_RangeInclusive 'idx 'idx bool
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rangeinclusive < 'idx > (input:t_rangeinclusive 'idx) (ret  (start:'idx) (end':'idx) (exhausted:bool))= any
    [ good (start:'idx) (end':'idx) (exhausted:bool)-> {C_RangeInclusive start end' exhausted = input}
      (! ret {start} {end'} {exhausted})
    | bad (start:'idx) (end':'idx) (exhausted:bool)-> {C_RangeInclusive start end' exhausted <> input} {false} any ]
    
end
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
  
  function any_l (_ : 'b) : 'a
  
  let rec less (input:t_ordering) (ret  )= any
    [ good -> {C_Less  = input} (! ret) | bad -> {C_Less  <> input} {false} any ]
    
  
  let rec equal (input:t_ordering) (ret  )= any
    [ good -> {C_Equal  = input} (! ret) | bad -> {C_Equal  <> input} {false} any ]
    
  
  let rec greater (input:t_ordering) (ret  )= any
    [ good -> {C_Greater  = input} (! ret) | bad -> {C_Greater  <> input} {false} any ]
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_box 't 'a =
    | C_Box (Unique'0.t_unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Sum_SumFirstN
  let%span ssum0 = "../sum.rs" 7 18 7 19
  
  let%span ssum1 = "../sum.rs" 9 13 9 14
  
  let%span ssum2 = "../sum.rs" 8 4 8 67
  
  let%span ssum3 = "../sum.rs" 8 4 8 67
  
  let%span ssum4 = "../sum.rs" 8 4 8 67
  
  let%span ssum5 = "../sum.rs" 8 16 8 65
  
  let%span ssum6 = "../sum.rs" 8 4 8 67
  
  let%span ssum7 = "../sum.rs" 4 11 4 20
  
  let%span ssum8 = "../sum.rs" 5 10 5 38
  
  let%span span9 = "../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span10 = "../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span11 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span12 = "../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span13 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span14 = "../../../../creusot-contracts/src/std/ops.rs" 207 20 207 24
  
  let%span span15 = "../../../../creusot-contracts/src/std/ops.rs" 206 4 206 88
  
  let%span span16 = "../../../../creusot-contracts/src/std/iter/range.rs" 46 62 46 63
  
  let%span span17 = "../../../../creusot-contracts/src/std/iter/range.rs" 45 10 45 43
  
  let%span span18 = "../../../../creusot-contracts/src/std/iter/range.rs" 47 4 50 5
  
  let%span span19 = "../../../../creusot-contracts/src/std/iter/range.rs" 65 8 71 9
  
  let%span span20 = "../../../../creusot-contracts/src/std/iter/range.rs" 81 15 81 32
  
  let%span span21 = "../../../../creusot-contracts/src/std/iter/range.rs" 82 15 82 32
  
  let%span span22 = "../../../../creusot-contracts/src/std/iter/range.rs" 84 22 84 23
  
  let%span span23 = "../../../../creusot-contracts/src/std/iter/range.rs" 84 31 84 33
  
  let%span span24 = "../../../../creusot-contracts/src/std/iter/range.rs" 84 52 84 53
  
  let%span span25 = "../../../../creusot-contracts/src/std/iter/range.rs" 84 61 84 63
  
  let%span span26 = "../../../../creusot-contracts/src/std/iter/range.rs" 84 82 84 83
  
  let%span span27 = "../../../../creusot-contracts/src/std/iter/range.rs" 83 14 83 42
  
  let%span span28 = "../../../../creusot-contracts/src/std/iter/range.rs" 79 4 79 10
  
  let%span span29 = "../../../../creusot-contracts/src/std/iter/range.rs" 77 21 77 25
  
  let%span span30 = "../../../../creusot-contracts/src/std/iter/range.rs" 76 14 76 45
  
  let%span span31 = "../../../../creusot-contracts/src/std/iter/range.rs" 74 4 74 10
  
  let%span span32 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span33 = "../../../../creusot-contracts/src/std/iter/range.rs" 58 12 58 57
  
  let%span span34 = "" 0 0 0 0
  
  let%span span35 = "../../../../creusot-contracts/src/std/iter.rs" 95 26 98 17
  
  let%span span36 = "" 0 0 0 0
  
  let%span span37 = "../../../../creusot-contracts/src/std/iter.rs" 80 8 80 19
  
  let%span span38 = "../../../../creusot-contracts/src/std/iter.rs" 74 20 74 24
  
  let%span span39 = "../../../../creusot-contracts/src/std/iter.rs" 89 0 175 1
  
  let%span span40 = "" 0 0 0 0
  
  let%span span41 = "" 0 0 0 0
  
  let%span span42 = "" 0 0 0 0
  
  let%span span43 = "" 0 0 0 0
  
  let%span span44 = "../../../../creusot-contracts/src/std/ops.rs" 220 26 220 53
  
  let%span span45 = "../../../../creusot-contracts/src/std/ops.rs" 221 26 221 49
  
  let%span span46 = "../../../../creusot-contracts/src/std/ops.rs" 222 16 222 93
  
  let%span span47 = "" 0 0 0 0
  
  use prelude.prelude.UInt32
  
  predicate inv'1 (_x : uint32)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'5 (self : uint32) =
    [%#span9] inv'1 self
  
  predicate inv'5 (_x : uint32)
  
  axiom inv'5 : forall x : uint32 . inv'5 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq uint32) =
    [%#span10] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'4 (_x : Seq.seq uint32)
  
  axiom inv'4 : forall x : Seq.seq uint32 . inv'4 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option uint32) =
    [%#span11] true
  
  predicate inv'3 (_x : Option'0.t_option uint32)
  
  axiom inv'3 : forall x : Option'0.t_option uint32 . inv'3 x = true
  
  use Core_Ops_Range_RangeInclusive_Type as RangeInclusive'0
  
  predicate inv'0 (_x : RangeInclusive'0.t_rangeinclusive uint32)
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (RangeInclusive'0.t_rangeinclusive uint32)) =
    [%#span12] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_x : borrowed (RangeInclusive'0.t_rangeinclusive uint32))
  
  axiom inv'2 : forall x : borrowed (RangeInclusive'0.t_rangeinclusive uint32) . inv'2 x = true
  
  predicate invariant'1 (self : uint32) =
    [%#span11] true
  
  axiom inv'1 : forall x : uint32 . inv'1 x = true
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  function start_log'0 (self : RangeInclusive'0.t_rangeinclusive uint32) : uint32
  
  use prelude.prelude.UInt32
  
  function deep_model'0 (self : uint32) : int =
    [%#span13] UInt32.to_int self
  
  use seq.Seq
  
  function end_log'0 (self : RangeInclusive'0.t_rangeinclusive uint32) : uint32
  
  use int.Int
  
  function is_empty_log'0 (self : RangeInclusive'0.t_rangeinclusive uint32) : bool
  
  axiom is_empty_log'0_spec : forall self : RangeInclusive'0.t_rangeinclusive uint32 . ([%#span14] inv'0 self)
   -> ([%#span15] not is_empty_log'0 self  -> deep_model'0 (start_log'0 self) <= deep_model'0 (end_log'0 self))
  
  function range_inclusive_len'0 (r : RangeInclusive'0.t_rangeinclusive uint32) : int =
    [%#span18] if is_empty_log'0 r then 0 else deep_model'0 (end_log'0 r) - deep_model'0 (start_log'0 r) + 1
  
  axiom range_inclusive_len'0_spec : forall r : RangeInclusive'0.t_rangeinclusive uint32 . ([%#span16] inv'0 r)
   -> ([%#span17] is_empty_log'0 r = (range_inclusive_len'0 r = 0))
  
  predicate produces'0 (self : RangeInclusive'0.t_rangeinclusive uint32) (visited : Seq.seq uint32) (o : RangeInclusive'0.t_rangeinclusive uint32)
    
   =
    [%#span19] Seq.length visited = range_inclusive_len'0 self - range_inclusive_len'0 o
    /\ (is_empty_log'0 self  -> is_empty_log'0 o)
    /\ (is_empty_log'0 o \/ end_log'0 self = end_log'0 o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (start_log'0 self) + i)
  
  function produces_trans'0 (a : RangeInclusive'0.t_rangeinclusive uint32) (ab : Seq.seq uint32) (b : RangeInclusive'0.t_rangeinclusive uint32) (bc : Seq.seq uint32) (c : RangeInclusive'0.t_rangeinclusive uint32) : ()
    
   =
    [%#span28] ()
  
  axiom produces_trans'0_spec : forall a : RangeInclusive'0.t_rangeinclusive uint32, ab : Seq.seq uint32, b : RangeInclusive'0.t_rangeinclusive uint32, bc : Seq.seq uint32, c : RangeInclusive'0.t_rangeinclusive uint32 . ([%#span20] produces'0 a ab b)
   -> ([%#span21] produces'0 b bc c)
   -> ([%#span22] inv'0 a)
   -> ([%#span23] inv'4 ab)
   -> ([%#span24] inv'0 b)
   -> ([%#span25] inv'4 bc)  -> ([%#span26] inv'0 c)  -> ([%#span27] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 (self : RangeInclusive'0.t_rangeinclusive uint32) : () =
    [%#span31] ()
  
  axiom produces_refl'0_spec : forall self : RangeInclusive'0.t_rangeinclusive uint32 . ([%#span29] inv'0 self)
   -> ([%#span30] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  
  predicate invariant'0 (self : RangeInclusive'0.t_rangeinclusive uint32) =
    [%#span11] true
  
  axiom inv'0 : forall x : RangeInclusive'0.t_rangeinclusive uint32 . inv'0 x = true
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  predicate resolve'0 (self : borrowed (RangeInclusive'0.t_rangeinclusive uint32)) =
    [%#span32] self.final = self.current
  
  predicate completed'0 (self : borrowed (RangeInclusive'0.t_rangeinclusive uint32)) =
    [%#span33] is_empty_log'0 self.current /\ is_empty_log'0 self.final
  
  let rec next'0 (self:borrowed (RangeInclusive'0.t_rangeinclusive uint32)) (return'  (ret:Option'0.t_option uint32))= {[@expl:precondition] [%#span34] inv'2 self}
    any
    [ return' (result:Option'0.t_option uint32)-> {[%#span36] inv'3 result}
      {[%#span35] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate into_iter_post'0 (self : RangeInclusive'0.t_rangeinclusive uint32) (res : RangeInclusive'0.t_rangeinclusive uint32)
    
   =
    [%#span37] self = res
  
  predicate into_iter_pre'0 (self : RangeInclusive'0.t_rangeinclusive uint32) =
    [%#span38] true
  
  let rec into_iter'0 (self:RangeInclusive'0.t_rangeinclusive uint32) (return'  (ret:RangeInclusive'0.t_rangeinclusive uint32))= {[@expl:precondition] [%#span40] inv'0 self}
    {[@expl:precondition] [%#span39] into_iter_pre'0 self}
    any
    [ return' (result:RangeInclusive'0.t_rangeinclusive uint32)-> {[%#span41] inv'0 result}
      {[%#span39] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  let rec new'0 (start:uint32) (end':uint32) (return'  (ret:RangeInclusive'0.t_rangeinclusive uint32))= {[@expl:precondition] [%#span43] inv'1 end'}
    {[@expl:precondition] [%#span42] inv'1 start}
    any
    [ return' (result:RangeInclusive'0.t_rangeinclusive uint32)-> {[%#span47] inv'0 result}
      {[%#span46] deep_model'0 start <= deep_model'0 end'  -> not is_empty_log'0 result}
      {[%#span45] end_log'0 result = end'}
      {[%#span44] start_log'0 result = start}
      (! return' {result}) ]
    
  
  let rec sum_first_n (n:uint32) (return'  (ret:uint32))= {[%#ssum7] UInt32.to_int n < 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &sum <- [%#ssum0] (0 : uint32) ] s1
      | s1 = new'0 {[%#ssum1] (1 : uint32)} {n}
          (fun (_ret':RangeInclusive'0.t_rangeinclusive uint32) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = into_iter'0 {_7} (fun (_ret':RangeInclusive'0.t_rangeinclusive uint32) ->  [ &iter <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#ssum2] Snapshot.new iter ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &produced <- [%#ssum3] Snapshot.new (Seq.empty  : Seq.seq uint32) ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [%#ssum5] UInt32.to_int sum
        = div (Seq.length (Snapshot.inner produced) * (Seq.length (Snapshot.inner produced) + 1)) 2}
        {[@expl:loop invariant] [%#ssum4] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#ssum4] inv'0 iter}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = Borrow.borrow_mut <RangeInclusive'0.t_rangeinclusive uint32> {iter}
              (fun (_ret':borrowed (RangeInclusive'0.t_rangeinclusive uint32)) ->
                 [ &_19 <- _ret' ] 
                 [ &iter <- _19.final ] 
                s1)
          | s1 = Borrow.borrow_final <RangeInclusive'0.t_rangeinclusive uint32> {_19.current} {Borrow.get_id _19}
              (fun (_ret':borrowed (RangeInclusive'0.t_rangeinclusive uint32)) ->
                 [ &_18 <- _ret' ] 
                 [ &_19 <- { _19 with current = _18.final ; } ] 
                s2)
          | s2 = next'0 {_18} (fun (_ret':Option'0.t_option uint32) ->  [ &_17 <- _ret' ] s3)
          | s3 = bb7 ]
          
        | bb7 = s0
          [ s0 = -{resolve'0 _19}- s1
          | s1 = any
            [ br0 -> {_17 = Option'0.C_None } (! bb10) | br1 (a:uint32)-> {_17 = Option'0.C_Some a} (! bb9) ]
             ]
          
        | bb9 = bb11
        | bb11 = s0
          [ s0 = Option'0.some <uint32> {_17} (fun (r0'0:uint32) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_22 <- [%#ssum6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &produced <- _22 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = UInt32.add {sum} {i} (fun (_ret':uint32) ->  [ &sum <- _ret' ] s3)
          | s3 = bb5 ]
           ]
         ]
      
    | bb10 = s0 [ s0 =  [ &_0 <- sum ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l ()
    | & n : uint32 = n
    | & sum : uint32 = any_l ()
    | & iter : RangeInclusive'0.t_rangeinclusive uint32 = any_l ()
    | & _7 : RangeInclusive'0.t_rangeinclusive uint32 = any_l ()
    | & iter_old : Snapshot.snap_ty (RangeInclusive'0.t_rangeinclusive uint32) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq uint32) = any_l ()
    | & _17 : Option'0.t_option uint32 = any_l ()
    | & _18 : borrowed (RangeInclusive'0.t_rangeinclusive uint32) = any_l ()
    | & _19 : borrowed (RangeInclusive'0.t_rangeinclusive uint32) = any_l ()
    | & __creusot_proc_iter_elem : uint32 = any_l ()
    | & _22 : Snapshot.snap_ty (Seq.seq uint32) = any_l ()
    | & i : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] [%#ssum8] UInt32.to_int result
      = div (UInt32.to_int n * (UInt32.to_int n + 1)) 2}
      (! return' {result}) ]
    
end
