
module IncSomeTree_Random_Interface
  val random [@cfg:stackify] (_ : ()) : bool
end
module IncSomeTree_Random
  val random [@cfg:stackify] (_ : ()) : bool
end
module IncSomeTree_Tree_Type
  use mach.int.Int
  use mach.int.UInt32
  type incsometree_tree_type  =
    | IncSomeTree_Tree_Node_Type (incsometree_tree_type) uint32 (incsometree_tree_type)
    | IncSomeTree_Tree_Leaf_Type
    
  let function incsometree_tree_type_Node_0 (self : incsometree_tree_type) : incsometree_tree_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | IncSomeTree_Tree_Node_Type a _ _ -> a
      | IncSomeTree_Tree_Leaf_Type -> any incsometree_tree_type
      end
  let function incsometree_tree_type_Node_1 (self : incsometree_tree_type) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | IncSomeTree_Tree_Node_Type _ a _ -> a
      | IncSomeTree_Tree_Leaf_Type -> any uint32
      end
  let function incsometree_tree_type_Node_2 (self : incsometree_tree_type) : incsometree_tree_type
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | IncSomeTree_Tree_Node_Type _ _ a -> a
      | IncSomeTree_Tree_Leaf_Type -> any incsometree_tree_type
      end
end
module IncSomeTree_Impl1_Sum_Interface
  use mach.int.Int
  use IncSomeTree_Tree_Type
  function sum (self : IncSomeTree_Tree_Type.incsometree_tree_type) : int
end
module IncSomeTree_Impl1_Sum
  use mach.int.Int
  use IncSomeTree_Tree_Type
  use mach.int.UInt32
  use mach.int.Int32
  function sum [#"../inc_some_tree.rs" 18 4 18 23] (self : IncSomeTree_Tree_Type.incsometree_tree_type) : int =
    [#"../inc_some_tree.rs" 19 8 22 9] match (self) with
      | IncSomeTree_Tree_Type.IncSomeTree_Tree_Node_Type tl a tr -> sum tl + UInt32.to_int a + sum tr
      | IncSomeTree_Tree_Type.IncSomeTree_Tree_Leaf_Type -> 0
      end
end
module IncSomeTree_Impl1_LemmaSumNonneg_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  use IncSomeTree_Tree_Type
  clone IncSomeTree_Impl1_Sum_Interface as Sum0
  function lemma_sum_nonneg (self : IncSomeTree_Tree_Type.incsometree_tree_type) : ()
end
module IncSomeTree_Impl1_LemmaSumNonneg
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  use IncSomeTree_Tree_Type
  clone IncSomeTree_Impl1_Sum_Interface as Sum0
  function lemma_sum_nonneg [#"../inc_some_tree.rs" 28 4 28 30] (self : IncSomeTree_Tree_Type.incsometree_tree_type) : ()
    
  axiom def : forall self : IncSomeTree_Tree_Type.incsometree_tree_type . lemma_sum_nonneg self = ([#"../inc_some_tree.rs" 29 8 35 9] match (self) with
    | IncSomeTree_Tree_Type.IncSomeTree_Tree_Node_Type tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
    | IncSomeTree_Tree_Type.IncSomeTree_Tree_Leaf_Type -> ()
    end)
  axiom lemma_sum_nonneg_spec : forall self : IncSomeTree_Tree_Type.incsometree_tree_type . [#"../inc_some_tree.rs" 27 14 27 29] Sum0.sum self >= 0
end
module IncSomeTree_Impl1_LemmaSumNonneg_Impl
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  use IncSomeTree_Tree_Type
  clone IncSomeTree_Impl1_Sum as Sum0
  let rec ghost function lemma_sum_nonneg (self : IncSomeTree_Tree_Type.incsometree_tree_type) : ()
    ensures { [#"../inc_some_tree.rs" 27 14 27 29] Sum0.sum self >= 0 }
    variant {[#"../inc_some_tree.rs" 26 15 26 19] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../inc_some_tree.rs" 29 8 35 9] match (self) with
      | IncSomeTree_Tree_Type.IncSomeTree_Tree_Node_Type tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
      | IncSomeTree_Tree_Type.IncSomeTree_Tree_Leaf_Type -> ()
      end
end
module IncSomeTree_Impl1_SumX_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Borrow
  use IncSomeTree_Tree_Type
  clone IncSomeTree_Impl1_Sum_Interface as Sum0
  val sum_x [@cfg:stackify] (self : IncSomeTree_Tree_Type.incsometree_tree_type) : uint32
    requires {[#"../inc_some_tree.rs" 38 15 38 38] Sum0.sum self <= 1000000}
    ensures { [#"../inc_some_tree.rs" 39 14 39 35] UInt32.to_int result = Sum0.sum self }
    
end
module IncSomeTree_Impl1_SumX
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt32
  use prelude.Borrow
  use IncSomeTree_Tree_Type
  clone IncSomeTree_Impl1_Sum as Sum0
  clone IncSomeTree_Impl1_LemmaSumNonneg as LemmaSumNonneg0 with function Sum0.sum = Sum0.sum, axiom .
  use prelude.IntSize
  let rec cfg sum_x [@cfg:stackify] [#"../inc_some_tree.rs" 40 4 40 26] (self : IncSomeTree_Tree_Type.incsometree_tree_type) : uint32
    requires {[#"../inc_some_tree.rs" 38 15 38 38] Sum0.sum self <= 1000000}
    ensures { [#"../inc_some_tree.rs" 39 14 39 35] UInt32.to_int result = Sum0.sum self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self_1 : IncSomeTree_Tree_Type.incsometree_tree_type;
  var _2 : isize;
  var tl_3 : IncSomeTree_Tree_Type.incsometree_tree_type;
  var a_4 : uint32;
  var tr_5 : IncSomeTree_Tree_Type.incsometree_tree_type;
  var _6 : ();
  var _7 : uint32;
  var _8 : uint32;
  var _9 : IncSomeTree_Tree_Type.incsometree_tree_type;
  var _10 : uint32;
  var _11 : uint32;
  var _12 : IncSomeTree_Tree_Type.incsometree_tree_type;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | IncSomeTree_Tree_Type.IncSomeTree_Tree_Node_Type _ _ _ -> goto BB3
      | IncSomeTree_Tree_Type.IncSomeTree_Tree_Leaf_Type -> goto BB1
      end
  }
  BB1 {
    _0 <- (0 : uint32);
    goto BB6
  }
  BB2 {
    absurd
  }
  BB3 {
    tl_3 <- IncSomeTree_Tree_Type.incsometree_tree_type_Node_0 self_1;
    a_4 <- IncSomeTree_Tree_Type.incsometree_tree_type_Node_1 self_1;
    tr_5 <- IncSomeTree_Tree_Type.incsometree_tree_type_Node_2 self_1;
    assert { [#"../inc_some_tree.rs" 44 20 44 41] let _ = LemmaSumNonneg0.lemma_sum_nonneg tl_3 in let _ = LemmaSumNonneg0.lemma_sum_nonneg tr_5 in true };
    _6 <- ();
    _9 <- tl_3;
    _8 <- ([#"../inc_some_tree.rs" 48 16 48 26] sum_x _9);
    goto BB4
  }
  BB4 {
    _10 <- a_4;
    _7 <- ([#"../inc_some_tree.rs" 48 16 48 31] _8 + _10);
    _12 <- tr_5;
    _11 <- ([#"../inc_some_tree.rs" 48 34 48 44] sum_x _12);
    goto BB5
  }
  BB5 {
    _0 <- ([#"../inc_some_tree.rs" 48 16 48 44] _7 + _11);
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module CreusotContracts_Logic_Int_Impl14_ModelTy_Type
  use mach.int.Int
  type modelTy  =
    int
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module CreusotContracts_Logic_Int_Impl14
  
end
module CreusotContracts_Logic_Int_Impl14_Model_Interface
  use mach.int.Int
  use mach.int.UInt32
  function model (self : uint32) : int
end
module CreusotContracts_Logic_Int_Impl14_Model
  use mach.int.Int
  use mach.int.UInt32
  function model (self : uint32) : int =
    UInt32.to_int self
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type core_ptr_nonnull_nonnull_type 't =
    | Core_Ptr_NonNull_NonNull_Type opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_ptr_unique_unique_type 't =
    | Core_Ptr_Unique_Unique_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type
  type alloc_boxed_box_type 't 'a =
    | Alloc_Boxed_Box_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) 'a
    
end
module Alloc_Alloc_Global_Type
  type alloc_alloc_global_type  =
    | Alloc_Alloc_Global_Type
    
end
module IncSomeTree_Impl1_TakeSome_Interface
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Int_Impl14_ModelTy_Type as ModelTy0
  use IncSomeTree_Tree_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone IncSomeTree_Impl1_Sum_Interface as Sum0
  val take_some [@cfg:stackify] (self : borrowed (IncSomeTree_Tree_Type.incsometree_tree_type)) : borrowed uint32
    ensures { [#"../inc_some_tree.rs" 54 14 54 62] Sum0.sum ( ^ self) - Sum0.sum ( * self) = UInt32.to_int ( ^ result) - Model0.model result }
    ensures { [#"../inc_some_tree.rs" 55 14 55 35] Model0.model result <= Sum0.sum ( * self) }
    
end
module IncSomeTree_Impl1_TakeSome
  use prelude.Borrow
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Logic_Int_Impl14_Model as Model1
  clone CreusotContracts_Logic_Int_Impl14_ModelTy_Type as ModelTy0
  use IncSomeTree_Tree_Type
  clone IncSomeTree_Impl1_Sum as Sum0
  clone IncSomeTree_Impl1_LemmaSumNonneg as LemmaSumNonneg0 with function Sum0.sum = Sum0.sum, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use prelude.IntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Boxed_Box_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = IncSomeTree_Tree_Type.incsometree_tree_type
  clone IncSomeTree_Random_Interface as Random0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = IncSomeTree_Tree_Type.incsometree_tree_type
  let rec cfg take_some [@cfg:stackify] [#"../inc_some_tree.rs" 56 4 56 39] (self : borrowed (IncSomeTree_Tree_Type.incsometree_tree_type)) : borrowed uint32
    ensures { [#"../inc_some_tree.rs" 54 14 54 62] Sum0.sum ( ^ self) - Sum0.sum ( * self) = UInt32.to_int ( ^ result) - Model0.model result }
    ensures { [#"../inc_some_tree.rs" 55 14 55 35] Model0.model result <= Sum0.sum ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var self_1 : borrowed (IncSomeTree_Tree_Type.incsometree_tree_type);
  var _2 : borrowed uint32;
  var _3 : borrowed uint32;
  var _4 : isize;
  var mtl_5 : borrowed (IncSomeTree_Tree_Type.incsometree_tree_type);
  var ma_6 : borrowed uint32;
  var mtr_7 : borrowed (IncSomeTree_Tree_Type.incsometree_tree_type);
  var _8 : borrowed uint32;
  var _9 : ();
  var _10 : borrowed uint32;
  var _11 : bool;
  var _12 : borrowed uint32;
  var _13 : bool;
  var _14 : borrowed uint32;
  var _15 : borrowed uint32;
  var _16 : borrowed (IncSomeTree_Tree_Type.incsometree_tree_type);
  var _17 : borrowed uint32;
  var _18 : borrowed (IncSomeTree_Tree_Type.incsometree_tree_type);
  var _19 : ();
  var _20 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch ( * self_1)
      | IncSomeTree_Tree_Type.IncSomeTree_Tree_Node_Type _ _ _ -> goto BB3
      | IncSomeTree_Tree_Type.IncSomeTree_Tree_Leaf_Type -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    goto BB14
  }
  BB2 {
    assume { Resolve0.resolve self_1 };
    absurd
  }
  BB3 {
    mtl_5 <- borrow_mut (IncSomeTree_Tree_Type.incsometree_tree_type_Node_0 ( * self_1));
    self_1 <- { self_1 with current = (let IncSomeTree_Tree_Type.IncSomeTree_Tree_Node_Type a b c =  * self_1 in IncSomeTree_Tree_Type.IncSomeTree_Tree_Node_Type ( ^ mtl_5) b c) };
    ma_6 <- borrow_mut (IncSomeTree_Tree_Type.incsometree_tree_type_Node_1 ( * self_1));
    self_1 <- { self_1 with current = (let IncSomeTree_Tree_Type.IncSomeTree_Tree_Node_Type a b c =  * self_1 in IncSomeTree_Tree_Type.IncSomeTree_Tree_Node_Type a ( ^ ma_6) c) };
    mtr_7 <- borrow_mut (IncSomeTree_Tree_Type.incsometree_tree_type_Node_2 ( * self_1));
    self_1 <- { self_1 with current = (let IncSomeTree_Tree_Type.IncSomeTree_Tree_Node_Type a b c =  * self_1 in IncSomeTree_Tree_Type.IncSomeTree_Tree_Node_Type a b ( ^ mtr_7)) };
    assume { Resolve0.resolve self_1 };
    assert { [#"../inc_some_tree.rs" 60 20 60 42] let _ = LemmaSumNonneg0.lemma_sum_nonneg ( * mtl_5) in let _ = LemmaSumNonneg0.lemma_sum_nonneg ( * mtr_7) in true };
    _9 <- ();
    _11 <- ([#"../inc_some_tree.rs" 64 19 64 27] Random0.random ());
    goto BB4
  }
  BB4 {
    switch (_11)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    assume { Resolve1.resolve mtl_5 };
    assume { Resolve1.resolve mtr_7 };
    _12 <- borrow_mut ( * ma_6);
    ma_6 <- { ma_6 with current = ( ^ _12) };
    assume { Resolve2.resolve ma_6 };
    _10 <- borrow_mut ( * _12);
    _12 <- { _12 with current = ( ^ _10) };
    assume { Resolve2.resolve _12 };
    goto BB13
  }
  BB6 {
    assume { Resolve2.resolve ma_6 };
    _13 <- ([#"../inc_some_tree.rs" 66 26 66 34] Random0.random ());
    goto BB7
  }
  BB7 {
    switch (_13)
      | False -> goto BB10
      | _ -> goto BB8
      end
  }
  BB8 {
    assume { Resolve1.resolve mtr_7 };
    _16 <- borrow_mut ( * mtl_5);
    mtl_5 <- { mtl_5 with current = ( ^ _16) };
    _15 <- ([#"../inc_some_tree.rs" 67 20 67 35] take_some _16);
    goto BB9
  }
  BB9 {
    assume { Resolve1.resolve mtl_5 };
    _14 <- borrow_mut ( * _15);
    _15 <- { _15 with current = ( ^ _14) };
    assume { Resolve2.resolve _15 };
    _10 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _10) };
    assume { Resolve2.resolve _14 };
    goto BB12
  }
  BB10 {
    assume { Resolve1.resolve mtl_5 };
    _18 <- borrow_mut ( * mtr_7);
    mtr_7 <- { mtr_7 with current = ( ^ _18) };
    _17 <- ([#"../inc_some_tree.rs" 69 20 69 35] take_some _18);
    goto BB11
  }
  BB11 {
    assume { Resolve1.resolve mtr_7 };
    _10 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _10) };
    assume { Resolve2.resolve _17 };
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    _8 <- borrow_mut ( * _10);
    _10 <- { _10 with current = ( ^ _8) };
    assume { Resolve2.resolve _10 };
    _3 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _3) };
    assume { Resolve2.resolve _8 };
    _2 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _2) };
    assume { Resolve2.resolve _3 };
    _0 <- borrow_mut ( * _2);
    _2 <- { _2 with current = ( ^ _0) };
    assume { Resolve2.resolve _2 };
    return _0
  }
  BB14 {
    _20 <- ();
    goto BB14
  }
  
end
module IncSomeTree_IncSomeTree_Interface
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  use IncSomeTree_Tree_Type
  clone IncSomeTree_Impl1_Sum_Interface as Sum0
  val inc_some_tree [@cfg:stackify] (t : IncSomeTree_Tree_Type.incsometree_tree_type) (k : uint32) : ()
    requires {[#"../inc_some_tree.rs" 77 11 77 36] Sum0.sum t + UInt32.to_int k <= 1000000}
    
end
module IncSomeTree_IncSomeTree
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  use IncSomeTree_Tree_Type
  clone IncSomeTree_Impl1_Sum as Sum0
  use prelude.Borrow
  clone CreusotContracts_Logic_Int_Impl14_Model as Model1
  clone CreusotContracts_Logic_Int_Impl14_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = uint32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = uint32
  clone IncSomeTree_Impl1_TakeSome_Interface as TakeSome0 with function Sum0.sum = Sum0.sum,
  function Model0.model = Model0.model
  clone IncSomeTree_Impl1_SumX_Interface as SumX0 with function Sum0.sum = Sum0.sum
  let rec cfg inc_some_tree [@cfg:stackify] [#"../inc_some_tree.rs" 78 0 78 41] (t : IncSomeTree_Tree_Type.incsometree_tree_type) (k : uint32) : ()
    requires {[#"../inc_some_tree.rs" 77 11 77 36] Sum0.sum t + UInt32.to_int k <= 1000000}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var t_1 : IncSomeTree_Tree_Type.incsometree_tree_type;
  var k_2 : uint32;
  var sum0_3 : uint32;
  var _4 : IncSomeTree_Tree_Type.incsometree_tree_type;
  var ma_5 : borrowed uint32;
  var _6 : borrowed (IncSomeTree_Tree_Type.incsometree_tree_type);
  var _7 : uint32;
  var _8 : ();
  var _9 : bool;
  var _10 : bool;
  var _11 : uint32;
  var _12 : IncSomeTree_Tree_Type.incsometree_tree_type;
  var _13 : uint32;
  var _14 : uint32;
  var _15 : uint32;
  var _16 : ();
  {
    t_1 <- t;
    k_2 <- k;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _4 <- t_1;
    sum0_3 <- ([#"../inc_some_tree.rs" 79 15 79 24] SumX0.sum_x _4);
    goto BB2
  }
  BB2 {
    _6 <- borrow_mut t_1;
    t_1 <-  ^ _6;
    ma_5 <- ([#"../inc_some_tree.rs" 80 13 80 26] TakeSome0.take_some _6);
    goto BB3
  }
  BB3 {
    _7 <- k_2;
    ma_5 <- { ma_5 with current = ([#"../inc_some_tree.rs" 81 4 81 12]  * ma_5 + _7) };
    assume { Resolve0.resolve ma_5 };
    _12 <- t_1;
    _11 <- ([#"../inc_some_tree.rs" 82 12 82 21] SumX0.sum_x _12);
    goto BB4
  }
  BB4 {
    _14 <- sum0_3;
    _15 <- k_2;
    _13 <- ([#"../inc_some_tree.rs" 82 25 82 33] _14 + _15);
    _10 <- ([#"../inc_some_tree.rs" 82 12 82 33] _11 = _13);
    _9 <- not _10;
    switch (_9)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    absurd
  }
  BB6 {
    _8 <- ();
    _0 <- ();
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module IncSomeTree_Impl0
  
end
