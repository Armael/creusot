
module C03KnuthShuffle_RandInRange_Interface
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  val rand_in_range [@cfg:stackify] (l : usize) (u : usize) : usize
    requires {[#"../03_knuth_shuffle.rs" 6 11 6 19] UInt64.to_int l <= UInt64.to_int u}
    ensures { [#"../03_knuth_shuffle.rs" 7 10 7 40] UInt64.to_int l <= UInt64.to_int result /\ UInt64.to_int result < UInt64.to_int u }
    
end
module C03KnuthShuffle_RandInRange
  use mach.int.UInt64
  use mach.int.Int
  use prelude.UIntSize
  val rand_in_range [@cfg:stackify] (l : usize) (u : usize) : usize
    requires {[#"../03_knuth_shuffle.rs" 6 11 6 19] UInt64.to_int l <= UInt64.to_int u}
    ensures { [#"../03_knuth_shuffle.rs" 7 10 7 40] UInt64.to_int l <= UInt64.to_int result /\ UInt64.to_int result < UInt64.to_int u }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type core_ptr_nonnull_nonnull_type 't =
    | Core_Ptr_NonNull_NonNull_Type opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_ptr_unique_unique_type 't =
    | Core_Ptr_Unique_Unique_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type
  type alloc_rawvec_rawvec_type 't 'a =
    | Alloc_RawVec_RawVec_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type
  type alloc_vec_vec_type 't 'a =
    | Alloc_Vec_Vec_Type (Alloc_RawVec_RawVec_Type.alloc_rawvec_rawvec_type 't 'a) usize
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a . Seq.length (model self) <= 18446744073709551615
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
end
module CreusotContracts_Logic_Seq_Impl2_PermutationOf_Interface
  type t
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl2_PermutationOf
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) =
    Permut.permut self o 0 (Seq.length self)
end
module Alloc_Alloc_Global_Type
  type alloc_alloc_global_type  =
    | Alloc_Alloc_Global_Type
    
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy_Type
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreusotContracts_Logic_Model_Impl1
  type t
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Slice_Impl0_Model_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_Model
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function model (self : seq t) : Seq.seq t
  axiom model_spec : forall self : seq t . model self = Slice.id self && Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_Impl11_DerefMut_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val deref_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) : borrowed (seq t)
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    
end
module Alloc_Vec_Impl11_DerefMut
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model0 with type t = t, axiom .
  val deref_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) : borrowed (seq t)
    ensures { Model0.model ( * result) = Model1.model ( * self) }
    ensures { Model0.model ( ^ result) = Model1.model ( ^ self) }
    
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Core_Slice_Impl0_Swap_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use seq.Permut
  use prelude.Slice
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model1 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Core_Slice_Impl0_Swap
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use seq.Permut
  use prelude.Slice
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model_Interface as Model1 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int a < Seq.length (Model0.model self)}
    requires {UInt64.to_int b < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module Alloc_Vec_Impl11
  type t
  type a
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  use prelude.Opaque
  type creusotcontracts_logic_ghost_ghost_type 't =
    | CreusotContracts_Logic_Ghost_Ghost_Type opaque_ptr
    
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module C03KnuthShuffle_KnuthShuffle_Interface
  type t
  use prelude.Borrow
  use Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf_Interface as PermutationOf0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val knuth_shuffle [@cfg:stackify] (v : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))) : ()
    ensures { [#"../03_knuth_shuffle.rs" 12 10 12 34] PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    
end
module C03KnuthShuffle_KnuthShuffle
  type t
  use prelude.Borrow
  use Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Seq_Impl2_PermutationOf as PermutationOf0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_Model as Model2 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = seq t,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model2.model
  use CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = seq t
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = t, function Model0.model = Model3.model,
  function Model1.model = Model2.model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model,
  function Model1.model = Model0.model
  clone C03KnuthShuffle_RandInRange_Interface as RandInRange0
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = t, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type,
  function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
  let rec cfg knuth_shuffle [@cfg:stackify] [#"../03_knuth_shuffle.rs" 13 0 13 39] (v : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))) : ()
    ensures { [#"../03_knuth_shuffle.rs" 12 10 12 34] PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  ghost var old_v_3 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _6 : ();
  var n_7 : usize;
  var _10 : ();
  var _11 : bool;
  var _12 : usize;
  var _13 : usize;
  var _14 : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var upper_15 : usize;
  var _16 : usize;
  var _17 : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _18 : usize;
  var i_19 : usize;
  var _20 : usize;
  var _21 : ();
  var _22 : borrowed (seq t);
  var _23 : borrowed (seq t);
  var _24 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _25 : usize;
  var _26 : usize;
  var _27 : usize;
  var _28 : ();
  var _29 : ();
  var _30 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _6 <- ();
    old_v_3 <- ghost ([#"../03_knuth_shuffle.rs" 14 16 14 28] v_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_v_3 };
    n_7 <- (0 : usize);
    goto BB2
  }
  BB2 {
    invariant permutation { [#"../03_knuth_shuffle.rs" 17 29 17 64] PermutationOf0.permutation_of (Model1.model v_1) (Model1.model old_v_3) };
    invariant proph_const { [#"../03_knuth_shuffle.rs" 18 29 18 49]  ^ v_1 =  ^ old_v_3 };
    _12 <- n_7;
    _14 <-  * v_1;
    _13 <- ([#"../03_knuth_shuffle.rs" 19 14 19 21] Len0.len _14);
    goto BB3
  }
  BB3 {
    _11 <- ([#"../03_knuth_shuffle.rs" 19 10 19 21] _12 < _13);
    switch (_11)
      | False -> goto BB9
      | True -> goto BB4
      end
  }
  BB4 {
    _17 <-  * v_1;
    _16 <- ([#"../03_knuth_shuffle.rs" 22 20 22 27] Len0.len _17);
    goto BB5
  }
  BB5 {
    _18 <- n_7;
    upper_15 <- ([#"../03_knuth_shuffle.rs" 22 20 22 31] _16 - _18);
    _20 <- upper_15;
    i_19 <- ([#"../03_knuth_shuffle.rs" 23 16 23 39] RandInRange0.rand_in_range (0 : usize) _20);
    goto BB6
  }
  BB6 {
    _24 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _24) };
    _23 <- ([#"../03_knuth_shuffle.rs" 24 8 24 28] DerefMut0.deref_mut _24);
    goto BB7
  }
  BB7 {
    _22 <- borrow_mut ( * _23);
    _23 <- { _23 with current = ( ^ _22) };
    _25 <- i_19;
    _27 <- upper_15;
    _26 <- ([#"../03_knuth_shuffle.rs" 24 18 24 27] _27 - (1 : usize));
    _21 <- ([#"../03_knuth_shuffle.rs" 24 8 24 28] Swap0.swap _22 _25 _26);
    goto BB8
  }
  BB8 {
    assume { Resolve1.resolve _23 };
    n_7 <- ([#"../03_knuth_shuffle.rs" 25 8 25 14] n_7 + (1 : usize));
    _10 <- ();
    goto BB2
  }
  BB9 {
    assume { Resolve2.resolve v_1 };
    _0 <- ();
    return _0
  }
  
end
