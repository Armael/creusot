module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type c03knuthshuffle_ghost 't = 
    | C03KnuthShuffle_Ghost opaque_ptr
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type creusotcontracts_std1_vec_vec 't = 
    | CreusotContracts_Std1_Vec_Vec (alloc_vec_vec 't (alloc_alloc_global))
    
end
module CreusotContracts_Builtins_Model_Model
  type self   
  type modelty   
  function model (self : self) : modelty
end
module C03KnuthShuffle_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.c03knuthshuffle_ghost t) : t
end
module C03KnuthShuffle_Impl0_Model
  type t   
  use Type
  function model (self : Type.c03knuthshuffle_ghost t) : t
end
module C03KnuthShuffle_Impl0_Interface
  type t   
  use Type
  clone export C03KnuthShuffle_Impl0_Model_Interface with type t = t
  type modelty  = 
    t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.c03knuthshuffle_ghost t,
  type modelty = modelty, function model = model
end
module C03KnuthShuffle_Impl0
  type t   
  use Type
  clone export C03KnuthShuffle_Impl0_Model with type t = t
  type modelty  = 
    t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.c03knuthshuffle_ghost t,
  type modelty = modelty, function model = model
end
module C03KnuthShuffle_Impl1_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone C03KnuthShuffle_Impl0_Interface as Model0 with type t = t
  val record (a : t) : Type.c03knuthshuffle_ghost t
    ensures { Model0.model result = a }
    
end
module C03KnuthShuffle_Impl1_Record
  type t   
  use prelude.Prelude
  use Type
  clone C03KnuthShuffle_Impl0 as Model0 with type t = t
  val record (a : t) : Type.c03knuthshuffle_ghost t
    ensures { Model0.model result = a }
    
end
module C03KnuthShuffle_RandInRange_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val rand_in_range (l : usize) (u : usize) : usize
    ensures { l <= result && result < u }
    
end
module C03KnuthShuffle_RandInRange
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  val rand_in_range (l : usize) (u : usize) : usize
    ensures { l <= result && result < u }
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Interface
  type t   
  use Type
  use seq.Seq
  clone export CreusotContracts_Std1_Vec_Impl0_Model_Interface with type t = t
  type modelty  = 
    Seq.seq t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelty = modelty, function model = model
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  use seq.Seq
  clone export CreusotContracts_Std1_Vec_Impl0_Model with type t = t
  type modelty  = 
    Seq.seq t
  clone export CreusotContracts_Builtins_Model_Model with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelty = modelty, function model = model
end
module CreusotContracts_Builtins_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = self
  function model (self : self) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Model_Model
  type self   
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = self
  function model (self : self) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : borrowed t) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : borrowed t) : Model0.modelty = 
    Model0.model ( * self)
end
module CreusotContracts_Builtins_Model_Impl1_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  clone export CreusotContracts_Builtins_Model_Impl1_Model_Interface with type t = t,
  type Model0.modelty = Model0.modelty, function Model0.model = Model0.model
  type modelty  = 
    Model0.modelty
  clone export CreusotContracts_Builtins_Model_Model with type self = borrowed t, type modelty = modelty,
  function model = model
end
module CreusotContracts_Builtins_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  clone export CreusotContracts_Builtins_Model_Impl1_Model with type t = t, type Model0.modelty = Model0.modelty,
  function Model0.model = Model0.model
  type modelty  = 
    Model0.modelty
  clone export CreusotContracts_Builtins_Model_Model with type self = borrowed t, type modelty = modelty,
  function model = model
end
module CreusotContracts_Builtins_Seq_Impl0_PermutationOf_Interface
  type t   
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Builtins_Seq_Impl0_PermutationOf
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) = 
    Permut.permut self o 0 (Seq.length self)
end
module Core_Marker_Sized
  type self   
end
module CreusotContracts_Builtins_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : t) : Model0.modelty
end
module CreusotContracts_Builtins_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  function model (self : t) : Model0.modelty = 
    Model0.model self
end
module CreusotContracts_Builtins_Model_Impl0_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  clone export CreusotContracts_Builtins_Model_Impl0_Model_Interface with type t = t,
  type Model0.modelty = Model0.modelty, function Model0.model = Model0.model
  type modelty  = 
    Model0.modelty
  clone export CreusotContracts_Builtins_Model_Model with type self = t, type modelty = modelty, function model = model
end
module CreusotContracts_Builtins_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Builtins_Model_Model as Model0 with type self = t
  clone export CreusotContracts_Builtins_Model_Impl0_Model with type t = t, type Model0.modelty = Model0.modelty,
  function Model0.model = Model0.model
  type modelty  = 
    Model0.modelty
  clone export CreusotContracts_Builtins_Model_Model with type self = t, type modelty = modelty, function model = model
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model1 with type t = t
  clone CreusotContracts_Builtins_Model_Impl0_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model1 with type t = t
  clone CreusotContracts_Builtins_Model_Impl0_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Swap_Interface
  type t   
  use seq.Seq
  use seq.Permut
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model1 with type t = t
  clone CreusotContracts_Builtins_Model_Impl1_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  val swap (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (i : usize) (j : usize) : ()
    requires {j < Seq.length (Model0.model self)}
    requires {i < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) i j }
    
end
module CreusotContracts_Std1_Vec_Impl1_Swap
  type t   
  use seq.Seq
  use seq.Permut
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model1 with type t = t
  clone CreusotContracts_Builtins_Model_Impl1_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model1.modelty, function Model0.model = Model1.model
  val swap (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (i : usize) (j : usize) : ()
    requires {j < Seq.length (Model0.model self)}
    requires {i < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) i j }
    
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Builtins_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Builtins_Resolve_Impl1_Interface
  type t   
  use prelude.Prelude
  clone export CreusotContracts_Builtins_Resolve_Impl1_Resolve_Interface with type t = t
  clone export CreusotContracts_Builtins_Resolve_Resolve with type self = borrowed t, predicate resolve = resolve
end
module CreusotContracts_Builtins_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone export CreusotContracts_Builtins_Resolve_Impl1_Resolve with type t = t
  clone export CreusotContracts_Builtins_Resolve_Resolve with type self = borrowed t, predicate resolve = resolve
end
module C03KnuthShuffle_KnuthShuffle_Interface
  type t   
  use prelude.Prelude
  use Type
  clone CreusotContracts_Builtins_Seq_Impl0_PermutationOf_Interface as PermutationOf0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Interface as Model0 with type t = t
  clone CreusotContracts_Builtins_Model_Impl1_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model0.modelty, function Model0.model = Model0.model
  val knuth_shuffle (v : borrowed (Type.creusotcontracts_std1_vec_vec t)) : ()
    ensures { PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    
end
module C03KnuthShuffle_KnuthShuffle
  type t   
  use prelude.Prelude
  use Type
  clone Core_Marker_Sized as Sized0 with type self = t
  clone CreusotContracts_Builtins_Seq_Impl0_PermutationOf as PermutationOf0 with type t = t
  clone C03KnuthShuffle_Impl0 as Model1 with type t = borrowed (Type.creusotcontracts_std1_vec_vec t)
  clone CreusotContracts_Std1_Vec_Impl0 as Model2 with type t = t
  clone CreusotContracts_Builtins_Model_Impl1 as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model2.modelty, function Model0.model = Model2.model
  use mach.int.Int
  use mach.int.UInt64
  clone CreusotContracts_Builtins_Resolve_Impl1 as Resolve4 with type t = Type.creusotcontracts_std1_vec_vec t
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve3 with type self = ()
  clone C03KnuthShuffle_RandInRange_Interface as RandInRange0
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve2 with type self = usize
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve1 with type self = Type.c03knuthshuffle_ghost (borrowed (Type.creusotcontracts_std1_vec_vec t))
  clone CreusotContracts_Builtins_Resolve_Resolve as Resolve0 with type self = borrowed (Type.creusotcontracts_std1_vec_vec t)
  clone C03KnuthShuffle_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusotcontracts_std1_vec_vec t),
  function Model0.model = Model1.model
  clone CreusotContracts_Builtins_Model_Impl0 as Model3 with type t = Type.creusotcontracts_std1_vec_vec t,
  type Model0.modelty = Model2.modelty, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = t, function Model0.model = Model3.model,
  function Model1.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl1_Swap_Interface as Swap0 with type t = t, function Model0.model = Model0.model,
  function Model1.model = Model2.model
  let rec cfg knuth_shuffle (v : borrowed (Type.creusotcontracts_std1_vec_vec t)) : ()
    ensures { PermutationOf0.permutation_of (Model2.model ( ^ v)) (Model0.model v) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var old_v_2 : Type.c03knuthshuffle_ghost (borrowed (Type.creusotcontracts_std1_vec_vec t));
  var _3 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var _4 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var n_5 : usize;
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Type.creusotcontracts_std1_vec_vec t;
  var l_11 : usize;
  var _12 : Type.creusotcontracts_std1_vec_vec t;
  var i_13 : usize;
  var _14 : usize;
  var _15 : usize;
  var _16 : usize;
  var _17 : ();
  var _18 : borrowed (Type.creusotcontracts_std1_vec_vec t);
  var _19 : usize;
  var _20 : usize;
  var _21 : usize;
  var _22 : usize;
  var _23 : usize;
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _4 <- v_1;
    _3 <- _4;
    assume { Resolve0.resolve _4 };
    old_v_2 <- Record0.record _3;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_v_2 };
    n_5 <- (0 : usize);
    goto BB2
  }
  BB2 {
    invariant permutation { PermutationOf0.permutation_of (Model0.model v_1) (Model0.model (Model1.model old_v_2)) };
    invariant proph_const {  ^ v_1 =  ^ Model1.model old_v_2 };
    goto BB3
  }
  BB3 {
    assume { Resolve2.resolve _8 };
    _8 <- n_5;
    _10 <-  * v_1;
    _9 <- Len0.len _10;
    goto BB4
  }
  BB4 {
    _7 <- _8 < _9;
    switch (_7)
      | False -> goto BB9
      | True -> goto BB5
      | _ -> goto BB5
      end
  }
  BB5 {
    _12 <-  * v_1;
    l_11 <- Len0.len _12;
    goto BB6
  }
  BB6 {
    assume { Resolve2.resolve _15 };
    _15 <- l_11;
    assume { Resolve2.resolve _16 };
    _16 <- n_5;
    _14 <- _15 - _16;
    i_13 <- RandInRange0.rand_in_range (0 : usize) _14;
    goto BB7
  }
  BB7 {
    _18 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _18) };
    assume { Resolve2.resolve _19 };
    _19 <- i_13;
    assume { Resolve2.resolve i_13 };
    assume { Resolve2.resolve _22 };
    _22 <- l_11;
    assume { Resolve2.resolve l_11 };
    assume { Resolve2.resolve _23 };
    _23 <- n_5;
    _21 <- _22 - _23;
    _20 <- _21 - (1 : usize);
    _17 <- Swap0.swap _18 _19 _20;
    goto BB8
  }
  BB8 {
    n_5 <- n_5 + (1 : usize);
    _6 <- ();
    assume { Resolve3.resolve _6 };
    goto BB2
  }
  BB9 {
    assume { Resolve4.resolve v_1 };
    assume { Resolve2.resolve n_5 };
    _0 <- ();
    return _0
  }
  
end
