
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module Core_Result_Result_Type
  type t_result 't 'e =
    | C_Ok 't
    | C_Err 'e
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use prelude.UIntSize
  use prelude.Int
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use prelude.UIntSize
  use prelude.Int
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module Core_Num_Impl11_Max_Stub
  use prelude.UIntSize
  use prelude.Int
  val constant mAX'  : usize
end
module Core_Num_Impl11_Max
  use prelude.UIntSize
  use prelude.Int
  let constant mAX'  : usize = [@vc:do_not_keep_trace] [@vc:sp]
    (18446744073709551615 : usize)
end
module C05BinarySearchGeneric_BinarySearch
  type t
  type deep_model_ty0
  predicate inv7 (_x : deep_model_ty0)
  val inv7 (_x : deep_model_ty0) : bool
    ensures { result = inv7 _x }
    
  axiom inv7 : [#"../05_binary_search_generic.rs" 1 0 1 0] forall x : deep_model_ty0 . inv7 x = true
  use seq.Seq
  predicate inv6 (_x : Seq.seq deep_model_ty0)
  val inv6 (_x : Seq.seq deep_model_ty0) : bool
    ensures { result = inv6 _x }
    
  axiom inv6 : [#"../05_binary_search_generic.rs" 1 0 1 0] forall x : Seq.seq deep_model_ty0 . inv6 x = true
  predicate inv5 (_x : Seq.seq t)
  val inv5 (_x : Seq.seq t) : bool
    ensures { result = inv5 _x }
    
  axiom inv5 : [#"../05_binary_search_generic.rs" 1 0 1 0] forall x : Seq.seq t . inv5 x = true
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate inv4 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv4 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv4 _x }
    
  axiom inv4 : [#"../05_binary_search_generic.rs" 1 0 1 0] forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv4 x = true
  use prelude.UIntSize
  predicate inv3 (_x : usize)
  val inv3 (_x : usize) : bool
    ensures { result = inv3 _x }
    
  axiom inv3 : [#"../05_binary_search_generic.rs" 1 0 1 0] forall x : usize . inv3 x = true
  predicate inv2 (_x : t)
  val inv2 (_x : t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : [#"../05_binary_search_generic.rs" 1 0 1 0] forall x : t . inv2 x = true
  predicate inv1 (_x : t)
  val inv1 (_x : t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : [#"../05_binary_search_generic.rs" 1 0 1 0] forall x : t . inv1 x = true
  predicate inv0 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val inv0 (_x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : [#"../05_binary_search_generic.rs" 1 0 1 0] forall x : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) . inv0 x = true
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log0 (self : deep_model_ty0) (_2 : deep_model_ty0) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log0 self _2 }
    
  function eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val eq_cmp0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 70 14 70 15] inv7 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 70 23 70 24] inv7 y}
    ensures { result = eq_cmp0 x y }
    
  function antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym20 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 64 15 64 48] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Greater}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 66 16 66 17] inv7 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 66 25 66 26] inv7 y}
    ensures { result = antisym20 x y }
    
  function antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val antisym10 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 59 15 59 45] cmp_log0 x y = Core_Cmp_Ordering_Type.C_Less}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 61 16 61 17] inv7 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 61 25 61 26] inv7 y}
    ensures { result = antisym10 x y }
    
  function trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    
  val trans0 (x : deep_model_ty0) (y : deep_model_ty0) (z : deep_model_ty0) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 53 15 53 32] cmp_log0 x y = o}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 54 15 54 32] cmp_log0 y z = o}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 56 13 56 14] inv7 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 56 22 56 23] inv7 y}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 56 31 56 32] inv7 z}
    ensures { result = trans0 x y z o }
    
  function refl0 (x : deep_model_ty0) : ()
  val refl0 (x : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 50 12 50 13] inv7 x}
    ensures { result = refl0 x }
    
  function gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val gt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = gt_log0 self o }
    
  function cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_gt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 46 18 46 19] inv7 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 46 27 46 28] inv7 y}
    ensures { result = cmp_gt_log0 x y }
    
  function ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val ge_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = ge_log0 self o }
    
  function cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_ge_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 36 18 36 19] inv7 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 36 27 36 28] inv7 y}
    ensures { result = cmp_ge_log0 x y }
    
  function lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val lt_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = lt_log0 self o }
    
  function cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_lt_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 26 18 26 19] inv7 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 26 27 26 28] inv7 y}
    ensures { result = cmp_lt_log0 x y }
    
  function le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
  val le_log0 (self : deep_model_ty0) (o : deep_model_ty0) : bool
    ensures { result = le_log0 self o }
    
  function cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
  val cmp_le_log0 (x : deep_model_ty0) (y : deep_model_ty0) : ()
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 16 18 16 19] inv7 x}
    requires {[#"../../../../../creusot-contracts/src/logic/ord.rs" 16 27 16 28] inv7 y}
    ensures { result = cmp_le_log0 x y }
    
  use prelude.Int
  use seq.Seq
  predicate sorted_range0 [#"../05_binary_search_generic.rs" 9 0 9 63] (s : Seq.seq deep_model_ty0) (l : int) (u : int)
   =
    [#"../05_binary_search_generic.rs" 10 4 12 5] forall j : int . forall i : int . l <= i /\ i <= j /\ j < u -> le_log0 (Seq.get s i) (Seq.get s j)
  val sorted_range0 [#"../05_binary_search_generic.rs" 9 0 9 63] (s : Seq.seq deep_model_ty0) (l : int) (u : int) : bool
    ensures { result = sorted_range0 s l u }
    
  use seq.Seq
  predicate sorted0 [#"../05_binary_search_generic.rs" 16 0 16 41] (s : Seq.seq deep_model_ty0) =
    [#"../05_binary_search_generic.rs" 17 4 17 31] sorted_range0 s 0 (Seq.length s)
  val sorted0 [#"../05_binary_search_generic.rs" 16 0 16 41] (s : Seq.seq deep_model_ty0) : bool
    ensures { result = sorted0 s }
    
  constant max0  : usize
  use prelude.Borrow
  function deep_model1 (self : t) : deep_model_ty0
  val deep_model1 (self : t) : deep_model_ty0
    ensures { result = deep_model1 self }
    
  function deep_model3 (self : t) : deep_model_ty0 =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model1 self
  val deep_model3 (self : t) : deep_model_ty0
    ensures { result = deep_model3 self }
    
  val gt0 (self : t) (other : t) : bool
    requires {inv1 self}
    requires {inv1 other}
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 39 26 39 76] result = gt_log0 (deep_model3 self) (deep_model3 other) }
    
  use Core_Result_Result_Type as Core_Result_Result_Type
  predicate resolve2 (self : t)
  val resolve2 (self : t) : bool
    ensures { result = resolve2 self }
    
  val cmp0 (self : t) (other : t) : Core_Cmp_Ordering_Type.t_ordering
    requires {inv1 self}
    requires {inv1 other}
    ensures { [#"../../../../../creusot-contracts/src/std/cmp.rs" 50 26 50 85] result = cmp_log0 (deep_model1 self) (deep_model1 other) }
    
  predicate resolve1 (self : t)
  val resolve1 (self : t) : bool
    ensures { result = resolve1 self }
    
  use prelude.Slice
  use seq.Seq
  use prelude.UIntSize
  predicate has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37] Seq.get seq (UIntSize.to_int self) = out
  val has_value0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value0 self seq out }
    
  use seq.Seq
  predicate in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [#"../../../../../creusot-contracts/src/std/slice.rs" 115 20 115 37] UIntSize.to_int self < Seq.length seq
  val in_bounds0 [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds0 self seq }
    
  function shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
  val shallow_model2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25] inv4 self}
    ensures { result = shallow_model2 self }
    
  function shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t =
    [#"../../../../../creusot-contracts/src/model.rs" 83 8 83 31] shallow_model2 self
  val shallow_model1 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq t
    ensures { result = shallow_model1 self }
    
  val index0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (index : usize) : t
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 141 27 141 46] in_bounds0 index (shallow_model1 self)}
    requires {inv0 self}
    requires {inv3 index}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 142 26 142 54] has_value0 index (shallow_model1 self) result }
    ensures { inv1 result }
    
  predicate resolve0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
  val resolve0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve0 self }
    
  function index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    
   =
    [#"../../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31] Seq.get (shallow_model2 self) ix
  val index_logic1 [@inline:trivial] (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (ix : int) : t
    ensures { result = index_logic1 self ix }
    
  function deep_model2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq deep_model_ty0
  val deep_model2 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq deep_model_ty0
    requires {[#"../../../../../creusot-contracts/src/std/vec.rs" 33 18 33 22] inv4 self}
    ensures { result = deep_model2 self }
    
  function deep_model0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq deep_model_ty0 =
    [#"../../../../../creusot-contracts/src/model.rs" 74 8 74 28] deep_model2 self
  val deep_model0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : Seq.seq deep_model_ty0
    ensures { result = deep_model0 self }
    
  val len0 (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : usize
    requires {inv0 self}
    ensures { [#"../../../../../creusot-contracts/src/std/vec.rs" 75 26 75 48] UIntSize.to_int result = Seq.length (shallow_model1 self) }
    
  let rec cfg binary_search [#"../05_binary_search_generic.rs" 27 0 29 29] [@cfg:stackify] [@cfg:subregion_analysis] (arr : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) (elem : t) : Core_Result_Result_Type.t_result usize usize
    requires {[#"../05_binary_search_generic.rs" 20 11 20 36] Seq.length (shallow_model1 arr) <= UIntSize.to_int max0}
    requires {[#"../05_binary_search_generic.rs" 21 11 21 35] sorted0 (deep_model0 arr)}
    requires {[#"../05_binary_search_generic.rs" 27 41 27 44] inv0 arr}
    requires {[#"../05_binary_search_generic.rs" 27 55 27 59] inv2 elem}
    ensures { [#"../05_binary_search_generic.rs" 22 0 22 89] forall x : usize . result = Core_Result_Result_Type.C_Ok x -> Seq.get (deep_model0 arr) (UIntSize.to_int x) = deep_model1 elem }
    ensures { [#"../05_binary_search_generic.rs" 23 0 24 74] forall x : usize . result = Core_Result_Result_Type.C_Err x -> (forall i : usize . i < x -> le_log0 (Seq.get (deep_model0 arr) (UIntSize.to_int i)) (deep_model1 elem)) }
    ensures { [#"../05_binary_search_generic.rs" 25 0 26 92] forall x : usize . result = Core_Result_Result_Type.C_Err x -> (forall i : usize . x <= i /\ UIntSize.to_int i < Seq.length (shallow_model1 arr) -> lt_log0 (deep_model1 elem) (Seq.get (deep_model0 arr) (UIntSize.to_int i))) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Result_Result_Type.t_result usize usize;
  var arr : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global) = arr;
  var elem : t = elem;
  var _10 : usize;
  var size : usize;
  var base : usize;
  var half : usize;
  var _25 : bool;
  var mid : usize;
  var _29 : usize;
  var _30 : bool;
  var _32 : t;
  var cmp : t;
  var _41 : t;
  var _44 : Core_Cmp_Ordering_Type.t_ordering;
  var _47 : t;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _10 <- ([#"../05_binary_search_generic.rs" 31 7 31 16] len0 ([#"../05_binary_search_generic.rs" 31 7 31 16] arr));
    goto BB4
  }
  BB4 {
    switch ([#"../05_binary_search_generic.rs" 31 7 31 21] _10 = ([#"../05_binary_search_generic.rs" 31 20 31 21] [#"../05_binary_search_generic.rs" 31 20 31 21] (0 : usize)))
      | False -> goto BB7
      | True -> goto BB5
      end
  }
  BB5 {
    assert { [@expl:type invariant] inv2 elem };
    assume { resolve2 elem };
    assert { [@expl:type invariant] inv0 arr };
    assume { resolve0 arr };
    _0 <- ([#"../05_binary_search_generic.rs" 32 15 32 21] Core_Result_Result_Type.C_Err ([#"../05_binary_search_generic.rs" 32 19 32 20] [#"../05_binary_search_generic.rs" 32 19 32 20] (0 : usize)));
    goto BB29
  }
  BB6 {
    absurd
  }
  BB7 {
    size <- ([#"../05_binary_search_generic.rs" 34 26 34 35] len0 ([#"../05_binary_search_generic.rs" 34 26 34 35] arr));
    goto BB8
  }
  BB8 {
    base <- ([#"../05_binary_search_generic.rs" 35 26 35 27] [#"../05_binary_search_generic.rs" 35 26 35 27] (0 : usize));
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    invariant { [#"../05_binary_search_generic.rs" 37 16 37 56] 0 < UIntSize.to_int size /\ UIntSize.to_int size + UIntSize.to_int base <= Seq.length (shallow_model1 arr) };
    invariant { [#"../05_binary_search_generic.rs" 37 4 37 58] forall i : usize . i < base -> le_log0 (Seq.get (deep_model0 arr) (UIntSize.to_int i)) (deep_model1 elem) };
    invariant { [#"../05_binary_search_generic.rs" 37 4 37 58] forall i : usize . UIntSize.to_int base + UIntSize.to_int size <= UIntSize.to_int i /\ UIntSize.to_int i < Seq.length (shallow_model1 arr) -> lt_log0 (deep_model1 elem) (Seq.get (deep_model0 arr) (UIntSize.to_int i)) };
    goto BB12
  }
  BB12 {
    switch ([#"../05_binary_search_generic.rs" 40 10 40 18] size > ([#"../05_binary_search_generic.rs" 40 17 40 18] [#"../05_binary_search_generic.rs" 40 17 40 18] (1 : usize)))
      | False -> goto BB20
      | True -> goto BB13
      end
  }
  BB13 {
    _25 <- ([#"../05_binary_search_generic.rs" 41 19 41 27] ([#"../05_binary_search_generic.rs" 41 26 41 27] [#"../05_binary_search_generic.rs" 41 26 41 27] (2 : usize)) = ([#"../05_binary_search_generic.rs" 41 19 41 27] [#"../05_binary_search_generic.rs" 41 19 41 27] (0 : usize)));
    assert { [@expl:division by zero] [#"../05_binary_search_generic.rs" 41 19 41 27] not _25 };
    goto BB14
  }
  BB14 {
    half <- ([#"../05_binary_search_generic.rs" 41 19 41 27] size / ([#"../05_binary_search_generic.rs" 41 26 41 27] [#"../05_binary_search_generic.rs" 41 26 41 27] (2 : usize)));
    mid <- ([#"../05_binary_search_generic.rs" 42 18 42 29] base + half);
    _32 <- ([#"../05_binary_search_generic.rs" 44 18 44 26] index0 ([#"../05_binary_search_generic.rs" 44 18 44 21] arr) mid);
    goto BB15
  }
  BB15 {
    assert { [@expl:type invariant] inv1 _32 };
    assume { resolve1 _32 };
    _30 <- ([#"../05_binary_search_generic.rs" 44 18 44 33] gt0 ([#"../05_binary_search_generic.rs" 44 18 44 26] _32) ([#"../05_binary_search_generic.rs" 44 29 44 33] elem));
    goto BB16
  }
  BB16 {
    switch (_30)
      | False -> goto BB18
      | True -> goto BB17
      end
  }
  BB17 {
    _29 <- base;
    goto BB19
  }
  BB18 {
    _29 <- mid;
    goto BB19
  }
  BB19 {
    base <- _29;
    _29 <- any usize;
    size <- ([#"../05_binary_search_generic.rs" 46 8 46 20] size - half);
    goto BB11
  }
  BB20 {
    assert { [@expl:type invariant] inv0 arr };
    assume { resolve0 arr };
    _41 <- ([#"../05_binary_search_generic.rs" 49 15 49 24] index0 ([#"../05_binary_search_generic.rs" 49 15 49 18] arr) base);
    goto BB21
  }
  BB21 {
    cmp <- ([#"../05_binary_search_generic.rs" 49 14 49 24] _41);
    assert { [@expl:type invariant] inv1 _41 };
    assume { resolve1 _41 };
    assert { [@expl:type invariant] inv1 cmp };
    assume { resolve1 cmp };
    _47 <- ([#"../05_binary_search_generic.rs" 51 18 51 23] elem);
    assert { [@expl:type invariant] inv1 _47 };
    assume { resolve1 _47 };
    _44 <- ([#"../05_binary_search_generic.rs" 51 10 51 24] cmp0 ([#"../05_binary_search_generic.rs" 51 10 51 24] cmp) ([#"../05_binary_search_generic.rs" 51 18 51 23] _47));
    goto BB22
  }
  BB22 {
    assert { [@expl:type invariant] inv2 elem };
    assume { resolve2 elem };
    switch (_44)
      | Core_Cmp_Ordering_Type.C_Less -> goto BB23
      | Core_Cmp_Ordering_Type.C_Equal -> goto BB24
      | Core_Cmp_Ordering_Type.C_Greater -> goto BB25
      end
  }
  BB23 {
    goto BB27
  }
  BB24 {
    goto BB26
  }
  BB25 {
    _0 <- ([#"../05_binary_search_generic.rs" 54 29 54 38] Core_Result_Result_Type.C_Err base);
    goto BB28
  }
  BB26 {
    _0 <- ([#"../05_binary_search_generic.rs" 52 27 52 35] Core_Result_Result_Type.C_Ok base);
    goto BB28
  }
  BB27 {
    _0 <- ([#"../05_binary_search_generic.rs" 53 26 53 39] Core_Result_Result_Type.C_Err ([#"../05_binary_search_generic.rs" 53 30 53 38] base + ([#"../05_binary_search_generic.rs" 53 37 53 38] [#"../05_binary_search_generic.rs" 53 37 53 38] (1 : usize))));
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    return _0
  }
  
end
