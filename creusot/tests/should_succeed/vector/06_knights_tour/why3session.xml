<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.12.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.12.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Alt-Ergo" version="2.4.3" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="06_knights_tour.mlcfg"/>
<theory name="C06KnightsTour_Impl3_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="3"><result status="valid" time="0.000000" steps="12"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl0_Mov" proved="true">
 <goal name="mov&#39;vc" expl="VC for mov" proved="true">
 <proof prover="3"><result status="valid" time="0.020000" steps="310"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_New_Closure3" proved="true">
 <goal name="c06KnightsTour_Impl1_New_Closure3&#39;vc" expl="VC for c06KnightsTour_Impl1_New_Closure3" proved="true">
 <proof prover="3"><result status="valid" time="0.000000" steps="32"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_New" proved="true">
 <goal name="new&#39;vc" expl="VC for new" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="new&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.041075" steps="23"/></proof>
  </goal>
  <goal name="new&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.079378" steps="170"/></proof>
  </goal>
  <goal name="new&#39;vc.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.048165" steps="59"/></proof>
  </goal>
  <goal name="new&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.029300" steps="16"/></proof>
  </goal>
  <goal name="new&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.032098" steps="18"/></proof>
  </goal>
  <goal name="new&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.026648" steps="15"/></proof>
  </goal>
  <goal name="new&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.041395" steps="64"/></proof>
  </goal>
  <goal name="new&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.066909" steps="461805"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_Available" proved="true">
 <goal name="available&#39;vc" expl="VC for available" proved="true">
 <proof prover="3"><result status="valid" time="0.030000" steps="752"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_CountDegree" proved="true">
 <goal name="count_degree&#39;vc" expl="VC for count_degree" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="count_degree&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="12"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.021056" steps="17"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="20"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="26"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="31"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020679" steps="36"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="109"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="117"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.8" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="count_degree&#39;vc.8.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="count_degree&#39;vc.8.0.0" expl="VC for count_degree" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="count_degree&#39;vc.8.0.0.0" expl="VC for count_degree" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="count_degree&#39;vc.8.0.0.0.0" expl="VC for count_degree" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="count_degree&#39;vc.8.0.0.0.0.0" expl="VC for count_degree" proved="true">
       <proof prover="3" timelimit="30" memlimit="4000"><result status="valid" time="0.753991" steps="16876"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="count_degree&#39;vc.8.0.1" expl="VC for count_degree" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="count_degree&#39;vc.8.0.1.0" expl="VC for count_degree" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="count_degree&#39;vc.8.0.1.0.0" expl="VC for count_degree" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="count_degree&#39;vc.8.0.1.0.0.0" expl="VC for count_degree" proved="true">
       <proof prover="3" timelimit="30" memlimit="4000"><result status="valid" time="0.758364" steps="16919"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.9" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="count_degree&#39;vc.9.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="count_degree&#39;vc.9.0.0" expl="VC for count_degree" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="count_degree&#39;vc.9.0.0.0" expl="VC for count_degree" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="count_degree&#39;vc.9.0.0.0.0" expl="VC for count_degree" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="count_degree&#39;vc.9.0.0.0.0.0" expl="VC for count_degree" proved="true">
       <proof prover="3" timelimit="30" memlimit="4000"><result status="valid" time="0.767532" steps="17168"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="count_degree&#39;vc.9.0.1" expl="VC for count_degree" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="count_degree&#39;vc.9.0.1.0" expl="VC for count_degree" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="count_degree&#39;vc.9.0.1.0.0" expl="VC for count_degree" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="count_degree&#39;vc.9.0.1.0.0.0" expl="VC for count_degree" proved="true">
       <proof prover="3" timelimit="30" memlimit="4000"><result status="valid" time="0.775345" steps="17231"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="65"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.11" expl="integer overflow" proved="true">
  <proof prover="3"><result status="valid" time="0.052571" steps="846"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.12" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="42"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.13" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="count_degree&#39;vc.13.0" expl="loop invariant preservation" proved="true">
   <proof prover="3"><result status="valid" time="0.062400" steps="995"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.14" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="count_degree&#39;vc.14.0" expl="loop invariant preservation" proved="true">
   <proof prover="3"><result status="valid" time="0.010000" steps="222"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_Set" proved="true">
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <proof prover="3"><result status="valid" time="0.362387" steps="6412"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Min" proved="true">
 <goal name="min&#39;vc" expl="VC for min" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="min&#39;vc.0" expl="VC for min" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="min&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.000000" steps="4"/></proof>
   </goal>
   <goal name="min&#39;vc.0.1" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.009531" steps="6"/></proof>
   </goal>
   <goal name="min&#39;vc.0.2" expl="loop invariant init" proved="true">
   <proof prover="3"><result status="valid" time="0.000000" steps="12"/></proof>
   </goal>
   <goal name="min&#39;vc.0.3" expl="loop invariant init" proved="true">
   <proof prover="2"><result status="valid" time="0.020000" steps="63505"/></proof>
   </goal>
   <goal name="min&#39;vc.0.4" expl="loop invariant init" proved="true">
   <proof prover="3"><result status="valid" time="0.000000" steps="20"/></proof>
   </goal>
   <goal name="min&#39;vc.0.5" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.010000" steps="81"/></proof>
   </goal>
   <goal name="min&#39;vc.0.6" expl="loop invariant preservation" proved="true">
   <proof prover="3"><result status="valid" time="0.010000" steps="17"/></proof>
   </goal>
   <goal name="min&#39;vc.0.7" expl="loop invariant preservation" proved="true">
   <proof prover="1"><result status="valid" time="0.076049" steps="26012"/></proof>
   </goal>
   <goal name="min&#39;vc.0.8" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="min&#39;vc.0.8.0" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="min&#39;vc.0.8.0.0" expl="loop invariant preservation" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="min&#39;vc.0.8.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="min&#39;vc.0.8.0.0.0.0" expl="loop invariant preservation" proved="true">
       <proof prover="3"><result status="valid" time="0.535349" steps="13464"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="min&#39;vc.0.8.1" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="min&#39;vc.0.8.1.0" expl="loop invariant preservation" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="min&#39;vc.0.8.1.0.0" expl="loop invariant preservation" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="min&#39;vc.0.8.1.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="min&#39;vc.0.8.1.0.0.0.0" expl="loop invariant preservation" proved="true">
        <transf name="split_all_full" proved="true" >
         <goal name="min&#39;vc.0.8.1.0.0.0.0.0" expl="loop invariant preservation" proved="true">
         <proof prover="3" timelimit="30" memlimit="4000"><result status="valid" time="1.154758" steps="23302"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="min&#39;vc.0.8.1.0.0.1" expl="loop invariant preservation" proved="true">
       <proof prover="3"><result status="valid" time="0.044256" steps="236"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_DumbNonlinearArith_Impl" proved="true">
 <goal name="dumb_nonlinear_arith&#39;vc" expl="VC for dumb_nonlinear_arith" proved="true">
 <proof prover="3"><result status="valid" time="0.000000" steps="7"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_KnightsTour" proved="true">
 <goal name="knights_tour&#39;vc" expl="VC for knights_tour" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="knights_tour&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.000000" steps="10"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="31"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="36"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="30"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.037506" steps="594"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="34"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.6" expl="integer overflow" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="63"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="42"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.038473" steps="177"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="71"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.122769" steps="249"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="78"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.12" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="82"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.13" expl="loop invariant init" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.128006" steps="3497"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.14" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.050239" steps="299"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="199"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.086621" steps="414"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.17" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.030000" steps="219"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.18" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.037720" steps="540"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.19" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="226"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.20" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.079357" steps="495"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.21" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.100000" steps="310"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.22" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.077592" steps="1951"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.058954" steps="612"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.304490" steps="7974"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.25" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="335"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.26" expl="loop invariant preservation" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="0.130000" steps="21125"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.27" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.135677" steps="39265"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.28" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.040000" steps="932"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.29" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="knights_tour&#39;vc.29.0" expl="precondition" proved="true">
   <proof prover="3"><result status="valid" time="0.050000" steps="1050"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.30" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="knights_tour&#39;vc.30.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="knights_tour&#39;vc.30.0.0" expl="VC for knights_tour" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="knights_tour&#39;vc.30.0.0.0" expl="VC for knights_tour" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="knights_tour&#39;vc.30.0.0.0.0" expl="VC for knights_tour" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="knights_tour&#39;vc.30.0.0.0.0.0" expl="VC for knights_tour" proved="true">
       <proof prover="3" timelimit="30" memlimit="4000"><result status="valid" time="2.209465" steps="52447"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="knights_tour&#39;vc.30.0.1" expl="VC for knights_tour" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="knights_tour&#39;vc.30.0.1.0" expl="VC for knights_tour" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="knights_tour&#39;vc.30.0.1.0.0" expl="VC for knights_tour" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="knights_tour&#39;vc.30.0.1.0.0.0" expl="VC for knights_tour" proved="true">
       <proof prover="3" timelimit="30" memlimit="4000"><result status="valid" time="2.214089" steps="52507"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.31" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="knights_tour&#39;vc.31.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="knights_tour&#39;vc.31.0.0" expl="VC for knights_tour" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="knights_tour&#39;vc.31.0.0.0" expl="VC for knights_tour" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="knights_tour&#39;vc.31.0.0.0.0" expl="VC for knights_tour" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="knights_tour&#39;vc.31.0.0.0.0.0" expl="VC for knights_tour" proved="true">
       <proof prover="3" timelimit="30" memlimit="4000"><result status="valid" time="2.256303" steps="52990"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="knights_tour&#39;vc.31.0.1" expl="VC for knights_tour" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="knights_tour&#39;vc.31.0.1.0" expl="VC for knights_tour" proved="true">
     <transf name="split_all_full" proved="true" >
      <goal name="knights_tour&#39;vc.31.0.1.0.0" expl="VC for knights_tour" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="knights_tour&#39;vc.31.0.1.0.0.0" expl="VC for knights_tour" proved="true">
       <proof prover="3" timelimit="30" memlimit="4000"><result status="valid" time="2.256854" steps="53056"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.32" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="359"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.33" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.020000" steps="371"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.34" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.010000" steps="371"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.35" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.029820" steps="851"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.36" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.118800" steps="862"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.37" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="knights_tour&#39;vc.37.0" expl="loop invariant preservation" proved="true">
   <proof prover="3"><result status="valid" time="0.030719" steps="894"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.38" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="knights_tour&#39;vc.38.0" expl="loop invariant preservation" proved="true">
   <proof prover="3"><result status="valid" time="0.394194" steps="8246"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.39" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.305249" steps="77028"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl3" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="3"><result status="valid" time="0.000000" steps="6"/></proof>
 </goal>
</theory>
</file>
</why3session>
