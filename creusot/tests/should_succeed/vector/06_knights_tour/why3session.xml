<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.11.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.4.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.0.4" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.12.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="6" name="CVC5" version="1.0.2" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="06_knights_tour.mlcfg"/>
<theory name="C06KnightsTour_Impl3_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="14"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl0_Mov" proved="true">
 <goal name="mov&#39;vc" expl="VC for mov" proved="true">
 <proof prover="1"><result status="valid" time="0.02" steps="403"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_New_Closure3" proved="true">
 <goal name="c06KnightsTour_Impl1_New_Closure3&#39;vc" expl="VC for c06KnightsTour_Impl1_New_Closure3" proved="true">
 <proof prover="4"><result status="valid" time="0.00" steps="33"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_New" proved="true">
 <goal name="new&#39;vc" expl="VC for new" proved="true">
 <proof prover="5"><result status="valid" time="0.08" steps="345182"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_Available" proved="true">
 <goal name="available&#39;vc" expl="VC for available" proved="true">
 <proof prover="4"><result status="valid" time="0.03" steps="537"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_CountDegree" proved="true">
 <goal name="count_degree&#39;vc" expl="VC for count_degree" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="count_degree&#39;vc.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="16"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="26"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="35"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="123"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="142"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.6" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="count_degree&#39;vc.6.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.17" steps="3301"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.7" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="count_degree&#39;vc.7.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.20" steps="3378"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.8" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="83"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.9" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="698"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.10" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="40"/></proof>
  </goal>
  <goal name="count_degree&#39;vc.11" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="count_degree&#39;vc.11.0" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.02" steps="141"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="count_degree&#39;vc.12" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="count_degree&#39;vc.12.0" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="87"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl1_Set" proved="true">
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <proof prover="4"><result status="valid" time="0.11" steps="2124"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_Min" proved="true">
 <goal name="min&#39;vc" expl="VC for min" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="min&#39;vc.0" expl="VC for min" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="min&#39;vc.0.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="8"/></proof>
   </goal>
   <goal name="min&#39;vc.0.1" expl="loop invariant init" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="18"/></proof>
   </goal>
   <goal name="min&#39;vc.0.2" expl="loop invariant init" proved="true">
   <proof prover="0"><result status="valid" time="0.02" steps="66168"/></proof>
   </goal>
   <goal name="min&#39;vc.0.3" expl="loop invariant init" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="23"/></proof>
   </goal>
   <goal name="min&#39;vc.0.4" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="91"/></proof>
   </goal>
   <goal name="min&#39;vc.0.5" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="20"/></proof>
   </goal>
   <goal name="min&#39;vc.0.6" expl="loop invariant preservation" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="23522"/></proof>
   </goal>
   <goal name="min&#39;vc.0.7" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="min&#39;vc.0.7.0" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="min&#39;vc.0.7.0.0" expl="loop invariant preservation" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="min&#39;vc.0.7.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="min&#39;vc.0.7.0.0.0.0" expl="loop invariant preservation" proved="true">
       <proof prover="0"><result status="valid" time="1.70" steps="2356880"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="min&#39;vc.0.7.1" expl="loop invariant preservation" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="min&#39;vc.0.7.1.0" expl="loop invariant preservation" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="min&#39;vc.0.7.1.0.0" expl="loop invariant preservation" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="min&#39;vc.0.7.1.0.0.0" expl="loop invariant preservation" proved="true">
       <proof prover="2" timelimit="1"><result status="valid" time="0.07" steps="28866"/></proof>
       </goal>
       <goal name="min&#39;vc.0.7.1.0.0.1" expl="loop invariant preservation" proved="true">
       <proof prover="0"><result status="valid" time="1.91" steps="2362074"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_DumbNonlinearArith_Impl" proved="true">
 <goal name="dumb_nonlinear_arith&#39;vc" expl="VC for dumb_nonlinear_arith" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="7"/></proof>
 </goal>
</theory>
<theory name="C06KnightsTour_KnightsTour" proved="true">
 <goal name="knights_tour&#39;vc" expl="VC for knights_tour" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="knights_tour&#39;vc.0" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="49"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="67"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.3" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="50"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.07" steps="789"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="56"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.6" expl="integer overflow" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="119"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.7" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="110"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.8" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="110"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="134"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.10" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="411"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.11" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="141"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.12" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="145"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.13" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.43" steps="4532"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.14" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="256"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.15" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="284"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.16" expl="loop invariant init" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="639"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.17" expl="loop invariant init" proved="true">
  <proof prover="4" timelimit="5"><result status="valid" time="0.01" steps="291"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.18" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.10" steps="391"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.19" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.10" steps="2358"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="4" timelimit="5"><result status="valid" time="0.04" steps="403"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.21" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="937"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.22" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="411"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.23" expl="loop invariant preservation" proved="true">
  <proof prover="2" memlimit="2000"><result status="valid" time="0.13" steps="34691"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.24" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.22" steps="38568"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.25" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="1119"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.26" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="knights_tour&#39;vc.26.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.05" steps="1237"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.27" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="knights_tour&#39;vc.27.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.82" steps="16497"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.28" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="knights_tour&#39;vc.28.0" expl="precondition" proved="true">
   <proof prover="4"><result status="valid" time="0.80" steps="16722"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.29" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="462"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.30" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="490"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.31" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="494"/></proof>
  </goal>
  <goal name="knights_tour&#39;vc.32" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="knights_tour&#39;vc.32.0" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.11" steps="502"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.33" expl="loop invariant preservation" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="knights_tour&#39;vc.33.0" expl="loop invariant preservation" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="1332"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="knights_tour&#39;vc.34" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.29" steps="67504"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06KnightsTour_Impl3" proved="true">
 <goal name="clone&#39;_refn" proved="true">
 <proof prover="1"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
</theory>
</file>
</why3session>
