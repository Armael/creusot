
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_RawVec_Cap_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_cap (input:t_cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module Alloc_RawVec_RawVec_Type
  use Alloc_RawVec_Cap_Type as Cap'0
  
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_rawvec 't 'a =
    | C_RawVec (Unique'0.t_unique 't) (Cap'0.t_cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_rawvec < 't > < 'a > (input:t_rawvec 't 'a) (ret  (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_unique 't) (cap:Cap'0.t_cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module Alloc_Vec_Vec_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use Alloc_RawVec_RawVec_Type as RawVec'0
  
  type t_vec 't 'a =
    | C_Vec (RawVec'0.t_rawvec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_vec < 't > < 'a > (input:t_vec 't 'a) (ret  (buf:RawVec'0.t_rawvec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_rawvec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_box 't 'a =
    | C_Box (Unique'0.t_unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module C07ReadWrite_ReadWrite
  type t
  
  let%span s07_read_write0 = "../07_read_write.rs" 8 4 8 22
  
  let%span s07_read_write1 = "../07_read_write.rs" 5 11 5 24
  
  let%span s07_read_write2 = "../07_read_write.rs" 6 44 6 45
  
  let%span s07_read_write3 = "../07_read_write.rs" 6 70 6 71
  
  let%span span4 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 26 8 26 18
  
  let%span span7 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span9 = "" 0 0 0 0
  
  let%span span10 = "../../../../../creusot-contracts/src/std/vec.rs" 19 21 19 25
  
  let%span span11 = "../../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span12 = "../../../../../creusot-contracts/src/std/vec.rs" 19 4 19 36
  
  let%span span13 = "../../../../../creusot-contracts/src/std/vec.rs" 60 20 60 41
  
  let%span span14 = "../../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span15 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span16 = "../../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span17 = "" 0 0 0 0
  
  let%span span18 = "" 0 0 0 0
  
  let%span span19 = "../../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  
  let%span span20 = "../../../../../creusot-contracts/src/std/slice.rs" 123 20 123 37
  
  let%span span21 = "../../../../../creusot-contracts/src/std/slice.rs" 116 20 116 37
  
  let%span span22 = "../../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span23 = "../../../../../creusot-contracts/src/std/vec.rs" 156 27 156 46
  
  let%span span24 = "" 0 0 0 0
  
  let%span span25 = "" 0 0 0 0
  
  let%span span26 = "../../../../../creusot-contracts/src/std/vec.rs" 157 26 157 54
  
  let%span span27 = "" 0 0 0 0
  
  let%span span28 = "../../../../../creusot-contracts/src/std/slice.rs" 130 8 130 96
  
  let%span span29 = "../../../../../creusot-contracts/src/std/vec.rs" 146 27 146 46
  
  let%span span30 = "" 0 0 0 0
  
  let%span span31 = "" 0 0 0 0
  
  let%span span32 = "../../../../../creusot-contracts/src/std/vec.rs" 147 26 147 54
  
  let%span span33 = "../../../../../creusot-contracts/src/std/vec.rs" 148 26 148 57
  
  let%span span34 = "../../../../../creusot-contracts/src/std/vec.rs" 149 26 149 62
  
  let%span span35 = "../../../../../creusot-contracts/src/std/vec.rs" 150 26 150 55
  
  let%span span36 = "" 0 0 0 0
  
  predicate inv'3 (_x : t)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'8 (self : t) =
    [%#span4] inv'3 self
  
  predicate inv'8 (_x : t)
  
  axiom inv'8 : forall x : t . inv'8 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq t) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'7 (_x : Seq.seq t)
  
  axiom inv'7 : forall x : Seq.seq t . inv'7 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'6 (self : t) =
    [%#span6] inv'3 self
  
  predicate inv'6 (_x : t)
  
  axiom inv'6 : forall x : t . inv'6 x = true
  
  use Alloc_Vec_Vec_Type as Vec'0
  
  predicate inv'0 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  predicate invariant'5 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span6] inv'0 self
  
  predicate inv'5 (_x : Vec'0.t_vec t (Global'0.t_global))
  
  axiom inv'5 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'5 x = true
  
  use prelude.prelude.UIntSize
  
  predicate invariant'4 (self : usize) =
    [%#span7] true
  
  predicate inv'4 (_x : usize)
  
  axiom inv'4 : forall x : usize . inv'4 x = true
  
  predicate invariant'3 (self : t)
  
  axiom inv'3 : forall x : t . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span8] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_x : borrowed (Vec'0.t_vec t (Global'0.t_global)))
  
  axiom inv'2 : forall x : borrowed (Vec'0.t_vec t (Global'0.t_global)) . inv'2 x = true
  
  predicate invariant'1 (self : borrowed t) =
    [%#span8] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'1 (_x : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  use prelude.prelude.UIntSize
  
  constant max'0 : usize = [%#span9] (18446744073709551615 : usize)
  
  function shallow_model'1 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_vec t (Global'0.t_global) . ([%#span10] inv'0 self)
   -> ([%#span12] inv'7 (shallow_model'1 self))
  && ([%#span11] Seq.length (shallow_model'1 self) <= UIntSize.to_int (max'0 : usize))
  
  predicate invariant'0 (self : Vec'0.t_vec t (Global'0.t_global)) =
    [%#span13] inv'7 (shallow_model'1 self)
  
  axiom inv'0 : forall x : Vec'0.t_vec t (Global'0.t_global) . inv'0 x = true
  
  function shallow_model'0 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) : Seq.seq t =
    [%#span14] shallow_model'1 self.current
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Vec'0.t_vec t (Global'0.t_global))) =
    [%#span15] self.final = self.current
  
  type deep_model_ty'0
  
  function deep_model'1 (self : t) : deep_model_ty'0
  
  function deep_model'0 (self : t) : deep_model_ty'0 =
    [%#span16] deep_model'1 self
  
  let rec eq'0 (self:t) (other:t) (return'  (ret:bool))= {[@expl:precondition] [%#span18] inv'6 other}
    {[@expl:precondition] [%#span17] inv'6 self}
    any [ return' (result:bool)-> {[%#span19] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ] 
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    [%#span20] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    [%#span21] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'2 (self : Vec'0.t_vec t (Global'0.t_global)) : Seq.seq t =
    [%#span22] shallow_model'1 self
  
  let rec index'0 (self:Vec'0.t_vec t (Global'0.t_global)) (index:usize) (return'  (ret:t))= {[@expl:precondition] [%#span25] inv'4 index}
    {[@expl:precondition] [%#span24] inv'5 self}
    {[@expl:precondition] [%#span23] in_bounds'0 index (shallow_model'2 self)}
    any
    [ return' (result:t)-> {[%#span27] inv'6 result}
      {[%#span26] has_value'0 index (shallow_model'2 self) result}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : borrowed t) =
    [%#span15] self.final = self.current
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    [%#span28] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_vec t (Global'0.t_global))) (index:usize) (return'  (ret:borrowed t))= {[@expl:precondition] [%#span31] inv'4 index}
    {[@expl:precondition] [%#span30] inv'2 self}
    {[@expl:precondition] [%#span29] in_bounds'0 index (shallow_model'0 self)}
    any
    [ return' (result:borrowed t)-> {[%#span36] inv'1 result}
      {[%#span35] Seq.length (shallow_model'1 self.final) = Seq.length (shallow_model'0 self)}
      {[%#span34] resolve_elswhere'0 index (shallow_model'0 self) (shallow_model'1 self.final)}
      {[%#span33] has_value'0 index (shallow_model'1 self.final) result.final}
      {[%#span32] has_value'0 index (shallow_model'0 self) result.current}
      (! return' {result}) ]
    
  
  let rec read_write (a:borrowed (Vec'0.t_vec t (Global'0.t_global))) (i:usize) (x:t) (return'  (ret:()))= {[%#s07_read_write3] inv'3 x}
    {[%#s07_read_write2] inv'2 a}
    {[%#s07_read_write1] UIntSize.to_int i < Seq.length (shallow_model'0 a)}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <Vec'0.t_vec t (Global'0.t_global)> {a.current} {Borrow.get_id a}
          (fun (_ret':borrowed (Vec'0.t_vec t (Global'0.t_global))) ->
             [ &_7 <- _ret' ] 
             [ &a <- { a with current = _7.final ; } ] 
            s1)
      | s1 = -{inv'0 _7.final}- s2
      | s2 = index_mut'0 {_7} {i} (fun (_ret':borrowed t) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_6 <- { _6 with current = x ; } ] s1
      | s1 = {[@expl:type invariant] inv'1 _6} s2
      | s2 = -{resolve'0 _6}- s3
      | s3 = index'0 {a.current} {i} (fun (_ret':t) ->  [ &_12 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = s0 [ s0 = eq'0 {_12} {x} (fun (_ret':bool) ->  [ &_10 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'2 a} s1
      | s1 = -{resolve'1 a}- s2
      | s2 = any [ br0 -> {_10 = false} (! bb5) | br1 -> {_10} (! bb4) ]  ]
      
    | bb4 = return' {_0}
    | bb5 = {[%#s07_read_write0] false} any ]
    )
    [ & _0 : () = any_l ()
    | & a : borrowed (Vec'0.t_vec t (Global'0.t_global)) = a
    | & i : usize = i
    | & x : t = x
    | & _6 : borrowed t = any_l ()
    | & _7 : borrowed (Vec'0.t_vec t (Global'0.t_global)) = any_l ()
    | & _10 : bool = any_l ()
    | & _12 : t = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
