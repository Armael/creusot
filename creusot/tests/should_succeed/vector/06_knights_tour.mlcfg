
module C06KnightsTour_Point_Type
  use mach.int.Int
  use prelude.IntSize
  type c06knightstour_point_type  =
    | C06KnightsTour_Point_Type isize isize
    
  let function c06knightstour_point_type_Point_x (self : c06knightstour_point_type) : isize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C06KnightsTour_Point_Type a _ -> a
      end
  let function c06knightstour_point_type_Point_y (self : c06knightstour_point_type) : isize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C06KnightsTour_Point_Type _ a -> a
      end
end
module Core_Clone_Impls_Impl11_Clone_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.IntSize
  val clone' [@cfg:stackify] (self : isize) : isize
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl11_Clone
  use prelude.Borrow
  use mach.int.Int
  use prelude.IntSize
  val clone' [@cfg:stackify] (self : isize) : isize
    ensures { result = self }
    
end
module Core_Clone_Impls_Impl11
  
end
module C06KnightsTour_Impl3_Clone_Interface
  use prelude.Borrow
  use C06KnightsTour_Point_Type
  val clone' [@cfg:stackify] (self : C06KnightsTour_Point_Type.c06knightstour_point_type) : C06KnightsTour_Point_Type.c06knightstour_point_type
    ensures { [#"../06_knights_tour.rs" 4 15 4 20] result = self }
    
end
module C06KnightsTour_Impl3_Clone
  use prelude.Borrow
  use C06KnightsTour_Point_Type
  use mach.int.Int
  use prelude.IntSize
  clone Core_Clone_Impls_Impl11_Clone_Interface as Clone0
  let rec cfg clone' [@cfg:stackify] [#"../06_knights_tour.rs" 4 15 4 20] (self : C06KnightsTour_Point_Type.c06knightstour_point_type) : C06KnightsTour_Point_Type.c06knightstour_point_type
    ensures { [#"../06_knights_tour.rs" 4 15 4 20] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var self_1 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var _2 : isize;
  var _3 : isize;
  var _4 : isize;
  var _5 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x self_1;
    _2 <- ([#"../06_knights_tour.rs" 6 4 6 12] Clone0.clone' _3);
    goto BB1
  }
  BB1 {
    _5 <- C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y self_1;
    _4 <- ([#"../06_knights_tour.rs" 7 4 7 12] Clone0.clone' _5);
    goto BB2
  }
  BB2 {
    _0 <- C06KnightsTour_Point_Type.C06KnightsTour_Point_Type _2 _4;
    return _0
  }
  
end
module C06KnightsTour_Impl0_Mov_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use prelude.Borrow
  use prelude.IntSize
  use C06KnightsTour_Point_Type
  val mov [@cfg:stackify] (self : C06KnightsTour_Point_Type.c06knightstour_point_type) (p : (isize, isize)) : C06KnightsTour_Point_Type.c06knightstour_point_type
    requires {[#"../06_knights_tour.rs" 12 15 12 56] - 10000 <= Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x self) /\ Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x self) <= 10000}
    requires {[#"../06_knights_tour.rs" 13 15 13 56] - 10000 <= Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y self) /\ Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y self) <= 10000}
    requires {[#"../06_knights_tour.rs" 14 15 14 50] - 10000 <= Int64.to_int (let (a, _) = p in a) /\ Int64.to_int (let (a, _) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 15 15 15 50] - 10000 <= Int64.to_int (let (_, a) = p in a) /\ Int64.to_int (let (_, a) = p in a) <= 10000}
    ensures { [#"../06_knights_tour.rs" 16 14 16 47] Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x result) = Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x self) + Int64.to_int (let (a, _) = p in a) }
    ensures { [#"../06_knights_tour.rs" 17 14 17 47] Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y result) = Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y self) + Int64.to_int (let (_, a) = p in a) }
    
end
module C06KnightsTour_Impl0_Mov
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use prelude.Borrow
  use prelude.IntSize
  use C06KnightsTour_Point_Type
  let rec cfg mov [@cfg:stackify] [#"../06_knights_tour.rs" 18 4 18 45] (self : C06KnightsTour_Point_Type.c06knightstour_point_type) (p : (isize, isize)) : C06KnightsTour_Point_Type.c06knightstour_point_type
    requires {[#"../06_knights_tour.rs" 12 15 12 56] - 10000 <= Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x self) /\ Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x self) <= 10000}
    requires {[#"../06_knights_tour.rs" 13 15 13 56] - 10000 <= Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y self) /\ Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y self) <= 10000}
    requires {[#"../06_knights_tour.rs" 14 15 14 50] - 10000 <= Int64.to_int (let (a, _) = p in a) /\ Int64.to_int (let (a, _) = p in a) <= 10000}
    requires {[#"../06_knights_tour.rs" 15 15 15 50] - 10000 <= Int64.to_int (let (_, a) = p in a) /\ Int64.to_int (let (_, a) = p in a) <= 10000}
    ensures { [#"../06_knights_tour.rs" 16 14 16 47] Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x result) = Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x self) + Int64.to_int (let (a, _) = p in a) }
    ensures { [#"../06_knights_tour.rs" 17 14 17 47] Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y result) = Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y self) + Int64.to_int (let (_, a) = p in a) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var self_1 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var p_2 : (isize, isize);
  var _3 : isize;
  var _4 : isize;
  var _5 : isize;
  var _6 : isize;
  var _7 : isize;
  var _8 : isize;
  {
    self_1 <- self;
    p_2 <- p;
    goto BB0
  }
  BB0 {
    _4 <- C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x self_1;
    _5 <- (let (a, _) = p_2 in a);
    _3 <- ([#"../06_knights_tour.rs" 19 18 19 32] _4 + _5);
    _7 <- C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y self_1;
    _8 <- (let (_, a) = p_2 in a);
    _6 <- ([#"../06_knights_tour.rs" 19 37 19 51] _7 + _8);
    _0 <- C06KnightsTour_Point_Type.C06KnightsTour_Point_Type _3 _6;
    return _0
  }
  
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type core_ptr_nonnull_nonnull_type 't =
    | Core_Ptr_NonNull_NonNull_Type opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type core_marker_phantomdata_type 't =
    | Core_Marker_PhantomData_Type
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type
  type core_ptr_unique_unique_type 't =
    | Core_Ptr_Unique_Unique_Type (Core_Ptr_NonNull_NonNull_Type.core_ptr_nonnull_nonnull_type 't) (Core_Marker_PhantomData_Type.core_marker_phantomdata_type 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type
  type alloc_rawvec_rawvec_type 't 'a =
    | Alloc_RawVec_RawVec_Type (Core_Ptr_Unique_Unique_Type.core_ptr_unique_unique_type 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type
  type alloc_vec_vec_type 't 'a =
    | Alloc_Vec_Vec_Type (Alloc_RawVec_RawVec_Type.alloc_rawvec_rawvec_type 't 'a) usize
    
end
module Alloc_Alloc_Global_Type
  type alloc_alloc_global_type  =
    | Alloc_Alloc_Global_Type
    
end
module C06KnightsTour_Board_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  type c06knightstour_board_type  =
    | C06KnightsTour_Board_Type usize (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
    
  let function c06knightstour_board_type_Board_size (self : c06knightstour_board_type) : usize
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C06KnightsTour_Board_Type a _ -> a
      end
  let function c06knightstour_board_type_Board_field (self : c06knightstour_board_type) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C06KnightsTour_Board_Type _ a -> a
      end
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a . Seq.length (model self) <= 18446744073709551615
end
module C06KnightsTour_Impl1_Wf_Interface
  use C06KnightsTour_Board_Type
  predicate wf (self : C06KnightsTour_Board_Type.c06knightstour_board_type)
end
module C06KnightsTour_Impl1_Wf
  use C06KnightsTour_Board_Type
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate wf [#"../06_knights_tour.rs" 30 4 30 23] (self : C06KnightsTour_Board_Type.c06knightstour_board_type) =
    [#"../06_knights_tour.rs" 31 8 35 9] UInt64.to_int (C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size self) <= 1000 /\ Seq.length (Model0.model (C06KnightsTour_Board_Type.c06knightstour_board_type_Board_field self)) = UInt64.to_int (C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size self) /\ (forall i : (int) . 0 <= i /\ i < UInt64.to_int (C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size self) -> Seq.length (Model1.model (Seq.get (Model0.model (C06KnightsTour_Board_Type.c06knightstour_board_type_Board_field self)) i)) = UInt64.to_int (C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size self))
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module Alloc_Vec_Impl0_WithCapacity_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val with_capacity [@cfg:stackify] (capacity : usize) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_WithCapacity
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val with_capacity [@cfg:stackify] (capacity : usize) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_FromElem_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : (int) . 0 <= i /\ i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module Alloc_Vec_FromElem
  type t
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    ensures { forall i : (int) . 0 <= i /\ i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve
  type t
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) =
    forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_Impl3
  type t
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module C06KnightsTour_Impl1_New_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_Wf_Interface as Wf0
  val new [@cfg:stackify] (size : usize) : C06KnightsTour_Board_Type.c06knightstour_board_type
    requires {[#"../06_knights_tour.rs" 37 15 37 28] UInt64.to_int size <= 1000}
    ensures { [#"../06_knights_tour.rs" 38 14 38 33] C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size result = size }
    ensures { [#"../06_knights_tour.rs" 39 14 39 25] Wf0.wf result }
    
end
module C06KnightsTour_Impl1_New
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  use seq.Seq
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model0.model, function Model1.model = Model1.model
  use prelude.Borrow
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve1 with type t = usize, function Model0.model = Model1.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = usize, function Model0.model = Model1.model
  clone Alloc_Vec_Impl0_WithCapacity_Interface as WithCapacity0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  function Model0.model = Model0.model
  let rec cfg new [@cfg:stackify] [#"../06_knights_tour.rs" 40 4 40 31] (size : usize) : C06KnightsTour_Board_Type.c06knightstour_board_type
    requires {[#"../06_knights_tour.rs" 37 15 37 28] UInt64.to_int size <= 1000}
    ensures { [#"../06_knights_tour.rs" 38 14 38 33] C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size result = size }
    ensures { [#"../06_knights_tour.rs" 39 14 39 25] Wf0.wf result }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06KnightsTour_Board_Type.c06knightstour_board_type;
  var size_1 : usize;
  var rows_2 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _3 : usize;
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : ();
  var _11 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _12 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _13 : usize;
  var _14 : ();
  var _15 : ();
  var _16 : ();
  var _17 : usize;
  var _18 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  {
    size_1 <- size;
    goto BB0
  }
  BB0 {
    _3 <- size_1;
    rows_2 <- ([#"../06_knights_tour.rs" 41 36 41 60] WithCapacity0.with_capacity _3);
    goto BB1
  }
  BB1 {
    i_4 <- (0 : usize);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant i_size { [#"../06_knights_tour.rs" 44 28 44 37] i_4 <= size_1 };
    invariant rows { [#"../06_knights_tour.rs" 44 8 44 39] forall j : (int) . 0 <= j /\ j < UInt64.to_int i_4 -> Seq.length (Model1.model (Seq.get (Model0.model rows_2) j)) = UInt64.to_int size_1 };
    invariant row_len { [#"../06_knights_tour.rs" 47 29 47 48] Seq.length (Model0.model rows_2) = UInt64.to_int i_4 };
    _8 <- i_4;
    _9 <- size_1;
    _7 <- ([#"../06_knights_tour.rs" 48 14 48 22] _8 < _9);
    switch (_7)
      | False -> goto BB8
      | _ -> goto BB5
      end
  }
  BB5 {
    _11 <- borrow_mut rows_2;
    rows_2 <-  ^ _11;
    _13 <- size_1;
    _12 <- ([#"../06_knights_tour.rs" 49 22 49 50] FromElem0.from_elem (0 : usize) _13);
    goto BB6
  }
  BB6 {
    _10 <- ([#"../06_knights_tour.rs" 49 12 49 51] Push0.push _11 _12);
    goto BB7
  }
  BB7 {
    i_4 <- ([#"../06_knights_tour.rs" 50 12 50 18] i_4 + (1 : usize));
    _6 <- ();
    goto BB4
  }
  BB8 {
    _5 <- ();
    _17 <- size_1;
    assume { Resolve0.resolve _18 };
    _18 <- rows_2;
    rows_2 <- any Alloc_Vec_Vec_Type.alloc_vec_vec_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
    _0 <- C06KnightsTour_Board_Type.C06KnightsTour_Board_Type _17 _18;
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module C06KnightsTour_Impl1_InBounds_Interface
  use C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type
  predicate in_bounds (self : C06KnightsTour_Board_Type.c06knightstour_board_type) (p : C06KnightsTour_Point_Type.c06knightstour_point_type)
    
end
module C06KnightsTour_Impl1_InBounds
  use C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt64
  predicate in_bounds [#"../06_knights_tour.rs" 67 4 67 40] (self : C06KnightsTour_Board_Type.c06knightstour_board_type) (p : C06KnightsTour_Point_Type.c06knightstour_point_type)
    
   =
    [#"../06_knights_tour.rs" 69 12 69 87] 0 <= Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x p) /\ Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x p) < UInt64.to_int (C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size self) /\ 0 <= Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y p) /\ Int64.to_int (C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y p) < UInt64.to_int (C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size self)
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ModelTy0.modelTy)
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate has_value (self : self) (seq : ModelTy0.modelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_Impl0_ModelTy_Type
  type t
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (Model0.model self)}
    ensures { HasValue0.has_value index (Model0.model self) result }
    
end
module Alloc_Vec_Impl16
  type t
  type i
  type a
end
module CreusotContracts_Std1_Slice_Impl3_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
end
module CreusotContracts_Std1_Slice_Impl3
  type t
end
module CreusotContracts_Std1_Slice_Impl3_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl3_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module Core_Slice_Index_Impl2
  type t
end
module CreusotContracts_Std1_Slice_Impl0
  type t
end
module C06KnightsTour_Impl1_Available_Interface
  use prelude.Borrow
  use C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds_Interface as InBounds0
  clone C06KnightsTour_Impl1_Wf_Interface as Wf0
  val available [@cfg:stackify] (self : C06KnightsTour_Board_Type.c06knightstour_board_type) (p : C06KnightsTour_Point_Type.c06knightstour_point_type) : bool
    requires {[#"../06_knights_tour.rs" 56 15 56 24] Wf0.wf self}
    ensures { [#"../06_knights_tour.rs" 57 4 57 44] result -> InBounds0.in_bounds self p }
    
end
module C06KnightsTour_Impl1_Available
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model0.model, function Model1.model = Model1.model
  use prelude.IntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = usize
  clone Core_Slice_Index_Impl2_Output_Type as Output1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone Alloc_Vec_Impl16_Index_Interface as Index1 with type t = usize, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  type Output0.output = Output1.output
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type i = usize, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  let rec cfg available [@cfg:stackify] [#"../06_knights_tour.rs" 58 4 58 41] (self : C06KnightsTour_Board_Type.c06knightstour_board_type) (p : C06KnightsTour_Point_Type.c06knightstour_point_type) : bool
    requires {[#"../06_knights_tour.rs" 56 15 56 24] Wf0.wf self}
    ensures { [#"../06_knights_tour.rs" 57 4 57 44] result -> InBounds0.in_bounds self p }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  var self_1 : C06KnightsTour_Board_Type.c06knightstour_board_type;
  var p_2 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var _3 : bool;
  var _4 : bool;
  var _5 : bool;
  var _6 : bool;
  var _7 : isize;
  var _8 : bool;
  var _9 : usize;
  var _10 : isize;
  var _11 : usize;
  var _12 : bool;
  var _13 : isize;
  var _14 : bool;
  var _15 : usize;
  var _16 : isize;
  var _17 : usize;
  var _18 : bool;
  var _19 : usize;
  var _20 : usize;
  var _21 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _22 : Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _23 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _24 : usize;
  var _25 : isize;
  var _26 : usize;
  var _27 : isize;
  {
    self_1 <- self;
    p_2 <- p;
    goto BB0
  }
  BB0 {
    _7 <- C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x p_2;
    _6 <- ([#"../06_knights_tour.rs" 59 8 59 16] (0 : isize) <= _7);
    switch (_6)
      | False -> goto BB10
      | _ -> goto BB11
      end
  }
  BB1 {
    _0 <- false;
    goto BB3
  }
  BB2 {
    _23 <- C06KnightsTour_Board_Type.c06knightstour_board_type_Board_field self_1;
    _25 <- C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x p_2;
    _24 <- UIntSize.of_int (IntSize.to_int _25);
    _22 <- ([#"../06_knights_tour.rs" 63 15 63 39] Index0.index _23 _24);
    goto BB13
  }
  BB3 {
    return _0
  }
  BB4 {
    _3 <- false;
    goto BB6
  }
  BB5 {
    _16 <- C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y p_2;
    _15 <- UIntSize.of_int (IntSize.to_int _16);
    _17 <- C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size self_1;
    _14 <- ([#"../06_knights_tour.rs" 62 15 62 41] _15 < _17);
    _3 <- _14;
    _14 <- any bool;
    goto BB6
  }
  BB6 {
    switch (_3)
      | False -> goto BB1
      | _ -> goto BB2
      end
  }
  BB7 {
    _4 <- false;
    goto BB9
  }
  BB8 {
    _13 <- C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y p_2;
    _12 <- ([#"../06_knights_tour.rs" 61 15 61 23] (0 : isize) <= _13);
    _4 <- _12;
    _12 <- any bool;
    goto BB9
  }
  BB9 {
    switch (_4)
      | False -> goto BB4
      | _ -> goto BB5
      end
  }
  BB10 {
    _5 <- false;
    goto BB12
  }
  BB11 {
    _10 <- C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x p_2;
    _9 <- UIntSize.of_int (IntSize.to_int _10);
    _11 <- C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size self_1;
    _8 <- ([#"../06_knights_tour.rs" 60 15 60 41] _9 < _11);
    _5 <- _8;
    _8 <- any bool;
    goto BB12
  }
  BB12 {
    switch (_5)
      | False -> goto BB7
      | _ -> goto BB8
      end
  }
  BB13 {
    _21 <- _22;
    _27 <- C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y p_2;
    _26 <- UIntSize.of_int (IntSize.to_int _27);
    _20 <- ([#"../06_knights_tour.rs" 63 15 63 53] Index1.index _21 _26);
    goto BB14
  }
  BB14 {
    _19 <- _20;
    _18 <- ([#"../06_knights_tour.rs" 63 15 63 58] _19 = (0 : usize));
    _0 <- _18;
    _18 <- any bool;
    goto BB3
  }
  
end
module C06KnightsTour_Moves_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use prelude.IntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = (isize, isize),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val moves [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (isize, isize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { [#"../06_knights_tour.rs" 101 10 101 30] Seq.length (Model0.model result) = 8 }
    ensures { [#"../06_knights_tour.rs" 102 0 102 149] forall i : (int) . 0 <= i /\ i < 8 -> - 2 <= Int64.to_int (let (a, _) = Seq.get (Model0.model result) i in a) /\ Int64.to_int (let (a, _) = Seq.get (Model0.model result) i in a) <= 2 /\ - 2 <= Int64.to_int (let (_, a) = Seq.get (Model0.model result) i in a) /\ Int64.to_int (let (_, a) = Seq.get (Model0.model result) i in a) <= 2 }
    
end
module C06KnightsTour_Moves
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use prelude.IntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = (isize, isize),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val moves [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.alloc_vec_vec_type (isize, isize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { [#"../06_knights_tour.rs" 101 10 101 30] Seq.length (Model0.model result) = 8 }
    ensures { [#"../06_knights_tour.rs" 102 0 102 149] forall i : (int) . 0 <= i /\ i < 8 -> - 2 <= Int64.to_int (let (a, _) = Seq.get (Model0.model result) i in a) /\ Int64.to_int (let (a, _) = Seq.get (Model0.model result) i in a) <= 2 /\ - 2 <= Int64.to_int (let (_, a) = Seq.get (Model0.model result) i in a) /\ Int64.to_int (let (_, a) = Seq.get (Model0.model result) i in a) <= 2 }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.alloc_vec_vec_type t a) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve_Interface
  type t1
  type t2
  predicate resolve (self : (t1, t2))
end
module CreusotContracts_Logic_Resolve_Impl0_Resolve
  type t1
  type t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve (self : (t1, t2)) =
    Resolve0.resolve (let (a, _) = self in a) /\ Resolve1.resolve (let (_, a) = self in a)
end
module CreusotContracts_Logic_Resolve_Impl0
  type t1
  type t2
end
module C06KnightsTour_Impl1_CountDegree_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds_Interface as InBounds0
  clone C06KnightsTour_Impl1_Wf_Interface as Wf0
  val count_degree [@cfg:stackify] (self : C06KnightsTour_Board_Type.c06knightstour_board_type) (p : C06KnightsTour_Point_Type.c06knightstour_point_type) : usize
    requires {[#"../06_knights_tour.rs" 74 15 74 24] Wf0.wf self}
    requires {[#"../06_knights_tour.rs" 75 15 75 32] InBounds0.in_bounds self p}
    
end
module C06KnightsTour_Impl1_CountDegree
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model0.model, function Model1.model = Model1.model
  use prelude.IntSize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = isize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = (isize, isize)
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = (isize, isize)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = (isize, isize)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = (isize, isize)
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve1 with type t1 = isize, type t2 = isize,
  predicate Resolve0.resolve = Resolve2.resolve, predicate Resolve1.resolve = Resolve2.resolve
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = (isize, isize),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone C06KnightsTour_Impl1_Available_Interface as Available0 with predicate Wf0.wf = Wf0.wf,
  predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl0_Mov_Interface as Mov0
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = (isize, isize), type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve0 with type t = (isize, isize),
  function Model0.model = Model2.model, predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = (isize, isize),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model2.model
  clone C06KnightsTour_Moves_Interface as Moves0 with function Model0.model = Model2.model
  let rec cfg count_degree [@cfg:stackify] [#"../06_knights_tour.rs" 76 4 76 45] (self : C06KnightsTour_Board_Type.c06knightstour_board_type) (p : C06KnightsTour_Point_Type.c06knightstour_point_type) : usize
    requires {[#"../06_knights_tour.rs" 74 15 74 24] Wf0.wf self}
    requires {[#"../06_knights_tour.rs" 75 15 75 32] InBounds0.in_bounds self p}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var self_1 : C06KnightsTour_Board_Type.c06knightstour_board_type;
  var p_2 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var count_3 : usize;
  var i_4 : usize;
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  var _10 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (isize, isize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _11 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (isize, isize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var next_12 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var _13 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var _14 : (isize, isize);
  var _15 : (isize, isize);
  var _16 : (isize, isize);
  var _17 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (isize, isize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _18 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (isize, isize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _19 : usize;
  var _20 : ();
  var _21 : bool;
  var _22 : C06KnightsTour_Board_Type.c06knightstour_board_type;
  var _23 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    self_1 <- self;
    p_2 <- p;
    goto BB0
  }
  BB0 {
    count_3 <- (0 : usize);
    i_4 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant count { [#"../06_knights_tour.rs" 80 27 80 37] count_3 <= i_4 };
    _8 <- i_4;
    _11 <- ([#"../06_knights_tour.rs" 81 18 81 25] Moves0.moves ());
    goto BB2
  }
  BB2 {
    _10 <- _11;
    _9 <- ([#"../06_knights_tour.rs" 81 18 81 31] Len0.len _10);
    goto BB3
  }
  BB3 {
    _7 <- ([#"../06_knights_tour.rs" 81 14 81 31] _8 < _9);
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve _11 };
    switch (_7)
      | False -> goto BB14
      | _ -> goto BB5
      end
  }
  BB5 {
    _13 <- p_2;
    _18 <- ([#"../06_knights_tour.rs" 82 30 82 37] Moves0.moves ());
    goto BB6
  }
  BB6 {
    _17 <- _18;
    _19 <- i_4;
    _16 <- ([#"../06_knights_tour.rs" 82 30 82 40] Index0.index _17 _19);
    goto BB7
  }
  BB7 {
    _15 <- _16;
    _14 <- _15;
    next_12 <- ([#"../06_knights_tour.rs" 82 23 82 41] Mov0.mov _13 _14);
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    assume { Resolve0.resolve _18 };
    _22 <- self_1;
    _23 <- next_12;
    _21 <- ([#"../06_knights_tour.rs" 83 15 83 35] Available0.available _22 _23);
    goto BB10
  }
  BB10 {
    switch (_21)
      | False -> goto BB12
      | _ -> goto BB11
      end
  }
  BB11 {
    count_3 <- ([#"../06_knights_tour.rs" 84 16 84 26] count_3 + (1 : usize));
    _20 <- ();
    goto BB13
  }
  BB12 {
    _20 <- ();
    goto BB13
  }
  BB13 {
    i_4 <- ([#"../06_knights_tour.rs" 86 12 86 18] i_4 + (1 : usize));
    _6 <- ();
    goto BB1
  }
  BB14 {
    _5 <- ();
    _0 <- count_3;
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere
  type self
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  predicate resolve_elswhere (self : self) (old' : ModelTy0.modelTy) (fin : ModelTy0.modelTy)
end
module Alloc_Vec_Impl17_IndexMut_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module Alloc_Vec_Impl17_IndexMut
  type t
  type i
  type a
  use prelude.Borrow
  use seq.Seq
  use prelude.Slice
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_ResolveElswhere_Interface as ResolveElswhere0 with type self = i,
  type t = seq t, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndexSpec_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val index_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type t a)) (index : i) : borrowed Output0.output
    requires {InBounds0.in_bounds index (Model0.model ( * self))}
    ensures { HasValue0.has_value index (Model0.model ( * self)) ( * result) }
    ensures { HasValue0.has_value index (Model0.model ( ^ self)) ( ^ result) }
    ensures { ResolveElswhere0.resolve_elswhere index (Model0.model ( * self)) (Model0.model ( ^ self)) }
    ensures { Seq.length (Model0.model ( ^ self)) = Seq.length (Model0.model ( * self)) }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module Alloc_Vec_Impl17
  type t
  type i
  type a
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl3_ResolveElswhere
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.Int32
  use mach.int.UInt64
  predicate resolve_elswhere [@inline:trivial] (self : usize) (old' : Seq.seq t) (fin : Seq.seq t) =
    forall i : (int) . 0 <= i /\ i <> UInt64.to_int self /\ i < Seq.length old' -> Seq.get old' i = Seq.get fin i
end
module C06KnightsTour_Impl1_Set_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds_Interface as InBounds0
  clone C06KnightsTour_Impl1_Wf_Interface as Wf0
  val set [@cfg:stackify] (self : borrowed (C06KnightsTour_Board_Type.c06knightstour_board_type)) (p : C06KnightsTour_Point_Type.c06knightstour_point_type) (v : usize) : ()
    requires {[#"../06_knights_tour.rs" 91 15 91 24] Wf0.wf ( * self)}
    requires {[#"../06_knights_tour.rs" 92 15 92 32] InBounds0.in_bounds ( * self) p}
    ensures { [#"../06_knights_tour.rs" 93 14 93 26] Wf0.wf ( ^ self) }
    ensures { [#"../06_knights_tour.rs" 94 14 94 42] C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size ( ^ self) = C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size ( * self) }
    
end
module C06KnightsTour_Impl1_Set
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use C06KnightsTour_Point_Type
  use C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model0.model, function Model1.model = Model1.model
  use prelude.IntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = usize
  clone Core_Slice_Index_Impl2_Output_Type as Output1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue1 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds2 with type t = usize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone CreusotContracts_Std1_Slice_Impl3_ResolveElswhere as ResolveElswhere0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = usize
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut1 with type t = usize, type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds2.in_bounds, predicate HasValue0.has_value = HasValue1.has_value,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere1.resolve_elswhere, type Output0.output = Output1.output
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
  clone Alloc_Vec_Impl17_IndexMut_Interface as IndexMut0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type i = usize, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  predicate ResolveElswhere0.resolve_elswhere = ResolveElswhere0.resolve_elswhere, type Output0.output = Output0.output
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = C06KnightsTour_Board_Type.c06knightstour_board_type
  let rec cfg set [@cfg:stackify] [#"../06_knights_tour.rs" 95 4 95 41] (self : borrowed (C06KnightsTour_Board_Type.c06knightstour_board_type)) (p : C06KnightsTour_Point_Type.c06knightstour_point_type) (v : usize) : ()
    requires {[#"../06_knights_tour.rs" 91 15 91 24] Wf0.wf ( * self)}
    requires {[#"../06_knights_tour.rs" 92 15 92 32] InBounds0.in_bounds ( * self) p}
    ensures { [#"../06_knights_tour.rs" 93 14 93 26] Wf0.wf ( ^ self) }
    ensures { [#"../06_knights_tour.rs" 94 14 94 42] C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size ( ^ self) = C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var self_1 : borrowed (C06KnightsTour_Board_Type.c06knightstour_board_type);
  var p_2 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var v_3 : usize;
  var _4 : usize;
  var _5 : borrowed usize;
  var _6 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _7 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _8 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type (Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _9 : usize;
  var _10 : isize;
  var _11 : usize;
  var _12 : isize;
  {
    self_1 <- self;
    p_2 <- p;
    v_3 <- v;
    goto BB0
  }
  BB0 {
    _4 <- v_3;
    _8 <- borrow_mut (C06KnightsTour_Board_Type.c06knightstour_board_type_Board_field ( * self_1));
    self_1 <- { self_1 with current = (let C06KnightsTour_Board_Type.C06KnightsTour_Board_Type a b =  * self_1 in C06KnightsTour_Board_Type.C06KnightsTour_Board_Type a ( ^ _8)) };
    assume { Resolve0.resolve self_1 };
    _10 <- C06KnightsTour_Point_Type.c06knightstour_point_type_Point_x p_2;
    _9 <- UIntSize.of_int (IntSize.to_int _10);
    _7 <- ([#"../06_knights_tour.rs" 96 8 96 32] IndexMut0.index_mut _8 _9);
    goto BB1
  }
  BB1 {
    _6 <- borrow_mut ( * _7);
    _7 <- { _7 with current = ( ^ _6) };
    assume { Resolve1.resolve _7 };
    _12 <- C06KnightsTour_Point_Type.c06knightstour_point_type_Point_y p_2;
    _11 <- UIntSize.of_int (IntSize.to_int _12);
    _5 <- ([#"../06_knights_tour.rs" 96 8 96 46] IndexMut1.index_mut _6 _11);
    goto BB2
  }
  BB2 {
    _5 <- { _5 with current = _4 };
    _4 <- any usize;
    assume { Resolve2.resolve _5 };
    _0 <- ();
    return _0
  }
  
end
module Core_Option_Option_Type
  type core_option_option_type 't =
    | Core_Option_Option_None_Type
    | Core_Option_Option_Some_Type 't
    
  let function core_option_option_type_Some_0 (self : core_option_option_type 't) : 't
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Core_Option_Option_None_Type -> any 't
      | Core_Option_Option_Some_Type a -> a
      end
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy =
    Model0.model self
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy_Type
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Logic_Model_Impl0
  type t
end
module C06KnightsTour_Min_Interface
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.Int32
  use seq.Seq
  use Alloc_Alloc_Global_Type
  use C06KnightsTour_Point_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = (usize, C06KnightsTour_Point_Type.c06knightstour_point_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy0.modelTy
  use Core_Option_Option_Type
  val min [@cfg:stackify] (v : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : Core_Option_Option_Type.core_option_option_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type)
    ensures { [#"../06_knights_tour.rs" 117 0 118 67] forall r : ((usize, C06KnightsTour_Point_Type.c06knightstour_point_type)) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type r -> (exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model v) /\ Seq.get (Model0.model v) i = r) }
    
end
module C06KnightsTour_Min
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.Int32
  use seq.Seq
  use Alloc_Alloc_Global_Type
  use C06KnightsTour_Point_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = (usize, C06KnightsTour_Point_Type.c06knightstour_point_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = (usize, C06KnightsTour_Point_Type.c06knightstour_point_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  use Core_Option_Option_Type
  use prelude.IntSize
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy1 with type t = (usize, C06KnightsTour_Point_Type.c06knightstour_point_type)
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = (usize, C06KnightsTour_Point_Type.c06knightstour_point_type)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = (usize, C06KnightsTour_Point_Type.c06knightstour_point_type)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds0 with type t = (usize, C06KnightsTour_Point_Type.c06knightstour_point_type)
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = (usize, C06KnightsTour_Point_Type.c06knightstour_point_type),
  type i = usize, type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model1.model,
  predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = (usize, C06KnightsTour_Point_Type.c06knightstour_point_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model1.model
  let rec cfg min [@cfg:stackify] [#"../06_knights_tour.rs" 119 0 119 58] (v : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type)) : Core_Option_Option_Type.core_option_option_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type)
    ensures { [#"../06_knights_tour.rs" 117 0 118 67] forall r : ((usize, C06KnightsTour_Point_Type.c06knightstour_point_type)) . result = Core_Option_Option_Type.Core_Option_Option_Some_Type r -> (exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model v) /\ Seq.get (Model0.model v) i = r) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.core_option_option_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
  var v_1 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var i_2 : usize;
  var min_3 : Core_Option_Option_Type.core_option_option_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : usize;
  var _9 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _10 : ();
  var _11 : isize;
  var _12 : Core_Option_Option_Type.core_option_option_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
  var _13 : (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
  var _14 : (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
  var _15 : (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
  var _16 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _17 : usize;
  var m_18 : (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
  var _19 : bool;
  var _20 : usize;
  var _21 : (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
  var _22 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _23 : usize;
  var _24 : usize;
  var _25 : Core_Option_Option_Type.core_option_option_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
  var _26 : (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
  var _27 : (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
  var _28 : (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
  var _29 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _30 : usize;
  var _31 : ();
  var _32 : ();
  var _33 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    min_3 <- Core_Option_Option_Type.Core_Option_Option_None_Type;
    goto BB1
  }
  BB1 {
    invariant post { [#"../06_knights_tour.rs" 122 4 123 79] forall r : ((usize, C06KnightsTour_Point_Type.c06knightstour_point_type)) . min_3 = Core_Option_Option_Type.Core_Option_Option_Some_Type r -> (exists i : (int) . 0 <= i /\ i < Seq.length (Model0.model v_1) /\ Seq.get (Model0.model v_1) i = r) };
    _7 <- i_2;
    _9 <- v_1;
    _8 <- ([#"../06_knights_tour.rs" 124 14 124 21] Len0.len _9);
    goto BB2
  }
  BB2 {
    _6 <- ([#"../06_knights_tour.rs" 124 10 124 21] _7 < _8);
    switch (_6)
      | False -> goto BB14
      | _ -> goto BB3
      end
  }
  BB3 {
    switch (min_3)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB6
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB4
      end
  }
  BB4 {
    m_18 <- Core_Option_Option_Type.core_option_option_type_Some_0 min_3;
    _22 <- v_1;
    _23 <- i_2;
    _21 <- ([#"../06_knights_tour.rs" 128 19 128 23] Index0.index _22 _23);
    goto BB8
  }
  BB5 {
    absurd
  }
  BB6 {
    _16 <- v_1;
    _17 <- i_2;
    _15 <- ([#"../06_knights_tour.rs" 126 32 126 36] Index0.index _16 _17);
    goto BB7
  }
  BB7 {
    _14 <- _15;
    _13 <- _14;
    _12 <- Core_Option_Option_Type.Core_Option_Option_Some_Type _13;
    min_3 <- _12;
    _12 <- any Core_Option_Option_Type.core_option_option_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
    _10 <- ();
    goto BB13
  }
  BB8 {
    _20 <- (let (a, _) = _21 in a);
    _24 <- (let (a, _) = m_18 in a);
    _19 <- ([#"../06_knights_tour.rs" 128 19 128 31] _20 < _24);
    switch (_19)
      | False -> goto BB11
      | _ -> goto BB9
      end
  }
  BB9 {
    _29 <- v_1;
    _30 <- i_2;
    _28 <- ([#"../06_knights_tour.rs" 129 32 129 36] Index0.index _29 _30);
    goto BB10
  }
  BB10 {
    _27 <- _28;
    _26 <- _27;
    _25 <- Core_Option_Option_Type.Core_Option_Option_Some_Type _26;
    min_3 <- _25;
    _25 <- any Core_Option_Option_Type.core_option_option_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
    _10 <- ();
    goto BB12
  }
  BB11 {
    _10 <- ();
    goto BB12
  }
  BB12 {
    goto BB13
  }
  BB13 {
    i_2 <- ([#"../06_knights_tour.rs" 133 8 133 14] i_2 + (1 : usize));
    _5 <- ();
    goto BB1
  }
  BB14 {
    _4 <- ();
    _0 <- min_3;
    return _0
  }
  
end
module C06KnightsTour_DumbNonlinearArith_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  function dumb_nonlinear_arith (a : usize) : ()
end
module C06KnightsTour_DumbNonlinearArith
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  function dumb_nonlinear_arith [#"../06_knights_tour.rs" 141 0 141 33] (a : usize) : () =
    [#"../06_knights_tour.rs" 138 0 138 8] ()
  axiom dumb_nonlinear_arith_spec : forall a : usize . ([#"../06_knights_tour.rs" 139 11 139 22] UInt64.to_int a <= 1000) -> ([#"../06_knights_tour.rs" 140 10 140 30] UInt64.to_int a * UInt64.to_int a <= 1000000)
end
module C06KnightsTour_DumbNonlinearArith_Impl
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.UIntSize
  let rec ghost function dumb_nonlinear_arith (a : usize) : ()
    requires {[#"../06_knights_tour.rs" 139 11 139 22] UInt64.to_int a <= 1000}
    ensures { [#"../06_knights_tour.rs" 140 10 140 30] UInt64.to_int a * UInt64.to_int a <= 1000000 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_knights_tour.rs" 138 0 138 8] ()
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val new [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  val new [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.alloc_vec_vec_type t (Alloc_Alloc_Global_Type.alloc_alloc_global_type)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module C06KnightsTour_KnightsTour_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.UIntSize
  use C06KnightsTour_Board_Type
  use Core_Option_Option_Type
  val knights_tour [@cfg:stackify] (size : usize) (x : usize) (y : usize) : Core_Option_Option_Type.core_option_option_type (C06KnightsTour_Board_Type.c06knightstour_board_type)
    requires {[#"../06_knights_tour.rs" 143 11 143 37] 0 < UInt64.to_int size /\ UInt64.to_int size <= 1000}
    requires {[#"../06_knights_tour.rs" 144 11 144 19] x < size}
    requires {[#"../06_knights_tour.rs" 145 11 145 19] y < size}
    
end
module C06KnightsTour_KnightsTour
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.UIntSize
  use seq.Seq
  use Alloc_Alloc_Global_Type
  use C06KnightsTour_Point_Type
  use Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type usize (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = (usize, C06KnightsTour_Point_Type.c06knightstour_point_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  use C06KnightsTour_Board_Type
  clone C06KnightsTour_Impl1_InBounds as InBounds0
  clone C06KnightsTour_Impl1_Wf as Wf0 with function Model0.model = Model1.model, function Model1.model = Model2.model
  clone C06KnightsTour_DumbNonlinearArith as DumbNonlinearArith0 with axiom .
  use Core_Option_Option_Type
  use prelude.IntSize
  use prelude.Borrow
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve6 with type t = C06KnightsTour_Point_Type.c06knightstour_point_type
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = isize
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve3 with type t1 = usize,
  type t2 = C06KnightsTour_Point_Type.c06knightstour_point_type, predicate Resolve0.resolve = Resolve5.resolve,
  predicate Resolve1.resolve = Resolve6.resolve
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy1 with type t = (usize, C06KnightsTour_Point_Type.c06knightstour_point_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Slice_Impl0_ModelTy_Type as ModelTy0 with type t = (isize, isize)
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = (isize, isize)
  clone CreusotContracts_Std1_Slice_Impl3_HasValue as HasValue0 with type t = (isize, isize)
  clone CreusotContracts_Std1_Slice_Impl3_InBounds as InBounds1 with type t = (isize, isize)
  clone CreusotContracts_Logic_Resolve_Impl0_Resolve as Resolve2 with type t1 = isize, type t2 = isize,
  predicate Resolve0.resolve = Resolve4.resolve, predicate Resolve1.resolve = Resolve4.resolve
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = (isize, isize),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, axiom .
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve1 with type t = (usize, C06KnightsTour_Point_Type.c06knightstour_point_type),
  function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve3.resolve
  clone C06KnightsTour_Min_Interface as Min0 with function Model0.model = Model4.model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = (usize, C06KnightsTour_Point_Type.c06knightstour_point_type),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model0.model
  clone C06KnightsTour_Impl1_CountDegree_Interface as CountDegree0 with predicate Wf0.wf = Wf0.wf,
  predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl1_Available_Interface as Available0 with predicate Wf0.wf = Wf0.wf,
  predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl0_Mov_Interface as Mov0
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = (isize, isize), type i = usize,
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model3.model,
  predicate InBounds0.in_bounds = InBounds1.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
  type Output0.output = Output0.output
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve0 with type t = (isize, isize),
  function Model0.model = Model3.model, predicate Resolve0.resolve = Resolve2.resolve
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = (isize, isize),
  type a = Alloc_Alloc_Global_Type.alloc_alloc_global_type, function Model0.model = Model3.model
  clone C06KnightsTour_Moves_Interface as Moves0 with function Model0.model = Model3.model
  clone Alloc_Vec_Impl0_New_Interface as New1 with type t = (usize, C06KnightsTour_Point_Type.c06knightstour_point_type),
  function Model0.model = Model0.model
  clone C06KnightsTour_Impl1_Set_Interface as Set0 with predicate Wf0.wf = Wf0.wf,
  predicate InBounds0.in_bounds = InBounds0.in_bounds
  clone C06KnightsTour_Impl1_New_Interface as New0 with predicate Wf0.wf = Wf0.wf
  let rec cfg knights_tour [@cfg:stackify] [#"../06_knights_tour.rs" 146 0 146 69] (size : usize) (x : usize) (y : usize) : Core_Option_Option_Type.core_option_option_type (C06KnightsTour_Board_Type.c06knightstour_board_type)
    requires {[#"../06_knights_tour.rs" 143 11 143 37] 0 < UInt64.to_int size /\ UInt64.to_int size <= 1000}
    requires {[#"../06_knights_tour.rs" 144 11 144 19] x < size}
    requires {[#"../06_knights_tour.rs" 145 11 145 19] y < size}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.core_option_option_type (C06KnightsTour_Board_Type.c06knightstour_board_type);
  var size_1 : usize;
  var x_2 : usize;
  var y_3 : usize;
  var board_4 : C06KnightsTour_Board_Type.c06knightstour_board_type;
  var _5 : usize;
  var p_6 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var _7 : isize;
  var _8 : usize;
  var _9 : isize;
  var _10 : usize;
  var step_11 : usize;
  var _12 : ();
  var _13 : borrowed (C06KnightsTour_Board_Type.c06knightstour_board_type);
  var _14 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var _15 : usize;
  ghost var _16 : ();
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var _20 : bool;
  var _21 : usize;
  var _22 : usize;
  var _23 : usize;
  var _24 : usize;
  var candidates_25 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var i_26 : usize;
  var _27 : ();
  var _28 : bool;
  var _29 : usize;
  var _30 : usize;
  var _31 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (isize, isize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _32 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (isize, isize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var adj_33 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var _34 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var _35 : (isize, isize);
  var _36 : (isize, isize);
  var _37 : (isize, isize);
  var _38 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (isize, isize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _39 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (isize, isize) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _40 : usize;
  var _41 : ();
  var _42 : bool;
  var _43 : C06KnightsTour_Board_Type.c06knightstour_board_type;
  var _44 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var degree_45 : usize;
  var _46 : C06KnightsTour_Board_Type.c06knightstour_board_type;
  var _47 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var _48 : ();
  var _49 : borrowed (Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type));
  var _50 : (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
  var _51 : usize;
  var _52 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var _53 : ();
  var _54 : ();
  var _55 : ();
  var _56 : ();
  var _57 : Core_Option_Option_Type.core_option_option_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type);
  var _58 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _59 : Alloc_Vec_Vec_Type.alloc_vec_vec_type (usize, C06KnightsTour_Point_Type.c06knightstour_point_type) (Alloc_Alloc_Global_Type.alloc_alloc_global_type);
  var _60 : isize;
  var adj_61 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var _62 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var _63 : ();
  var _64 : ();
  var _65 : borrowed (C06KnightsTour_Board_Type.c06knightstour_board_type);
  var _66 : C06KnightsTour_Point_Type.c06knightstour_point_type;
  var _67 : usize;
  var _68 : ();
  var _69 : ();
  var _70 : ();
  var _71 : C06KnightsTour_Board_Type.c06knightstour_board_type;
  {
    size_1 <- size;
    x_2 <- x;
    y_3 <- y;
    goto BB0
  }
  BB0 {
    _5 <- size_1;
    board_4 <- ([#"../06_knights_tour.rs" 147 20 147 36] New0.new _5);
    goto BB1
  }
  BB1 {
    _8 <- x_2;
    _7 <- IntSize.of_int (UIntSize.to_int _8);
    _10 <- y_3;
    _9 <- IntSize.of_int (UIntSize.to_int _10);
    p_6 <- C06KnightsTour_Point_Type.C06KnightsTour_Point_Type _7 _9;
    step_11 <- (1 : usize);
    _13 <- borrow_mut board_4;
    board_4 <-  ^ _13;
    _14 <- p_6;
    _15 <- step_11;
    _12 <- ([#"../06_knights_tour.rs" 151 4 151 22] Set0.set _13 _14 _15);
    goto BB2
  }
  BB2 {
    step_11 <- ([#"../06_knights_tour.rs" 152 4 152 13] step_11 + (1 : usize));
    _17 <- ();
    _16 <- ghost ([#"../06_knights_tour.rs" 154 4 154 41] DumbNonlinearArith0.dumb_nonlinear_arith size_1);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant b { [#"../06_knights_tour.rs" 155 19 155 37] C06KnightsTour_Board_Type.c06knightstour_board_type_Board_size board_4 = size_1 };
    invariant b { [#"../06_knights_tour.rs" 156 19 156 29] Wf0.wf board_4 };
    invariant p { [#"../06_knights_tour.rs" 157 19 157 37] InBounds0.in_bounds board_4 p_6 };
    _21 <- step_11;
    _23 <- size_1;
    _24 <- size_1;
    _22 <- ([#"../06_knights_tour.rs" 160 18 160 31] _23 * _24);
    _20 <- ([#"../06_knights_tour.rs" 160 10 160 31] _21 <= _22);
    switch (_20)
      | False -> goto BB32
      | _ -> goto BB7
      end
  }
  BB7 {
    candidates_25 <- ([#"../06_knights_tour.rs" 162 50 162 60] New1.new ());
    goto BB8
  }
  BB8 {
    i_26 <- (0 : usize);
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    invariant c { [#"../06_knights_tour.rs" 164 8 165 57] forall i : (int) . 0 <= i /\ i < Seq.length (Model0.model candidates_25) -> InBounds0.in_bounds board_4 (let (_, a) = Seq.get (Model0.model candidates_25) i in a) };
    _29 <- i_26;
    _32 <- ([#"../06_knights_tour.rs" 166 18 166 25] Moves0.moves ());
    goto BB11
  }
  BB11 {
    _31 <- _32;
    _30 <- ([#"../06_knights_tour.rs" 166 18 166 31] Len0.len _31);
    goto BB12
  }
  BB12 {
    _28 <- ([#"../06_knights_tour.rs" 166 14 166 31] _29 < _30);
    goto BB13
  }
  BB13 {
    assume { Resolve0.resolve _32 };
    switch (_28)
      | False -> goto BB25
      | _ -> goto BB14
      end
  }
  BB14 {
    _34 <- p_6;
    _39 <- ([#"../06_knights_tour.rs" 167 29 167 36] Moves0.moves ());
    goto BB15
  }
  BB15 {
    _38 <- _39;
    _40 <- i_26;
    _37 <- ([#"../06_knights_tour.rs" 167 29 167 39] Index0.index _38 _40);
    goto BB16
  }
  BB16 {
    _36 <- _37;
    _35 <- _36;
    adj_33 <- ([#"../06_knights_tour.rs" 167 22 167 40] Mov0.mov _34 _35);
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    assume { Resolve0.resolve _39 };
    _43 <- board_4;
    _44 <- adj_33;
    _42 <- ([#"../06_knights_tour.rs" 168 15 168 35] Available0.available _43 _44);
    goto BB19
  }
  BB19 {
    switch (_42)
      | False -> goto BB23
      | _ -> goto BB20
      end
  }
  BB20 {
    _46 <- board_4;
    _47 <- adj_33;
    degree_45 <- ([#"../06_knights_tour.rs" 169 29 169 52] CountDegree0.count_degree _46 _47);
    goto BB21
  }
  BB21 {
    _49 <- borrow_mut candidates_25;
    candidates_25 <-  ^ _49;
    _51 <- degree_45;
    _52 <- adj_33;
    _50 <- (_51, _52);
    _48 <- ([#"../06_knights_tour.rs" 170 16 170 46] Push0.push _49 _50);
    goto BB22
  }
  BB22 {
    _41 <- ();
    goto BB24
  }
  BB23 {
    _41 <- ();
    goto BB24
  }
  BB24 {
    i_26 <- ([#"../06_knights_tour.rs" 172 12 172 18] i_26 + (1 : usize));
    _19 <- ();
    goto BB10
  }
  BB25 {
    _27 <- ();
    _59 <- candidates_25;
    _58 <- _59;
    _57 <- ([#"../06_knights_tour.rs" 174 14 174 30] Min0.min _58);
    goto BB26
  }
  BB26 {
    switch (_57)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB27
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB29
      end
  }
  BB27 {
    _0 <- Core_Option_Option_Type.Core_Option_Option_None_Type;
    goto BB35
  }
  BB28 {
    assume { Resolve1.resolve candidates_25 };
    absurd
  }
  BB29 {
    adj_61 <- (let (_, a) = Core_Option_Option_Type.core_option_option_type_Some_0 _57 in a);
    _62 <- adj_61;
    p_6 <- _62;
    _62 <- any C06KnightsTour_Point_Type.c06knightstour_point_type;
    _56 <- ();
    _65 <- borrow_mut board_4;
    board_4 <-  ^ _65;
    _66 <- p_6;
    _67 <- step_11;
    _64 <- ([#"../06_knights_tour.rs" 178 8 178 26] Set0.set _65 _66 _67);
    goto BB30
  }
  BB30 {
    step_11 <- ([#"../06_knights_tour.rs" 179 8 179 17] step_11 + (1 : usize));
    _19 <- ();
    goto BB31
  }
  BB31 {
    assume { Resolve1.resolve candidates_25 };
    goto BB6
  }
  BB32 {
    _18 <- ();
    _71 <- board_4;
    board_4 <- any C06KnightsTour_Board_Type.c06knightstour_board_type;
    _0 <- Core_Option_Option_Type.Core_Option_Option_Some_Type _71;
    goto BB33
  }
  BB33 {
    goto BB34
  }
  BB34 {
    goto BB37
  }
  BB35 {
    assume { Resolve1.resolve candidates_25 };
    goto BB36
  }
  BB36 {
    goto BB37
  }
  BB37 {
    return _0
  }
  
end
module C06KnightsTour_Impl2
  
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Borrow
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Borrow
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Borrow
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module C06KnightsTour_Impl3
  use C06KnightsTour_Point_Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = C06KnightsTour_Point_Type.c06knightstour_point_type
  clone C06KnightsTour_Impl3_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = C06KnightsTour_Point_Type.c06knightstour_point_type,
  val clone' = Clone0.clone'
end
