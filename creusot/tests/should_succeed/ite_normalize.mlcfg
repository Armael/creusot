module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type itenormalize_expr  =
    | IteNormalize_Expr_IfThenElse (itenormalize_expr) (itenormalize_expr) (itenormalize_expr)
    | IteNormalize_Expr_Var usize
    | IteNormalize_Expr_True
    | IteNormalize_Expr_False
    
  let function itenormalize_expr_Var_v (self : itenormalize_expr) : usize =
    match (self) with
      | IteNormalize_Expr_IfThenElse _ _ _ -> any usize
      | IteNormalize_Expr_Var a -> a
      | IteNormalize_Expr_True -> any usize
      | IteNormalize_Expr_False -> any usize
      end
  let function itenormalize_expr_IfThenElse_c (self : itenormalize_expr) : itenormalize_expr =
    match (self) with
      | IteNormalize_Expr_IfThenElse a _ _ -> a
      | IteNormalize_Expr_Var _ -> any itenormalize_expr
      | IteNormalize_Expr_True -> any itenormalize_expr
      | IteNormalize_Expr_False -> any itenormalize_expr
      end
  let function itenormalize_expr_IfThenElse_t (self : itenormalize_expr) : itenormalize_expr =
    match (self) with
      | IteNormalize_Expr_IfThenElse _ a _ -> a
      | IteNormalize_Expr_Var _ -> any itenormalize_expr
      | IteNormalize_Expr_True -> any itenormalize_expr
      | IteNormalize_Expr_False -> any itenormalize_expr
      end
  let function itenormalize_expr_IfThenElse_e (self : itenormalize_expr) : itenormalize_expr =
    match (self) with
      | IteNormalize_Expr_IfThenElse _ _ a -> a
      | IteNormalize_Expr_Var _ -> any itenormalize_expr
      | IteNormalize_Expr_True -> any itenormalize_expr
      | IteNormalize_Expr_False -> any itenormalize_expr
      end
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
end
module IteNormalize_Impl3_Variable_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  val variable [@cfg:stackify] (v : usize) : Type.itenormalize_expr
end
module IteNormalize_Impl3_Variable
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  let rec cfg variable [@cfg:stackify] [#"../ite_normalize.rs" 62 4 37] (v : usize) : Type.itenormalize_expr =
  var _0 : Type.itenormalize_expr;
  var v_1 : usize;
  var _2 : usize;
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    _2 <- v_1;
    _0 <- Type.IteNormalize_Expr_Var _2;
    return _0
  }
  
end
module IteNormalize_Impl1_From_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  val from [@cfg:stackify] (a : usize) : Type.itenormalize_expr
end
module IteNormalize_Impl1_From
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone IteNormalize_Impl3_Variable_Interface as Variable0
  let rec cfg from [@cfg:stackify] [#"../ite_normalize.rs" 41 4 29] (a : usize) : Type.itenormalize_expr =
  var _0 : Type.itenormalize_expr;
  var a_1 : usize;
  var _2 : usize;
  {
    a_1 <- a;
    goto BB0
  }
  BB0 {
    _2 <- a_1;
    _0 <- ([#"../ite_normalize.rs" 42 8 25] Variable0.variable _2);
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module IteNormalize_Impl2_From_Interface
  use Type
  val from [@cfg:stackify] (b : bool) : Type.itenormalize_expr
end
module IteNormalize_Impl2_From
  use Type
  let rec cfg from [@cfg:stackify] [#"../ite_normalize.rs" 47 4 28] (b : bool) : Type.itenormalize_expr =
  var _0 : Type.itenormalize_expr;
  var b_1 : bool;
  var _2 : bool;
  {
    b_1 <- b;
    goto BB0
  }
  BB0 {
    _2 <- b_1;
    switch (_2)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    _0 <- Type.IteNormalize_Expr_True;
    goto BB3
  }
  BB2 {
    _0 <- Type.IteNormalize_Expr_False;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Alloc_Boxed_Impl12_Clone_Interface
  type t
  type a
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : t) : t
    ensures { result = self }
    
end
module Alloc_Boxed_Impl12_Clone
  type t
  type a
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : t) : t
    ensures { result = self }
    
end
module Alloc_Boxed_Impl12
  type t
  type a
end
module IteNormalize_Impl0_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.itenormalize_expr) : Type.itenormalize_expr
    ensures { [#"../ite_normalize.rs" 27 4 31] self = result }
    
end
module IteNormalize_Impl0_Clone
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.UInt64
  clone Alloc_Boxed_Impl12_Clone_Interface as Clone0 with type t = Type.itenormalize_expr,
  type a = Type.alloc_alloc_global
  let rec cfg clone' [@cfg:stackify] [#"../ite_normalize.rs" 28 4 27] (self : Type.itenormalize_expr) : Type.itenormalize_expr
    ensures { [#"../ite_normalize.rs" 27 4 31] self = result }
    
   =
  var _0 : Type.itenormalize_expr;
  var self_1 : Type.itenormalize_expr;
  var _2 : isize;
  var c_3 : Type.itenormalize_expr;
  var t_4 : Type.itenormalize_expr;
  var e_5 : Type.itenormalize_expr;
  var _6 : Type.itenormalize_expr;
  var _7 : Type.itenormalize_expr;
  var _8 : Type.itenormalize_expr;
  var _9 : Type.itenormalize_expr;
  var _10 : Type.itenormalize_expr;
  var _11 : Type.itenormalize_expr;
  var v_12 : usize;
  var _13 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Type.IteNormalize_Expr_IfThenElse _ _ _ -> goto BB3
      | Type.IteNormalize_Expr_Var _ -> goto BB10
      | Type.IteNormalize_Expr_True -> goto BB11
      | Type.IteNormalize_Expr_False -> goto BB1
      end
  }
  BB1 {
    _0 <- Type.IteNormalize_Expr_False;
    goto BB12
  }
  BB2 {
    absurd
  }
  BB3 {
    c_3 <- Type.itenormalize_expr_IfThenElse_c self_1;
    t_4 <- Type.itenormalize_expr_IfThenElse_t self_1;
    e_5 <- Type.itenormalize_expr_IfThenElse_e self_1;
    _7 <- c_3;
    _6 <- ([#"../ite_normalize.rs" 31 38 47] Clone0.clone' _7);
    goto BB4
  }
  BB4 {
    _9 <- t_4;
    _8 <- ([#"../ite_normalize.rs" 31 52 61] Clone0.clone' _9);
    goto BB5
  }
  BB5 {
    _11 <- e_5;
    _10 <- ([#"../ite_normalize.rs" 31 66 75] Clone0.clone' _11);
    goto BB6
  }
  BB6 {
    _0 <- Type.IteNormalize_Expr_IfThenElse _6 _8 _10;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB12
  }
  BB10 {
    v_12 <- Type.itenormalize_expr_Var_v self_1;
    _13 <- v_12;
    _0 <- Type.IteNormalize_Expr_Var _13;
    goto BB12
  }
  BB11 {
    _0 <- Type.IteNormalize_Expr_True;
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
module IteNormalize_Impl3_Ite_Interface
  use Type
  val ite [@cfg:stackify] (c : Type.itenormalize_expr) (t : Type.itenormalize_expr) (e : Type.itenormalize_expr) : Type.itenormalize_expr
    ensures { [#"../ite_normalize.rs" 57 4 93] result = Type.IteNormalize_Expr_IfThenElse c t e }
    
end
module IteNormalize_Impl3_Ite
  use Type
  let rec cfg ite [@cfg:stackify] [#"../ite_normalize.rs" 58 4 49] (c : Type.itenormalize_expr) (t : Type.itenormalize_expr) (e : Type.itenormalize_expr) : Type.itenormalize_expr
    ensures { [#"../ite_normalize.rs" 57 4 93] result = Type.IteNormalize_Expr_IfThenElse c t e }
    
   =
  var _0 : Type.itenormalize_expr;
  var c_1 : Type.itenormalize_expr;
  var t_2 : Type.itenormalize_expr;
  var e_3 : Type.itenormalize_expr;
  var _4 : Type.itenormalize_expr;
  var _5 : Type.itenormalize_expr;
  var _6 : Type.itenormalize_expr;
  var _7 : Type.itenormalize_expr;
  var _8 : Type.itenormalize_expr;
  var _9 : Type.itenormalize_expr;
  {
    c_1 <- c;
    t_2 <- t;
    e_3 <- e;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _5 <- c_1;
    _4 <- _5;
    goto BB2
  }
  BB2 {
    _7 <- t_2;
    _6 <- _7;
    goto BB3
  }
  BB3 {
    _9 <- e_3;
    _8 <- _9;
    goto BB4
  }
  BB4 {
    _0 <- Type.IteNormalize_Expr_IfThenElse _4 _6 _8;
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    return _0
  }
  
end
module IteNormalize_Impl3_IsNormalized_Interface
  use Type
  predicate is_normalized (self : Type.itenormalize_expr)
end
module IteNormalize_Impl3_IsNormalized
  use Type
  predicate is_normalized [#"../ite_normalize.rs" 86 4 34] (self : Type.itenormalize_expr) =
    [#"../ite_normalize.rs" 85 4 16] match (self) with
      | Type.IteNormalize_Expr_IfThenElse c t e -> match (c) with
        | Type.IteNormalize_Expr_IfThenElse _ _ _ -> false
        | _ -> is_normalized t && is_normalized e
        end
      | Type.IteNormalize_Expr_Var _ -> true
      | Type.IteNormalize_Expr_True -> true
      | Type.IteNormalize_Expr_False -> true
      end
end
module Core_Clone_Clone_CloneFrom_Interface
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module IteNormalize_Impl0
  use Type
  clone Core_Clone_Clone_CloneFrom_Interface as CloneFrom0 with type self = Type.itenormalize_expr
  clone IteNormalize_Impl0_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.itenormalize_expr, val clone' = Clone0.clone'
end
module IteNormalize_Impl3_Transpose_Interface
  use Type
  clone IteNormalize_Impl3_IsNormalized_Interface as IsNormalized0
  val transpose [@cfg:stackify] (self : Type.itenormalize_expr) (a : Type.itenormalize_expr) (b : Type.itenormalize_expr) : Type.itenormalize_expr
    requires {[#"../ite_normalize.rs" 68 4 34] IsNormalized0.is_normalized b}
    requires {[#"../ite_normalize.rs" 67 4 34] IsNormalized0.is_normalized a}
    requires {[#"../ite_normalize.rs" 66 4 37] IsNormalized0.is_normalized self}
    ensures { [#"../ite_normalize.rs" 69 4 38] IsNormalized0.is_normalized result }
    
end
module IteNormalize_Impl3_Transpose
  use Type
  clone IteNormalize_Impl3_IsNormalized as IsNormalized0
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  use mach.int.UInt64
  clone IteNormalize_Impl0_Clone_Interface as Clone0
  let rec cfg transpose [@cfg:stackify] [#"../ite_normalize.rs" 70 4 52] (self : Type.itenormalize_expr) (a : Type.itenormalize_expr) (b : Type.itenormalize_expr) : Type.itenormalize_expr
    requires {[#"../ite_normalize.rs" 68 4 34] IsNormalized0.is_normalized b}
    requires {[#"../ite_normalize.rs" 67 4 34] IsNormalized0.is_normalized a}
    requires {[#"../ite_normalize.rs" 66 4 37] IsNormalized0.is_normalized self}
    ensures { [#"../ite_normalize.rs" 69 4 38] IsNormalized0.is_normalized result }
    
   =
  var _0 : Type.itenormalize_expr;
  var self_1 : Type.itenormalize_expr;
  var a_2 : Type.itenormalize_expr;
  var b_3 : Type.itenormalize_expr;
  var _4 : isize;
  var c_5 : Type.itenormalize_expr;
  var t_6 : Type.itenormalize_expr;
  var e_7 : Type.itenormalize_expr;
  var _8 : Type.itenormalize_expr;
  var _9 : Type.itenormalize_expr;
  var _10 : Type.itenormalize_expr;
  var _11 : Type.itenormalize_expr;
  var _12 : Type.itenormalize_expr;
  var _13 : Type.itenormalize_expr;
  var _14 : Type.itenormalize_expr;
  var _15 : Type.itenormalize_expr;
  var _16 : Type.itenormalize_expr;
  var _17 : Type.itenormalize_expr;
  var _18 : Type.itenormalize_expr;
  var _19 : Type.itenormalize_expr;
  var _20 : Type.itenormalize_expr;
  var v_21 : usize;
  var _22 : Type.itenormalize_expr;
  var _23 : Type.itenormalize_expr;
  var _24 : Type.itenormalize_expr;
  var _25 : Type.itenormalize_expr;
  var _26 : Type.itenormalize_expr;
  var _27 : Type.itenormalize_expr;
  {
    self_1 <- self;
    a_2 <- a;
    b_3 <- b;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    switch (self_1)
      | Type.IteNormalize_Expr_IfThenElse _ _ _ -> goto BB6
      | Type.IteNormalize_Expr_Var _ -> goto BB19
      | Type.IteNormalize_Expr_True -> goto BB26
      | Type.IteNormalize_Expr_False -> goto BB4
      end
  }
  BB4 {
    _0 <- b_3;
    goto BB27
  }
  BB5 {
    absurd
  }
  BB6 {
    c_5 <- Type.itenormalize_expr_IfThenElse_c self_1;
    t_6 <- Type.itenormalize_expr_IfThenElse_t self_1;
    e_7 <- Type.itenormalize_expr_IfThenElse_e self_1;
    _8 <- c_5;
    _11 <- t_6;
    _13 <- a_2;
    _12 <- ([#"../ite_normalize.rs" 74 40 49] Clone0.clone' _13);
    goto BB7
  }
  BB7 {
    _15 <- b_3;
    _14 <- ([#"../ite_normalize.rs" 74 51 60] Clone0.clone' _15);
    goto BB8
  }
  BB8 {
    _10 <- ([#"../ite_normalize.rs" 74 28 61] transpose _11 _12 _14);
    goto BB9
  }
  BB9 {
    _9 <- _10;
    goto BB10
  }
  BB10 {
    _18 <- e_7;
    _19 <- a_2;
    _20 <- b_3;
    _17 <- ([#"../ite_normalize.rs" 75 28 45] transpose _18 _19 _20);
    goto BB11
  }
  BB11 {
    _16 <- _17;
    goto BB12
  }
  BB12 {
    _0 <- Type.IteNormalize_Expr_IfThenElse _8 _9 _16;
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    goto BB27
  }
  BB19 {
    v_21 <- Type.itenormalize_expr_Var_v self_1;
    _23 <- self_1;
    _22 <- _23;
    goto BB20
  }
  BB20 {
    _25 <- a_2;
    _24 <- _25;
    goto BB21
  }
  BB21 {
    _27 <- b_3;
    _26 <- _27;
    goto BB22
  }
  BB22 {
    _0 <- Type.IteNormalize_Expr_IfThenElse _22 _24 _26;
    goto BB23
  }
  BB23 {
    goto BB24
  }
  BB24 {
    goto BB25
  }
  BB25 {
    goto BB27
  }
  BB26 {
    _0 <- a_2;
    goto BB27
  }
  BB27 {
    goto BB28
  }
  BB28 {
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    return _0
  }
  
end
module IteNormalize_Impl3_Normalize_Interface
  use prelude.Prelude
  use Type
  clone IteNormalize_Impl3_IsNormalized_Interface as IsNormalized0
  val normalize [@cfg:stackify] (self : Type.itenormalize_expr) : Type.itenormalize_expr
    ensures { [#"../ite_normalize.rs" 98 4 38] IsNormalized0.is_normalized result }
    
end
module IteNormalize_Impl3_Normalize
  use prelude.Prelude
  use Type
  clone IteNormalize_Impl3_IsNormalized as IsNormalized0
  use mach.int.Int
  use mach.int.Int64
  clone IteNormalize_Impl0_Clone_Interface as Clone0
  clone IteNormalize_Impl3_Transpose_Interface as Transpose0 with predicate IsNormalized0.is_normalized = IsNormalized0.is_normalized
  let rec cfg normalize [@cfg:stackify] [#"../ite_normalize.rs" 99 4 35] (self : Type.itenormalize_expr) : Type.itenormalize_expr
    ensures { [#"../ite_normalize.rs" 98 4 38] IsNormalized0.is_normalized result }
    
   =
  var _0 : Type.itenormalize_expr;
  var self_1 : Type.itenormalize_expr;
  var _2 : isize;
  var c_3 : Type.itenormalize_expr;
  var t_4 : Type.itenormalize_expr;
  var e_5 : Type.itenormalize_expr;
  var cp_6 : Type.itenormalize_expr;
  var _7 : Type.itenormalize_expr;
  var tp_8 : Type.itenormalize_expr;
  var _9 : Type.itenormalize_expr;
  var ep_10 : Type.itenormalize_expr;
  var _11 : Type.itenormalize_expr;
  var _12 : Type.itenormalize_expr;
  var _13 : Type.itenormalize_expr;
  var _14 : Type.itenormalize_expr;
  var e_15 : Type.itenormalize_expr;
  var _16 : Type.itenormalize_expr;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    switch (self_1)
      | Type.IteNormalize_Expr_IfThenElse _ _ _ -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    e_15 <- self_1;
    _16 <- e_15;
    _0 <- ([#"../ite_normalize.rs" 107 17 26] Clone0.clone' _16);
    goto BB10
  }
  BB2 {
    c_3 <- Type.itenormalize_expr_IfThenElse_c self_1;
    t_4 <- Type.itenormalize_expr_IfThenElse_t self_1;
    e_5 <- Type.itenormalize_expr_IfThenElse_e self_1;
    _7 <- c_3;
    cp_6 <- ([#"../ite_normalize.rs" 102 25 38] normalize _7);
    goto BB3
  }
  BB3 {
    _9 <- t_4;
    tp_8 <- ([#"../ite_normalize.rs" 103 25 38] normalize _9);
    goto BB4
  }
  BB4 {
    _11 <- e_5;
    ep_10 <- ([#"../ite_normalize.rs" 104 25 38] normalize _11);
    goto BB5
  }
  BB5 {
    _12 <- cp_6;
    _13 <- tp_8;
    _14 <- ep_10;
    _0 <- ([#"../ite_normalize.rs" 105 16 36] Transpose0.transpose _12 _13 _14);
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB11
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module Core_Convert_From_From_Interface
  type self
  type t
  val from [@cfg:stackify] (_1' : t) : self
    requires {false}
    
end
module Core_Convert_From_From
  type self
  type t
  val from [@cfg:stackify] (_1' : t) : self
    requires {false}
    
end
module IteNormalize_Impl1
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone IteNormalize_Impl1_From_Interface as From0
  clone Core_Convert_From_From_Interface as From1 with type self = Type.itenormalize_expr, type t = usize,
  val from = From0.from
end
module IteNormalize_Impl2
  use Type
  clone IteNormalize_Impl2_From_Interface as From0
  clone Core_Convert_From_From_Interface as From1 with type self = Type.itenormalize_expr, type t = bool,
  val from = From0.from
end
