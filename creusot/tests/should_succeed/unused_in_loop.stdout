module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Builtins_Resolve
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  type self   
  predicate resolve (self : self)
end
module UnusedInLoop_UnusedInLoop
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = bool
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = ()
  let rec cfg impl (o_b_1 : bool) : uint32
    ensures { result = (10 : uint32) }
    
   = 
  var _0 : uint32;
  var b_1 : bool;
  var x_2 : uint32;
  var _3 : ();
  var _5 : ();
  var _6 : ();
  var _7 : bool;
  var _8 : ();
  {
    b_1 <- o_b_1;
    goto BB0
  }
  BB0 {
    x_2 <- (10 : uint32);
    goto BB1
  }
  BB1 {
    invariant x { true };
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _7 };
    _7 <- b_1;
    switch (_7)
      | False -> goto BB4
      | True -> goto BB3
      | _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve0.resolve b_1 };
    assume { Resolve0.resolve _7 };
    _5 <- ();
    assume { Resolve1.resolve _5 };
    _3 <- ();
    assume { Resolve1.resolve _3 };
    assume { Resolve2.resolve _0 };
    _0 <- x_2;
    assume { Resolve2.resolve x_2 };
    return _0
  }
  BB4 {
    assume { Resolve0.resolve _7 };
    _6 <- ();
    assume { Resolve1.resolve _6 };
    goto BB1
  }
  
end
module UnusedInLoop_Main
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec cfg impl () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
