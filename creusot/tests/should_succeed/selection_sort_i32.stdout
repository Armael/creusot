module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type selectionsorti32_ghost 't = 
    | SelectionSortI32_Ghost opaque_ptr
    
  type core_marker_phantomdata 't = 
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't = 
    | Core_Ptr_Unique_Unique opaque_ptr (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a = 
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a = 
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  = 
    | Alloc_Alloc_Global
    
  type creusotcontracts_std1_vec_vec 't = 
    | CreusotContracts_Std1_Vec_Vec (alloc_vec_vec 't (alloc_alloc_global))
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module SelectionSortI32_Impl0_ModelTy
  type t   
  type modelTy  = 
    t
end
module SelectionSortI32_Impl0_Model_Interface
  type t   
  use Type
  function model (self : Type.selectionsorti32_ghost t) : t
end
module SelectionSortI32_Impl0_Model
  type t   
  use Type
  function model (self : Type.selectionsorti32_ghost t) : t
end
module SelectionSortI32_Impl0
  type t   
  use Type
  clone SelectionSortI32_Impl0_Model as Model0 with type t = t
  clone SelectionSortI32_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.selectionsorti32_ghost t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.selectionsorti32_ghost t,
  type modelTy = ModelTy0.modelTy
end
module SelectionSortI32_Impl1_Record_Interface
  type t   
  use prelude.Prelude
  use Type
  clone SelectionSortI32_Impl0_Model_Interface as Model0 with type t = t
  val record (a : t) : Type.selectionsorti32_ghost t
    ensures { Model0.model result = a }
    
end
module SelectionSortI32_Impl1_Record
  type t   
  use prelude.Prelude
  use Type
  clone SelectionSortI32_Impl0_Model as Model0 with type t = t
  val record (a : t) : Type.selectionsorti32_ghost t
    ensures { Model0.model result = a }
    
end
module SelectionSortI32_SortedRange_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate sorted_range (s : Seq.seq int32) (l : int) (u : int)
end
module SelectionSortI32_SortedRange
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate sorted_range (s : Seq.seq int32) (l : int) (u : int) = 
    forall j : (int) . forall i : (int) . l <= i && i < j && j < u -> Seq.get s i <= Seq.get s j
end
module SelectionSortI32_Sorted_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate sorted (s : Seq.seq int32)
end
module SelectionSortI32_Sorted
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone SelectionSortI32_SortedRange_Interface as SortedRange0
  predicate sorted (s : Seq.seq int32) = 
    SortedRange0.sorted_range s 0 (Seq.length s)
end
module SelectionSortI32_SmallerThan_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate smaller_than (s : Seq.seq int32) (e : int32) (l : int)
end
module SelectionSortI32_SmallerThan
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate smaller_than (s : Seq.seq int32) (e : int32) (l : int) = 
    forall j : (int) . l < j && j < Seq.length s -> e <= Seq.get s j
end
module SelectionSortI32_LargerThan_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate larger_than (s : Seq.seq int32) (e : int32) (u : int)
end
module SelectionSortI32_LargerThan
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate larger_than (s : Seq.seq int32) (e : int32) (u : int) = 
    forall i : (int) . 0 <= i && i < u && i < Seq.length s -> e >= Seq.get s i
end
module SelectionSortI32_AllSmaller_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate all_smaller (s : Seq.seq int32) (u : int)
end
module SelectionSortI32_AllSmaller
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone SelectionSortI32_SmallerThan_Interface as SmallerThan0
  predicate all_smaller (s : Seq.seq int32) (u : int) = 
    forall i : (int) . 0 <= i && i < u && i < Seq.length s -> SmallerThan0.smaller_than s (Seq.get s i) u
end
module SelectionSortI32_AllLarger_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate all_larger (s : Seq.seq int32) (l : int)
end
module SelectionSortI32_AllLarger
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone SelectionSortI32_LargerThan_Interface as LargerThan0
  predicate all_larger (s : Seq.seq int32) (l : int) = 
    forall i : (int) . l <= i && i < Seq.length s -> LargerThan0.larger_than s (Seq.get s i) l
end
module SelectionSortI32_SelectionSortInvariant_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate selection_sort_invariant (s : Seq.seq int32) (i : int)
end
module SelectionSortI32_SelectionSortInvariant
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  clone SelectionSortI32_AllSmaller_Interface as AllSmaller0
  clone SelectionSortI32_AllLarger_Interface as AllLarger0
  predicate selection_sort_invariant (s : Seq.seq int32) (i : int) = 
    AllLarger0.all_larger s i && AllSmaller0.all_smaller s i
end
module SelectionSortI32_MinLarger_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate min_larger (s : Seq.seq int32) (u : int) (idx : int)
end
module SelectionSortI32_MinLarger
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  predicate min_larger (s : Seq.seq int32) (u : int) (idx : int) = 
    forall j : (int) . 0 <= j && j < u -> Seq.get s j <= Seq.get s idx
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, type ModelTy0.modelTy = ModelTy0.modelTy,
  function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val len (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val index (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, type Output0.output = Output0.output, val index = Index0.index
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module SelectionSortI32_FindMin_Interface
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone SelectionSortI32_MinLarger_Interface as MinLarger0
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = int32
  clone SelectionSortI32_SortedRange_Interface as SortedRange0
  clone SelectionSortI32_SelectionSortInvariant_Interface as SelectionSortInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = int32
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec int32,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val find_min (v : Type.creusotcontracts_std1_vec_vec int32) (i : usize) : usize
    requires {0 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model0.model v)}
    requires {Seq.length (Model0.model v) <= 18446744073709551615}
    requires {SelectionSortInvariant0.selection_sort_invariant (Model0.model v) (UInt64.to_int i)}
    requires {SortedRange0.sorted_range (Model0.model v) 0 (UInt64.to_int i)}
    requires {MinLarger0.min_larger (Model1.model v) (UInt64.to_int i) (UInt64.to_int i)}
    ensures { UInt64.to_int i <= UInt64.to_int result && UInt64.to_int result < Seq.length (Model0.model v) }
    ensures { forall j : (int) . UInt64.to_int i <= j && j < Seq.length (Model0.model v) -> Seq.get (Model0.model v) (UInt64.to_int result) <= Seq.get (Model0.model v) j }
    ensures { MinLarger0.min_larger (Model0.model v) (UInt64.to_int i) (UInt64.to_int result) }
    
end
module SelectionSortI32_FindMin
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone SelectionSortI32_SmallerThan as SmallerThan0
  clone SelectionSortI32_AllSmaller as AllSmaller0 with predicate SmallerThan0.smaller_than = SmallerThan0.smaller_than
  clone SelectionSortI32_LargerThan as LargerThan0
  clone SelectionSortI32_AllLarger as AllLarger0 with predicate LargerThan0.larger_than = LargerThan0.larger_than
  clone SelectionSortI32_SelectionSortInvariant as SelectionSortInvariant0 with predicate AllLarger0.all_larger = AllLarger0.all_larger,
  predicate AllSmaller0.all_smaller = AllSmaller0.all_smaller
  clone SelectionSortI32_MinLarger as MinLarger0
  clone SelectionSortI32_SortedRange as SortedRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = int32
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = int32
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec int32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.creusotcontracts_std1_vec_vec int32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = ()
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = int32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = int32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = int32,
  function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = int32, function Model0.model = Model0.model
  let rec cfg find_min (v : Type.creusotcontracts_std1_vec_vec int32) (i : usize) : usize
    requires {0 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model0.model v)}
    requires {Seq.length (Model0.model v) <= 18446744073709551615}
    requires {SelectionSortInvariant0.selection_sort_invariant (Model0.model v) (UInt64.to_int i)}
    requires {SortedRange0.sorted_range (Model0.model v) 0 (UInt64.to_int i)}
    requires {MinLarger0.min_larger (Model1.model v) (UInt64.to_int i) (UInt64.to_int i)}
    ensures { UInt64.to_int i <= UInt64.to_int result && UInt64.to_int result < Seq.length (Model0.model v) }
    ensures { forall j : (int) . UInt64.to_int i <= j && j < Seq.length (Model0.model v) -> Seq.get (Model0.model v) (UInt64.to_int result) <= Seq.get (Model0.model v) j }
    ensures { MinLarger0.min_larger (Model0.model v) (UInt64.to_int i) (UInt64.to_int result) }
    
   = 
  var _0 : usize;
  var v_1 : Type.creusotcontracts_std1_vec_vec int32;
  var i_2 : usize;
  var _3 : ();
  var min_4 : usize;
  var j_5 : usize;
  var _6 : usize;
  var _7 : ();
  var _8 : ();
  var _9 : bool;
  var _10 : usize;
  var _11 : usize;
  var _12 : Type.creusotcontracts_std1_vec_vec int32;
  var _13 : ();
  var _14 : bool;
  var _15 : int32;
  var _16 : int32;
  var _17 : Type.creusotcontracts_std1_vec_vec int32;
  var _18 : usize;
  var _19 : int32;
  var _20 : int32;
  var _21 : Type.creusotcontracts_std1_vec_vec int32;
  var _22 : usize;
  var _23 : usize;
  var _24 : ();
  var _25 : ();
  var _26 : ();
  {
    v_1 <- v;
    i_2 <- i;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve min_4 };
    min_4 <- i_2;
    assume { Resolve0.resolve _6 };
    _6 <- i_2;
    assume { Resolve0.resolve i_2 };
    j_5 <- _6 + (1 : usize);
    goto BB1
  }
  BB1 {
    invariant min_is_min { forall k : (int) . UInt64.to_int i_2 <= k && k < UInt64.to_int j_5 -> Seq.get (Model0.model v_1) (UInt64.to_int min_4) <= Seq.get (Model0.model v_1) k };
    invariant j_bound { UInt64.to_int i_2 <= UInt64.to_int j_5 && UInt64.to_int j_5 <= Seq.length (Model0.model v_1) };
    invariant min_bound { UInt64.to_int i_2 <= UInt64.to_int min_4 && UInt64.to_int min_4 < Seq.length (Model0.model v_1) && UInt64.to_int min_4 <= UInt64.to_int j_5 };
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _10 };
    _10 <- j_5;
    _12 <- v_1;
    _11 <- Len0.len _12;
    goto BB3
  }
  BB3 {
    _9 <- _10 < _11;
    switch (_9)
      | False -> goto BB10
      | _ -> goto BB4
      end
  }
  BB4 {
    _17 <- v_1;
    assume { Resolve0.resolve _18 };
    _18 <- j_5;
    _16 <- Index0.index _17 _18;
    goto BB5
  }
  BB5 {
    assume { Resolve1.resolve _15 };
    _15 <- _16;
    assume { Resolve2.resolve _16 };
    _21 <- v_1;
    assume { Resolve0.resolve _22 };
    _22 <- min_4;
    _20 <- Index0.index _21 _22;
    goto BB6
  }
  BB6 {
    assume { Resolve1.resolve _19 };
    _19 <- _20;
    assume { Resolve2.resolve _20 };
    _14 <- _15 < _19;
    switch (_14)
      | False -> goto BB8
      | _ -> goto BB7
      end
  }
  BB7 {
    assume { Resolve0.resolve min_4 };
    assume { Resolve0.resolve _23 };
    _23 <- j_5;
    assume { Resolve0.resolve min_4 };
    min_4 <- _23;
    _13 <- ();
    assume { Resolve3.resolve _13 };
    goto BB9
  }
  BB8 {
    _13 <- ();
    assume { Resolve3.resolve _13 };
    goto BB9
  }
  BB9 {
    j_5 <- j_5 + (1 : usize);
    _8 <- ();
    assume { Resolve3.resolve _8 };
    goto BB1
  }
  BB10 {
    assume { Resolve4.resolve v_1 };
    assume { Resolve0.resolve j_5 };
    _7 <- ();
    assume { Resolve3.resolve _7 };
    assume { Resolve0.resolve _0 };
    _0 <- min_4;
    assume { Resolve0.resolve min_4 };
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function model = Model0.model
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface
  type t   
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) = 
    Permut.permut self o 0 (Seq.length self)
end
module CreusotContracts_Std1_Vec_Impl1_Swap_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (i : usize) (j : usize) : ()
    requires {UInt64.to_int j < Seq.length (Model0.model self)}
    requires {UInt64.to_int i < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int i) (UInt64.to_int j) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Swap
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use seq.Permut
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val swap (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (i : usize) (j : usize) : ()
    requires {UInt64.to_int j < Seq.length (Model0.model self)}
    requires {UInt64.to_int i < Seq.length (Model0.model self)}
    ensures { Permut.exchange (Model1.model ( ^ self)) (Model1.model ( * self)) (UInt64.to_int i) (UInt64.to_int j) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module SelectionSortI32_Swap_Interface
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface as PermutationOf0 with type t = int32
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = int32
  clone SelectionSortI32_SortedRange_Interface as SortedRange0
  clone SelectionSortI32_SelectionSortInvariant_Interface as SelectionSortInvariant0
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = int32
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec int32,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val swap (v : borrowed (Type.creusotcontracts_std1_vec_vec int32)) (i : usize) (min : usize) : ()
    requires {forall j : (int) . UInt64.to_int i <= j && j < Seq.length (Model0.model v) -> Seq.get (Model0.model v) (UInt64.to_int min) <= Seq.get (Model0.model v) j}
    requires {SelectionSortInvariant0.selection_sort_invariant (Model0.model v) (UInt64.to_int i)}
    requires {SortedRange0.sorted_range (Model0.model v) 0 (UInt64.to_int i)}
    requires {UInt64.to_int i <= UInt64.to_int min && UInt64.to_int min < Seq.length (Model0.model v)}
    requires {0 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model0.model v)}
    ensures { SortedRange0.sorted_range (Model1.model ( ^ v)) 0 (UInt64.to_int i + 1) }
    ensures { SelectionSortInvariant0.selection_sort_invariant (Model1.model ( ^ v)) (UInt64.to_int i + 1) }
    ensures { PermutationOf0.permutation_of (Model1.model ( ^ v)) (Model0.model v) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model v) && j <> UInt64.to_int i && j <> UInt64.to_int min -> Seq.get (Model0.model v) j = Seq.get (Model1.model ( ^ v)) j }
    ensures { Seq.get (Model0.model v) (UInt64.to_int i) = Seq.get (Model1.model ( ^ v)) (UInt64.to_int min) && Seq.get (Model0.model v) (UInt64.to_int min) = Seq.get (Model1.model ( ^ v)) (UInt64.to_int i) }
    
end
module SelectionSortI32_Swap
  use mach.int.Int
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone SelectionSortI32_SmallerThan as SmallerThan0
  clone SelectionSortI32_AllSmaller as AllSmaller0 with predicate SmallerThan0.smaller_than = SmallerThan0.smaller_than
  clone SelectionSortI32_LargerThan as LargerThan0
  clone SelectionSortI32_AllLarger as AllLarger0 with predicate LargerThan0.larger_than = LargerThan0.larger_than
  clone SelectionSortI32_SelectionSortInvariant as SelectionSortInvariant0 with predicate AllLarger0.all_larger = AllLarger0.all_larger,
  predicate AllSmaller0.all_smaller = AllSmaller0.all_smaller
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf as PermutationOf0 with type t = int32
  clone SelectionSortI32_SortedRange as SortedRange0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = int32
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = int32
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec int32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.creusotcontracts_std1_vec_vec int32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Std1_Vec_Impl1_Swap_Interface as Swap0 with type t = int32,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  let rec cfg swap (v : borrowed (Type.creusotcontracts_std1_vec_vec int32)) (i : usize) (min : usize) : ()
    requires {forall j : (int) . UInt64.to_int i <= j && j < Seq.length (Model0.model v) -> Seq.get (Model0.model v) (UInt64.to_int min) <= Seq.get (Model0.model v) j}
    requires {SelectionSortInvariant0.selection_sort_invariant (Model0.model v) (UInt64.to_int i)}
    requires {SortedRange0.sorted_range (Model0.model v) 0 (UInt64.to_int i)}
    requires {UInt64.to_int i <= UInt64.to_int min && UInt64.to_int min < Seq.length (Model0.model v)}
    requires {0 <= UInt64.to_int i && UInt64.to_int i < Seq.length (Model0.model v)}
    ensures { SortedRange0.sorted_range (Model1.model ( ^ v)) 0 (UInt64.to_int i + 1) }
    ensures { SelectionSortInvariant0.selection_sort_invariant (Model1.model ( ^ v)) (UInt64.to_int i + 1) }
    ensures { PermutationOf0.permutation_of (Model1.model ( ^ v)) (Model0.model v) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model v) && j <> UInt64.to_int i && j <> UInt64.to_int min -> Seq.get (Model0.model v) j = Seq.get (Model1.model ( ^ v)) j }
    ensures { Seq.get (Model0.model v) (UInt64.to_int i) = Seq.get (Model1.model ( ^ v)) (UInt64.to_int min) && Seq.get (Model0.model v) (UInt64.to_int min) = Seq.get (Model1.model ( ^ v)) (UInt64.to_int i) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.creusotcontracts_std1_vec_vec int32);
  var i_2 : usize;
  var min_3 : usize;
  var _4 : ();
  var _5 : borrowed (Type.creusotcontracts_std1_vec_vec int32);
  var _6 : usize;
  var _7 : usize;
  {
    v_1 <- v;
    i_2 <- i;
    min_3 <- min;
    goto BB0
  }
  BB0 {
    _5 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _5) };
    assume { Resolve0.resolve _6 };
    _6 <- i_2;
    assume { Resolve0.resolve i_2 };
    assume { Resolve0.resolve _7 };
    _7 <- min_3;
    assume { Resolve0.resolve min_3 };
    _4 <- Swap0.swap _5 _6 _7;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve v_1 };
    _0 <- ();
    return _0
  }
  
end
module SelectionSortI32_SelectionSort_Interface
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  clone SelectionSortI32_Sorted_Interface as Sorted0
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface as PermutationOf0 with type t = int32
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = int32
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec int32,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = int32
  val selection_sort (v : borrowed (Type.creusotcontracts_std1_vec_vec int32)) : ()
    ensures { PermutationOf0.permutation_of (Model0.model ( ^ v)) (Model1.model v) }
    ensures { Sorted0.sorted (Model0.model ( ^ v)) }
    
end
module SelectionSortI32_SelectionSort
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone SelectionSortI32_SmallerThan as SmallerThan0
  clone SelectionSortI32_AllSmaller as AllSmaller0 with predicate SmallerThan0.smaller_than = SmallerThan0.smaller_than
  clone SelectionSortI32_LargerThan as LargerThan0
  clone SelectionSortI32_AllLarger as AllLarger0 with predicate LargerThan0.larger_than = LargerThan0.larger_than
  clone SelectionSortI32_SelectionSortInvariant as SelectionSortInvariant0 with predicate AllLarger0.all_larger = AllLarger0.all_larger,
  predicate AllSmaller0.all_smaller = AllSmaller0.all_smaller
  clone SelectionSortI32_SortedRange as SortedRange0
  clone SelectionSortI32_Sorted as Sorted0 with predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = int32
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf as PermutationOf0 with type t = int32
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = int32
  clone CreusotContracts_Logic_Model_Impl1_Model as Model2 with type t = Type.creusotcontracts_std1_vec_vec int32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone SelectionSortI32_Impl0_Model as Model0 with type t = borrowed (Type.creusotcontracts_std1_vec_vec int32)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve4 with type t = Type.creusotcontracts_std1_vec_vec int32
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = ()
  clone SelectionSortI32_MinLarger as MinLarger0
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Type.selectionsorti32_ghost (borrowed (Type.creusotcontracts_std1_vec_vec int32))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed (Type.creusotcontracts_std1_vec_vec int32)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = usize
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec int32,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone SelectionSortI32_FindMin_Interface as FindMin0 with function Model0.model = Model3.model,
  predicate SelectionSortInvariant0.selection_sort_invariant = SelectionSortInvariant0.selection_sort_invariant,
  predicate SortedRange0.sorted_range = SortedRange0.sorted_range, function Model1.model = Model1.model,
  predicate MinLarger0.min_larger = MinLarger0.min_larger
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = int32, function Model0.model = Model3.model
  clone SelectionSortI32_Swap_Interface as Swap0 with function Model0.model = Model2.model,
  predicate SelectionSortInvariant0.selection_sort_invariant = SelectionSortInvariant0.selection_sort_invariant,
  predicate SortedRange0.sorted_range = SortedRange0.sorted_range, function Model1.model = Model1.model,
  predicate PermutationOf0.permutation_of = PermutationOf0.permutation_of
  clone SelectionSortI32_Impl1_Record_Interface as Record0 with type t = borrowed (Type.creusotcontracts_std1_vec_vec int32),
  function Model0.model = Model0.model
  let rec cfg selection_sort (v : borrowed (Type.creusotcontracts_std1_vec_vec int32)) : ()
    ensures { PermutationOf0.permutation_of (Model1.model ( ^ v)) (Model2.model v) }
    ensures { Sorted0.sorted (Model1.model ( ^ v)) }
    
   = 
  var _0 : ();
  var v_1 : borrowed (Type.creusotcontracts_std1_vec_vec int32);
  var i_2 : usize;
  var min_3 : usize;
  var old_v_4 : Type.selectionsorti32_ghost (borrowed (Type.creusotcontracts_std1_vec_vec int32));
  var _5 : borrowed (Type.creusotcontracts_std1_vec_vec int32);
  var _6 : borrowed (Type.creusotcontracts_std1_vec_vec int32);
  var _7 : ();
  var _8 : bool;
  var _9 : usize;
  var _10 : usize;
  var _11 : Type.creusotcontracts_std1_vec_vec int32;
  var _12 : usize;
  var _13 : Type.creusotcontracts_std1_vec_vec int32;
  var _14 : usize;
  var _15 : ();
  var _16 : borrowed (Type.creusotcontracts_std1_vec_vec int32);
  var _17 : usize;
  var _18 : usize;
  var _19 : ();
  var _20 : ();
  var _21 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : usize);
    assume { Resolve0.resolve min_3 };
    min_3 <- i_2;
    assume { Resolve0.resolve min_3 };
    _6 <- v_1;
    _5 <- _6;
    assume { Resolve1.resolve _6 };
    old_v_4 <- Record0.record _5;
    goto BB1
  }
  BB1 {
    assume { Resolve2.resolve old_v_4 };
    goto BB2
  }
  BB2 {
    invariant proph_const {  ^ v_1 =  ^ Model0.model old_v_4 };
    invariant permutation { PermutationOf0.permutation_of (Model1.model ( * v_1)) (Model1.model ( * Model0.model old_v_4)) };
    invariant i_bound { 0 <= UInt64.to_int i_2 && UInt64.to_int i_2 <= Seq.length (Model2.model v_1) };
    invariant sorted { SortedRange0.sorted_range (Model2.model v_1) 0 (UInt64.to_int i_2) };
    invariant sort_inv { SelectionSortInvariant0.selection_sort_invariant (Model2.model v_1) (UInt64.to_int i_2) };
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _9 };
    _9 <- i_2;
    _11 <-  * v_1;
    _10 <- Len0.len _11;
    goto BB4
  }
  BB4 {
    _8 <- _9 < _10;
    switch (_8)
      | False -> goto BB8
      | _ -> goto BB5
      end
  }
  BB5 {
    _13 <-  * v_1;
    assume { Resolve0.resolve _14 };
    _14 <- i_2;
    _12 <- FindMin0.find_min _13 _14;
    goto BB6
  }
  BB6 {
    assume { Resolve0.resolve min_3 };
    min_3 <- _12;
    _16 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _16) };
    assume { Resolve0.resolve _17 };
    _17 <- i_2;
    assume { Resolve0.resolve _18 };
    _18 <- min_3;
    assume { Resolve0.resolve min_3 };
    _15 <- Swap0.swap _16 _17 _18;
    goto BB7
  }
  BB7 {
    i_2 <- i_2 + (1 : usize);
    _7 <- ();
    assume { Resolve3.resolve _7 };
    goto BB2
  }
  BB8 {
    assume { Resolve4.resolve v_1 };
    assume { Resolve0.resolve i_2 };
    _0 <- ();
    return _0
  }
  
end
