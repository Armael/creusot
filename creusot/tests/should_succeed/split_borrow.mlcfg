module Ambient
use Ref 
use mach.int.Int 
use mach.int.Int32
use mach.int.Int64
use mach.int.UInt32
use mach.int.UInt64
use string.Char
use floating_point.Single
use floating_point.Double
(** Generic Type for borrowed values *) 
type borrowed 'a = 
{ current : 'a ; 
final : 'a; (* The "future" value when borrow will end *) 
} 
let function ( *_ ) x = x.current 
let function ( ^_ ) x = x.final 
val borrow_mut (a : 'a) : borrowed 'a 
ensures { *result = a }
  type myInt  =
      | MyInt(usize)

  let cfg z () : bool
    =
  var _0 : bool;
  {
    goto BB0;
  }
  BB0 {
    _0 <- true;
    _0
  }

  let cfg main () : ()
    =
  var _0 : ();
  var x_1 : (myInt, myInt);
  var _2 : myInt;
  var _3 : myInt;
  var y_4 : borrowed (myInt, myInt);
  var _5 : ();
  var _6 : bool;
  var _7 : myInt;
  var _8 : myInt;
  var _9 : usize;
  {
    goto BB0;
  }
  BB0 {
    _2 <- MyInt(1);
    _3 <- MyInt(2);
    x_1 <- (_2, _3);
    y_4 <- borrow_mut x_1;
    x_1 <-  ^ y_4;
    _6 <- z ();
    goto BB1
  }
  BB1 {
    switch (_6)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    goto BB4
  }
  BB4 {
    _7 <- MyInt(4);
    y_4 <- { y_4 with current = (let (a, b) =  * y_4 in (a, _7)) };
    _5 <- ();
    goto BB5
  }
  BB5 {
    _9 <- let MyInt(a) = let (a, _) =  * y_4 in a in a;
    assume { ^ y_4 = * y_4 };
    _0 <- ();
    _0
  }
  BB3 {
    _8 <- MyInt(10);
    y_4 <- { y_4 with current = (let (a, b) =  * y_4 in (_8, b)) };
    _5 <- ();
    goto BB5
  }

end
