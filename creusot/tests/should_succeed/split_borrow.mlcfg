module Ambient
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double

  type usize = int
  type isize = int

  type borrowed 'a = { current : 'a ; final : 'a; }
  let function ( *_ ) x = x.current
  let function ( ^_ ) x = x.final
  val borrow_mut (a : 'a) : borrowed 'a
  ensures { *result = a }

  predicate drop_fix (_ : 'a) = true
  predicate drop_uint (_ : 'a) = true
  predicate drop_int (_ : 'a) = true
  predicate drop_float (_ : 'a) = true
  predicate drop_bool (_ : 'a) = true
  predicate drop_mut_ref (b : borrowed 'a) = ^ b = * b
  predicate drop_ref (_ : 'a) = true

  scope Type
  type myint  =
      | Myint_MyInt(usize)

  predicate drop_myint (self : myint) =
    let Myint_MyInt(a) = self in drop_uint a
  end
  let rec cfg z () : bool
    =
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- true;
    return _0
  }


  let rec cfg main () : ()
    =
  var _0 : ();
  var x_1 : (Type.myint, Type.myint);
  var _2 : Type.myint;
  var _3 : Type.myint;
  var y_4 : borrowed (Type.myint, Type.myint);
  var _5 : ();
  var _6 : bool;
  var _7 : Type.myint;
  var _8 : Type.myint;
  var _9 : usize;
  {
    goto BB0
  }
  BB0 {
    _2 <- Type.Myint_MyInt(1);
    _3 <- Type.Myint_MyInt(2);
    x_1 <- (_2, _3);
    y_4 <- borrow_mut x_1;
    x_1 <-  ^ y_4;
    assume { (fun tup -> let (a, b) = tup in Type.drop_myint a && Type.drop_myint b) x_1 };
    _6 <- z ();
    goto BB1
  }
  BB1 {
    switch (_6)
      | False -> goto BB3
      | True -> goto BB2
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { drop_bool _6 };
    goto BB4
  }
  BB3 {
    assume { drop_bool _6 };
    _8 <- Type.Myint_MyInt(10);
    y_4 <- { y_4 with current = (let (a, b) =  * y_4 in (_8, b)) };
    assume { Type.drop_myint _8 };
    _5 <- ();
    assume { (fun tup -> let () = tup in True) _5 };
    goto BB5
  }
  BB4 {
    _7 <- Type.Myint_MyInt(4);
    y_4 <- { y_4 with current = (let (a, b) =  * y_4 in (a, _7)) };
    assume { Type.drop_myint _7 };
    _5 <- ();
    assume { (fun tup -> let () = tup in True) _5 };
    goto BB5
  }
  BB5 {
    _9 <- (let Type.Myint_MyInt(a) = let (a, _) =  * y_4 in a in a);
    assume { drop_mut_ref y_4 };
    assume { drop_uint _9 };
    _0 <- ();
    return _0
  }


end
