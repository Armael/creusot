module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module C07MutableCapture_TestFnmut_Closure2_Interface
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  type c07mutablecapture_testfnmut_closure2  = 
    | C07MutableCapture_TestFnmut_Closure2 (borrowed uint32)
    
  function c07mutablecapture_testfnmut_closure2_0 (self : c07mutablecapture_testfnmut_closure2) : borrowed uint32
  val c07mutablecapture_testfnmut_closure2_0 (self : c07mutablecapture_testfnmut_closure2) : borrowed uint32
    ensures { result = c07mutablecapture_testfnmut_closure2_0 self }
    
  axiom c07mutablecapture_testfnmut_closure2_0_acc : forall a : borrowed uint32 . c07mutablecapture_testfnmut_closure2_0 (C07MutableCapture_TestFnmut_Closure2 a : c07mutablecapture_testfnmut_closure2) = a
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface as Resolve0 with type t = uint32
  predicate precondition (_1' : c07mutablecapture_testfnmut_closure2) (_2' : ()) = 
    UInt32.to_int ( * c07mutablecapture_testfnmut_closure2_0 _1') < 1000000
  predicate postcondition_mut (_1' : borrowed c07mutablecapture_testfnmut_closure2) (_2' : ()) (result : int32) = 
    UInt32.to_int ( * c07mutablecapture_testfnmut_closure2_0 ( * _1')) = UInt32.to_int ( * c07mutablecapture_testfnmut_closure2_0 ( * _1')) + 1 &&  ^ c07mutablecapture_testfnmut_closure2_0 ( ^ _1') =  ^ c07mutablecapture_testfnmut_closure2_0 ( * _1') && true
  predicate postcondition_once (_1' : c07mutablecapture_testfnmut_closure2) (_2' : ()) (result : int32) = 
    UInt32.to_int ( * c07mutablecapture_testfnmut_closure2_0 _1') = UInt32.to_int ( * c07mutablecapture_testfnmut_closure2_0 _1') + 1
  predicate resolve (_1' : c07mutablecapture_testfnmut_closure2) = 
    Resolve0.resolve (c07mutablecapture_testfnmut_closure2_0 _1') && true
  val c07MutableCapture_TestFnmut_Closure2 (_1' : borrowed c07mutablecapture_testfnmut_closure2) (_2' : ()) : int32
    requires {UInt32.to_int ( * c07mutablecapture_testfnmut_closure2_0 ( * _1')) < 1000000}
    ensures { UInt32.to_int ( * c07mutablecapture_testfnmut_closure2_0 ( ^ _1')) = UInt32.to_int ( * c07mutablecapture_testfnmut_closure2_0 ( * _1')) + 1 }
    ensures {  ^ c07mutablecapture_testfnmut_closure2_0 ( ^ _1') =  ^ c07mutablecapture_testfnmut_closure2_0 ( * _1') && true }
    
end
module C07MutableCapture_TestFnmut_Closure2
  use prelude.Prelude
  use mach.int.Int
  use mach.int.UInt32
  type c07mutablecapture_testfnmut_closure2  = 
    | C07MutableCapture_TestFnmut_Closure2 (borrowed uint32)
    
  function c07mutablecapture_testfnmut_closure2_0 (self : c07mutablecapture_testfnmut_closure2) : borrowed uint32
  val c07mutablecapture_testfnmut_closure2_0 (self : c07mutablecapture_testfnmut_closure2) : borrowed uint32
    ensures { result = c07mutablecapture_testfnmut_closure2_0 self }
    
  axiom c07mutablecapture_testfnmut_closure2_0_acc : forall a : borrowed uint32 . c07mutablecapture_testfnmut_closure2_0 (C07MutableCapture_TestFnmut_Closure2 a : c07mutablecapture_testfnmut_closure2) = a
  use mach.int.Int32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = c07mutablecapture_testfnmut_closure2
  let rec cfg c07MutableCapture_TestFnmut_Closure2 (_1' : borrowed c07mutablecapture_testfnmut_closure2) (_2' : ()) : int32
    requires {UInt32.to_int ( * c07mutablecapture_testfnmut_closure2_0 ( * _1')) < 1000000}
    ensures { UInt32.to_int ( * c07mutablecapture_testfnmut_closure2_0 ( ^ _1')) = UInt32.to_int ( * c07mutablecapture_testfnmut_closure2_0 ( * _1')) + 1 }
    
   = 
  var _0 : int32;
  var _1 : borrowed c07mutablecapture_testfnmut_closure2;
  {
    _1 <- _1';
    goto BB0
  }
  BB0 {
    _1 <- { _1 with current = (let C07MutableCapture_TestFnmut_Closure2 a =  * _1 in C07MutableCapture_TestFnmut_Closure2 ({ (c07mutablecapture_testfnmut_closure2_0 ( * _1)) with current = ( * c07mutablecapture_testfnmut_closure2_0 ( * _1) + (1 : uint32)) })) };
    assume { Resolve0.resolve _1 };
    _0 <- (5 : int32);
    return _0
  }
  
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) = 
    true
end
module CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface
  type self
  type args
  predicate precondition (self : self) (a : args)
end
module CreusotContracts_Std1_Fun_FnOnceSpec_Precondition
  type self
  type args
  predicate precondition (self : self) (a : args)
end
module Core_Ops_Function_FnOnce_Output
  type self
  type args
  type output
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  predicate postcondition_mut (self : borrowed self) (a : args) (res : Output0.output)
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  predicate postcondition_mut (self : borrowed self) (a : args) (res : Output0.output)
end
module Core_Ops_Function_FnMut_CallMut_Interface
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = self,
  type args = args
  val call_mut [@cfg:stackify] (self : borrowed self) (args : args) : Output0.output
    requires {Precondition0.precondition ( * self) args}
    ensures { PostconditionMut0.postcondition_mut self args result }
    
end
module Core_Ops_Function_FnMut_CallMut
  type self
  type args
  use prelude.Prelude
  clone Core_Ops_Function_FnOnce_Output as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = self,
  type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_FnOnceSpec_Precondition_Interface as Precondition0 with type self = self,
  type args = args
  val call_mut [@cfg:stackify] (self : borrowed self) (args : args) : Output0.output
    requires {Precondition0.precondition ( * self) args}
    ensures { PostconditionMut0.postcondition_mut self args result }
    
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module C07MutableCapture_TestFnmut_Interface
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  val test_fnmut [@cfg:stackify] (x : uint32) : ()
    requires {UInt32.to_int x = 100000}
    
end
module C07MutableCapture_TestFnmut
  use mach.int.UInt32
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = ()
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = uint32
  clone C07MutableCapture_TestFnmut_Closure2_Interface as Closure20 with predicate Resolve0.resolve = Resolve2.resolve,
  axiom .
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = uint32
  let rec cfg test_fnmut [@cfg:stackify] (x : uint32) : ()
    requires {UInt32.to_int x = 100000}
    
   = 
  var _0 : ();
  var x_1 : uint32;
  var c_2 : Closure20.c07mutablecapture_testfnmut_closure2;
  var closure_3 : Closure20.c07mutablecapture_testfnmut_closure2;
  var _4 : borrowed uint32;
  var _5 : int32;
  var _6 : borrowed Closure20.c07mutablecapture_testfnmut_closure2;
  var _7 : ();
  var _8 : int32;
  var _9 : borrowed Closure20.c07mutablecapture_testfnmut_closure2;
  var _10 : ();
  var _11 : ();
  {
    x_1 <- x;
    goto BB0
  }
  BB0 {
    _4 <- borrow_mut x_1;
    x_1 <-  ^ _4;
    assume { Resolve0.resolve x_1 };
    closure_3 <- Closure20.C07MutableCapture_TestFnmut_Closure2 _4;
    assume { Closure20.resolve c_2 };
    c_2 <- closure_3;
    _6 <- borrow_mut c_2;
    c_2 <-  ^ _6;
    _7 <- ();
    _5 <- Closure20.c07MutableCapture_TestFnmut_Closure2 _6 _7;
    goto BB1
  }
  BB1 {
    _9 <- borrow_mut c_2;
    c_2 <-  ^ _9;
    assume { Closure20.resolve c_2 };
    _10 <- ();
    _8 <- Closure20.c07MutableCapture_TestFnmut_Closure2 _9 _10;
    goto BB2
  }
  BB2 {
    assert { UInt32.to_int x_1 = 100002 };
    _11 <- ();
    assume { Resolve1.resolve _11 };
    _0 <- ();
    return _0
  }
  
end
