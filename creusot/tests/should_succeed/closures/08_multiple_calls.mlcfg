
module C08MultipleCalls_MultiUse_Closure0_Type
  use prelude.UInt32
  use prelude.Int8
  use prelude.Borrow
  type c08multiplecalls_multiuse_closure0 't =
    | C08MultipleCalls_MultiUse_Closure0 't
    
end
module C08MultipleCalls_MultiUse_Closure0
  type t
  use prelude.Int8
  use prelude.Borrow
  use prelude.UInt32
  use C08MultipleCalls_MultiUse_Closure0_Type as C08MultipleCalls_MultiUse_Closure0
  let function field_00 [#"../08_multiple_calls.rs" 5 12 5 31] (self : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t) : t
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../08_multiple_calls.rs" 1 0 1 0] let C08MultipleCalls_MultiUse_Closure0.C08MultipleCalls_MultiUse_Closure0 a = self in a
  use prelude.Int
  predicate resolve0 (self : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t)
  val resolve0 (self : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t) : bool
    ensures { result = resolve0 self }
    
  let rec cfg c08MultipleCalls_MultiUse_Closure0 [#"../08_multiple_calls.rs" 5 12 5 31] [@cfg:stackify] [@cfg:subregion_analysis] (_1 : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t) : uint32
    requires {[#"../08_multiple_calls.rs" 5 23 5 29] field_00 _1 = field_00 _1}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var _1 : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t = _1;
  var res : uint32;
  {
    goto BB0
  }
  BB0 {
    assume { resolve0 _1 };
    res <- ([#"../08_multiple_calls.rs" 8 8 8 9] [#"../08_multiple_calls.rs" 8 8 8 9] (0 : uint32));
    _0 <- res;
    return _0
  }
  
end
module C08MultipleCalls_MultiUse
  type t
  use prelude.UInt32
  use prelude.Int8
  use C08MultipleCalls_MultiUse_Closure0_Type as C08MultipleCalls_MultiUse_Closure0
  predicate inv2 (_x : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t)
  val inv2 (_x : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t) : bool
    ensures { result = inv2 _x }
    
  axiom inv2 : [#"../08_multiple_calls.rs" 1 0 1 0] forall x : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t . inv2 x = true
  predicate inv1 (_x : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t)
  val inv1 (_x : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : [#"../08_multiple_calls.rs" 1 0 1 0] forall x : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t . inv1 x = true
  predicate inv0 (_x : t)
  val inv0 (_x : t) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : [#"../08_multiple_calls.rs" 1 0 1 0] forall x : t . inv0 x = true
  use prelude.Borrow
  predicate resolve1 (self : t)
  val resolve1 (self : t) : bool
    ensures { result = resolve1 self }
    
  use prelude.Int
  predicate postcondition0 [#"../08_multiple_calls.rs" 5 12 5 31] (self : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t) (_ : ()) (result : uint32)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] true
  let function field_00 [#"../08_multiple_calls.rs" 5 12 5 31] (self : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t) : t
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../08_multiple_calls.rs" 1 0 1 0] let C08MultipleCalls_MultiUse_Closure0.C08MultipleCalls_MultiUse_Closure0 a = self in a
  predicate precondition0 [#"../08_multiple_calls.rs" 5 12 5 31] (self : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t) (_ : ())
    
   =
    [#"../08_multiple_calls.rs" 5 23 5 29] field_00 self = field_00 self
  val uses_fn0 [#"../08_multiple_calls.rs" 19 0 19 32] (f : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t) : ()
    requires {[#"../08_multiple_calls.rs" 17 11 17 29] precondition0 f ()}
    requires {[#"../08_multiple_calls.rs" 19 27 19 28] inv1 f}
    ensures { [#"../08_multiple_calls.rs" 18 0 18 70] exists r : uint32 . exists f2 : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t . inv2 f2 /\ f2 = f /\ postcondition0 f2 () r }
    
  predicate resolve2 (self : t)
  val resolve2 (self : t) : bool
    ensures { result = resolve2 self }
    
  predicate resolve0 [#"../08_multiple_calls.rs" 5 12 5 31] (_1 : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t)
    
   =
    [#"../08_multiple_calls.rs" 1 0 1 0] resolve2 (field_00 _1)
  let rec cfg multi_use [#"../08_multiple_calls.rs" 4 0 4 26] [@cfg:stackify] [@cfg:subregion_analysis] (x : t) : ()
    requires {[#"../08_multiple_calls.rs" 4 20 4 21] inv0 x}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x : t = x;
  var c : C08MultipleCalls_MultiUse_Closure0.c08multiplecalls_multiuse_closure0 t;
  var _4 : ();
  {
    goto BB0
  }
  BB0 {
    c <- ([#"../08_multiple_calls.rs" 5 12 5 31] C08MultipleCalls_MultiUse_Closure0.C08MultipleCalls_MultiUse_Closure0 ([#"../08_multiple_calls.rs" 5 12 5 31] x));
    assume { resolve0 c };
    _4 <- ([#"../08_multiple_calls.rs" 11 4 11 14] uses_fn0 c);
    goto BB1
  }
  BB1 {
    assert { [@expl:type invariant] inv0 x };
    assume { resolve1 x };
    _0 <- ([#"../08_multiple_calls.rs" 4 27 14 1] ());
    return _0
  }
  
end
