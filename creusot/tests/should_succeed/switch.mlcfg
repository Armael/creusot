module Ambient
use Ref 
use mach.int.Int 
use mach.int.Int32
use mach.int.Int64
use mach.int.UInt32
use mach.int.UInt64
use string.Char
use floating_point.Single
use floating_point.Double
(** Generic Type for borrowed values *) 
type borrowed 'a = 
{ current : 'a ; 
final : 'a; (* The "future" value when borrow will end *) 
} 
let function ( *_ ) x = x.current 
let function ( ^_ ) x = x.final 
val borrow_mut (a : 'a) : borrowed 'a 
ensures { *result = a }
  type option 't =
      | Some('t)
      | None

  let cfg test (o_o_1 : option uint32) : bool
    =
  var _0 : bool;
  var o_1 : option uint32;
  var _2 : isize;
  var x_3 : uint32;
  var _4 : uint32;
  {
    o_1 <- o_o_1;
    goto BB0;
  }
  BB0 {
    switch (o_1)
      | Some(_) -> goto BB1
      | None -> goto BB2
      | _ -> goto BB3
      end
  }
  BB3 {
    absurd
  }
  BB2 {
    _0 <- false;
    goto BB5
  }
  BB5 {
    _0
  }
  BB1 {
    goto BB4
  }
  BB4 {
    x_3 <- let Some(a) = o_1 in a;
    _4 <- x_3;
    _0 <- _4 > 0;
    goto BB5
  }

  let cfg test2 (o_o_1 : (option uint32, uint32)) : uint32
    =
  var _0 : uint32;
  var o_1 : (option uint32, uint32);
  var _2 : isize;
  var x_3 : uint32;
  {
    o_1 <- o_o_1;
    goto BB0;
  }
  BB0 {
    switch (let (a, _) = o_1 in a)
      | Some(_) -> goto BB1
      | None -> goto BB2
      | _ -> goto BB3
      end
  }
  BB3 {
    absurd
  }
  BB2 {
    _0 <- let (_, a) = o_1 in a;
    goto BB5
  }
  BB5 {
    _0
  }
  BB1 {
    goto BB4
  }
  BB4 {
    x_3 <- let Some(a) = let (a, _) = o_1 in a in a;
    _0 <- x_3;
    goto BB5
  }

  let cfg main () : ()
    =
  var _0 : ();
  {
    goto BB0;
  }
  BB0 {
    _0 <- ();
    _0
  }

end
