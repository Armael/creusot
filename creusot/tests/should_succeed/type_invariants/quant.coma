
module T_quant__WithInvariant [#"quant.rs" 4 0 4 24]
  type t_WithInvariant  =
    | C_WithInvariant
  
  let rec t_WithInvariant (input:t_WithInvariant) (ret  )= any [ good -> {C_WithInvariant  = input} (! ret) ] 
end
module M_quant__forall [#"quant.rs" 17 0 17 15]
  let%span squant0 = "quant.rs" 16 0 16 50
  let%span squant1 = "quant.rs" 14 0 14 6
  let%span squant2 = "quant.rs" 10 8 10 12
  
  use T_quant__WithInvariant as WithInvariant'0
  
  predicate invariant'0 [#"quant.rs" 9 4 9 30] (self : WithInvariant'0.t_WithInvariant) =
    [%#squant2] true
  
  constant _1  : ()
  
  function forall' [#"quant.rs" 17 0 17 15] (_1 : ()) : ()
  
  goal vc_forall' : [%#squant0] forall x : WithInvariant'0.t_WithInvariant . invariant'0 x
end
module M_quant__exists [#"quant.rs" 22 0 22 15]
  let%span squant0 = "quant.rs" 21 0 21 42
  let%span squant1 = "quant.rs" 19 0 19 6
  
  use T_quant__WithInvariant as WithInvariant'0
  
  constant _1  : ()
  
  function exists' [#"quant.rs" 22 0 22 15] (_1 : ()) : ()
  
  goal vc_exists' : [%#squant0] exists _x : WithInvariant'0.t_WithInvariant . true
end
module M_quant__qyi1106831974123796784 [#"quant.rs" 6 0 6 32] (* <WithInvariant as creusot_contracts::Invariant> *)
  let%span squant0 = "quant.rs" 6 0 6 32
  let%span squant1 = "quant.rs" 10 8 10 12
  
  use T_quant__WithInvariant as WithInvariant'0
  
  predicate invariant'0 [#"quant.rs" 9 4 9 30] (self : WithInvariant'0.t_WithInvariant) =
    [%#squant1] true
  
  predicate inv'0 (_1 : WithInvariant'0.t_WithInvariant)
  
  axiom inv_axiom'0 [@rewrite] : forall x : WithInvariant'0.t_WithInvariant [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | WithInvariant'0.C_WithInvariant -> true
    end)
end
