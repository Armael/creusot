module Ambient
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double

  type usize = int
  type isize = int

  type borrowed 'a = { current : 'a ; final : 'a; }
  let function ( *_ ) x = x.current
  let function ( ^_ ) x = x.final
  val borrow_mut (a : 'a) : borrowed 'a
  ensures { *result = a }

  predicate drop_fix (_ : 'a) = true
  predicate drop_uint (_ : 'a) = true
  predicate drop_int (_ : 'a) = true
  predicate drop_float (_ : 'a) = true
  predicate drop_bool (_ : 'a) = true
  predicate drop_mut_ref (b : borrowed 'a) = ^ b = * b
  predicate drop_ref (_ : 'a) = true

  scope Type
  type option 't =
      | Option_None
      | Option_Some('t)

  predicate drop_option (drop_'t : 't -> bool) (self : option 't) =
    match (self) with
      | Option_None -> True
      | Option_Some(a) -> drop_'t a
      end

  type list  =
      | List_List(uint32, option (list))

  predicate drop_list (self : list) =
    let List_List(a, b) = self in drop_uint a && drop_option drop_fix b
  end
  let rec cfg indexMut (o_l_1 : borrowed (Type.list))(o_ix_2 : usize) : borrowed uint32
    =
  var _0 : borrowed uint32;
  var l_1 : borrowed (Type.list);
  var ix_2 : usize;
  var _3 : borrowed uint32;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : usize;
  var _8 : ();
  var _9 : isize;
  var n_10 : borrowed (Type.list);
  var _11 : borrowed (Type.list);
  var _12 : ();
  var _13 : ();
  var _14 : borrowed uint32;
  {
    l_1 <- o_l_1;
    ix_2 <- o_ix_2;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assume { (fun tup -> let () = tup in True) _5 };
    goto BB2
  }
  BB2 {
    _7 <- ix_2;
    _6 <- _7 > 0;
    switch (_6)
      | False -> goto BB4
      | True -> goto BB3
      | _ -> goto BB3
      end
  }
  BB3 {
    assume { drop_bool _6 };
    goto BB5
  }
  BB4 {
    assume { drop_uint ix_2 };
    assume { drop_bool _6 };
    _4 <- ();
    assume { (fun tup -> let () = tup in True) _4 };
    _14 <- borrow_mut (let Type.List_List(a, _) =  * l_1 in a);
    l_1 <- { l_1 with current = (let Type.List_List(a, b) =  * l_1 in Type.List_List( ^ _14, b)) };
    assume { drop_mut_ref l_1 };
    _3 <- borrow_mut ( * _14);
    _14 <- { _14 with current = ( ^ _3) };
    assume { drop_mut_ref _14 };
    _0 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _0) };
    assume { drop_mut_ref _3 };
    return _0
  }
  BB5 {
    switch (let Type.List_List(_, a) =  * l_1 in a)
      | Type.Option_None -> goto BB6
      | Type.Option_Some(_) -> goto BB7
      | _ -> goto BB8
      end
  }
  BB6 {
    assume { drop_mut_ref l_1 };
    assume { drop_uint ix_2 };
    assume { drop_int _9 };
    absurd
  }
  BB7 {
    assume { drop_int _9 };
    goto BB9
  }
  BB8 {
    assume { drop_mut_ref l_1 };
    assume { drop_uint ix_2 };
    assume { drop_int _9 };
    absurd
  }
  BB9 {
    n_10 <- borrow_mut (let Type.Option_Some(a) = let Type.List_List(_, a) =  * l_1 in a in a);
    l_1 <- { l_1 with current = (let Type.List_List(a, b) =  * l_1 in Type.List_List(a, let Type.Option_Some(a) = let Type.List_List(_, a) =  * l_1 in a in Type.Option_Some( ^ n_10))) };
    assume { drop_mut_ref l_1 };
    _11 <- borrow_mut ( * n_10);
    n_10 <- { n_10 with current = ( ^ _11) };
    assume { drop_mut_ref n_10 };
    l_1 <- _11;
    _8 <- ();
    assume { (fun tup -> let () = tup in True) _8 };
    ix_2 <- ix_2 - 1;
    _5 <- ();
    goto BB1
  }


  let rec cfg write (o_l_1 : borrowed (Type.list))(o_ix_2 : usize)(o_val_3 : uint32) : ()
    =
  var _0 : ();
  var l_1 : borrowed (Type.list);
  var ix_2 : usize;
  var val_3 : uint32;
  var _4 : uint32;
  var _5 : borrowed uint32;
  var _6 : borrowed (Type.list);
  var _7 : usize;
  {
    l_1 <- o_l_1;
    ix_2 <- o_ix_2;
    val_3 <- o_val_3;
    goto BB0
  }
  BB0 {
    _4 <- val_3;
    assume { drop_uint val_3 };
    _6 <- borrow_mut ( * l_1);
    l_1 <- { l_1 with current = ( ^ _6) };
    assume { drop_mut_ref l_1 };
    _7 <- ix_2;
    assume { drop_uint ix_2 };
    _5 <- indexMut _6 _7;
    goto BB1
  }
  BB1 {
    _5 <- { _5 with current = _4 };
    assume { drop_uint _4 };
    assume { drop_mut_ref _5 };
    _0 <- ();
    return _0
  }


  let rec cfg main () : ()
    =
  var _0 : ();
  var l_1 : Type.list;
  var _2 : Type.option (Type.list);
  var _3 : Type.list;
  var _4 : Type.list;
  var _5 : Type.option (Type.list);
  var _6 : ();
  var _7 : borrowed (Type.list);
  var _8 : borrowed (Type.list);
  {
    goto BB0
  }
  BB0 {
    _5 <- Type.Option_None;
    _4 <- Type.List_List(10, _5);
    goto BB1
  }
  BB1 {
    assume { Type.drop_option Type.drop_list  _5 };
    _3 <- _4;
    goto BB2
  }
  BB2 {
    _2 <- Type.Option_Some(_3);
    goto BB3
  }
  BB3 {
    assume { Type.drop_list _3 };
    l_1 <- Type.List_List(1, _2);
    goto BB4
  }
  BB4 {
    assume { Type.drop_option Type.drop_list  _2 };
    _8 <- borrow_mut l_1;
    l_1 <-  ^ _8;
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    assume { drop_mut_ref _8 };
    _6 <- write _7 0 2;
    goto BB5
  }
  BB5 {
    assume { (fun tup -> let () = tup in True) _6 };
    _0 <- ();
    goto BB6
  }
  BB6 {
    assume { Type.drop_list l_1 };
    return _0
  }


end
