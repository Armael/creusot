module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use set.Set
  use prelude.Prelude
  type listindexmut_option 't =
    | ListIndexMut_Option_None
    | ListIndexMut_Option_Some 't
    
  let function listindexmut_option_Some_0 (self : listindexmut_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | ListIndexMut_Option_None -> any 't
      | ListIndexMut_Option_Some a -> a
      end
  type listindexmut_list  =
    | ListIndexMut_List uint32 (listindexmut_option (listindexmut_list))
    
  let function listindexmut_list_List_1 (self : listindexmut_list) : listindexmut_option (listindexmut_list)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | ListIndexMut_List _ a -> a
      end
  let function listindexmut_list_List_0 (self : listindexmut_list) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | ListIndexMut_List a _ -> a
      end
end
module ListIndexMut_Len_Interface
  use Type
  use mach.int.Int
  function len (l : Type.listindexmut_list) : int
end
module ListIndexMut_Len
  use Type
  use mach.int.Int
  use mach.int.Int32
  function len [#"../list_index_mut.rs" 15 0 15 22] (l : Type.listindexmut_list) : int =
    [#"../list_index_mut.rs" 14 0 14 8] let Type.ListIndexMut_List _ ls = l in 1 + match (ls) with
      | Type.ListIndexMut_Option_Some ls -> len ls
      | Type.ListIndexMut_Option_None -> 0
      end
end
module ListIndexMut_Get_Interface
  use Type
  use mach.int.Int
  use mach.int.UInt32
  function get (l : Type.listindexmut_list) (ix : int) : Type.listindexmut_option uint32
end
module ListIndexMut_Get
  use Type
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int32
  function get [#"../list_index_mut.rs" 26 0 26 39] (l : Type.listindexmut_list) (ix : int) : Type.listindexmut_option uint32
    
   =
    [#"../list_index_mut.rs" 25 0 25 8] let Type.ListIndexMut_List i ls = l in if ix > 0 then
      match (ls) with
        | Type.ListIndexMut_Option_Some ls -> get ls (ix - 1)
        | Type.ListIndexMut_Option_None -> Type.ListIndexMut_Option_None
        end
    else
      Type.ListIndexMut_Option_Some i
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module ListIndexMut_IndexMut_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  use Type
  use mach.int.Int32
  use mach.int.UInt32
  clone ListIndexMut_Get_Interface as Get0
  clone ListIndexMut_Len_Interface as Len0
  val index_mut [@cfg:stackify] (param_l : borrowed (Type.listindexmut_list)) (param_ix : usize) : borrowed uint32
    requires {[#"../list_index_mut.rs" 39 11 39 36] UInt64.to_int param_ix < Len0.len ( * param_l)}
    ensures { [#"../list_index_mut.rs" 40 10 40 51] Type.ListIndexMut_Option_Some ( * result) = Get0.get ( * param_l) (UInt64.to_int param_ix) }
    ensures { [#"../list_index_mut.rs" 41 10 41 51] Type.ListIndexMut_Option_Some ( ^ result) = Get0.get ( ^ param_l) (UInt64.to_int param_ix) }
    ensures { [#"../list_index_mut.rs" 42 10 42 40] Len0.len ( ^ param_l) = Len0.len ( * param_l) }
    ensures { [#"../list_index_mut.rs" 43 0 43 114] forall i : (int) . 0 <= i /\ i < Len0.len ( * param_l) /\ i <> UInt64.to_int param_ix -> Get0.get ( * param_l) i = Get0.get ( ^ param_l) i }
    
end
module ListIndexMut_IndexMut
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  use Type
  use mach.int.Int32
  use mach.int.UInt32
  clone ListIndexMut_Get as Get0
  clone ListIndexMut_Len as Len0
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Type.listindexmut_list
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.listindexmut_list
  let rec cfg index_mut [@cfg:stackify] [#"../list_index_mut.rs" 44 0 44 65] (param_l : borrowed (Type.listindexmut_list)) (param_ix : usize) : borrowed uint32
    requires {[#"../list_index_mut.rs" 39 11 39 36] UInt64.to_int param_ix < Len0.len ( * param_l)}
    ensures { [#"../list_index_mut.rs" 40 10 40 51] Type.ListIndexMut_Option_Some ( * result) = Get0.get ( * param_l) (UInt64.to_int param_ix) }
    ensures { [#"../list_index_mut.rs" 41 10 41 51] Type.ListIndexMut_Option_Some ( ^ result) = Get0.get ( ^ param_l) (UInt64.to_int param_ix) }
    ensures { [#"../list_index_mut.rs" 42 10 42 40] Len0.len ( ^ param_l) = Len0.len ( * param_l) }
    ensures { [#"../list_index_mut.rs" 43 0 43 114] forall i : (int) . 0 <= i /\ i < Len0.len ( * param_l) /\ i <> UInt64.to_int param_ix -> Get0.get ( * param_l) i = Get0.get ( ^ param_l) i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var param_l_1 : borrowed (Type.listindexmut_list);
  var param_ix_2 : usize;
  var _3 : borrowed uint32;
  ghost var old_l_4 : borrowed (Type.listindexmut_list);
  var _5 : ();
  var l_6 : borrowed (Type.listindexmut_list);
  var ix_7 : usize;
  var _8 : ();
  var _9 : ();
  var _10 : bool;
  var _11 : usize;
  var _12 : ();
  var _13 : isize;
  var n_14 : borrowed (Type.listindexmut_list);
  var _15 : borrowed (Type.listindexmut_list);
  var _16 : ();
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var _20 : borrowed uint32;
  {
    param_l_1 <- param_l;
    param_ix_2 <- param_ix;
    goto BB0
  }
  BB0 {
    _5 <- ();
    old_l_4 <- ghost ([#"../list_index_mut.rs" 45 16 45 34] param_l_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve l_6 };
    l_6 <- param_l_1;
    param_l_1 <- any borrowed (Type.listindexmut_list);
    ix_7 <- param_ix_2;
    goto BB2
  }
  BB2 {
    invariant valid_ix { [#"../list_index_mut.rs" 48 26 48 56] (0 : usize) <= ix_7 /\ UInt64.to_int ix_7 < Len0.len ( * l_6) };
    invariant get_target_now { [#"../list_index_mut.rs" 49 32 49 71] Get0.get ( * l_6) (UInt64.to_int ix_7) = Get0.get ( * old_l_4) (UInt64.to_int param_ix_2) };
    invariant get_target_fin { [#"../list_index_mut.rs" 50 32 50 71] Get0.get ( ^ l_6) (UInt64.to_int ix_7) = Get0.get ( ^ old_l_4) (UInt64.to_int param_ix_2) };
    invariant len { [#"../list_index_mut.rs" 48 4 48 58] Len0.len ( ^ l_6) = Len0.len ( * l_6) -> Len0.len ( ^ old_l_4) = Len0.len ( * old_l_4) };
    invariant untouched { [#"../list_index_mut.rs" 48 4 48 58] (forall i : (int) . 0 <= i /\ i < Len0.len ( * l_6) /\ i <> UInt64.to_int ix_7 -> Get0.get ( ^ l_6) i = Get0.get ( * l_6) i) -> (forall i : (int) . 0 <= i /\ i < Len0.len ( * old_l_4) /\ i <> UInt64.to_int param_ix_2 -> Get0.get ( ^ old_l_4) i = Get0.get ( * old_l_4) i) };
    _11 <- ix_7;
    _10 <- ([#"../list_index_mut.rs" 57 10 57 16] _11 > (0 : usize));
    switch (_10)
      | False -> goto BB7
      | _ -> goto BB3
      end
  }
  BB3 {
    switch (Type.listindexmut_list_List_1 ( * l_6))
      | Type.ListIndexMut_Option_None -> goto BB4
      | Type.ListIndexMut_Option_Some _ -> goto BB6
      end
  }
  BB4 {
    assume { Resolve0.resolve l_6 };
    absurd
  }
  BB5 {
    assume { Resolve0.resolve l_6 };
    absurd
  }
  BB6 {
    n_14 <- borrow_mut (Type.listindexmut_option_Some_0 (Type.listindexmut_list_List_1 ( * l_6)));
    l_6 <- { l_6 with current = (let Type.ListIndexMut_List a b =  * l_6 in Type.ListIndexMut_List a (let Type.ListIndexMut_Option_Some a = Type.listindexmut_list_List_1 ( * l_6) in Type.ListIndexMut_Option_Some ( ^ n_14))) };
    assume { Resolve0.resolve l_6 };
    _15 <- borrow_mut ( * n_14);
    n_14 <- { n_14 with current = ( ^ _15) };
    assume { Resolve1.resolve n_14 };
    assume { Resolve0.resolve l_6 };
    l_6 <- _15;
    _15 <- any borrowed (Type.listindexmut_list);
    _12 <- ();
    ix_7 <- ([#"../list_index_mut.rs" 64 8 64 15] ix_7 - (1 : usize));
    _9 <- ();
    goto BB2
  }
  BB7 {
    _8 <- ();
    _20 <- borrow_mut (Type.listindexmut_list_List_0 ( * l_6));
    l_6 <- { l_6 with current = (let Type.ListIndexMut_List a b =  * l_6 in Type.ListIndexMut_List ( ^ _20) b) };
    assume { Resolve0.resolve l_6 };
    _3 <- borrow_mut ( * _20);
    _20 <- { _20 with current = ( ^ _3) };
    assume { Resolve2.resolve _20 };
    _0 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _0) };
    assume { Resolve2.resolve _3 };
    return _0
  }
  
end
module ListIndexMut_Write_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  use Type
  use mach.int.Int32
  use mach.int.UInt32
  clone ListIndexMut_Get_Interface as Get0
  clone ListIndexMut_Len_Interface as Len0
  val write [@cfg:stackify] (l : borrowed (Type.listindexmut_list)) (ix : usize) (v : uint32) : ()
    requires {[#"../list_index_mut.rs" 71 11 71 24] UInt64.to_int ix < Len0.len ( * l)}
    ensures { [#"../list_index_mut.rs" 72 10 72 33] Type.ListIndexMut_Option_Some v = Get0.get ( ^ l) (UInt64.to_int ix) }
    ensures { [#"../list_index_mut.rs" 73 10 73 28] Len0.len ( ^ l) = Len0.len ( * l) }
    ensures { [#"../list_index_mut.rs" 74 0 74 88] forall i : (int) . 0 <= i /\ i < Len0.len ( * l) /\ i <> UInt64.to_int ix -> Get0.get ( * l) i = Get0.get ( ^ l) i }
    
end
module ListIndexMut_Write
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  use Type
  use mach.int.Int32
  use mach.int.UInt32
  clone ListIndexMut_Get as Get0
  clone ListIndexMut_Len as Len0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.listindexmut_list
  clone ListIndexMut_IndexMut_Interface as IndexMut0 with function Len0.len = Len0.len, function Get0.get = Get0.get
  let rec cfg write [@cfg:stackify] [#"../list_index_mut.rs" 75 0 75 45] (l : borrowed (Type.listindexmut_list)) (ix : usize) (v : uint32) : ()
    requires {[#"../list_index_mut.rs" 71 11 71 24] UInt64.to_int ix < Len0.len ( * l)}
    ensures { [#"../list_index_mut.rs" 72 10 72 33] Type.ListIndexMut_Option_Some v = Get0.get ( ^ l) (UInt64.to_int ix) }
    ensures { [#"../list_index_mut.rs" 73 10 73 28] Len0.len ( ^ l) = Len0.len ( * l) }
    ensures { [#"../list_index_mut.rs" 74 0 74 88] forall i : (int) . 0 <= i /\ i < Len0.len ( * l) /\ i <> UInt64.to_int ix -> Get0.get ( * l) i = Get0.get ( ^ l) i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l_1 : borrowed (Type.listindexmut_list);
  var ix_2 : usize;
  var v_3 : uint32;
  var _4 : uint32;
  var _5 : borrowed uint32;
  var _6 : borrowed (Type.listindexmut_list);
  var _7 : usize;
  {
    l_1 <- l;
    ix_2 <- ix;
    v_3 <- v;
    goto BB0
  }
  BB0 {
    _4 <- v_3;
    _6 <- borrow_mut ( * l_1);
    l_1 <- { l_1 with current = ( ^ _6) };
    _7 <- ix_2;
    _5 <- ([#"../list_index_mut.rs" 76 5 76 21] IndexMut0.index_mut _6 _7);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve l_1 };
    _5 <- { _5 with current = _4 };
    _4 <- any uint32;
    assume { Resolve1.resolve _5 };
    _0 <- ();
    return _0
  }
  
end
module ListIndexMut_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module ListIndexMut_F
  use mach.int.Int
  use mach.int.UInt32
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone ListIndexMut_Get as Get0
  clone ListIndexMut_Len as Len0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = Type.listindexmut_list
  clone ListIndexMut_Write_Interface as Write0 with function Len0.len = Len0.len, function Get0.get = Get0.get
  let rec cfg f [@cfg:stackify] [#"../list_index_mut.rs" 79 0 79 10] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var l_1 : Type.listindexmut_list;
  var _2 : Type.listindexmut_option (Type.listindexmut_list);
  var _3 : Type.listindexmut_list;
  var _4 : Type.listindexmut_list;
  var _5 : Type.listindexmut_option (Type.listindexmut_list);
  var _6 : ();
  var _7 : borrowed (Type.listindexmut_list);
  var _8 : borrowed (Type.listindexmut_list);
  {
    goto BB0
  }
  BB0 {
    _5 <- Type.ListIndexMut_Option_None;
    _4 <- Type.ListIndexMut_List (10 : uint32) _5;
    goto BB1
  }
  BB1 {
    _3 <- _4;
    goto BB2
  }
  BB2 {
    _2 <- Type.ListIndexMut_Option_Some _3;
    goto BB3
  }
  BB3 {
    l_1 <- Type.ListIndexMut_List (1 : uint32) _2;
    goto BB4
  }
  BB4 {
    _8 <- borrow_mut l_1;
    l_1 <-  ^ _8;
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    _6 <- ([#"../list_index_mut.rs" 81 4 81 23] Write0.write _7 (0 : usize) (2 : uint32));
    goto BB5
  }
  BB5 {
    assume { Resolve0.resolve _8 };
    _0 <- ();
    goto BB6
  }
  BB6 {
    return _0
  }
  
end
