
module IncSome2Tree_Tree_Type
  use prelude.UInt32
  use prelude.Int
  type t_tree  =
    | C_Node (t_tree) uint32 (t_tree)
    | C_Leaf
    
  let function node_0 (self : t_tree) : t_tree = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Node a _ _ -> a
      | C_Leaf -> any t_tree
      end
  let function node_1 (self : t_tree) : uint32 = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Node _ a _ -> a
      | C_Leaf -> any uint32
      end
  let function node_2 (self : t_tree) : t_tree = [@vc:do_not_keep_trace] [@vc:sp]
    match self with
      | C_Node _ _ a -> a
      | C_Leaf -> any t_tree
      end
end
module IncSome2Tree_Impl0_LemmaSumNonneg_Impl
  use IncSome2Tree_Tree_Type as IncSome2Tree_Tree_Type
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  function sum0 [#"../inc_some_2_tree.rs" 21 4 21 23] (self : IncSome2Tree_Tree_Type.t_tree) : int =
    [#"../inc_some_2_tree.rs" 23 12 26 13] match self with
      | IncSome2Tree_Tree_Type.C_Node tl a tr -> sum0 tl + UInt32.to_int a + sum0 tr
      | IncSome2Tree_Tree_Type.C_Leaf -> 0
      end
  val sum0 [#"../inc_some_2_tree.rs" 21 4 21 23] (self : IncSome2Tree_Tree_Type.t_tree) : int
    ensures { result = sum0 self }
    
  let rec ghost function lemma_sum_nonneg [#"../inc_some_2_tree.rs" 33 4 33 30] (self : IncSome2Tree_Tree_Type.t_tree) : ()
    ensures { [#"../inc_some_2_tree.rs" 32 14 32 29] sum0 self >= 0 }
    variant {[#"../inc_some_2_tree.rs" 31 15 31 19] self}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../inc_some_2_tree.rs" 34 8 40 9] match self with
      | IncSome2Tree_Tree_Type.C_Node tl _ tr -> let _ = lemma_sum_nonneg tl in let _ = lemma_sum_nonneg tr in ()
      | IncSome2Tree_Tree_Type.C_Leaf -> ()
      end
end
module IncSome2Tree_Impl0_SumX
  use prelude.UInt32
  use prelude.Int
  use IncSome2Tree_Tree_Type as IncSome2Tree_Tree_Type
  function sum0 [#"../inc_some_2_tree.rs" 21 4 21 23] (self : IncSome2Tree_Tree_Type.t_tree) : int =
    [#"../inc_some_2_tree.rs" 23 12 26 13] match self with
      | IncSome2Tree_Tree_Type.C_Node tl a tr -> sum0 tl + UInt32.to_int a + sum0 tr
      | IncSome2Tree_Tree_Type.C_Leaf -> 0
      end
  val sum0 [#"../inc_some_2_tree.rs" 21 4 21 23] (self : IncSome2Tree_Tree_Type.t_tree) : int
    ensures { result = sum0 self }
    
  use prelude.Borrow
  use prelude.UInt32
  function lemma_sum_nonneg0 [#"../inc_some_2_tree.rs" 33 4 33 30] (self : IncSome2Tree_Tree_Type.t_tree) : ()
  axiom lemma_sum_nonneg0_def : forall self : IncSome2Tree_Tree_Type.t_tree . lemma_sum_nonneg0 self = ([#"../inc_some_2_tree.rs" 34 8 40 9] match self with
    | IncSome2Tree_Tree_Type.C_Node tl _ tr -> let _ = lemma_sum_nonneg0 tl in let _ = lemma_sum_nonneg0 tr in ()
    | IncSome2Tree_Tree_Type.C_Leaf -> ()
    end)
  val lemma_sum_nonneg0 [#"../inc_some_2_tree.rs" 33 4 33 30] (self : IncSome2Tree_Tree_Type.t_tree) : ()
    ensures { result = lemma_sum_nonneg0 self }
    
  axiom lemma_sum_nonneg0_spec : forall self : IncSome2Tree_Tree_Type.t_tree . [#"../inc_some_2_tree.rs" 32 14 32 29] sum0 self >= 0
  let rec cfg sum_x [#"../inc_some_2_tree.rs" 45 4 45 26] [@cfg:stackify] [@cfg:subregion_analysis] (self : IncSome2Tree_Tree_Type.t_tree) : uint32
    requires {[#"../inc_some_2_tree.rs" 43 15 43 38] sum0 self <= 1000000}
    ensures { [#"../inc_some_2_tree.rs" 44 14 44 35] UInt32.to_int result = sum0 self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : uint32;
  var self : IncSome2Tree_Tree_Type.t_tree = self;
  var tl : IncSome2Tree_Tree_Type.t_tree;
  var a : uint32;
  var tr : IncSome2Tree_Tree_Type.t_tree;
  var _11 : uint32;
  var _14 : uint32;
  {
    goto BB0
  }
  BB0 {
    switch (self)
      | IncSome2Tree_Tree_Type.C_Node _ _ _ -> goto BB1
      | IncSome2Tree_Tree_Type.C_Leaf -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    _0 <- ([#"../inc_some_2_tree.rs" 55 20 55 21] [#"../inc_some_2_tree.rs" 55 20 55 21] (0 : uint32));
    goto BB7
  }
  BB3 {
    absurd
  }
  BB4 {
    tl <- ([#"../inc_some_2_tree.rs" 47 17 47 19] IncSome2Tree_Tree_Type.node_0 self);
    a <- ([#"../inc_some_2_tree.rs" 47 21 47 22] IncSome2Tree_Tree_Type.node_1 self);
    tr <- ([#"../inc_some_2_tree.rs" 47 24 47 26] IncSome2Tree_Tree_Type.node_2 self);
    assert { [@expl:assertion] [#"../inc_some_2_tree.rs" 49 20 49 41] let _ = lemma_sum_nonneg0 tl in let _ = lemma_sum_nonneg0 tr in true };
    _11 <- ([#"../inc_some_2_tree.rs" 53 16 53 26] sum_x ([#"../inc_some_2_tree.rs" 53 16 53 26] tl));
    goto BB5
  }
  BB5 {
    _14 <- ([#"../inc_some_2_tree.rs" 53 34 53 44] sum_x ([#"../inc_some_2_tree.rs" 53 34 53 44] tr));
    goto BB6
  }
  BB6 {
    _0 <- ([#"../inc_some_2_tree.rs" 53 16 53 44] ([#"../inc_some_2_tree.rs" 53 16 53 31] _11 + a) + _14);
    _11 <- any uint32;
    _14 <- any uint32;
    goto BB7
  }
  BB7 {
    return _0
  }
  
end
module IncSome2Tree_Impl0_TakeSomeRest
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  use prelude.UInt32
  function shallow_model1 (self : borrowed uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] UInt32.to_int ( * self)
  val shallow_model1 (self : borrowed uint32) : int
    ensures { result = shallow_model1 self }
    
  use prelude.Int
  use IncSome2Tree_Tree_Type as IncSome2Tree_Tree_Type
  function sum0 [#"../inc_some_2_tree.rs" 21 4 21 23] (self : IncSome2Tree_Tree_Type.t_tree) : int =
    [#"../inc_some_2_tree.rs" 23 12 26 13] match self with
      | IncSome2Tree_Tree_Type.C_Node tl a tr -> sum0 tl + UInt32.to_int a + sum0 tr
      | IncSome2Tree_Tree_Type.C_Leaf -> 0
      end
  val sum0 [#"../inc_some_2_tree.rs" 21 4 21 23] (self : IncSome2Tree_Tree_Type.t_tree) : int
    ensures { result = sum0 self }
    
  predicate resolve2 (self : borrowed (IncSome2Tree_Tree_Type.t_tree)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (IncSome2Tree_Tree_Type.t_tree)) : bool
    ensures { result = resolve2 self }
    
  predicate resolve1 (self : borrowed (IncSome2Tree_Tree_Type.t_tree)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed (IncSome2Tree_Tree_Type.t_tree)) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve0 (self : borrowed uint32) : bool
    ensures { result = resolve0 self }
    
  val random0 [#"../inc_some_2_tree.rs" 15 0 15 19] (_1 : ()) : bool
  function lemma_sum_nonneg0 [#"../inc_some_2_tree.rs" 33 4 33 30] (self : IncSome2Tree_Tree_Type.t_tree) : ()
  axiom lemma_sum_nonneg0_def : forall self : IncSome2Tree_Tree_Type.t_tree . lemma_sum_nonneg0 self = ([#"../inc_some_2_tree.rs" 34 8 40 9] match self with
    | IncSome2Tree_Tree_Type.C_Node tl _ tr -> let _ = lemma_sum_nonneg0 tl in let _ = lemma_sum_nonneg0 tr in ()
    | IncSome2Tree_Tree_Type.C_Leaf -> ()
    end)
  val lemma_sum_nonneg0 [#"../inc_some_2_tree.rs" 33 4 33 30] (self : IncSome2Tree_Tree_Type.t_tree) : ()
    ensures { result = lemma_sum_nonneg0 self }
    
  axiom lemma_sum_nonneg0_spec : forall self : IncSome2Tree_Tree_Type.t_tree . [#"../inc_some_2_tree.rs" 32 14 32 29] sum0 self >= 0
  let rec cfg take_some_rest [#"../inc_some_2_tree.rs" 63 4 63 57] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (IncSome2Tree_Tree_Type.t_tree)) : (borrowed uint32, borrowed (IncSome2Tree_Tree_Type.t_tree))
    ensures { [#"../inc_some_2_tree.rs" 59 14 60 72] sum0 ( ^ self) - sum0 ( * self) = UInt32.to_int ( ^ (let (a, _) = result in a)) + sum0 ( ^ (let (_, a) = result in a)) - shallow_model1 (let (a, _) = result in a) - sum0 ( * (let (_, a) = result in a)) }
    ensures { [#"../inc_some_2_tree.rs" 61 14 61 37] shallow_model1 (let (a, _) = result in a) <= sum0 ( * self) }
    ensures { [#"../inc_some_2_tree.rs" 62 14 62 42] sum0 ( * (let (_, a) = result in a)) <= sum0 ( * self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : (borrowed uint32, borrowed (IncSome2Tree_Tree_Type.t_tree));
  var self : borrowed (IncSome2Tree_Tree_Type.t_tree) = self;
  var mtl : borrowed (IncSome2Tree_Tree_Type.t_tree);
  var ma : borrowed uint32;
  var mtr : borrowed (IncSome2Tree_Tree_Type.t_tree);
  var _11 : bool;
  var _12 : borrowed uint32;
  var _13 : borrowed (IncSome2Tree_Tree_Type.t_tree);
  var _14 : borrowed (IncSome2Tree_Tree_Type.t_tree);
  var _15 : bool;
  var _16 : borrowed (IncSome2Tree_Tree_Type.t_tree);
  var _17 : bool;
  var _18 : borrowed (IncSome2Tree_Tree_Type.t_tree);
  var _19 : borrowed (IncSome2Tree_Tree_Type.t_tree);
  {
    goto BB0
  }
  BB0 {
    switch ( * self)
      | IncSome2Tree_Tree_Type.C_Node _ _ _ -> goto BB1
      | IncSome2Tree_Tree_Type.C_Leaf -> goto BB2
      end
  }
  BB1 {
    goto BB4
  }
  BB2 {
    assume { resolve2 self };
    goto BB19
  }
  BB3 {
    assume { resolve2 self };
    absurd
  }
  BB4 {
    mtl <- Borrow.borrow_mut (IncSome2Tree_Tree_Type.node_0 ( * self));
    self <- { self with current = (let IncSome2Tree_Tree_Type.C_Node x0 x1 x2 =  * self in IncSome2Tree_Tree_Type.C_Node ( ^ mtl) x1 x2) };
    ma <- Borrow.borrow_mut (IncSome2Tree_Tree_Type.node_1 ( * self));
    self <- { self with current = (let IncSome2Tree_Tree_Type.C_Node x0 x1 x2 =  * self in IncSome2Tree_Tree_Type.C_Node x0 ( ^ ma) x2) };
    mtr <- Borrow.borrow_mut (IncSome2Tree_Tree_Type.node_2 ( * self));
    self <- { self with current = (let IncSome2Tree_Tree_Type.C_Node x0 x1 x2 =  * self in IncSome2Tree_Tree_Type.C_Node x0 x1 ( ^ mtr)) };
    assert { [@expl:assertion] [#"../inc_some_2_tree.rs" 67 20 67 42] let _ = lemma_sum_nonneg0 ( * mtl) in let _ = lemma_sum_nonneg0 ( * mtr) in true };
    _11 <- ([#"../inc_some_2_tree.rs" 71 19 71 27] random0 ());
    goto BB5
  }
  BB5 {
    switch (_11)
      | False -> goto BB11
      | True -> goto BB6
      end
  }
  BB6 {
    _12 <- Borrow.borrow_mut ( * ma);
    ma <- { ma with current =  ^ _12 };
    _15 <- ([#"../inc_some_2_tree.rs" 72 28 72 36] random0 ());
    goto BB7
  }
  BB7 {
    switch (_15)
      | False -> goto BB9
      | True -> goto BB8
      end
  }
  BB8 {
    assume { resolve1 mtr };
    _16 <- Borrow.borrow_mut ( * mtl);
    mtl <- { mtl with current =  ^ _16 };
    _14 <- Borrow.borrow_mut ( * _16);
    _16 <- { _16 with current =  ^ _14 };
    assume { resolve2 _16 };
    goto BB10
  }
  BB9 {
    assume { resolve1 mtl };
    _14 <- Borrow.borrow_mut ( * mtr);
    mtr <- { mtr with current =  ^ _14 };
    goto BB10
  }
  BB10 {
    _13 <- Borrow.borrow_mut ( * _14);
    _14 <- { _14 with current =  ^ _13 };
    _0 <- ([#"../inc_some_2_tree.rs" 72 20 72 58] (_12, _13));
    _12 <- any borrowed uint32;
    _13 <- any borrowed (IncSome2Tree_Tree_Type.t_tree);
    assume { resolve2 _14 };
    goto BB18
  }
  BB11 {
    assume { resolve0 ma };
    _17 <- ([#"../inc_some_2_tree.rs" 73 26 73 34] random0 ());
    goto BB12
  }
  BB12 {
    switch (_17)
      | False -> goto BB15
      | True -> goto BB13
      end
  }
  BB13 {
    assume { resolve1 mtr };
    _18 <- Borrow.borrow_mut ( * mtl);
    mtl <- { mtl with current =  ^ _18 };
    _0 <- ([#"../inc_some_2_tree.rs" 74 20 74 40] take_some_rest _18);
    _18 <- any borrowed (IncSome2Tree_Tree_Type.t_tree);
    goto BB14
  }
  BB14 {
    goto BB17
  }
  BB15 {
    assume { resolve1 mtl };
    _19 <- Borrow.borrow_mut ( * mtr);
    mtr <- { mtr with current =  ^ _19 };
    _0 <- ([#"../inc_some_2_tree.rs" 76 20 76 40] take_some_rest _19);
    _19 <- any borrowed (IncSome2Tree_Tree_Type.t_tree);
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    assume { resolve1 mtr };
    assume { resolve0 ma };
    assume { resolve1 mtl };
    assume { resolve2 self };
    return _0
  }
  BB19 {
    goto BB20
  }
  BB20 {
    goto BB19
  }
  
end
module IncSome2Tree_IncSome2Tree
  use prelude.UInt32
  use prelude.Int
  use IncSome2Tree_Tree_Type as IncSome2Tree_Tree_Type
  function sum0 [#"../inc_some_2_tree.rs" 21 4 21 23] (self : IncSome2Tree_Tree_Type.t_tree) : int =
    [#"../inc_some_2_tree.rs" 23 12 26 13] match self with
      | IncSome2Tree_Tree_Type.C_Node tl a tr -> sum0 tl + UInt32.to_int a + sum0 tr
      | IncSome2Tree_Tree_Type.C_Leaf -> 0
      end
  val sum0 [#"../inc_some_2_tree.rs" 21 4 21 23] (self : IncSome2Tree_Tree_Type.t_tree) : int
    ensures { result = sum0 self }
    
  use prelude.Borrow
  predicate resolve2 (self : borrowed (IncSome2Tree_Tree_Type.t_tree)) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve2 (self : borrowed (IncSome2Tree_Tree_Type.t_tree)) : bool
    ensures { result = resolve2 self }
    
  use prelude.UInt32
  predicate resolve1 (self : borrowed uint32) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve1 (self : borrowed uint32) : bool
    ensures { result = resolve1 self }
    
  predicate resolve0 (self : (borrowed uint32, borrowed (IncSome2Tree_Tree_Type.t_tree))) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 16 8 16 60] resolve1 (let (a, _) = self in a) /\ resolve2 (let (_, a) = self in a)
  val resolve0 (self : (borrowed uint32, borrowed (IncSome2Tree_Tree_Type.t_tree))) : bool
    ensures { result = resolve0 self }
    
  use prelude.Int
  function shallow_model1 (self : borrowed uint32) : int =
    [#"../../../../../creusot-contracts/src/model.rs" 101 8 101 31] UInt32.to_int ( * self)
  val shallow_model1 (self : borrowed uint32) : int
    ensures { result = shallow_model1 self }
    
  val take_some_rest0 [#"../inc_some_2_tree.rs" 63 4 63 57] (self : borrowed (IncSome2Tree_Tree_Type.t_tree)) : (borrowed uint32, borrowed (IncSome2Tree_Tree_Type.t_tree))
    ensures { [#"../inc_some_2_tree.rs" 59 14 60 72] sum0 ( ^ self) - sum0 ( * self) = UInt32.to_int ( ^ (let (a, _) = result in a)) + sum0 ( ^ (let (_, a) = result in a)) - shallow_model1 (let (a, _) = result in a) - sum0 ( * (let (_, a) = result in a)) }
    ensures { [#"../inc_some_2_tree.rs" 61 14 61 37] shallow_model1 (let (a, _) = result in a) <= sum0 ( * self) }
    ensures { [#"../inc_some_2_tree.rs" 62 14 62 42] sum0 ( * (let (_, a) = result in a)) <= sum0 ( * self) }
    
  val sum_x0 [#"../inc_some_2_tree.rs" 45 4 45 26] (self : IncSome2Tree_Tree_Type.t_tree) : uint32
    requires {[#"../inc_some_2_tree.rs" 43 15 43 38] sum0 self <= 1000000}
    ensures { [#"../inc_some_2_tree.rs" 44 14 44 35] UInt32.to_int result = sum0 self }
    
  let rec cfg inc_some_2_tree [#"../inc_some_2_tree.rs" 85 0 85 51] [@cfg:stackify] [@cfg:subregion_analysis] (t : IncSome2Tree_Tree_Type.t_tree) (j : uint32) (k : uint32) : ()
    requires {[#"../inc_some_2_tree.rs" 84 11 84 41] sum0 t + UInt32.to_int j + UInt32.to_int k <= 1000000}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var t : IncSome2Tree_Tree_Type.t_tree = t;
  var j : uint32 = j;
  var k : uint32 = k;
  var sum0 : uint32;
  var ma : borrowed uint32;
  var mt : borrowed (IncSome2Tree_Tree_Type.t_tree);
  var _9 : (borrowed uint32, borrowed (IncSome2Tree_Tree_Type.t_tree));
  var _10 : borrowed (IncSome2Tree_Tree_Type.t_tree);
  var mb : borrowed uint32;
  var _12 : (borrowed uint32, borrowed (IncSome2Tree_Tree_Type.t_tree));
  var _13 : borrowed (IncSome2Tree_Tree_Type.t_tree);
  var _19 : uint32;
  {
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    sum0 <- ([#"../inc_some_2_tree.rs" 86 15 86 24] sum_x0 ([#"../inc_some_2_tree.rs" 86 15 86 24] t));
    goto BB2
  }
  BB2 {
    _10 <- Borrow.borrow_mut t;
    t <-  ^ _10;
    _9 <- ([#"../inc_some_2_tree.rs" 87 19 87 37] take_some_rest0 _10);
    _10 <- any borrowed (IncSome2Tree_Tree_Type.t_tree);
    goto BB3
  }
  BB3 {
    ma <- (let (a, _) = _9 in a);
    _9 <- (let (x0, x1) = _9 in (any borrowed uint32, x1));
    mt <- (let (_, a) = _9 in a);
    _9 <- (let (x0, x1) = _9 in (x0, any borrowed (IncSome2Tree_Tree_Type.t_tree)));
    assume { resolve0 _9 };
    _13 <- Borrow.borrow_mut ( * mt);
    mt <- { mt with current =  ^ _13 };
    _12 <- ([#"../inc_some_2_tree.rs" 88 18 88 37] take_some_rest0 _13);
    _13 <- any borrowed (IncSome2Tree_Tree_Type.t_tree);
    goto BB4
  }
  BB4 {
    mb <- (let (a, _) = _12 in a);
    _12 <- (let (x0, x1) = _12 in (any borrowed uint32, x1));
    assume { resolve0 _12 };
    ma <- { ma with current = ([#"../inc_some_2_tree.rs" 89 4 89 12]  * ma + j) };
    assume { resolve1 ma };
    mb <- { mb with current = ([#"../inc_some_2_tree.rs" 90 4 90 12]  * mb + k) };
    assume { resolve1 mb };
    assume { resolve2 mt };
    _19 <- ([#"../inc_some_2_tree.rs" 91 12 91 21] sum_x0 ([#"../inc_some_2_tree.rs" 91 12 91 21] t));
    goto BB5
  }
  BB5 {
    switch ([#"../inc_some_2_tree.rs" 91 4 91 38] not ([#"../inc_some_2_tree.rs" 91 12 91 37] _19 = ([#"../inc_some_2_tree.rs" 91 25 91 37] ([#"../inc_some_2_tree.rs" 91 25 91 33] sum0 + j) + k)))
      | False -> goto BB7
      | True -> goto BB6
      end
  }
  BB6 {
    absurd
  }
  BB7 {
    _0 <- ([#"../inc_some_2_tree.rs" 85 52 92 1] ());
    goto BB8
  }
  BB8 {
    return _0
  }
  
end
module IncSome2Tree_Impl1
  
end
