
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
    [#"../../../../../creusot-contracts/src/resolve.rs" 25 20 25 34]  ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module IncMax_TakeMax_Interface
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  val take_max [#"../inc_max.rs" 6 0 6 64] (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { [#"../inc_max.rs" 4 0 5 56] if  * ma >=  * mb then
       * mb =  ^ mb /\ result = ma
    else
       * ma =  ^ ma /\ result = mb
     }
    
end
module IncMax_TakeMax
  use prelude.Int
  use prelude.UInt32
  use prelude.Borrow
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  let rec cfg take_max [#"../inc_max.rs" 6 0 6 64] [@cfg:stackify] [@cfg:subregion_analysis] (ma : borrowed uint32) (mb : borrowed uint32) : borrowed uint32
    ensures { [#"../inc_max.rs" 4 0 5 56] if  * ma >=  * mb then
       * mb =  ^ mb /\ result = ma
    else
       * ma =  ^ ma /\ result = mb
     }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : borrowed uint32;
  var ma : borrowed uint32 = ma;
  var mb : borrowed uint32 = mb;
  var _3 : borrowed uint32;
  var _5 : borrowed uint32;
  var _9 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    switch ([#"../inc_max.rs" 7 7 7 17] ([#"../inc_max.rs" 7 7 7 10]  * ma) >= ([#"../inc_max.rs" 7 14 7 17]  * mb))
      | False -> goto BB2
      | True -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve mb };
    [#"../inc_max.rs" 8 8 8 10] _9 <- Borrow.borrow_mut ( * ma);
    [#"../inc_max.rs" 8 8 8 10] ma <- { ma with current = ( ^ _9) };
    [#"../inc_max.rs" 8 8 8 10] _5 <- Borrow.borrow_mut ( * _9);
    [#"../inc_max.rs" 8 8 8 10] _9 <- { _9 with current = ( ^ _5) };
    assume { Resolve0.resolve _9 };
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve ma };
    [#"../inc_max.rs" 10 8 10 10] _5 <- Borrow.borrow_mut ( * mb);
    [#"../inc_max.rs" 10 8 10 10] mb <- { mb with current = ( ^ _5) };
    goto BB3
  }
  BB3 {
    [#"../inc_max.rs" 7 4 11 5] _3 <- Borrow.borrow_mut ( * _5);
    [#"../inc_max.rs" 7 4 11 5] _5 <- { _5 with current = ( ^ _3) };
    [#"../inc_max.rs" 7 4 11 5] _0 <- Borrow.borrow_mut ( * _3);
    [#"../inc_max.rs" 7 4 11 5] _3 <- { _3 with current = ( ^ _0) };
    assume { Resolve0.resolve _5 };
    assume { Resolve0.resolve _3 };
    assume { Resolve0.resolve mb };
    assume { Resolve0.resolve ma };
    return _0
  }
  
end
module IncMax_IncMax_Interface
  use prelude.Int
  use prelude.UInt32
  val inc_max [#"../inc_max.rs" 15 0 15 38] (a : uint32) (b : uint32) : ()
    requires {[#"../inc_max.rs" 14 11 14 49] a <= (1000000 : uint32) /\ b <= (1000000 : uint32)}
    
end
module IncMax_IncMax
  use prelude.Borrow
  use prelude.Int
  use prelude.UInt32
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = uint32
  clone IncMax_TakeMax_Interface as TakeMax0
  let rec cfg inc_max [#"../inc_max.rs" 15 0 15 38] [@cfg:stackify] [@cfg:subregion_analysis] (a : uint32) (b : uint32) : ()
    requires {[#"../inc_max.rs" 14 11 14 49] a <= (1000000 : uint32) /\ b <= (1000000 : uint32)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : uint32 = a;
  var b : uint32 = b;
  var mc : borrowed uint32;
  var _5 : borrowed uint32;
  var _6 : borrowed uint32;
  var _7 : borrowed uint32;
  var _8 : borrowed uint32;
  {
    goto BB0
  }
  BB0 {
    [#"../inc_max.rs" 16 22 16 28] _6 <- Borrow.borrow_mut a;
    [#"../inc_max.rs" 16 22 16 28] a <-  ^ _6;
    [#"../inc_max.rs" 16 22 16 28] _5 <- Borrow.borrow_mut ( * _6);
    [#"../inc_max.rs" 16 22 16 28] _6 <- { _6 with current = ( ^ _5) };
    [#"../inc_max.rs" 16 30 16 36] _8 <- Borrow.borrow_mut b;
    [#"../inc_max.rs" 16 30 16 36] b <-  ^ _8;
    [#"../inc_max.rs" 16 30 16 36] _7 <- Borrow.borrow_mut ( * _8);
    [#"../inc_max.rs" 16 30 16 36] _8 <- { _8 with current = ( ^ _7) };
    [#"../inc_max.rs" 16 13 16 37] mc <- ([#"../inc_max.rs" 16 13 16 37] TakeMax0.take_max _5 _7);
    [#"../inc_max.rs" 1 0 1 0] _5 <- any borrowed uint32;
    [#"../inc_max.rs" 1 0 1 0] _7 <- any borrowed uint32;
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _8 };
    assume { Resolve0.resolve _6 };
    [#"../inc_max.rs" 17 4 17 12] mc <- { mc with current = ([#"../inc_max.rs" 17 4 17 12]  * mc + ([#"../inc_max.rs" 17 11 17 12] [#"../inc_max.rs" 17 11 17 12] (1 : uint32))) };
    assume { Resolve0.resolve mc };
    switch ([#"../inc_max.rs" 18 4 18 19] not ([#"../inc_max.rs" 18 12 18 18] ([#"../inc_max.rs" 18 12 18 13] a) <> ([#"../inc_max.rs" 18 17 18 18] b)))
      | False -> goto BB3
      | True -> goto BB2
      end
  }
  BB2 {
    assert { [#"../inc_max.rs" 18 4 18 19] false };
    absurd
  }
  BB3 {
    [#"../inc_max.rs" 15 39 19 1] _0 <- ([#"../inc_max.rs" 15 39 19 1] ());
    return _0
  }
  
end
