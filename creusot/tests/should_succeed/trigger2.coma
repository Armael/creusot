
module Trigger2_ResolveSeq_Impl
  type t
  
  let%span strigger20 = "../trigger2.rs" 6 18 6 21
  
  let%span strigger21 = "../trigger2.rs" 5 0 5 36
  
  let%span strigger22 = "../trigger2.rs" 7 4 10 5
  
  let%span span3 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  predicate invariant'0 (self : Seq.seq (borrowed t)) =
    [%#span3] true
  
  predicate inv'0 (_x : Seq.seq (borrowed t))
  
  axiom inv'0 : forall x : Seq.seq (borrowed t) . inv'0 x = true
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate resolve'0 (self : Seq.seq (borrowed t)) =
    [%#span4] true
  
  constant seq  : Seq.seq (borrowed t)
  
  predicate resolve_seq [#"../trigger2.rs" 6 0 6 43] (seq : Seq.seq (borrowed t))
  
  goal vc_resolve_seq : ([%#strigger20] inv'0 seq)
   -> ([%#strigger21] resolve'0 seq
   -> ([%#strigger22] forall i : int [Seq.get seq i] . 0 < i /\ i <= Seq.length seq
   -> (Seq.get seq i).current = (Seq.get seq i).final))
end
module Trigger2_ResolveSeq2_Impl
  type t
  
  let%span strigger20 = "../trigger2.rs" 16 23 16 26
  
  let%span strigger21 = "../trigger2.rs" 14 0 14 36
  
  let%span strigger22 = "../trigger2.rs" 6 18 6 21
  
  let%span strigger23 = "../trigger2.rs" 5 0 5 36
  
  let%span span4 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span6 = "../trigger2.rs" 7 4 10 5
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  predicate invariant'0 (self : Seq.seq (borrowed t)) =
    [%#span4] true
  
  predicate inv'0 (_x : Seq.seq (borrowed t))
  
  axiom inv'0 : forall x : Seq.seq (borrowed t) . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate resolve'0 (self : Seq.seq (borrowed t)) =
    [%#span5] true
  
  predicate resolve_seq'0 [#"../trigger2.rs" 6 0 6 43] (seq : Seq.seq (borrowed t)) =
    [%#span6] forall i : int [Seq.get seq i] . 0 < i /\ i <= Seq.length seq
     -> (Seq.get seq i).current = (Seq.get seq i).final
  
  axiom resolve_seq'0_spec : forall seq : Seq.seq (borrowed t) . ([%#strigger22] inv'0 seq)
   -> ([%#strigger23] resolve'0 seq  -> resolve_seq'0 seq)
  
  constant seq  : Seq.seq (borrowed t)
  
  predicate resolve_seq2 [#"../trigger2.rs" 16 0 16 48] (seq : Seq.seq (borrowed t))
  
  goal vc_resolve_seq2 : ([%#strigger20] inv'0 seq)
   -> ([%#strigger22] inv'0 seq)
  /\ (([%#strigger23] resolve'0 seq  -> resolve_seq'0 seq)  -> ([%#strigger21] resolve'0 seq  -> resolve_seq'0 seq))
end
