
module Trigger2_ResolveSeq_Impl
  type t
  
  let%span strigger20 = "../trigger2.rs" 5 0 5 36
  
  let%span strigger21 = "../trigger2.rs" 7 4 10 5
  
  let%span span2 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  predicate resolve'0 (self : Seq.seq (borrowed t)) =
    [%#span2] true
  
  constant seq  : Seq.seq (borrowed t)
  
  predicate resolve_seq [#"../trigger2.rs" 6 0 6 43] (seq : Seq.seq (borrowed t))
  
  goal vc_resolve_seq : [%#strigger20] resolve'0 seq
   -> ([%#strigger21] forall i : int [Seq.get seq i] . 0 < i /\ i <= Seq.length seq
   -> (Seq.get seq i).current = (Seq.get seq i).final)
end
module Trigger2_ResolveSeq2_Impl
  type t
  
  let%span strigger20 = "../trigger2.rs" 14 0 14 36
  
  let%span strigger21 = "../trigger2.rs" 5 0 5 36
  
  let%span span2 = "../../../../creusot-contracts/src/resolve.rs" 46 8 46 12
  
  let%span span3 = "../trigger2.rs" 7 4 10 5
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  use seq.Seq
  
  predicate resolve'0 (self : Seq.seq (borrowed t)) =
    [%#span2] true
  
  predicate resolve_seq'0 [#"../trigger2.rs" 6 0 6 43] (seq : Seq.seq (borrowed t)) =
    [%#span3] forall i : int [Seq.get seq i] . 0 < i /\ i <= Seq.length seq
     -> (Seq.get seq i).current = (Seq.get seq i).final
  
  axiom resolve_seq'0_spec : forall seq : Seq.seq (borrowed t) . [%#strigger21] resolve'0 seq  -> resolve_seq'0 seq
  
  constant seq  : Seq.seq (borrowed t)
  
  predicate resolve_seq2 [#"../trigger2.rs" 16 0 16 48] (seq : Seq.seq (borrowed t))
  
  goal vc_resolve_seq2 : ([%#strigger21] resolve'0 seq  -> resolve_seq'0 seq)
   -> ([%#strigger20] resolve'0 seq  -> resolve_seq'0 seq)
end
