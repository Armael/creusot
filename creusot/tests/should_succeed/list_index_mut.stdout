module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type option 't = 
    | Option_None
    | Option_Some('t)
    
  predicate drop_option (drop_t : 't -> bool) (self : option 't) = 
    match (self) with
      | Option_None -> true
      | Option_Some(a) -> drop_t a
      end
  type list  = 
    | List(uint32, option (list))
    
  predicate drop_list (self : list) = 
    let List(a, b) = self in drop_uint a && drop_option drop_fix b
end
module Len
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec function impl (l : Type.list) : int
    ensures { result >= Int32.to_int (0 : int32) }
    
   = 
    let Type.List(_, ls) = l in Int32.to_int (1 : int32) + match (ls) with
      | Type.Option_Some(ls) -> impl ls
      | Type.Option_None -> Int32.to_int (0 : int32)
      end
end
module Get
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  clone Len as Len0
  let rec function impl (l : Type.list) (ix : int) : Type.option uint32
    variant {Len0.impl l}
    
   = 
    let Type.List(i, ls) = l in match (ix > Int32.to_int (0 : int32)) with
      | False -> Type.Option_Some(i)
      | True -> match (ls) with
        | Type.Option_Some(ls) -> impl ls (ix - Int32.to_int (1 : int32))
        | Type.Option_None -> Type.Option_None
        end
      end
end
module Std_Process_Abort
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  val impl () : ()
    ensures { false }
    
end
module IndexMut
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  clone Len as Len0
  clone Get as Get1
  clone Std_Process_Abort as Abort2
  let rec cfg impl (o_param_l_1 : borrowed (Type.list)) (o_param_ix_2 : usize) : borrowed uint32
    requires {UInt64.to_int o_param_ix_2 < Len0.impl ( * o_param_l_1)}
    ensures { forall i : (int) . Int32.to_int (0 : int32) <= i && i < Len0.impl ( * o_param_l_1) && i <> UInt64.to_int o_param_ix_2 -> Get1.impl ( * o_param_l_1) i = Get1.impl ( ^ o_param_l_1) i }
    ensures { Len0.impl ( ^ o_param_l_1) = Len0.impl ( * o_param_l_1) }
    ensures { Type.Option_Some( ^ result) = Get1.impl ( ^ o_param_l_1) (UInt64.to_int o_param_ix_2) }
    ensures { Type.Option_Some( * result) = Get1.impl ( * o_param_l_1) (UInt64.to_int o_param_ix_2) }
    
   = 
  var _0 : borrowed uint32;
  var param_l_1 : borrowed (Type.list);
  var param_ix_2 : usize;
  var _3 : borrowed uint32;
  var l_4 : borrowed (Type.list);
  var ix_5 : usize;
  var _6 : ();
  var _12 : ();
  var _13 : bool;
  var _14 : usize;
  var _15 : ();
  var _16 : isize;
  var n_17 : borrowed (Type.list);
  var _18 : borrowed (Type.list);
  var _19 : ();
  var _20 : ();
  var _21 : borrowed uint32;
  {
    param_l_1 <- o_param_l_1;
    param_ix_2 <- o_param_ix_2;
    goto BB0
  }
  BB0 {
    assume { drop_mut_ref l_4 };
    l_4 <- param_l_1;
    assume { drop_uint ix_5 };
    ix_5 <- param_ix_2;
    assume { drop_uint param_ix_2 };
    goto BB1
  }
  BB1 {
    invariant valid_ix { (0 : usize) <= ix_5 && UInt64.to_int ix_5 < Len0.impl ( * l_4) };
    invariant get_target_now { Get1.impl ( * l_4) (UInt64.to_int ix_5) = Get1.impl ( * param_l_1) (UInt64.to_int param_ix_2) };
    invariant get_target_fin { Get1.impl ( ^ l_4) (UInt64.to_int ix_5) = Get1.impl ( ^ param_l_1) (UInt64.to_int param_ix_2) };
    invariant len { Len0.impl ( ^ l_4) = Len0.impl ( * l_4) -> Len0.impl ( ^ param_l_1) = Len0.impl ( * param_l_1) };
    invariant untouched { (forall i : (int) . Int32.to_int (0 : int32) <= i && i < Len0.impl ( * l_4) && i <> UInt64.to_int ix_5 -> Get1.impl ( ^ l_4) i = Get1.impl ( * l_4) i) -> (forall i : (int) . Int32.to_int (0 : int32) <= i && i < Len0.impl ( * param_l_1) && i <> UInt64.to_int param_ix_2 -> Get1.impl ( ^ param_l_1) i = Get1.impl ( * param_l_1) i) };
    goto BB2
  }
  BB2 {
    assume { drop_uint _14 };
    _14 <- ix_5;
    _13 <- _14 > (0 : usize);
    switch (_13)
      | False -> goto BB4
      | True -> goto BB3
      | _ -> goto BB3
      end
  }
  BB3 {
    assume { drop_bool _13 };
    goto BB5
  }
  BB4 {
    assume { drop_uint ix_5 };
    assume { drop_bool _13 };
    _6 <- ();
    assume { (fun tup -> let () = tup in true) _6 };
    _21 <- borrow_mut (let Type.List(a, _) =  * l_4 in a);
    l_4 <- { l_4 with current = (let Type.List(a, b) =  * l_4 in Type.List( ^ _21, b)) };
    assume { drop_mut_ref l_4 };
    _3 <- borrow_mut ( * _21);
    _21 <- { _21 with current = ( ^ _3) };
    assume { drop_mut_ref _21 };
    _0 <- borrow_mut ( * _3);
    _3 <- { _3 with current = ( ^ _0) };
    assume { drop_mut_ref _3 };
    return _0
  }
  BB5 {
    switch (let Type.List(_, a) =  * l_4 in a)
      | Type.Option_None -> goto BB6
      | Type.Option_Some(_) -> goto BB7
      | _ -> goto BB8
      end
  }
  BB6 {
    assume { drop_mut_ref l_4 };
    assume { drop_uint ix_5 };
    assume { drop_int _16 };
    absurd
  }
  BB7 {
    assume { drop_int _16 };
    goto BB9
  }
  BB8 {
    assume { drop_mut_ref l_4 };
    assume { drop_uint ix_5 };
    assume { drop_int _16 };
    absurd
  }
  BB9 {
    n_17 <- borrow_mut (let Type.Option_Some(a) = let Type.List(_, a) =  * l_4 in a in a);
    l_4 <- { l_4 with current = (let Type.List(a, b) =  * l_4 in Type.List(a, let Type.Option_Some(a) = let Type.List(_, a) =  * l_4 in a in Type.Option_Some( ^ n_17))) };
    assume { drop_mut_ref l_4 };
    _18 <- borrow_mut ( * n_17);
    n_17 <- { n_17 with current = ( ^ _18) };
    assume { drop_mut_ref n_17 };
    assume { drop_mut_ref l_4 };
    l_4 <- _18;
    _15 <- ();
    assume { (fun tup -> let () = tup in true) _15 };
    ix_5 <- ix_5 - (1 : usize);
    _12 <- ();
    assume { (fun tup -> let () = tup in true) _12 };
    goto BB1
  }
  
end
module Write
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  clone Len as Len1
  clone Get as Get2
  clone IndexMut as IndexMut0
  let rec cfg impl (o_l_1 : borrowed (Type.list)) (o_ix_2 : usize) (o_val_3 : uint32) : ()
    requires {UInt64.to_int o_ix_2 < Len1.impl ( * o_l_1)}
    ensures { forall i : (int) . Int32.to_int (0 : int32) <= i && i < Len1.impl ( * o_l_1) && i <> UInt64.to_int o_ix_2 -> Get2.impl ( * o_l_1) i = Get2.impl ( ^ o_l_1) i }
    ensures { Len1.impl ( ^ o_l_1) = Len1.impl ( * o_l_1) }
    ensures { Type.Option_Some(o_val_3) = Get2.impl ( ^ o_l_1) (UInt64.to_int o_ix_2) }
    
   = 
  var _0 : ();
  var l_1 : borrowed (Type.list);
  var ix_2 : usize;
  var val_3 : uint32;
  var _4 : uint32;
  var _5 : borrowed uint32;
  var _6 : borrowed (Type.list);
  var _7 : usize;
  {
    l_1 <- o_l_1;
    ix_2 <- o_ix_2;
    val_3 <- o_val_3;
    goto BB0
  }
  BB0 {
    assume { drop_uint _4 };
    _4 <- val_3;
    assume { drop_uint val_3 };
    _6 <- borrow_mut ( * l_1);
    l_1 <- { l_1 with current = ( ^ _6) };
    assume { drop_mut_ref l_1 };
    assume { drop_uint _7 };
    _7 <- ix_2;
    assume { drop_uint ix_2 };
    _5 <- IndexMut0.impl _6 _7;
    goto BB1
  }
  BB1 {
    assume { drop_uint ( * _5) };
    _5 <- { _5 with current = _4 };
    assume { drop_uint _4 };
    assume { drop_mut_ref _5 };
    _0 <- ();
    return _0
  }
  
end
module Main
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  clone Write as Write0
  let rec cfg impl () : () = 
  var _0 : ();
  var l_1 : Type.list;
  var _2 : Type.option (Type.list);
  var _3 : Type.list;
  var _4 : Type.list;
  var _5 : Type.option (Type.list);
  var _6 : ();
  var _7 : borrowed (Type.list);
  var _8 : borrowed (Type.list);
  {
    goto BB0
  }
  BB0 {
    _5 <- Type.Option_None;
    _4 <- Type.List((10 : uint32), _5);
    goto BB1
  }
  BB1 {
    _3 <- _4;
    goto BB2
  }
  BB2 {
    _2 <- Type.Option_Some(_3);
    goto BB3
  }
  BB3 {
    l_1 <- Type.List((1 : uint32), _2);
    goto BB4
  }
  BB4 {
    _8 <- borrow_mut l_1;
    l_1 <-  ^ _8;
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    assume { drop_mut_ref _8 };
    _6 <- Write0.impl _7 (0 : usize) (2 : uint32);
    goto BB5
  }
  BB5 {
    assume { drop_mut_ref _7 };
    _0 <- ();
    goto BB6
  }
  BB6 {
    assume { Type.drop_list l_1 };
    return _0
  }
  
end
