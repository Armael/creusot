module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type creusotcontracts_std1_vec_vec 't
  type hashmap_list 't = 
    | Hashmap_List_Nil
    | Hashmap_List_Cons 't (hashmap_list 't)
    
  function hashmap_list_Cons_0 (self : hashmap_list 't) : 't
  val hashmap_list_Cons_0 (self : hashmap_list 't) : 't
    ensures { result = hashmap_list_Cons_0 self }
    
  axiom hashmap_list_Cons_0_acc : forall a : 't, b : hashmap_list 't . hashmap_list_Cons_0 (Hashmap_List_Cons a b : hashmap_list 't) = a
  function hashmap_list_Cons_1 (self : hashmap_list 't) : hashmap_list 't
  val hashmap_list_Cons_1 (self : hashmap_list 't) : hashmap_list 't
    ensures { result = hashmap_list_Cons_1 self }
    
  axiom hashmap_list_Cons_1_acc : forall a : 't, b : hashmap_list 't . hashmap_list_Cons_1 (Hashmap_List_Cons a b : hashmap_list 't) = b
  type hashmap_myhashmap 'k 'v = 
    | Hashmap_MyHashMap (creusotcontracts_std1_vec_vec (hashmap_list ('k, 'v)))
    
  function hashmap_myhashmap_MyHashMap_buckets (self : hashmap_myhashmap 'k 'v) : creusotcontracts_std1_vec_vec (hashmap_list ('k, 'v))
    
  val hashmap_myhashmap_MyHashMap_buckets (self : hashmap_myhashmap 'k 'v) : creusotcontracts_std1_vec_vec (hashmap_list ('k, 'v))
    ensures { result = hashmap_myhashmap_MyHashMap_buckets self }
    
  axiom hashmap_myhashmap_MyHashMap_buckets_acc : forall a : creusotcontracts_std1_vec_vec (hashmap_list ('k, 'v)) . hashmap_myhashmap_MyHashMap_buckets (Hashmap_MyHashMap a : hashmap_myhashmap 'k 'v) = a
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  type creusotcontracts_logic_ghost_ghost 't = 
    | CreusotContracts_Logic_Ghost_Ghost opaque_ptr
    
end
module Hashmap_Hash_HashLog_Interface
  type self
  use mach.int.Int
  use mach.int.Int32
  function hash_log (self : self) : int
end
module Hashmap_Hash_HashLog
  type self
  use mach.int.Int
  use mach.int.Int32
  function hash_log (self : self) : int
  axiom hash_log_spec : forall self : self . hash_log self >= 0
end
module Hashmap_Hash_Hash_Interface
  type self
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = self, axiom .
  val hash [@cfg:stackify] (self : self) : uint64
    ensures { UInt64.to_int result = HashLog0.hash_log self }
    
end
module Hashmap_Hash_Hash
  type self
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  clone Hashmap_Hash_HashLog as HashLog0 with type self = self, axiom .
  val hash [@cfg:stackify] (self : self) : uint64
    ensures { UInt64.to_int result = HashLog0.hash_log self }
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module Hashmap_Impl3_Bucket_Interface
  type k
  type v
  use seq.Seq
  use Type
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.hashmap_list (k, v)
  function bucket (self : Type.hashmap_myhashmap k v) (k : k) : Type.hashmap_list (k, v)
end
module Hashmap_Impl3_Bucket
  type k
  type v
  use seq.Seq
  use Type
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.hashmap_list (k, v)
  function bucket (self : Type.hashmap_myhashmap k v) (k : k) : Type.hashmap_list (k, v)
  axiom bucket_spec : forall self : Type.hashmap_myhashmap k v, k : k . bucket self k = Seq.get (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets self)) (Int.mod (HashLog0.hash_log k) (Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets self))))
end
module Hashmap_GetInBucket_Interface
  type k
  type v
  use Type
  function get_in_bucket (l : Type.hashmap_list (k, v)) (index : k) : Type.core_option_option v
end
module Hashmap_GetInBucket
  type k
  type v
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function get_in_bucket (l : Type.hashmap_list (k, v)) (index : k) : Type.core_option_option v = 
    match (l) with
      | Type.Hashmap_List_Nil -> Type.Core_Option_Option_None
      | Type.Hashmap_List_Cons (k, v) tl -> if Model0.model k = Model0.model index then
        Type.Core_Option_Option_Some v
      else
        get_in_bucket tl index
      
      end
end
module Hashmap_Impl2_Model_Interface
  type k
  type v
  use map.Map
  use Type
  clone Hashmap_GetInBucket_Interface as GetInBucket0 with type k = k, type v = v
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.hashmap_list (k, v)
  clone Hashmap_Impl3_Bucket_Interface as Bucket0 with type k = k, type v = v, function Model0.model = Model1.model,
  function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : Type.hashmap_myhashmap k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module Hashmap_Impl2_Model
  type k
  type v
  use map.Map
  use Type
  clone Hashmap_GetInBucket_Interface as GetInBucket0 with type k = k, type v = v
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = Type.hashmap_list (k, v)
  clone Hashmap_Impl3_Bucket_Interface as Bucket0 with type k = k, type v = v, function Model0.model = Model1.model,
  function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : Type.hashmap_myhashmap k v) : Map.map ModelTy0.modelTy (Type.core_option_option v)
  axiom model_spec : forall self : Type.hashmap_myhashmap k v . forall k : (k) . Map.get (model self) (Model0.model k) = GetInBucket0.get_in_bucket (Bucket0.bucket self k) k
end
module Hashmap_Impl4_HashmapInv_Interface
  type k
  type v
  use prelude.Prelude
  use Type
  predicate hashmap_inv (self : Type.hashmap_myhashmap k v)
end
module Hashmap_Impl4_HashmapInv
  type k
  type v
  use prelude.Prelude
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.hashmap_list (k, v)
  predicate hashmap_inv (self : Type.hashmap_myhashmap k v) = 
    0 < Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets self))
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module Hashmap_Impl2_ModelTy
  type k
  type v
  use map.Map
  use Type
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  type modelTy  = 
    Map.map ModelTy0.modelTy (Type.core_option_option v)
end
module Hashmap_Impl2
  type k
  type v
  use Type
  clone Hashmap_Hash_HashLog as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model3 with type t = Type.hashmap_list (k, v)
  clone Hashmap_Impl3_Bucket as Bucket0 with type k = k, type v = v, function Model0.model = Model3.model,
  function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy2.modelTy
  clone Hashmap_GetInBucket as GetInBucket0 with type k = k, type v = v, function Model0.model = Model2.model,
  type ModelTy0.modelTy = ModelTy2.modelTy
  clone Hashmap_Impl2_Model as Model0 with type k = k, type v = v, function Model0.model = Model2.model,
  function Bucket0.bucket = Bucket0.bucket, function GetInBucket0.get_in_bucket = GetInBucket0.get_in_bucket,
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model1.model = Model3.model,
  function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone Hashmap_Impl2_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.hashmap_myhashmap k v,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.hashmap_myhashmap k v,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_FromElem_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module CreusotContracts_Std1_Vec_FromElem
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module Hashmap_Impl4_New_Interface
  type k
  type v
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use map.Map
  use Type
  use prelude.Prelude
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.hashmap_list (k, v)
  clone Hashmap_Impl3_Bucket_Interface as Bucket0 with type k = k, type v = v, function Model0.model = Model2.model,
  function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone Hashmap_Impl4_HashmapInv_Interface as HashmapInv0 with type k = k, type v = v
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_GetInBucket_Interface as GetInBucket0 with type k = k, type v = v
  clone Hashmap_Impl2_Model_Interface as Model0 with type k = k, type v = v, function Model0.model = Model1.model,
  function Bucket0.bucket = Bucket0.bucket, function GetInBucket0.get_in_bucket = GetInBucket0.get_in_bucket,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  val new [@cfg:stackify] (size : usize) : Type.hashmap_myhashmap k v
    requires {0 < UInt64.to_int size}
    ensures { forall i : (k) . Map.get (Model0.model result) (Model1.model i) = Type.Core_Option_Option_None }
    ensures { HashmapInv0.hashmap_inv result }
    
end
module Hashmap_Impl4_New
  type k
  type v
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  use mach.int.UInt64
  use map.Map
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_GetInBucket as GetInBucket0 with type k = k, type v = v, function Model0.model = Model2.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.hashmap_list (k, v)
  clone Hashmap_Impl4_HashmapInv as HashmapInv0 with type k = k, type v = v, function Model0.model = Model0.model
  clone Hashmap_Hash_HashLog as HashLog0 with type self = k, axiom .
  clone Hashmap_Impl3_Bucket as Bucket0 with type k = k, type v = v, function Model0.model = Model0.model,
  function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone Hashmap_Impl2_Model as Model1 with type k = k, type v = v, function Model0.model = Model2.model,
  function Bucket0.bucket = Bucket0.bucket, function GetInBucket0.get_in_bucket = GetInBucket0.get_in_bucket,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model1.model = Model0.model,
  function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.hashmap_myhashmap k v
  clone CreusotContracts_Std1_Vec_FromElem_Interface as FromElem0 with type t = Type.hashmap_list (k, v),
  function Model0.model = Model0.model
  let rec cfg new [@cfg:stackify] (size : usize) : Type.hashmap_myhashmap k v
    requires {0 < UInt64.to_int size}
    ensures { forall i : (k) . Map.get (Model1.model result) (Model2.model i) = Type.Core_Option_Option_None }
    ensures { HashmapInv0.hashmap_inv result }
    
   = 
  var _0 : Type.hashmap_myhashmap k v;
  var size_1 : usize;
  var res_2 : Type.hashmap_myhashmap k v;
  var _3 : Type.creusotcontracts_std1_vec_vec (Type.hashmap_list (k, v));
  var _4 : Type.hashmap_list (k, v);
  var _5 : usize;
  var _6 : ();
  var _7 : ();
  {
    size_1 <- size;
    goto BB0
  }
  BB0 {
    _4 <- Type.Hashmap_List_Nil;
    _5 <- size_1;
    _3 <- FromElem0.from_elem _4 _5;
    goto BB1
  }
  BB1 {
    res_2 <- Type.Hashmap_MyHashMap _3;
    goto BB2
  }
  BB2 {
    assert { forall k : (k) . Int.mod (HashLog0.hash_log k) (Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets res_2))) >= 0 && Int.mod (HashLog0.hash_log k) (Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets res_2))) < Seq.length (Model0.model (Type.hashmap_myhashmap_MyHashMap_buckets res_2)) };
    goto BB3
  }
  BB3 {
    _6 <- ();
    assert { forall k : (k) . Bucket0.bucket res_2 k = Type.Hashmap_List_Nil };
    goto BB4
  }
  BB4 {
    _7 <- ();
    assume { Resolve0.resolve _0 };
    _0 <- res_2;
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self
  type idx
  type output
end
module Core_Ops_Index_Index_Index_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Core_Cmp_PartialEq_Eq
  type self
  type rhs
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model1 with type t = rhs,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = self,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (Model0.model self = Model1.model other) }
    
end
module Core_Cmp_PartialEq_Ne_Interface
  type self
  type rhs
  use prelude.Prelude
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module Core_Cmp_PartialEq_Ne
  type self
  type rhs
  use prelude.Prelude
  val ne [@cfg:stackify] (self : self) (other : rhs) : bool
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3
  type t
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module Hashmap_Impl4_Get_Interface
  type k
  type v
  use Type
  use prelude.Prelude
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = k
  clone Hashmap_Impl2_ModelTy as ModelTy0 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy1.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.hashmap_myhashmap k v,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy1.modelTy
  clone Hashmap_Impl4_HashmapInv_Interface as HashmapInv0 with type k = k, type v = v
  val get [@cfg:stackify] (self : Type.hashmap_myhashmap k v) (key : k) : Type.core_option_option v
    requires {HashmapInv0.hashmap_inv self}
    ensures { match (result) with
      | Type.Core_Option_Option_Some v -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v
      | Type.Core_Option_Option_None -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None
      end }
    
end
module Hashmap_Impl4_Get
  type k
  type v
  use Type
  use prelude.Prelude
  use map.Map
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone Hashmap_Impl2_ModelTy as ModelTy1 with type k = k, type v = v, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_GetInBucket as GetInBucket0 with type k = k, type v = v, function Model0.model = Model1.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Hash_HashLog as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.hashmap_list (k, v)
  clone Hashmap_Impl4_HashmapInv as HashmapInv0 with type k = k, type v = v, function Model0.model = Model2.model
  clone Hashmap_Impl3_Bucket as Bucket0 with type k = k, type v = v, function Model0.model = Model2.model,
  function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone Hashmap_Impl2_Model as Model3 with type k = k, type v = v, function Model0.model = Model1.model,
  function Bucket0.bucket = Bucket0.bucket, function GetInBucket0.get_in_bucket = GetInBucket0.get_in_bucket,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model1.model = Model2.model,
  function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.hashmap_myhashmap k v,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model3.model
  use mach.int.Int
  use mach.int.UInt64
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.hashmap_myhashmap k v
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy2 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model1.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with type self = k, type rhs = k, function Model0.model = Model5.model,
  function Model1.model = Model5.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Hash_Hash_Interface as Hash0 with type self = k, function HashLog0.hash_log = HashLog0.hash_log
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = Type.creusotcontracts_std1_vec_vec (Type.hashmap_list (k, v)),
  type ModelTy0.modelTy = ModelTy2.modelTy, function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.hashmap_list (k, v),
  function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.hashmap_list (k, v),
  function Model0.model = Model4.model
  let rec cfg get [@cfg:stackify] (self : Type.hashmap_myhashmap k v) (key : k) : Type.core_option_option v
    requires {HashmapInv0.hashmap_inv self}
    ensures { match (result) with
      | Type.Core_Option_Option_Some v -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_Some v
      | Type.Core_Option_Option_None -> Map.get (Model0.model self) (Model1.model key) = Type.Core_Option_Option_None
      end }
    
   = 
  var _0 : Type.core_option_option v;
  var self_1 : Type.hashmap_myhashmap k v;
  var key_2 : k;
  var _3 : ();
  var index_4 : usize;
  var _5 : usize;
  var _6 : uint64;
  var _7 : k;
  var _8 : usize;
  var _9 : Type.creusotcontracts_std1_vec_vec (Type.hashmap_list (k, v));
  var _10 : bool;
  var l_11 : Type.hashmap_list (k, v);
  var _12 : Type.hashmap_list (k, v);
  var _13 : Type.creusotcontracts_std1_vec_vec (Type.hashmap_list (k, v));
  var _14 : usize;
  var _15 : ();
  var _16 : ();
  var _17 : ();
  var _18 : isize;
  var k_19 : k;
  var v_20 : v;
  var tl_21 : Type.hashmap_list (k, v);
  var _22 : ();
  var _23 : bool;
  var _24 : k;
  var _25 : k;
  var _26 : ();
  var _27 : v;
  var _28 : Type.hashmap_list (k, v);
  var _29 : Type.hashmap_list (k, v);
  var _30 : ();
  var _31 : ();
  var _32 : ();
  {
    self_1 <- self;
    key_2 <- key;
    goto BB0
  }
  BB0 {
    _7 <- key_2;
    _6 <- Hash0.hash _7;
    goto BB1
  }
  BB1 {
    _5 <- UInt64.of_int (UInt64.to_int _6);
    _9 <- Type.hashmap_myhashmap_MyHashMap_buckets self_1;
    _8 <- Len0.len _9;
    goto BB2
  }
  BB2 {
    _10 <- _8 = (0 : usize);
    assert { not _10 };
    goto BB3
  }
  BB3 {
    index_4 <- _5 % _8;
    _13 <- Type.hashmap_myhashmap_MyHashMap_buckets self_1;
    assume { Resolve0.resolve self_1 };
    _14 <- index_4;
    _12 <- Index0.index _13 _14;
    goto BB4
  }
  BB4 {
    l_11 <- _12;
    assume { Resolve1.resolve _12 };
    assert { Bucket0.bucket self_1 key_2 = l_11 };
    _15 <- ();
    goto BB5
  }
  BB5 {
    invariant not_already_found { GetInBucket0.get_in_bucket (Bucket0.bucket self_1 key_2) key_2 = GetInBucket0.get_in_bucket l_11 key_2 };
    switch (l_11)
      | Type.Hashmap_List_Cons _ _ -> goto BB6
      | _ -> goto BB10
      end
  }
  BB6 {
    k_19 <- (let (a, _) = Type.hashmap_list_Cons_0 l_11 in a);
    v_20 <- (let (_, a) = Type.hashmap_list_Cons_0 l_11 in a);
    tl_21 <- Type.hashmap_list_Cons_1 l_11;
    assume { Resolve1.resolve l_11 };
    _24 <- k_19;
    assume { Resolve3.resolve k_19 };
    _25 <- key_2;
    _23 <- Eq0.eq _24 _25;
    goto BB7
  }
  BB7 {
    switch (_23)
      | False -> goto BB9
      | _ -> goto BB8
      end
  }
  BB8 {
    assume { Resolve2.resolve key_2 };
    assume { Resolve4.resolve tl_21 };
    _27 <- v_20;
    assume { Resolve5.resolve v_20 };
    _0 <- Type.Core_Option_Option_Some _27;
    goto BB11
  }
  BB9 {
    assume { Resolve5.resolve v_20 };
    _22 <- ();
    _29 <- tl_21;
    assume { Resolve4.resolve tl_21 };
    _28 <- _29;
    assume { Resolve1.resolve _29 };
    assume { Resolve1.resolve l_11 };
    l_11 <- _28;
    _17 <- ();
    goto BB5
  }
  BB10 {
    assume { Resolve2.resolve key_2 };
    assume { Resolve1.resolve l_11 };
    _16 <- ();
    _0 <- Type.Core_Option_Option_None;
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module CreusotContracts_Logic_Ghost_Impl0_Model_Interface
  type t
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_Model
  type t
  use Type
  function model (self : Type.creusotcontracts_logic_ghost_ghost t) : t
end
module CreusotContracts_Logic_Ghost_Impl0_ModelTy
  type t
  type modelTy  = 
    t
end
module CreusotContracts_Logic_Ghost_Impl0
  type t
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Ghost_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_logic_ghost_ghost t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Logic_Ghost_Impl1_Record_Interface
  type t
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Ghost_Impl1_Record
  type t
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Ghost_Impl0_Model_Interface as Model0 with type t = t
  val record [@cfg:stackify] (a : t) : Type.creusotcontracts_logic_ghost_ghost t
    ensures { Model0.model result = a }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self
  type idx
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Mem_Replace_Interface
  type t
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = src }
    
end
module CreusotContracts_Std1_Mem_Replace
  type t
  use prelude.Prelude
  val replace [@cfg:stackify] (dest : borrowed t) (src : t) : t
    ensures { result =  * dest }
    ensures {  ^ dest = src }
    
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Std1_Vec_Impl2
  type t
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = t,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1
  type t
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module Hashmap_Impl4_Add_Interface
  type k
  type v
  use map.Map
  use Type
  use prelude.Prelude
  clone Hashmap_Hash_HashLog_Interface as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model2 with type t = Type.hashmap_list (k, v)
  clone Hashmap_Impl3_Bucket_Interface as Bucket0 with type k = k, type v = v, function Model0.model = Model2.model,
  function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = k,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_GetInBucket_Interface as GetInBucket0 with type k = k, type v = v
  clone Hashmap_Impl2_Model_Interface as Model0 with type k = k, type v = v, function Model0.model = Model1.model,
  function Bucket0.bucket = Bucket0.bucket, function GetInBucket0.get_in_bucket = GetInBucket0.get_in_bucket,
  type ModelTy0.modelTy = ModelTy0.modelTy, axiom .
  clone Hashmap_Impl4_HashmapInv_Interface as HashmapInv0 with type k = k, type v = v
  val add [@cfg:stackify] (self : borrowed (Type.hashmap_myhashmap k v)) (key : k) (val' : v) : ()
    requires {HashmapInv0.hashmap_inv ( * self)}
    ensures { forall i : (k) . Map.get (Model0.model ( ^ self)) (Model1.model i) = (if Model1.model i = Model1.model key then
      Type.Core_Option_Option_Some val'
    else
      Map.get (Model0.model ( * self)) (Model1.model i)
    ) }
    ensures { HashmapInv0.hashmap_inv ( ^ self) }
    
end
module Hashmap_Impl4_Add
  type k
  type v
  use Type
  use map.Map
  use prelude.Prelude
  clone Hashmap_Hash_HashLog as HashLog0 with type self = k, axiom .
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model1 with type t = borrowed (Type.hashmap_list (k, v))
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = k
  clone CreusotContracts_Logic_Model_Model_Model as Model3 with type self = k, type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_GetInBucket as GetInBucket0 with type k = k, type v = v, function Model0.model = Model3.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model4 with type t = Type.hashmap_list (k, v)
  clone Hashmap_Impl3_Bucket as Bucket0 with type k = k, type v = v, function Model0.model = Model4.model,
  function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone Hashmap_Impl2_Model as Model2 with type k = k, type v = v, function Model0.model = Model3.model,
  function Bucket0.bucket = Bucket0.bucket, function GetInBucket0.get_in_bucket = GetInBucket0.get_in_bucket,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model1.model = Model4.model,
  function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone Hashmap_Impl4_HashmapInv as HashmapInv0 with type k = k, type v = v, function Model0.model = Model4.model
  clone CreusotContracts_Logic_Ghost_Impl0_Model as Model0 with type t = borrowed (Type.hashmap_myhashmap k v)
  use mach.int.Int
  use mach.int.UInt64
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve11 with type t = v
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve10 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve9 with type t = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve8 with type self = Type.hashmap_list (k, v)
  clone CreusotContracts_Std1_Mem_Replace_Interface as Replace0 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve7 with type self = v
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = k
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.hashmap_list (k, v)))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = borrowed (Type.hashmap_list (k, v))
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Type.hashmap_myhashmap k v
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = Type.hashmap_list (k, v)
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.hashmap_myhashmap k v))
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = borrowed (Type.hashmap_myhashmap k v)
  clone Hashmap_Hash_Hash_Interface as Hash0 with type self = k, function HashLog0.hash_log = HashLog0.hash_log
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record1 with type t = borrowed (Type.hashmap_list (k, v)),
  function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model7 with type t = k, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model0.model = Model3.model
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with type self = k, type rhs = k, function Model0.model = Model7.model,
  function Model1.model = Model7.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model6 with type t = Type.creusotcontracts_std1_vec_vec (Type.hashmap_list (k, v)),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = Type.hashmap_list (k, v),
  function Model0.model = Model4.model, function Model1.model = Model6.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec (Type.hashmap_list (k, v)),
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.hashmap_list (k, v),
  function Model0.model = Model5.model
  clone CreusotContracts_Logic_Ghost_Impl1_Record_Interface as Record0 with type t = borrowed (Type.hashmap_myhashmap k v),
  function Model0.model = Model0.model
  let rec cfg add [@cfg:stackify] (self : borrowed (Type.hashmap_myhashmap k v)) (key : k) (val' : v) : ()
    requires {HashmapInv0.hashmap_inv ( * self)}
    ensures { forall i : (k) . Map.get (Model2.model ( ^ self)) (Model3.model i) = (if Model3.model i = Model3.model key then
      Type.Core_Option_Option_Some val'
    else
      Map.get (Model2.model ( * self)) (Model3.model i)
    ) }
    ensures { HashmapInv0.hashmap_inv ( ^ self) }
    
   = 
  var _0 : ();
  var self_1 : borrowed (Type.hashmap_myhashmap k v);
  var key_2 : k;
  var val'_3 : v;
  var old_self_4 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.hashmap_myhashmap k v));
  var _5 : borrowed (Type.hashmap_myhashmap k v);
  var _6 : borrowed (Type.hashmap_myhashmap k v);
  var length_7 : usize;
  var _8 : Type.creusotcontracts_std1_vec_vec (Type.hashmap_list (k, v));
  var index_9 : usize;
  var _10 : usize;
  var _11 : uint64;
  var _12 : k;
  var _13 : usize;
  var _14 : bool;
  var l_15 : borrowed (Type.hashmap_list (k, v));
  var _16 : borrowed (Type.hashmap_list (k, v));
  var _17 : borrowed (Type.hashmap_list (k, v));
  var _18 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.hashmap_list (k, v)));
  var _19 : usize;
  var old_l_20 : Type.creusotcontracts_logic_ghost_ghost (borrowed (Type.hashmap_list (k, v)));
  var _21 : borrowed (Type.hashmap_list (k, v));
  var _22 : borrowed (Type.hashmap_list (k, v));
  var _23 : ();
  var _24 : ();
  var _25 : isize;
  var k_26 : borrowed k;
  var v_27 : borrowed v;
  var tl_28 : borrowed (Type.hashmap_list (k, v));
  var _29 : ();
  var _30 : bool;
  var _31 : k;
  var _32 : k;
  var _33 : ();
  var _34 : v;
  var _35 : borrowed (Type.hashmap_list (k, v));
  var _36 : borrowed (Type.hashmap_list (k, v));
  var _37 : ();
  var _38 : ();
  var _39 : ();
  var _40 : Type.hashmap_list (k, v);
  var _41 : borrowed (Type.hashmap_list (k, v));
  var _42 : Type.hashmap_list (k, v);
  var _43 : (k, v);
  var _44 : k;
  var _45 : v;
  var _46 : Type.hashmap_list (k, v);
  var _47 : Type.hashmap_list (k, v);
  {
    self_1 <- self;
    key_2 <- key;
    val'_3 <- val';
    goto BB0
  }
  BB0 {
    _6 <- self_1;
    _5 <- _6;
    assume { Resolve0.resolve _6 };
    old_self_4 <- Record0.record _5;
    goto BB1
  }
  BB1 {
    assume { Resolve1.resolve old_self_4 };
    _8 <- Type.hashmap_myhashmap_MyHashMap_buckets ( * self_1);
    length_7 <- Len0.len _8;
    goto BB2
  }
  BB2 {
    _12 <- key_2;
    _11 <- Hash0.hash _12;
    goto BB3
  }
  BB3 {
    _10 <- UInt64.of_int (UInt64.to_int _11);
    _13 <- length_7;
    _14 <- _13 = (0 : usize);
    assert { not _14 };
    goto BB4
  }
  BB4 {
    index_9 <- _10 % _13;
    _18 <- borrow_mut (Type.hashmap_myhashmap_MyHashMap_buckets ( * self_1));
    self_1 <- { self_1 with current = (let Type.Hashmap_MyHashMap a =  * self_1 in Type.Hashmap_MyHashMap ( ^ _18)) };
    assume { Resolve2.resolve self_1 };
    _19 <- index_9;
    _17 <- IndexMut0.index_mut _18 _19;
    goto BB5
  }
  BB5 {
    _16 <- borrow_mut ( * _17);
    _17 <- { _17 with current = ( ^ _16) };
    assume { Resolve3.resolve _17 };
    l_15 <- borrow_mut ( * _16);
    _16 <- { _16 with current = ( ^ l_15) };
    assume { Resolve3.resolve _16 };
    _22 <- l_15;
    _21 <- _22;
    assume { Resolve4.resolve _22 };
    old_l_20 <- Record1.record _21;
    goto BB6
  }
  BB6 {
    assume { Resolve5.resolve old_l_20 };
    goto BB7
  }
  BB7 {
    invariant y {  ^ Model0.model old_self_4 =  ^ self_1 };
    invariant z { HashmapInv0.hashmap_inv ( ^ self_1) -> HashmapInv0.hashmap_inv ( ^ Model0.model old_self_4) };
    invariant zz { GetInBucket0.get_in_bucket ( ^ l_15) key_2 = Type.Core_Option_Option_Some val'_3 -> GetInBucket0.get_in_bucket ( ^ Model1.model old_l_20) key_2 = Type.Core_Option_Option_Some val'_3 };
    invariant magic_get_other { forall i : (k) . GetInBucket0.get_in_bucket ( ^ l_15) i = GetInBucket0.get_in_bucket ( * l_15) i -> GetInBucket0.get_in_bucket ( ^ Model1.model old_l_20) i = GetInBucket0.get_in_bucket ( * Model1.model old_l_20) i };
    switch ( * l_15)
      | Type.Hashmap_List_Cons _ _ -> goto BB8
      | _ -> goto BB12
      end
  }
  BB8 {
    k_26 <- borrow_mut (let (a, _) = Type.hashmap_list_Cons_0 ( * l_15) in a);
    l_15 <- { l_15 with current = (let Type.Hashmap_List_Cons a b =  * l_15 in Type.Hashmap_List_Cons (let (a, b) = Type.hashmap_list_Cons_0 ( * l_15) in ( ^ k_26, b)) b) };
    v_27 <- borrow_mut (let (_, a) = Type.hashmap_list_Cons_0 ( * l_15) in a);
    l_15 <- { l_15 with current = (let Type.Hashmap_List_Cons a b =  * l_15 in Type.Hashmap_List_Cons (let (a, b) = Type.hashmap_list_Cons_0 ( * l_15) in (a,  ^ v_27)) b) };
    tl_28 <- borrow_mut (Type.hashmap_list_Cons_1 ( * l_15));
    l_15 <- { l_15 with current = (let Type.Hashmap_List_Cons a b =  * l_15 in Type.Hashmap_List_Cons a ( ^ tl_28)) };
    assume { Resolve3.resolve l_15 };
    _31 <-  * k_26;
    assume { Resolve9.resolve k_26 };
    _32 <- key_2;
    _30 <- Eq0.eq _31 _32;
    goto BB9
  }
  BB9 {
    switch (_30)
      | False -> goto BB11
      | _ -> goto BB10
      end
  }
  BB10 {
    assume { Resolve6.resolve key_2 };
    assume { Resolve10.resolve tl_28 };
    assume { Resolve7.resolve _34 };
    _34 <- val'_3;
    assume { Resolve7.resolve val'_3 };
    assume { Resolve7.resolve ( * v_27) };
    v_27 <- { v_27 with current = _34 };
    assume { Resolve11.resolve v_27 };
    _0 <- ();
    goto BB17
  }
  BB11 {
    assume { Resolve11.resolve v_27 };
    _29 <- ();
    _36 <- borrow_mut ( * tl_28);
    tl_28 <- { tl_28 with current = ( ^ _36) };
    assume { Resolve10.resolve tl_28 };
    _35 <- borrow_mut ( * _36);
    _36 <- { _36 with current = ( ^ _35) };
    assume { Resolve3.resolve _36 };
    assume { Resolve3.resolve l_15 };
    l_15 <- _35;
    _24 <- ();
    goto BB7
  }
  BB12 {
    _23 <- ();
    _41 <- borrow_mut ( * l_15);
    l_15 <- { l_15 with current = ( ^ _41) };
    assume { Resolve6.resolve _44 };
    _44 <- key_2;
    assume { Resolve6.resolve key_2 };
    assume { Resolve7.resolve _45 };
    _45 <- val'_3;
    assume { Resolve7.resolve val'_3 };
    _43 <- (_44, _45);
    _47 <- Type.Hashmap_List_Nil;
    _46 <- _47;
    goto BB13
  }
  BB13 {
    _42 <- Type.Hashmap_List_Cons _43 _46;
    goto BB14
  }
  BB14 {
    _40 <- Replace0.replace _41 _42;
    goto BB15
  }
  BB15 {
    assume { Resolve3.resolve l_15 };
    goto BB16
  }
  BB16 {
    assume { Resolve8.resolve _40 };
    _0 <- ();
    goto BB17
  }
  BB17 {
    return _0
  }
  
end
module CreusotContracts_Logic_Int_Impl13_Model_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : usize) : int
end
module CreusotContracts_Logic_Int_Impl13_Model
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function model (self : usize) : int = 
    UInt64.to_int self
end
module CreusotContracts_Logic_Int_Impl13_ModelTy
  use mach.int.Int
  type modelTy  = 
    int
end
module CreusotContracts_Logic_Int_Impl13
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Logic_Int_Impl13_Model as Model0
  clone CreusotContracts_Logic_Int_Impl13_ModelTy as ModelTy0
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = usize, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = usize, type modelTy = ModelTy0.modelTy
end
module Hashmap_Impl1_HashLog_Interface
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function hash_log (self : usize) : int
end
module Hashmap_Impl1_HashLog
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  function hash_log (self : usize) : int = 
    UInt64.to_int self
end
module Hashmap_Impl1_Hash_Interface
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  clone Hashmap_Impl1_HashLog_Interface as HashLog0
  val hash [@cfg:stackify] (self : usize) : uint64
    ensures { UInt64.to_int result = HashLog0.hash_log self }
    
end
module Hashmap_Impl1_Hash
  use mach.int.UInt64
  use prelude.Prelude
  use mach.int.Int
  clone Hashmap_Impl1_HashLog as HashLog0
  let rec cfg hash [@cfg:stackify] (self : usize) : uint64
    ensures { UInt64.to_int result = HashLog0.hash_log self }
    
   = 
  var _0 : uint64;
  var self_1 : usize;
  var _2 : usize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _2 <- self_1;
    _0 <- UInt64.of_int (UInt64.to_int _2);
    return _0
  }
  
end
module Hashmap_Impl1
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone Hashmap_Impl1_HashLog as HashLog0
  clone Hashmap_Hash_HashLog as HashLog1 with type self = usize, function hash_log = HashLog0.hash_log, axiom .
  clone Hashmap_Impl1_Hash_Interface as Hash0 with function HashLog0.hash_log = HashLog0.hash_log
  clone Hashmap_Hash_Hash_Interface as Hash1 with type self = usize, val hash = Hash0.hash,
  function HashLog0.hash_log = HashLog0.hash_log
end
module Hashmap_Main_Interface
  val main [@cfg:stackify] () : ()
end
module Hashmap_Main
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use mach.int.Int64
  use Type
  clone Hashmap_Impl1_HashLog as HashLog0
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model2 with type t = Type.hashmap_list (usize, isize)
  clone Hashmap_Impl3_Bucket as Bucket0 with type k = usize, type v = isize, function Model0.model = Model2.model,
  function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone Hashmap_Impl4_HashmapInv as HashmapInv0 with type k = usize, type v = isize,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Int_Impl13_ModelTy as ModelTy0
  clone Hashmap_Impl2_ModelTy as ModelTy1 with type k = usize, type v = isize, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Int_Impl13_Model as Model1
  clone Hashmap_GetInBucket as GetInBucket0 with type k = usize, type v = isize, function Model0.model = Model1.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl2_Model as Model0 with type k = usize, type v = isize, function Model0.model = Model1.model,
  function Bucket0.bucket = Bucket0.bucket, function GetInBucket0.get_in_bucket = GetInBucket0.get_in_bucket,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model1.model = Model2.model,
  function HashLog0.hash_log = HashLog0.hash_log, axiom .
  clone CreusotContracts_Logic_Model_Impl0_Model as Model3 with type t = Type.hashmap_myhashmap usize isize,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model0.model
  clone Hashmap_Impl4_Get_Interface as Get0 with type k = usize, type v = isize,
  predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv, function Model0.model = Model3.model,
  function Model1.model = Model1.model, type ModelTy1.modelTy = ModelTy0.modelTy
  clone Hashmap_Impl4_Add_Interface as Add0 with type k = usize, type v = isize,
  predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv, function Model0.model = Model0.model,
  function Model1.model = Model1.model, function Bucket0.bucket = Bucket0.bucket,
  function GetInBucket0.get_in_bucket = GetInBucket0.get_in_bucket, type ModelTy0.modelTy = ModelTy0.modelTy,
  function Model2.model = Model2.model, function HashLog0.hash_log = HashLog0.hash_log
  clone Hashmap_Impl4_New_Interface as New0 with type k = usize, type v = isize, function Model0.model = Model0.model,
  function Model1.model = Model1.model, predicate HashmapInv0.hashmap_inv = HashmapInv0.hashmap_inv,
  function Bucket0.bucket = Bucket0.bucket, function GetInBucket0.get_in_bucket = GetInBucket0.get_in_bucket,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model2.model = Model2.model,
  function HashLog0.hash_log = HashLog0.hash_log
  let rec cfg main [@cfg:stackify] () : () = 
  var _0 : ();
  var h1_1 : Type.hashmap_myhashmap usize isize;
  var h2_2 : Type.hashmap_myhashmap usize isize;
  var x_3 : Type.core_option_option isize;
  var _4 : Type.hashmap_myhashmap usize isize;
  var y_5 : Type.core_option_option isize;
  var _6 : Type.hashmap_myhashmap usize isize;
  var z_7 : Type.core_option_option isize;
  var _8 : Type.hashmap_myhashmap usize isize;
  var t_9 : Type.core_option_option isize;
  var _10 : Type.hashmap_myhashmap usize isize;
  var _11 : ();
  var _12 : borrowed (Type.hashmap_myhashmap usize isize);
  var _13 : Type.core_option_option isize;
  var _14 : Type.hashmap_myhashmap usize isize;
  var _15 : Type.core_option_option isize;
  var _16 : Type.hashmap_myhashmap usize isize;
  var _17 : Type.core_option_option isize;
  var _18 : Type.hashmap_myhashmap usize isize;
  var _19 : Type.core_option_option isize;
  var _20 : Type.hashmap_myhashmap usize isize;
  var _21 : ();
  var _22 : borrowed (Type.hashmap_myhashmap usize isize);
  var _23 : Type.core_option_option isize;
  var _24 : Type.hashmap_myhashmap usize isize;
  var _25 : Type.core_option_option isize;
  var _26 : Type.hashmap_myhashmap usize isize;
  var _27 : Type.core_option_option isize;
  var _28 : Type.hashmap_myhashmap usize isize;
  var _29 : Type.core_option_option isize;
  var _30 : Type.hashmap_myhashmap usize isize;
  {
    goto BB0
  }
  BB0 {
    h1_1 <- New0.new (17 : usize);
    goto BB1
  }
  BB1 {
    h2_2 <- New0.new (42 : usize);
    goto BB2
  }
  BB2 {
    _4 <- h1_1;
    x_3 <- Get0.get _4 (1 : usize);
    goto BB3
  }
  BB3 {
    _6 <- h1_1;
    y_5 <- Get0.get _6 (2 : usize);
    goto BB4
  }
  BB4 {
    _8 <- h2_2;
    z_7 <- Get0.get _8 (1 : usize);
    goto BB5
  }
  BB5 {
    _10 <- h2_2;
    t_9 <- Get0.get _10 (2 : usize);
    goto BB6
  }
  BB6 {
    _12 <- borrow_mut h1_1;
    h1_1 <-  ^ _12;
    _11 <- Add0.add _12 (1 : usize) (17 : isize);
    goto BB7
  }
  BB7 {
    _14 <- h1_1;
    _13 <- Get0.get _14 (1 : usize);
    goto BB8
  }
  BB8 {
    x_3 <- _13;
    _16 <- h1_1;
    _15 <- Get0.get _16 (2 : usize);
    goto BB9
  }
  BB9 {
    y_5 <- _15;
    _18 <- h2_2;
    _17 <- Get0.get _18 (1 : usize);
    goto BB10
  }
  BB10 {
    z_7 <- _17;
    _20 <- h2_2;
    _19 <- Get0.get _20 (2 : usize);
    goto BB11
  }
  BB11 {
    t_9 <- _19;
    _22 <- borrow_mut h2_2;
    h2_2 <-  ^ _22;
    _21 <- Add0.add _22 (1 : usize) (42 : isize);
    goto BB12
  }
  BB12 {
    _24 <- h1_1;
    _23 <- Get0.get _24 (1 : usize);
    goto BB13
  }
  BB13 {
    x_3 <- _23;
    _26 <- h1_1;
    _25 <- Get0.get _26 (2 : usize);
    goto BB14
  }
  BB14 {
    y_5 <- _25;
    _28 <- h2_2;
    _27 <- Get0.get _28 (1 : usize);
    goto BB15
  }
  BB15 {
    z_7 <- _27;
    _30 <- h2_2;
    _29 <- Get0.get _30 (2 : usize);
    goto BB16
  }
  BB16 {
    t_9 <- _29;
    _0 <- ();
    goto BB17
  }
  BB17 {
    goto BB18
  }
  BB18 {
    return _0
  }
  
end
module Hashmap_Impl0_Clone_Interface
  type t
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.hashmap_list t) : Type.hashmap_list t
    ensures { result = self }
    
end
module Hashmap_Impl0_Clone
  type t
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.hashmap_list t) : Type.hashmap_list t
    ensures { result = self }
    
end
module CreusotContracts_Std1_Clone_Clone_Clone_Interface
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module CreusotContracts_Std1_Clone_Clone_Clone
  type self
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    ensures { result = self }
    
end
module Hashmap_Impl0
  type t
  use Type
  clone Hashmap_Impl0_Clone_Interface as Clone0 with type t = t
  clone CreusotContracts_Std1_Clone_Clone_Clone_Interface as Clone1 with type self = Type.hashmap_list t,
  val clone' = Clone0.clone'
end
