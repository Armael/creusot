module Ambient
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double

  type usize = int
  type isize = int

  type borrowed 'a = { current : 'a ; final : 'a; }
  let function ( *_ ) x = x.current
  let function ( ^_ ) x = x.final
  val borrow_mut (a : 'a) : borrowed 'a
  ensures { *result = a }

  predicate drop_fix (_ : 'a) = true
  predicate drop_uint (_ : 'a) = true
  predicate drop_int (_ : 'a) = true
  predicate drop_float (_ : 'a) = true
  predicate drop_bool (_ : 'a) = true
  predicate drop_mut_ref (b : borrowed 'a) = ^ b = * b
  predicate drop_ref (_ : 'a) = true

  scope Type
  type option_option 't =
      | Option_option_None
      | Option_option_Some('t)

  predicate drop_option_option (drop_'t : 't -> bool) (self : option_option 't) =
    match (self) with
      | Option_option_None -> True
      | Option_option_Some(a) -> drop_'t a
      end

  type result_result 't 'e =
      | Result_result_Ok('t)
      | Result_result_Err('e)

  predicate drop_result_result (drop_'t : 't -> bool) (drop_'e : 'e -> bool) (self : result_result 't 'e) =
    match (self) with
      | Result_result_Ok(a) -> drop_'t a
      | Result_result_Err(a) -> drop_'e a
      end

  end
  let rec cfg copyOutOfRef (o_x_1 : uint32) : uint32
    =
  var _0 : uint32;
  var x_1 : uint32;
  {
    x_1 <- o_x_1;
    goto BB0
  }
  BB0 {
    _0 <- x_1;
    assume { drop_ref x_1 };
    return _0
  }


  let rec cfg copyOutOfSum (o_x_1 : Type.result_result (borrowed uint32) (borrowed uint32)) : uint32
    =
  var _0 : uint32;
  var x_1 : Type.result_result (borrowed uint32) (borrowed uint32);
  var _2 : isize;
  var x_3 : borrowed uint32;
  var y_4 : borrowed uint32;
  {
    x_1 <- o_x_1;
    goto BB0
  }
  BB0 {
    switch (x_1)
      | Type.Result_result_Ok(_) -> goto BB1
      | Type.Result_result_Err(_) -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { drop_int _2 };
    goto BB4
  }
  BB2 {
    assume { drop_int _2 };
    y_4 <- (let Type.Result_result_Err(a) = x_1 in a);
    assume { Type.drop_result_result drop_mut_ref drop_mut_ref x_1 };
    _0 <-  * y_4;
    assume { drop_mut_ref y_4 };
    goto BB5
  }
  BB3 {
    assume { Type.drop_result_result drop_mut_ref drop_mut_ref x_1 };
    assume { drop_int _2 };
    absurd
  }
  BB4 {
    x_3 <- (let Type.Result_result_Ok(a) = x_1 in a);
    assume { Type.drop_result_result drop_mut_ref drop_mut_ref x_1 };
    _0 <-  * x_3;
    assume { drop_mut_ref x_3 };
    goto BB5
  }
  BB5 {
    return _0
  }


  let rec cfg writeIntoSum (o_x_1 : borrowed (Type.option_option uint32)) : ()
    =
  var _0 : ();
  var x_1 : borrowed (Type.option_option uint32);
  var _2 : isize;
  var y_3 : borrowed uint32;
  {
    x_1 <- o_x_1;
    goto BB0
  }
  BB0 {
    switch ( * x_1)
      | Type.Option_option_None -> goto BB1
      | Type.Option_option_Some(_) -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { drop_mut_ref x_1 };
    assume { drop_int _2 };
    _0 <- ();
    goto BB5
  }
  BB2 {
    assume { drop_int _2 };
    goto BB4
  }
  BB3 {
    assume { drop_mut_ref x_1 };
    assume { drop_int _2 };
    absurd
  }
  BB4 {
    y_3 <- borrow_mut (let Type.Option_option_Some(a) =  * x_1 in a);
    x_1 <- { x_1 with current = (let Type.Option_option_Some(a) =  * x_1 in Type.Option_option_Some( ^ y_3)) };
    assume { drop_mut_ref x_1 };
    y_3 <- { y_3 with current = 10 };
    assume { drop_mut_ref y_3 };
    _0 <- ();
    goto BB5
  }
  BB5 {
    return _0
  }


  let rec cfg main () : ()
    =
  var _0 : ();
  var _1 : bool;
  var _2 : Type.option_option int32;
  var _3 : isize;
  var x_4 : int32;
  var _5 : int32;
  {
    goto BB0
  }
  BB0 {
    _2 <- Type.Option_option_Some(10);
    switch (_2)
      | Type.Option_option_None -> goto BB1
      | Type.Option_option_Some(_) -> goto BB2
      | _ -> goto BB3
      end
  }
  BB1 {
    assume { Type.drop_option_option drop_int _2 };
    assume { drop_int _3 };
    _1 <- false;
    assume { drop_bool _1 };
    goto BB5
  }
  BB2 {
    assume { drop_int _3 };
    goto BB4
  }
  BB3 {
    assume { Type.drop_option_option drop_int _2 };
    assume { drop_int _3 };
    absurd
  }
  BB4 {
    x_4 <- (let Type.Option_option_Some(a) = _2 in a);
    assume { Type.drop_option_option drop_int _2 };
    _5 <- x_4;
    assume { drop_int x_4 };
    _1 <- _5 = 0;
    assume { drop_bool _1 };
    goto BB5
  }
  BB5 {
    _0 <- ();
    return _0
  }


end
