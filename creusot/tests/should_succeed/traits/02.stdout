module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module C02_A
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  type self   
  val is_true (self : self) : bool
    ensures { result = true }
    
end
module CreusotContracts_Builtins_Resolve
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  type self   
  predicate resolve (self : self)
end
module Core_Marker_Sized
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  type self   
end
module C02_Omg
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  type t   
  clone C02_A as A0 with type self = t
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = t
  clone Core_Marker_Sized as Sized2 with type self = t
  let rec cfg omg (o_a_1 : t) : bool
    ensures { result = true }
    
   = 
  var _0 : bool;
  var a_1 : t;
  var _2 : t;
  {
    a_1 <- o_a_1;
    goto BB0
  }
  BB0 {
    _2 <- a_1;
    _0 <- A0.is_true _2;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    assume { Resolve1.resolve a_1 };
    return _0
  }
  
end
