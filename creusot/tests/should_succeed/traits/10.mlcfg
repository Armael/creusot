
module C10_Pair_Type
  type c10_pair_type 't 'u =
    | C10_Pair_Type 't 'u
    
  let function c10_pair_type_Pair_0 (self : c10_pair_type 't 'u) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C10_Pair_Type a _ -> a
      end
  let function c10_pair_type_Pair_1 (self : c10_pair_type 't 'u) : 'u = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C10_Pair_Type _ a -> a
      end
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module C10_Impl0_Resolve_Interface
  type t1
  type t2
  use C10_Pair_Type
  predicate resolve (self : C10_Pair_Type.c10_pair_type t1 t2)
end
module C10_Impl0_Resolve
  type t1
  type t2
  use C10_Pair_Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t1
  predicate resolve [#"../10.rs" 11 4 11 28] (self : C10_Pair_Type.c10_pair_type t1 t2) =
    [#"../10.rs" 12 8 12 60] Resolve0.resolve (C10_Pair_Type.c10_pair_type_Pair_0 self) /\ Resolve1.resolve (C10_Pair_Type.c10_pair_type_Pair_1 self)
  val resolve (self : C10_Pair_Type.c10_pair_type t1 t2) : bool
    ensures { result = resolve self }
    
end
module C10_Impl0
  type t1
  type t2
  use C10_Pair_Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = t2
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t1
  clone C10_Impl0_Resolve as Resolve0 with type t1 = t1, type t2 = t2, predicate Resolve0.resolve = Resolve2.resolve,
  predicate Resolve1.resolve = Resolve3.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve1 with type self = C10_Pair_Type.c10_pair_type t1 t2,
  predicate resolve = Resolve0.resolve
end
