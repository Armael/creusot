module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use seq.Seq
  use prelude.Prelude
  type core_ptr_nonnull_nonnull 't =
    | Core_Ptr_NonNull_NonNull opaque_ptr
    
  type core_marker_phantomdata 't =
    | Core_Marker_PhantomData
    
  type core_ptr_unique_unique 't =
    | Core_Ptr_Unique_Unique (core_ptr_nonnull_nonnull 't) (core_marker_phantomdata 't)
    
  type alloc_rawvec_rawvec 't 'a =
    | Alloc_RawVec_RawVec (core_ptr_unique_unique 't) usize 'a
    
  type alloc_vec_vec 't 'a =
    | Alloc_Vec_Vec (alloc_rawvec_rawvec 't 'a) usize
    
  type alloc_alloc_global  =
    | Alloc_Alloc_Global
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  function model (self : Type.alloc_vec_vec t a) : Seq.seq t
  axiom model_spec : forall self : Type.alloc_vec_vec t a . Seq.length (model self) <= 18446744073709551615
end
module Alloc_Vec_FromElem_Interface
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Alloc_Vec_FromElem
  type t
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.alloc_vec_vec t (Type.alloc_alloc_global)
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl14_Clone_Interface
  type t
  type a
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = Type.alloc_vec_vec t a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val clone' [@cfg:stackify] (self : Type.alloc_vec_vec t a) : Type.alloc_vec_vec t a
    ensures { Model0.model result = Model0.model self }
    
end
module Alloc_Vec_Impl14_Clone
  type t
  type a
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t, type a = a
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = Type.alloc_vec_vec t a,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val clone' [@cfg:stackify] (self : Type.alloc_vec_vec t a) : Type.alloc_vec_vec t a
    ensures { Model0.model result = Model0.model self }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Std1_Vec_Impl1_Resolve_Interface
  type t
  use Type
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global))
end
module CreusotContracts_Std1_Vec_Impl1_Resolve
  type t
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = Type.alloc_alloc_global,
  axiom .
  predicate resolve (self : Type.alloc_vec_vec t (Type.alloc_alloc_global)) =
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module Alloc_Vec_Impl14
  type t
  type a
end
module CreusotContracts_Std1_Vec_Impl1
  type t
end
module CreusotContracts_Std1_Vec_Impl0
  type t
  type a
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
end
module CreusotContracts_Logic_Resolve_Impl2
  type t
end
module C19_Omg_Interface
  val omg [@cfg:stackify] (_ : ()) : ()
end
module C19_Omg
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use mach.int.UInt64
  use Type
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = int32
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = int32, type a = Type.alloc_alloc_global
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = int32, type a = Type.alloc_alloc_global, axiom .
  clone CreusotContracts_Std1_Vec_Impl1_Resolve as Resolve0 with type t = int32, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve1.resolve
  clone Alloc_Vec_Impl14_Clone_Interface as Clone0 with type t = int32, type a = Type.alloc_alloc_global,
  function Model0.model = Model0.model
  clone Alloc_Vec_FromElem_Interface as FromElem0 with type t = int32, function Model0.model = Model0.model
  let rec cfg omg [@cfg:stackify] [#"../19.rs" 16 0 12] (_ : ()) : () =
  var _0 : ();
  var _1 : Type.alloc_vec_vec int32 (Type.alloc_alloc_global);
  var _2 : Type.alloc_vec_vec int32 (Type.alloc_alloc_global);
  var _3 : Type.alloc_vec_vec int32 (Type.alloc_alloc_global);
  {
    goto BB0
  }
  BB0 {
    _3 <- ([#"../19.rs" 17 12 22] FromElem0.from_elem (1 : int32) (4 : usize));
    goto BB1
  }
  BB1 {
    _2 <- _3;
    _1 <- ([#"../19.rs" 17 12 30] Clone0.clone' _2);
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    assume { Resolve0.resolve _1 };
    goto BB4
  }
  BB4 {
    assume { Resolve0.resolve _3 };
    _0 <- ();
    return _0
  }
  
end
