
module C07_Impl0_Ix
  use prelude.Int32
  use prelude.Int
  use prelude.Borrow
  let rec cfg ix [#"../07.rs" 11 4 11 36] [@cfg:stackify] [@cfg:subregion_analysis] (self : int32) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../07.rs" 12 8 12 10] ());
    return _0
  }
  
end
module C07_Test
  type g
  type t
  use prelude.UInt64
  use prelude.UInt32
  use prelude.Int
  use prelude.Borrow
  let rec cfg test [#"../07.rs" 16 0 16 81] [@cfg:stackify] [@cfg:subregion_analysis] (_a : uint32) (_b : uint64) : bool
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : bool;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../07.rs" 17 4 17 8] [#"../07.rs" 17 4 17 8] true);
    return _0
  }
  
end
module C07_Test2
  use prelude.Int32
  use prelude.Int
  use prelude.Borrow
  val ix0 [#"../07.rs" 11 4 11 36] (self : int32) : ()
  let rec cfg test2 [#"../07.rs" 20 0 20 21] [@cfg:stackify] [@cfg:subregion_analysis] (a : int32) : ()
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var a : int32 = a;
  {
    goto BB0
  }
  BB0 {
    _0 <- ([#"../07.rs" 21 4 21 10] ix0 ([#"../07.rs" 21 4 21 10] a));
    goto BB1
  }
  BB1 {
    return _0
  }
  
end
module C07_Impl0
  predicate inv1 (_x : ())
  val inv1 (_x : ()) : bool
    ensures { result = inv1 _x }
    
  axiom inv1 : [#"../07.rs" 1 0 1 0] forall x : () . inv1 x = true
  use prelude.Int32
  predicate inv0 (_x : int32)
  val inv0 (_x : int32) : bool
    ensures { result = inv0 _x }
    
  axiom inv0 : [#"../07.rs" 1 0 1 0] forall x : int32 . inv0 x = true
  use prelude.Int
  use prelude.Borrow
  goal ix_refn : [#"../07.rs" 11 4 11 36] forall self : int32 . inv0 self -> (forall result : () . inv1 result)
end
