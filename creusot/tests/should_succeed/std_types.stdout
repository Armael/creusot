module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some('t)
    
  predicate drop_core_option_option (drop_t : 't -> bool) (self : core_option_option 't) = 
    match (self) with
      | Core_Option_Option_None -> true
      | Core_Option_Option_Some(a) -> drop_t a
      end
  type mytype  = 
    | MyType(core_option_option uint32)
    
  predicate drop_mytype (self : mytype) = 
    let MyType(a) = self in drop_core_option_option drop_uint a
end
module X
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec cfg impl (o_x_1 : Type.mytype) : () = 
  var _0 : ();
  var x_1 : Type.mytype;
  {
    x_1 <- o_x_1;
    goto BB0
  }
  BB0 {
    _0 <- ();
    assume { Type.drop_mytype x_1 };
    return _0
  }
  
end
module Main
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec cfg impl () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
