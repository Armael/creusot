module Ambient
  use Ref 
  use mach.int.Int 
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double

  type usize = int
  type isize = int

  (** Generic Type for borrowed values *) 
  type borrowed 'a = 
  { current : 'a ; 
  final : 'a; (* The "future" value when borrow will end *) 
  } 
  let function ( *_ ) x = x.current 
  let function ( ^_ ) x = x.final 
  val borrow_mut (a : 'a) : borrowed 'a 
  ensures { *result = a }

  predicate drop_fix (_ : 'a) = true
  predicate drop_uint (_ : 'a) = true
  predicate drop_int (_ : 'a) = true
  predicate drop_float (_ : 'a) = true
  predicate drop_bool (_ : 'a) = true
  predicate drop_mut_ref (b : borrowed 'a) = ^ b = * b
  predicate drop_ref (_ : 'a) = true

  type myInt  =
      | MyInt(usize)

  predicate drop_myInt (self : myInt) =
    let MyInt(a) = self in drop_uint a
  let cfg main () : ()
    =
  var _0 : ();
  var a_1 : (myInt, myInt);
  var _2 : myInt;
  var _3 : myInt;
  var b_4 : borrowed (myInt, myInt);
  var c_5 : borrowed (myInt);
  var d_6 : borrowed (myInt);
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  {
    goto BB0;
  }
  BB0 {
    _2 <- MyInt(10);
    _3 <- MyInt(5);
    a_1 <- (_2, _3);
    b_4 <- borrow_mut a_1;
    a_1 <-  ^ b_4;
    assume { (fun tup -> let (a, b) = tup in drop_myInt a && drop_myInt b) a_1 };
    c_5 <- borrow_mut (let (_, a) =  * b_4 in a);
    b_4 <- { b_4 with current = (let (a, b) =  * b_4 in (a,  ^ c_5)) };
    d_6 <- borrow_mut (let (a, _) =  * b_4 in a);
    b_4 <- { b_4 with current = (let (a, b) =  * b_4 in ( ^ d_6, b)) };
    assume { drop_mut_ref b_4 };
    _8 <- (let MyInt(a) =  * c_5 in a);
    assume { drop_mut_ref c_5 };
    _9 <- (let MyInt(a) =  * d_6 in a);
    assume { drop_mut_ref d_6 };
    _7 <- _8 <> _9;
    assume { drop_bool _7 };
    _0 <- ();
    _0
  }

end
