module Ambient
use Ref 
use mach.int.Int 
use mach.int.Int32
use mach.int.Int64
use mach.int.UInt32
use mach.int.UInt64
use string.Char
use floating_point.Single
use floating_point.Double
(** Generic Type for borrowed values *) 
type borrowed 'a = 
{ current : 'a ; 
final : 'a; (* The "future" value when borrow will end *) 
} 
let function ( *_ ) x = x.current 
let function ( ^_ ) x = x.final 
val borrow_mut (a : 'a) : borrowed 'a 
ensures { *result = a }
  type myInt  =
      | MyInt(usize)

  let cfg main () : ()
    =
  var _0 : ();
  var a_1 : (myInt, myInt);
  var _2 : myInt;
  var _3 : myInt;
  var b_4 : borrowed (myInt, myInt);
  var c_5 : borrowed (myInt);
  var d_6 : borrowed (myInt);
  var _7 : bool;
  var _8 : usize;
  var _9 : usize;
  {
    goto BB0;
  }
  BB0 {
    _2 <- MyInt(10);
    _3 <- MyInt(5);
    a_1 <- (_2, _3);
    b_4 <- borrow_mut a_1;
    a_1 <-  ^ b_4;
    c_5 <- borrow_mut let (_, a) =  * b_4 in a;
    b_4 <- { b_4 with current = (let (a, b) =  * b_4 in (a,  ^ c_5)) };
    d_6 <- borrow_mut let (a, _) =  * b_4 in a;
    b_4 <- { b_4 with current = (let (a, b) =  * b_4 in ( ^ d_6, b)) };
    assume { ^ b_4 = * b_4 };
    _8 <- let MyInt(a) =  * c_5 in a;
    assume { ^ c_5 = * c_5 };
    _9 <- let MyInt(a) =  * d_6 in a;
    assume { ^ d_6 = * d_6 };
    _7 <- _8 <> _9;
    _0 <- ();
    _0
  }

end
