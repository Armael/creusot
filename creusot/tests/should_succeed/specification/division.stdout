module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Builtins_Resolve
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Builtins_Impl7_Resolve
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  predicate impl (self : uint32) = 
    true
end
module CreusotContracts_Builtins_Impl7
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  clone CreusotContracts_Builtins_Impl7_Resolve as Resolve0
  clone CreusotContracts_Builtins_Resolve with type self = uint32, predicate resolve = Resolve0.impl
end
module CreusotContracts_Builtins_Impl12_Resolve
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  predicate impl (self : bool) = 
    true
end
module CreusotContracts_Builtins_Impl12
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve0
  clone CreusotContracts_Builtins_Resolve with type self = bool, predicate resolve = Resolve0.impl
end
module Division_Divide
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  clone CreusotContracts_Builtins_Impl7_Resolve as Resolve0
  clone CreusotContracts_Builtins_Impl12_Resolve as Resolve1
  let rec cfg impl (o_y_1 : uint32) (o_x_2 : uint32) : uint32
    requires {o_x_2 <> (0 : uint32)}
    
   = 
  var _0 : uint32;
  var y_1 : uint32;
  var x_2 : uint32;
  var _3 : uint32;
  var _4 : uint32;
  var _5 : bool;
  {
    y_1 <- o_y_1;
    x_2 <- o_x_2;
    goto BB0
  }
  BB0 {
    assume { Resolve0.impl _3 };
    _3 <- y_1;
    assume { Resolve0.impl y_1 };
    assume { Resolve0.impl _4 };
    _4 <- x_2;
    assume { Resolve0.impl x_2 };
    _5 <- _4 = (0 : uint32);
    assert { not _5 };
    goto BB1
  }
  BB1 {
    assume { Resolve1.impl _5 };
    _0 <- _3 / _4;
    return _0
  }
  
end
