
module Model_Seven_Type
  type t_seven  =
    | C_Seven
    
end
module Model_Impl0_ShallowModel_Stub
  use prelude.Int
  use Model_Seven_Type as Model_Seven_Type
  function shallow_model [#"../model.rs" 12 4 12 50] (self : Model_Seven_Type.t_seven) : int
end
module Model_Impl0_ShallowModel_Interface
  use prelude.Int
  use Model_Seven_Type as Model_Seven_Type
  function shallow_model [#"../model.rs" 12 4 12 50] (self : Model_Seven_Type.t_seven) : int
end
module Model_Impl0_ShallowModel
  use prelude.Int
  use Model_Seven_Type as Model_Seven_Type
  function shallow_model [#"../model.rs" 12 4 12 50] (self : Model_Seven_Type.t_seven) : int
  val shallow_model [#"../model.rs" 12 4 12 50] (self : Model_Seven_Type.t_seven) : int
    ensures { result = shallow_model self }
    
end
module Model_Seven_Interface
  use Model_Seven_Type as Model_Seven_Type
  clone Model_Impl0_ShallowModel_Stub as ShallowModel0
  val seven [#"../model.rs" 19 0 19 23] (_1' : ()) : Model_Seven_Type.t_seven
    ensures { [#"../model.rs" 18 10 18 22] ShallowModel0.shallow_model result = 7 }
    
end
module Model_Pair_Type
  type t_pair 't 'u =
    | C_Pair 't 'u
    
end
module Model_Impl1_ShallowModel_Stub
  type t
  type u
  use Model_Pair_Type as Model_Pair_Type
  function shallow_model [#"../model.rs" 30 4 30 50] (self : Model_Pair_Type.t_pair t u) : (t, u)
end
module Model_Impl1_ShallowModel_Interface
  type t
  type u
  use Model_Pair_Type as Model_Pair_Type
  function shallow_model [#"../model.rs" 30 4 30 50] (self : Model_Pair_Type.t_pair t u) : (t, u)
end
module Model_Impl1_ShallowModel
  type t
  type u
  use Model_Pair_Type as Model_Pair_Type
  function shallow_model [#"../model.rs" 30 4 30 50] (self : Model_Pair_Type.t_pair t u) : (t, u)
  val shallow_model [#"../model.rs" 30 4 30 50] (self : Model_Pair_Type.t_pair t u) : (t, u)
    ensures { result = shallow_model self }
    
end
module Model_Pair_Interface
  type t
  type u
  use Model_Pair_Type as Model_Pair_Type
  clone Model_Impl1_ShallowModel_Stub as ShallowModel0 with
    type t = t,
    type u = u
  val pair [#"../model.rs" 37 0 37 43] (a : t) (b : u) : Model_Pair_Type.t_pair t u
    ensures { [#"../model.rs" 36 10 36 27] ShallowModel0.shallow_model result = (a, b) }
    
end
module Model_T_Type
  use prelude.Int
  use prelude.Int32
  type t_t  =
    | C_T bool int32
    
  let function t_b (self : t_t) : bool = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_T a _ -> a
      end
  let function t_i (self : t_t) : int32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_T _ a -> a
      end
end
module Model_TDeepModel_Type
  use prelude.Int
  type t_tdeepmodel  =
    | C_TDeepModel bool int
    
end
module CreusotContracts_Model_Impl4_DeepModel_Stub
  function deep_model (self : bool) : bool
end
module CreusotContracts_Model_Impl4_DeepModel_Interface
  function deep_model (self : bool) : bool
end
module CreusotContracts_Model_Impl4_DeepModel
  function deep_model (self : bool) : bool =
    [#"../../../../../creusot-contracts/src/model.rs" 63 8 63 12] self
  val deep_model (self : bool) : bool
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Num_Impl25_DeepModel_Stub
  use prelude.Int
  use prelude.Int32
  function deep_model (self : int32) : int
end
module CreusotContracts_Std1_Num_Impl25_DeepModel_Interface
  use prelude.Int
  use prelude.Int32
  function deep_model (self : int32) : int
end
module CreusotContracts_Std1_Num_Impl25_DeepModel
  use prelude.Int
  use prelude.Int32
  function deep_model (self : int32) : int =
    [#"../../../../../creusot-contracts/src/std/num.rs" 20 16 20 35] Int32.to_int self
  val deep_model (self : int32) : int
    ensures { result = deep_model self }
    
end
module Model_Impl2_DeepModel_Stub
  use Model_TDeepModel_Type as Model_TDeepModel_Type
  use Model_T_Type as Model_T_Type
  function deep_model [#"../model.rs" 43 9 43 18] (self : Model_T_Type.t_t) : Model_TDeepModel_Type.t_tdeepmodel
end
module Model_Impl2_DeepModel_Interface
  use Model_TDeepModel_Type as Model_TDeepModel_Type
  use Model_T_Type as Model_T_Type
  function deep_model [#"../model.rs" 43 9 43 18] (self : Model_T_Type.t_t) : Model_TDeepModel_Type.t_tdeepmodel
end
module Model_Impl2_DeepModel
  clone CreusotContracts_Std1_Num_Impl25_DeepModel_Stub as DeepModel1
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0
  use Model_TDeepModel_Type as Model_TDeepModel_Type
  use Model_T_Type as Model_T_Type
  function deep_model [#"../model.rs" 43 9 43 18] (self : Model_T_Type.t_t) : Model_TDeepModel_Type.t_tdeepmodel =
    [#"../model.rs" 43 9 650 44] Model_TDeepModel_Type.C_TDeepModel (DeepModel0.deep_model (Model_T_Type.t_b self)) (DeepModel1.deep_model (Model_T_Type.t_i self))
  val deep_model [#"../model.rs" 43 9 43 18] (self : Model_T_Type.t_t) : Model_TDeepModel_Type.t_tdeepmodel
    ensures { result = deep_model self }
    
end
module Model_U_Type
  use prelude.Int
  use prelude.Int32
  type t_u  =
    | C_A
    | C_B bool
    | C_C int32
    | C_D
    
end
module Model_UDeepModel_Type
  use prelude.Int
  type t_udeepmodel  =
    | C_A
    | C_B bool
    | C_C int
    | C_D
    
end
module Model_Impl3_DeepModel_Stub
  use Model_UDeepModel_Type as Model_UDeepModel_Type
  use Model_U_Type as Model_U_Type
  function deep_model [#"../model.rs" 49 9 49 18] (self : Model_U_Type.t_u) : Model_UDeepModel_Type.t_udeepmodel
end
module Model_Impl3_DeepModel_Interface
  use Model_UDeepModel_Type as Model_UDeepModel_Type
  use Model_U_Type as Model_U_Type
  function deep_model [#"../model.rs" 49 9 49 18] (self : Model_U_Type.t_u) : Model_UDeepModel_Type.t_udeepmodel
end
module Model_Impl3_DeepModel
  clone CreusotContracts_Std1_Num_Impl25_DeepModel_Stub as DeepModel1
  clone CreusotContracts_Model_Impl4_DeepModel_Stub as DeepModel0
  use Model_UDeepModel_Type as Model_UDeepModel_Type
  use Model_U_Type as Model_U_Type
  function deep_model [#"../model.rs" 49 9 49 18] (self : Model_U_Type.t_u) : Model_UDeepModel_Type.t_udeepmodel =
    [#"../model.rs" 49 9 49 18] match (self) with
      | Model_U_Type.C_A -> Model_UDeepModel_Type.C_A
      | Model_U_Type.C_B b_1 -> Model_UDeepModel_Type.C_B (DeepModel0.deep_model b_1)
      | Model_U_Type.C_C b_1 -> Model_UDeepModel_Type.C_C (DeepModel1.deep_model b_1)
      | Model_U_Type.C_D -> Model_UDeepModel_Type.C_D
      end
  val deep_model [#"../model.rs" 49 9 49 18] (self : Model_U_Type.t_u) : Model_UDeepModel_Type.t_udeepmodel
    ensures { result = deep_model self }
    
end
module Model_Sort_Type
  type t_sort  =
    | C_Boolean
    | C_Rational
    
end
module Model_SortModel_Type
  type t_sortmodel  =
    | C_Boolean
    | C_Rational
    
end
module Model_Impl4_DeepModel_Stub
  use Model_SortModel_Type as Model_SortModel_Type
  use Model_Sort_Type as Model_Sort_Type
  function deep_model [#"../model.rs" 57 9 57 18] (self : Model_Sort_Type.t_sort) : Model_SortModel_Type.t_sortmodel
end
module Model_Impl4_DeepModel_Interface
  use Model_SortModel_Type as Model_SortModel_Type
  use Model_Sort_Type as Model_Sort_Type
  function deep_model [#"../model.rs" 57 9 57 18] (self : Model_Sort_Type.t_sort) : Model_SortModel_Type.t_sortmodel
end
module Model_Impl4_DeepModel
  use Model_SortModel_Type as Model_SortModel_Type
  use Model_Sort_Type as Model_Sort_Type
  function deep_model [#"../model.rs" 57 9 57 18] (self : Model_Sort_Type.t_sort) : Model_SortModel_Type.t_sortmodel =
    [#"../model.rs" 57 9 57 18] match (self) with
      | Model_Sort_Type.C_Boolean -> Model_SortModel_Type.C_Boolean
      | Model_Sort_Type.C_Rational -> Model_SortModel_Type.C_Rational
      end
  val deep_model [#"../model.rs" 57 9 57 18] (self : Model_Sort_Type.t_sort) : Model_SortModel_Type.t_sortmodel
    ensures { result = deep_model self }
    
end
module Model_Impl0
  
end
module Model_Impl1
  type t
  type u
end
module Model_Impl2
  
end
module Model_Impl3
  
end
module Model_Impl4
  
end
