
module CreusotContracts_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Default_Default_IsDefault_Stub
  type self
  predicate is_default (self : self)
end
module CreusotContracts_Std1_Default_Default_IsDefault_Interface
  type self
  predicate is_default (self : self)
end
module CreusotContracts_Std1_Default_Default_IsDefault
  type self
  predicate is_default (self : self)
  val is_default (self : self) : bool
    ensures { result = is_default self }
    
end
module Core_Default_Default_Default_Interface
  type self
  clone CreusotContracts_Std1_Default_Default_IsDefault_Stub as IsDefault0 with
    type self = self
  val default (_1' : ()) : self
    ensures { [#"../../../../creusot-contracts/src/std/default.rs" 13 26 13 45] IsDefault0.is_default result }
    
end
module ResolveUninit_MaybeUninit_Interface
  type t
  val maybe_uninit [#"../resolve_uninit.rs" 5 0 5 51] (b : bool) (y : t) : t
end
module ResolveUninit_MaybeUninit
  type t
  clone CreusotContracts_Std1_Default_Default_IsDefault_Interface as IsDefault0 with
    type self = t
  clone CreusotContracts_Resolve_Resolve_Resolve_Interface as Resolve0 with
    type self = t
  clone Core_Default_Default_Default_Interface as Default0 with
    type self = t,
    predicate IsDefault0.is_default = IsDefault0.is_default
  let rec cfg maybe_uninit [#"../resolve_uninit.rs" 5 0 5 51] [@cfg:stackify] [@cfg:subregion_analysis] (b : bool) (y : t) : t
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : t;
  var b_1 : bool;
  var y_2 : t;
  var x_3 : t;
  var _4 : ();
  var _5 : bool;
  var _6 : t;
  var _7 : t;
  {
    b_1 <- b;
    y_2 <- y;
    goto BB0
  }
  BB0 {
    _5 <- b_1;
    switch (_5)
      | False -> goto BB6
      | True -> goto BB1
      end
  }
  BB1 {
    _6 <- ([#"../resolve_uninit.rs" 8 12 8 24] Default0.default ());
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    x_3 <- _6;
    _6 <- any t;
    assume { Resolve0.resolve x_3 };
    goto BB5
  }
  BB5 {
    _4 <- ();
    goto BB7
  }
  BB6 {
    _4 <- ();
    goto BB7
  }
  BB7 {
    _7 <- y_2;
    y_2 <- any t;
    goto BB8
  }
  BB8 {
    x_3 <- _7;
    _7 <- any t;
    goto BB10
  }
  BB10 {
    _0 <- x_3;
    x_3 <- any t;
    goto BB11
  }
  BB11 {
    goto BB12
  }
  BB12 {
    return _0
  }
  
end
