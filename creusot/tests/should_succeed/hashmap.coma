
module T_hashmap__List
  type t_List 't =
    | C_Nil
    | C_Cons 't (t_List 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec v_Nil < 't > (input:t_List 't) (ret  )= any
    [ good -> {C_Nil  = input} (! ret) | bad -> {C_Nil  <> input} {false} any ]
    
  
  let rec v_Cons < 't > (input:t_List 't) (ret  (field_0:'t) (field_1:t_List 't))= any
    [ good (field_0:'t) (field_1:t_List 't)-> {C_Cons field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad (field_0:'t) (field_1:t_List 't)-> {C_Cons field_0 field_1 <> input} {false} any ]
    
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module M_hashmap__qy123zimplqy35z2qy125z__hash
  let%span shashmap0 = "../hashmap.rs" 59 14 59 58
  
  let%span span1 = "../hashmap.rs" 66 20 66 21
  
  let%span span2 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span3 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  use prelude.prelude.Int
  
  function hash_log'0 [#"../hashmap.rs" 65 4 65 30] (x : int) : int =
    [%#span1] x
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  function deep_model'1 (self : usize) : int =
    [%#span2] UIntSize.to_int self
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  function deep_model'0 (self : usize) : int =
    [%#span3] deep_model'1 self
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UInt64
  
  let rec hash (self:usize) (return'  (ret:uint64))= (! bb0
    [ bb0 = s0
      [ s0 = UInt64.of_int {UIntSize.to_int self} (fun (_res:uint64) ->  [ &_0 <- _res ] s1) | s1 = return' {_0} ]
       ]
    ) [ & _0 : uint64 = any_l () | & self : usize = self ] 
    [ return' (result:uint64)-> {[@expl:postcondition] [%#shashmap0] UInt64.to_int result
      = hash_log'0 (deep_model'0 self)}
      (! return' {result}) ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_NonNull < 't > (input:t_NonNull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_PhantomData < 't > (input:t_PhantomData 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Unique 't =
    | C_Unique (NonNull'0.t_NonNull 't) (PhantomData'0.t_PhantomData 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Unique < 't > (input:t_Unique 't) (ret  (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't))= any
    [ good (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_NonNull 't) (_marker:PhantomData'0.t_PhantomData 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_Cap  =
    | C_Cap usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0})
    | bad (field_0:usize)-> {C_Cap field_0 <> input} {false} any ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_RawVec 't 'a =
    | C_RawVec (Unique'0.t_Unique 't) (Cap'0.t_Cap) 'a
  
  function any_l (_ : 'b) : 'a
  
  let rec t_RawVec < 't > < 'a > (input:t_RawVec 't 'a) (ret  (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a))= any
    [ good (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc})
    | bad (ptr:Unique'0.t_Unique 't) (cap:Cap'0.t_Cap) (alloc:'a)-> {C_RawVec ptr cap alloc <> input} {false} any ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_Vec 't 'a =
    | C_Vec (RawVec'0.t_RawVec 't 'a) usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Vec < 't > < 'a > (input:t_Vec 't 'a) (ret  (buf:RawVec'0.t_RawVec 't 'a) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len})
    | bad (buf:RawVec'0.t_RawVec 't 'a) (len:usize)-> {C_Vec buf len <> input} {false} any ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Global (input:t_Global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module T_hashmap__MyHashMap
  use T_alloc__alloc__Global as Global'0
  
  use T_hashmap__List as List'0
  
  use T_alloc__vec__Vec as Vec'0
  
  type t_MyHashMap 'k 'v =
    | C_MyHashMap (Vec'0.t_Vec (List'0.t_List ('k, 'v)) (Global'0.t_Global))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_MyHashMap < 'k > < 'v > (input:t_MyHashMap 'k 'v) (ret  (buckets:Vec'0.t_Vec (List'0.t_List ('k, 'v)) (Global'0.t_Global)))= any
    [ good (buckets:Vec'0.t_Vec (List'0.t_List ('k, 'v)) (Global'0.t_Global))-> {C_MyHashMap buckets = input}
      (! ret {buckets})
    | bad (buckets:Vec'0.t_Vec (List'0.t_List ('k, 'v)) (Global'0.t_Global))-> {C_MyHashMap buckets <> input}
      {false}
      any ]
    
  
  function t_MyHashMap__buckets (self : t_MyHashMap 'k 'v) : Vec'0.t_Vec (List'0.t_List ('k, 'v)) (Global'0.t_Global) =
    match self with
      | C_MyHashMap a -> a
      end
end
module M_hashmap__qy123zimplqy35z5qy125z__new
  type k
  
  type v
  
  let%span shashmap0 = "../hashmap.rs" 96 15 96 24
  
  let%span shashmap1 = "../hashmap.rs" 97 14 97 34
  
  let%span shashmap2 = "../hashmap.rs" 98 4 98 64
  
  let%span shashmap3 = "../hashmap.rs" 99 31 99 46
  
  let%span span4 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  
  let%span span5 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span6 = "" 0 0 0 0
  
  let%span span7 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span8 = "../../../../creusot-contracts/src/std/vec.rs" 61 20 61 41
  
  let%span span9 = "../hashmap.rs" 31 12 34 13
  
  let%span span10 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span11 = "../hashmap.rs" 91 20 91 66
  
  let%span span12 = "../hashmap.rs" 86 8 86 53
  
  let%span span13 = "../hashmap.rs" 80 8 80 33
  
  let%span span14 = "../hashmap.rs" 41 12 44 13
  
  let%span span15 = "../hashmap.rs" 207 8 209 9
  
  let%span span16 = "../hashmap.rs" 216 8 219 9
  
  let%span span17 = "" 0 0 0 0
  
  let%span span18 = "../../../../creusot-contracts/src/std/vec.rs" 176 22 176 41
  
  let%span span19 = "../../../../creusot-contracts/src/std/vec.rs" 177 12 177 78
  
  let%span span20 = "" 0 0 0 0
  
  predicate invariant'4 (self : v)
  
  predicate inv'7 (_1 : v)
  
  axiom inv'7 : forall x : v [inv'7 x] . inv'7 x  -> invariant'4 x
  
  predicate invariant'3 (self : k)
  
  predicate inv'6 (_1 : k)
  
  axiom inv'6 : forall x : k [inv'6 x] . inv'6 x  -> invariant'3 x
  
  use T_hashmap__List as List'0
  
  predicate inv'4 (_1 : List'0.t_List (k, v))
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq (List'0.t_List (k, v))) =
    [%#span4] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq (List'0.t_List (k, v)))
  
  axiom inv'5 [@rewrite] : forall x : Seq.seq (List'0.t_List (k, v)) [inv'5 x] . inv'5 x = invariant'2 x
  
  predicate inv'1 (_1 : List'0.t_List (k, v))
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'1 (self : List'0.t_List (k, v)) =
    [%#span5] inv'1 self
  
  axiom inv'4 [@rewrite] : forall x : List'0.t_List (k, v) [inv'4 x] . inv'4 x = invariant'1 x
  
  predicate inv'3 (_1 : (k, v))
  
  axiom inv'3 [@rewrite] : forall x : (k, v) [inv'3 x] . inv'3 x = (let (a, b) = x in inv'6 a /\ inv'7 b)
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span6] (18446744073709551615 : usize)
  
  function shallow_model'1 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (k, v))
    
  
  axiom shallow_model'1_spec : forall self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) . [%#span7] Seq.length (shallow_model'1 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) =
    [%#span8] inv'5 (shallow_model'1 self)
  
  predicate inv'2 (_1 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))
  
  axiom inv'2 [@rewrite] : forall x : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) [inv'2 x] . inv'2 x
  = invariant'0 x
  
  axiom inv'1 [@rewrite] : forall x : List'0.t_List (k, v) [inv'1 x] . inv'1 x
  = match x with
    | List'0.C_Nil -> true
    | List'0.C_Cons a_0 a_1 -> inv'3 a_0 /\ inv'4 a_1
    end
  
  use T_hashmap__MyHashMap as MyHashMap'0
  
  predicate inv'0 (_1 : MyHashMap'0.t_MyHashMap k v)
  
  axiom inv'0 [@rewrite] : forall x : MyHashMap'0.t_MyHashMap k v [inv'0 x] . inv'0 x
  = match x with
    | MyHashMap'0.C_MyHashMap buckets -> inv'2 buckets
    end
  
  use T_core__option__Option as Option'0
  
  use map.Map
  
  use prelude.prelude.Mapping
  
  type t_DeepModelTy'0
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  function get'0 [#"../hashmap.rs" 29 4 29 56] (self : List'0.t_List (k, v)) (index : t_DeepModelTy'0) : Option'0.t_Option v
    
   =
    [%#span9] match self with
      | List'0.C_Nil -> Option'0.C_None
      | List'0.C_Cons (k, v) tl -> if deep_model'0 k = index then Option'0.C_Some v else get'0 tl index
      end
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (ix : int) : List'0.t_List (k, v)
    
   =
    [%#span10] Seq.get (shallow_model'1 self) ix
  
  use int.EuclideanDivision
  
  use T_hashmap__MyHashMap as T_hashmap__MyHashMap
  
  function hash_log'0 [#"../hashmap.rs" 55 4 55 45] (_1 : t_DeepModelTy'0) : int
  
  function bucket_ix'0 [#"../hashmap.rs" 90 4 90 48] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : int =
    [%#span11] EuclideanDivision.mod (hash_log'0 k) (Seq.length (shallow_model'1 (T_hashmap__MyHashMap.t_MyHashMap__buckets self)))
  
  function bucket'0 [#"../hashmap.rs" 85 4 85 54] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : List'0.t_List (k, v)
    
   =
    [%#span12] index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) (bucket_ix'0 self k)
  
  use map.Map
  
  function shallow_model'0 [#"../hashmap.rs" 79 4 79 50] (self : MyHashMap'0.t_MyHashMap k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span13] Mapping.from_fn (fun (k : t_DeepModelTy'0) -> get'0 (bucket'0 self k) k)
  
  predicate no_double_binding'0 [#"../hashmap.rs" 39 4 39 38] (self : List'0.t_List (k, v)) =
    [%#span14] match self with
      | List'0.C_Nil -> true
      | List'0.C_Cons (k, _) tl -> get'0 tl (deep_model'0 k) = Option'0.C_None /\ no_double_binding'0 tl
      end
  
  predicate good_bucket'0 [#"../hashmap.rs" 206 4 206 57] (self : MyHashMap'0.t_MyHashMap k v) (l : List'0.t_List (k, v)) (h : int)
    
   =
    [%#span15] forall k : t_DeepModelTy'0, v : v . get'0 l k = Option'0.C_Some v  -> bucket_ix'0 self k = h
  
  use prelude.prelude.Borrow
  
  predicate hashmap_inv'0 [#"../hashmap.rs" 215 4 215 33] (self : MyHashMap'0.t_MyHashMap k v) =
    [%#span16] 0 < Seq.length (shallow_model'1 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'1 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
     -> good_bucket'0 self (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i) i
    /\ no_double_binding'0 (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i))
  
  use prelude.prelude.Intrinsic
  
  let rec from_elem'0 (elem:List'0.t_List (k, v)) (n:usize) (return'  (ret:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)))= {[@expl:precondition] [%#span17] inv'1 elem}
    any
    [ return' (result:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))-> {[%#span20] inv'2 result}
      {[%#span19] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      {[%#span18] Seq.length (shallow_model'1 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  let rec new (size:usize) (return'  (ret:MyHashMap'0.t_MyHashMap k v))= {[%#shashmap0] 0 < UIntSize.to_int size}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_7 <- List'0.C_Nil ] s1
      | s1 = from_elem'0 {_7} {size}
          (fun (_ret':Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &res <- MyHashMap'0.C_MyHashMap _6 ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- res ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    )
    [ & _0 : MyHashMap'0.t_MyHashMap k v = any_l ()
    | & size : usize = size
    | & res : MyHashMap'0.t_MyHashMap k v = any_l ()
    | & _6 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) = any_l ()
    | & _7 : List'0.t_List (k, v) = any_l () ]
    
    [ return' (result:MyHashMap'0.t_MyHashMap k v)-> {[@expl:postcondition] [%#shashmap3] inv'0 result}
      {[@expl:postcondition] [%#shashmap2] forall i : t_DeepModelTy'0 . Map.get (shallow_model'0 result) i
      = Option'0.C_None}
      {[@expl:postcondition] [%#shashmap1] hashmap_inv'0 result}
      (! return' {result}) ]
    
end
module M_hashmap__qy123zimplqy35z5qy125z__add
  type k
  
  type v
  
  let%span shashmap0 = "../hashmap.rs" 109 23 109 41
  
  let%span shashmap1 = "../hashmap.rs" 111 27 111 55
  
  let%span shashmap2 = "../hashmap.rs" 113 20 113 35
  
  let%span shashmap3 = "../hashmap.rs" 115 20 115 26
  
  let%span shashmap4 = "../hashmap.rs" 116 20 116 52
  
  let%span shashmap5 = "../hashmap.rs" 115 8 115 28
  
  let%span shashmap6 = "../hashmap.rs" 120 20 120 44
  
  let%span shashmap7 = "../hashmap.rs" 135 24 135 44
  
  let%span shashmap8 = "../hashmap.rs" 127 32 127 52
  
  let%span shashmap9 = "../hashmap.rs" 104 15 104 36
  
  let%span shashmap10 = "../hashmap.rs" 107 20 107 24
  
  let%span shashmap11 = "../hashmap.rs" 107 26 107 29
  
  let%span shashmap12 = "../hashmap.rs" 107 34 107 37
  
  let%span shashmap13 = "../hashmap.rs" 105 14 105 35
  
  let%span shashmap14 = "../hashmap.rs" 106 4 106 124
  
  let%span span15 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  
  let%span span16 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span17 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span18 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span19 = "" 0 0 0 0
  
  let%span span20 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span21 = "../../../../creusot-contracts/src/std/vec.rs" 61 20 61 41
  
  let%span span22 = "../hashmap.rs" 31 12 34 13
  
  let%span span23 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span24 = "../hashmap.rs" 91 20 91 66
  
  let%span span25 = "../hashmap.rs" 86 8 86 53
  
  let%span span26 = "../hashmap.rs" 80 8 80 33
  
  let%span span27 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span28 = "../hashmap.rs" 41 12 44 13
  
  let%span span29 = "../hashmap.rs" 207 8 209 9
  
  let%span span30 = "../hashmap.rs" 216 8 219 9
  
  let%span span31 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span32 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span33 = "" 0 0 0 0
  
  let%span span34 = "" 0 0 0 0
  
  let%span span35 = "../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  
  let%span span36 = "../../../../creusot-contracts/src/std/slice.rs" 139 8 139 96
  
  let%span span37 = "../../../../creusot-contracts/src/std/slice.rs" 132 20 132 37
  
  let%span span38 = "../../../../creusot-contracts/src/std/slice.rs" 125 20 125 37
  
  let%span span39 = "../../../../creusot-contracts/src/std/vec.rs" 148 27 148 46
  
  let%span span40 = "" 0 0 0 0
  
  let%span span41 = "" 0 0 0 0
  
  let%span span42 = "../../../../creusot-contracts/src/std/vec.rs" 149 26 149 54
  
  let%span span43 = "../../../../creusot-contracts/src/std/vec.rs" 150 26 150 57
  
  let%span span44 = "../../../../creusot-contracts/src/std/vec.rs" 151 26 151 62
  
  let%span span45 = "../../../../creusot-contracts/src/std/vec.rs" 152 26 152 55
  
  let%span span46 = "" 0 0 0 0
  
  let%span span47 = "../hashmap.rs" 52 13 52 17
  
  let%span span48 = "../hashmap.rs" 51 14 51 58
  
  let%span span49 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span50 = "" 0 0 0 0
  
  let%span span51 = "../../../../creusot-contracts/src/std/vec.rs" 79 26 79 48
  
  use T_alloc__alloc__Global as Global'0
  
  use T_hashmap__List as List'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))
  
  use T_hashmap__MyHashMap as MyHashMap'0
  
  predicate inv'16 (_1 : MyHashMap'0.t_MyHashMap k v)
  
  axiom inv'16 [@rewrite] : forall x : MyHashMap'0.t_MyHashMap k v [inv'16 x] . inv'16 x
  = match x with
    | MyHashMap'0.C_MyHashMap buckets -> inv'0 buckets
    end
  
  predicate inv'5 (_1 : List'0.t_List (k, v))
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'13 (self : Seq.seq (List'0.t_List (k, v))) =
    [%#span15] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'5 (Seq.get self i)
  
  predicate inv'15 (_1 : Seq.seq (List'0.t_List (k, v)))
  
  axiom inv'15 [@rewrite] : forall x : Seq.seq (List'0.t_List (k, v)) [inv'15 x] . inv'15 x = invariant'13 x
  
  predicate inv'4 (_1 : v)
  
  predicate inv'3 (_1 : k)
  
  predicate inv'14 (_1 : (k, v))
  
  axiom inv'14 [@rewrite] : forall x : (k, v) [inv'14 x] . inv'14 x = (let (a, b) = x in inv'3 a /\ inv'4 b)
  
  use prelude.prelude.UIntSize
  
  predicate inv'13 (_1 : usize)
  
  axiom inv'13 [@rewrite] : forall x : usize [inv'13 x] . inv'13 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'11 (self : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) =
    [%#span16] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'12 (_1 : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)))
  
  axiom inv'12 [@rewrite] : forall x : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) [inv'12 x] . inv'12 x
  = invariant'11 x
  
  predicate invariant'10 (self : k) =
    [%#span17] inv'3 self
  
  predicate inv'11 (_1 : k)
  
  axiom inv'11 [@rewrite] : forall x : k [inv'11 x] . inv'11 x = invariant'10 x
  
  predicate invariant'9 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) =
    [%#span17] inv'0 self
  
  predicate inv'10 (_1 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))
  
  axiom inv'10 [@rewrite] : forall x : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) [inv'10 x] . inv'10 x
  = invariant'9 x
  
  predicate invariant'8 (self : borrowed (MyHashMap'0.t_MyHashMap k v)) =
    [%#span16] inv'16 self.current /\ inv'16 self.final
  
  predicate inv'9 (_1 : borrowed (MyHashMap'0.t_MyHashMap k v))
  
  axiom inv'9 [@rewrite] : forall x : borrowed (MyHashMap'0.t_MyHashMap k v) [inv'9 x] . inv'9 x = invariant'8 x
  
  predicate invariant'7 (self : borrowed (List'0.t_List (k, v))) =
    [%#span16] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'8 (_1 : borrowed (List'0.t_List (k, v)))
  
  axiom inv'8 [@rewrite] : forall x : borrowed (List'0.t_List (k, v)) [inv'8 x] . inv'8 x = invariant'7 x
  
  predicate invariant'6 (self : borrowed v) =
    [%#span16] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'7 (_1 : borrowed v)
  
  axiom inv'7 [@rewrite] : forall x : borrowed v [inv'7 x] . inv'7 x = invariant'6 x
  
  predicate invariant'5 (self : borrowed k) =
    [%#span16] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'6 (_1 : borrowed k)
  
  axiom inv'6 [@rewrite] : forall x : borrowed k [inv'6 x] . inv'6 x = invariant'5 x
  
  predicate inv'1 (_1 : List'0.t_List (k, v))
  
  predicate invariant'4 (self : List'0.t_List (k, v)) =
    [%#span18] inv'1 self
  
  axiom inv'5 [@rewrite] : forall x : List'0.t_List (k, v) [inv'5 x] . inv'5 x = invariant'4 x
  
  predicate invariant'3 (self : v)
  
  axiom inv'4 : forall x : v [inv'4 x] . inv'4 x  -> invariant'3 x
  
  predicate invariant'2 (self : k)
  
  axiom inv'3 : forall x : k [inv'3 x] . inv'3 x  -> invariant'2 x
  
  predicate invariant'1 (self : borrowed (List'0.t_List (k, v))) =
    [%#span16] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : borrowed (List'0.t_List (k, v)))
  
  axiom inv'2 [@rewrite] : forall x : borrowed (List'0.t_List (k, v)) [inv'2 x] . inv'2 x = invariant'1 x
  
  axiom inv'1 [@rewrite] : forall x : List'0.t_List (k, v) [inv'1 x] . inv'1 x
  = match x with
    | List'0.C_Nil -> true
    | List'0.C_Cons a_0 a_1 -> inv'14 a_0 /\ inv'5 a_1
    end
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span19] (18446744073709551615 : usize)
  
  function shallow_model'4 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (k, v))
    
  
  axiom shallow_model'4_spec : forall self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) . [%#span20] Seq.length (shallow_model'4 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) =
    [%#span21] inv'15 (shallow_model'4 self)
  
  axiom inv'0 [@rewrite] : forall x : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) [inv'0 x] . inv'0 x
  = invariant'0 x
  
  use prelude.prelude.Mapping
  
  type t_DeepModelTy'0
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  use T_core__option__Option as Option'0
  
  function get'0 [#"../hashmap.rs" 29 4 29 56] (self : List'0.t_List (k, v)) (index : t_DeepModelTy'0) : Option'0.t_Option v
    
   =
    [%#span22] match self with
      | List'0.C_Nil -> Option'0.C_None
      | List'0.C_Cons (k, v) tl -> if deep_model'0 k = index then Option'0.C_Some v else get'0 tl index
      end
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (ix : int) : List'0.t_List (k, v)
    
   =
    [%#span23] Seq.get (shallow_model'4 self) ix
  
  use int.EuclideanDivision
  
  use T_hashmap__MyHashMap as T_hashmap__MyHashMap
  
  function hash_log'0 [#"../hashmap.rs" 55 4 55 45] (_1 : t_DeepModelTy'0) : int
  
  function bucket_ix'0 [#"../hashmap.rs" 90 4 90 48] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : int =
    [%#span24] EuclideanDivision.mod (hash_log'0 k) (Seq.length (shallow_model'4 (T_hashmap__MyHashMap.t_MyHashMap__buckets self)))
  
  function bucket'0 [#"../hashmap.rs" 85 4 85 54] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : List'0.t_List (k, v)
    
   =
    [%#span25] index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) (bucket_ix'0 self k)
  
  use map.Map
  
  function shallow_model'0 [#"../hashmap.rs" 79 4 79 50] (self : MyHashMap'0.t_MyHashMap k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span26] Mapping.from_fn (fun (k : t_DeepModelTy'0) -> get'0 (bucket'0 self k) k)
  
  function shallow_model'1 (self : borrowed (MyHashMap'0.t_MyHashMap k v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span27] shallow_model'0 self.current
  
  use map.Map
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate no_double_binding'0 [#"../hashmap.rs" 39 4 39 38] (self : List'0.t_List (k, v)) =
    [%#span28] match self with
      | List'0.C_Nil -> true
      | List'0.C_Cons (k, _) tl -> get'0 tl (deep_model'0 k) = Option'0.C_None /\ no_double_binding'0 tl
      end
  
  predicate good_bucket'0 [#"../hashmap.rs" 206 4 206 57] (self : MyHashMap'0.t_MyHashMap k v) (l : List'0.t_List (k, v)) (h : int)
    
   =
    [%#span29] forall k : t_DeepModelTy'0, v : v . get'0 l k = Option'0.C_Some v  -> bucket_ix'0 self k = h
  
  predicate hashmap_inv'0 [#"../hashmap.rs" 215 4 215 33] (self : MyHashMap'0.t_MyHashMap k v) =
    [%#span30] 0 < Seq.length (shallow_model'4 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'4 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
     -> good_bucket'0 self (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i) i
    /\ no_double_binding'0 (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i))
  
  predicate resolve'4 (self : borrowed (MyHashMap'0.t_MyHashMap k v)) =
    [%#span31] self.final = self.current
  
  predicate resolve'3 (self : borrowed (List'0.t_List (k, v))) =
    [%#span31] self.final = self.current
  
  predicate resolve'2 (self : borrowed v) =
    [%#span31] self.final = self.current
  
  predicate resolve'1 (self : borrowed k) =
    [%#span31] self.final = self.current
  
  function deep_model'1 (self : k) : t_DeepModelTy'0 =
    [%#span32] deep_model'0 self
  
  let rec eq'0 (self:k) (other:k) (return'  (ret:bool))= {[@expl:precondition] [%#span34] inv'11 other}
    {[@expl:precondition] [%#span33] inv'11 self}
    any [ return' (result:bool)-> {[%#span35] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate resolve'0 (self : borrowed (List'0.t_List (k, v))) =
    [%#span31] self.final = self.current
  
  use prelude.prelude.Slice
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (List'0.t_List (k, v))) (fin : Seq.seq (List'0.t_List (k, v)))
    
   =
    [%#span36] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (List'0.t_List (k, v))) (out : List'0.t_List (k, v))
    
   =
    [%#span37] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq (List'0.t_List (k, v))) =
    [%#span38] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'3 (self : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) : Seq.seq (List'0.t_List (k, v))
    
   =
    [%#span27] shallow_model'4 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed (List'0.t_List (k, v))))= {[@expl:precondition] [%#span41] inv'13 index}
    {[@expl:precondition] [%#span40] inv'12 self}
    {[@expl:precondition] [%#span39] in_bounds'0 index (shallow_model'3 self)}
    any
    [ return' (result:borrowed (List'0.t_List (k, v)))-> {[%#span46] inv'2 result}
      {[%#span45] Seq.length (shallow_model'4 self.final) = Seq.length (shallow_model'3 self)}
      {[%#span44] resolve_elswhere'0 index (shallow_model'3 self) (shallow_model'4 self.final)}
      {[%#span43] has_value'0 index (shallow_model'4 self.final) result.final}
      {[%#span42] has_value'0 index (shallow_model'3 self) result.current}
      (! return' {result}) ]
    
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.UInt64
  
  let rec hash'0 (self:k) (return'  (ret:uint64))= {[@expl:precondition] [%#span47] inv'11 self}
    any
    [ return' (result:uint64)-> {[%#span48] UInt64.to_int result = hash_log'0 (deep_model'1 self)}
      (! return' {result}) ]
    
  
  function shallow_model'2 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (k, v))
    
   =
    [%#span49] shallow_model'4 self
  
  let rec len'0 (self:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] [%#span50] inv'10 self}
    any
    [ return' (result:usize)-> {[%#span51] UIntSize.to_int result = Seq.length (shallow_model'2 self)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  let rec add (self:borrowed (MyHashMap'0.t_MyHashMap k v)) (key:k) (val':v) (return'  (ret:()))= {[%#shashmap12] inv'4 val'}
    {[%#shashmap11] inv'3 key}
    {[%#shashmap10] inv'9 self}
    {[%#shashmap9] hashmap_inv'0 self.current}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#shashmap0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = MyHashMap'0.t_MyHashMap <k> <v> {self.current}
          (fun (rbuckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
            len'0 {rbuckets'0} (fun (_ret':usize) ->  [ &length <- _ret' ] s1))
      | s1 = bb2 ]
      
    | bb2 = s0 [ s0 = hash'0 {key} (fun (_ret':uint64) ->  [ &_13 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = UIntSize.of_int {UInt64.to_int _13} (fun (_res:usize) ->  [ &_12 <- _res ] s1)
      | s1 =  [ &_15 <- length ] s2
      | s2 = UIntSize.eq {_15} {[%#shashmap1] (0 : usize)} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s3)
      | s3 = {[@expl:remainder by zero] [%#shashmap1] not _16} s4
      | s4 = bb4 ]
      
    | bb4 = s0
      [ s0 = UIntSize.rem {_12} {_15} (fun (_ret':usize) ->  [ &index <- _ret' ] s1)
      | s1 = MyHashMap'0.t_MyHashMap <k> <v> {self.current}
          (fun (rbuckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
            Borrow.borrow_final
              <Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)>
              {rbuckets'0}
              {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) ->
                 [ &_20 <- _ret' ] 
                MyHashMap'0.t_MyHashMap <k> <v> {self.current}
                  (fun (l_buckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
                     [ &self <- { self with current = MyHashMap'0.C_MyHashMap _20.final ; } ] 
                    s2)))
      | s2 = -{inv'0 _20.final}- s3
      | s3 = index_mut'0 {_20} {index} (fun (_ret':borrowed (List'0.t_List (k, v))) ->  [ &_19 <- _ret' ] s4)
      | s4 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_final <List'0.t_List (k, v)> {_19.current} {Borrow.get_id _19}
          (fun (_ret':borrowed (List'0.t_List (k, v))) ->
             [ &_18 <- _ret' ] 
             [ &_19 <- { _19 with current = _18.final ; } ] 
            s1)
      | s1 = -{inv'1 _18.final}- s2
      | s2 = Borrow.borrow_final <List'0.t_List (k, v)> {_18.current} {Borrow.get_id _18}
          (fun (_ret':borrowed (List'0.t_List (k, v))) ->
             [ &l <- _ret' ] 
             [ &_18 <- { _18 with current = l.final ; } ] 
            s3)
      | s3 = -{inv'1 l.final}- s4
      | s4 = {[@expl:type invariant] inv'2 _18} s5
      | s5 = -{resolve'0 _18}- s6
      | s6 =  [ &old_l <- [%#shashmap2] Snapshot.new l ] s7
      | s7 = bb6 ]
      
    | bb6 = bb7
    | bb7 = bb7
      [ bb7 = {[@expl:loop invariant] [%#shashmap5] (forall i : t_DeepModelTy'0 . get'0 l.current i = get'0 l.final i
        \/ i = deep_model'0 key)
        /\ no_double_binding'0 l.final  -> no_double_binding'0 (Snapshot.inner old_l).final}
        {[@expl:loop invariant] [%#shashmap6] no_double_binding'0 l.current}
        {[@expl:loop invariant] [%#shashmap5] forall i : t_DeepModelTy'0 . get'0 l.final i = get'0 l.current i
         -> get'0 (Snapshot.inner old_l).final i = get'0 (Snapshot.inner old_l).current i}
        {[@expl:loop invariant] [%#shashmap5] get'0 l.final (deep_model'0 key) = Option'0.C_Some val'
         -> get'0 (Snapshot.inner old_l).final (deep_model'0 key) = Option'0.C_Some val'}
        {[@expl:loop invariant] [%#shashmap5] good_bucket'0 (Snapshot.inner old_self).current l.final (UIntSize.to_int index)
         -> good_bucket'0 (Snapshot.inner old_self).current (Snapshot.inner old_l).final (UIntSize.to_int index)}
        {[@expl:loop invariant] [%#shashmap4] good_bucket'0 (Snapshot.inner old_self).current l.current (UIntSize.to_int index)}
        {[@expl:loop invariant] [%#shashmap3] inv'2 l}
        (! s0) [ s0 = bb8 ] 
        [ bb8 = any
          [ br0 -> {l.current = List'0.C_Nil } (! bb14)
          | br1 (a:(k, v)) (b:List'0.t_List (k, v))-> {l.current = List'0.C_Cons a b} (! bb9) ]
          
        | bb9 = bb10
        | bb10 = s0
          [ s0 = List'0.v_Cons <(k, v)> {l.current}
              (fun (r0'0:(k, v)) (r1'0:List'0.t_List (k, v)) ->
                Borrow.borrow_mut <k> {let (r'0, _) = r0'0 in r'0}
                  (fun (_ret':borrowed k) ->
                     [ &k <- _ret' ] 
                    List'0.v_Cons <(k, v)> {l.current}
                      (fun (l_0'0:(k, v)) (l_1'0:List'0.t_List (k, v)) ->
                         [ &l <- { l with current = List'0.C_Cons (let (_, l'2) = l_0'0 in (k.final, l'2)) l_1'0 ; } ] 
                        s1)))
          | s1 = -{inv'3 k.final}- s2
          | s2 = List'0.v_Cons <(k, v)> {l.current}
              (fun (r0'1:(k, v)) (r1'1:List'0.t_List (k, v)) ->
                Borrow.borrow_mut <v> {let (_, r'1) = r0'1 in r'1}
                  (fun (_ret':borrowed v) ->
                     [ &v <- _ret' ] 
                    List'0.v_Cons <(k, v)> {l.current}
                      (fun (l_0'1:(k, v)) (l_1'1:List'0.t_List (k, v)) ->
                         [ &l <- { l with current = List'0.C_Cons (let (l'4, _) = l_0'1 in (l'4, v.final)) l_1'1 ; } ] 
                        s3)))
          | s3 = -{inv'4 v.final}- s4
          | s4 = List'0.v_Cons <(k, v)> {l.current}
              (fun (r0'2:(k, v)) (r1'2:List'0.t_List (k, v)) ->
                Borrow.borrow_mut <List'0.t_List (k, v)> {r1'2}
                  (fun (_ret':borrowed (List'0.t_List (k, v))) ->
                     [ &tl <- _ret' ] 
                    List'0.v_Cons <(k, v)> {l.current}
                      (fun (l_0'2:(k, v)) (l_1'2:List'0.t_List (k, v)) ->
                         [ &l <- { l with current = List'0.C_Cons l_0'2 tl.final ; } ] 
                        s5)))
          | s5 = -{inv'5 tl.final}- s6
          | s6 =  [ &tl1 <- tl ] s7
          | s7 = eq'0 {k.current} {key} (fun (_ret':bool) ->  [ &_39 <- _ret' ] s8)
          | s8 = bb11 ]
          
        | bb11 = s0
          [ s0 = {[@expl:type invariant] inv'6 k} s1
          | s1 = -{resolve'1 k}- s2
          | s2 = any [ br0 -> {_39 = false} (! bb13) | br1 -> {_39} (! bb12) ]  ]
          
        | bb13 = s0
          [ s0 = {[@expl:type invariant] inv'7 v} s1
          | s1 = -{resolve'2 v}- s2
          | s2 = Borrow.borrow_final <List'0.t_List (k, v)> {tl1.current} {Borrow.get_id tl1}
              (fun (_ret':borrowed (List'0.t_List (k, v))) ->
                 [ &_47 <- _ret' ] 
                 [ &tl1 <- { tl1 with current = _47.final ; } ] 
                s3)
          | s3 = -{inv'1 _47.final}- s4
          | s4 = Borrow.borrow_final <List'0.t_List (k, v)> {_47.current} {Borrow.get_id _47}
              (fun (_ret':borrowed (List'0.t_List (k, v))) ->
                 [ &_46 <- _ret' ] 
                 [ &_47 <- { _47 with current = _46.final ; } ] 
                s5)
          | s5 = -{inv'1 _46.final}- s6
          | s6 = {[@expl:type invariant] inv'2 l} s7
          | s7 = -{resolve'0 l}- s8
          | s8 =  [ &l <- _46 ] s9
          | s9 = {[@expl:type invariant] inv'2 _47} s10
          | s10 = -{resolve'0 _47}- s11
          | s11 = {[@expl:type invariant] inv'8 tl1} s12
          | s12 = -{resolve'3 tl1}- s13
          | s13 = bb7 ]
           ]
         ]
      
    | bb14 = s0 [ s0 =  [ &_52 <- (key, val') ] s1 | s1 =  [ &_56 <- List'0.C_Nil ] s2 | s2 = bb15 ] 
    | bb15 = s0 [ s0 =  [ &_51 <- List'0.C_Cons _52 _56 ] s1 | s1 = bb16 ] 
    | bb16 = bb17
    | bb17 = s0
      [ s0 = {[@expl:type invariant] inv'1 l.current} s1
      | s1 =  [ &l <- { l with current = _51 ; } ] s2
      | s2 = {[@expl:type invariant] inv'2 l} s3
      | s3 = -{resolve'0 l}- s4
      | s4 = {[@expl:type invariant] inv'2 _19} s5
      | s5 = -{resolve'0 _19}- s6
      | s6 = {[@expl:type invariant] inv'9 self} s7
      | s7 = -{resolve'4 self}- s8
      | s8 = bb19 ]
      
    | bb19 = s0 [ s0 = {[@expl:assertion] [%#shashmap7] hashmap_inv'0 self.current} s1 | s1 = bb20 ] 
    | bb12 = s0
      [ s0 = {[@expl:type invariant] inv'8 tl1} s1
      | s1 = -{resolve'3 tl1}- s2
      | s2 =  [ &v <- { v with current = val' ; } ] s3
      | s3 = {[@expl:type invariant] inv'7 v} s4
      | s4 = -{resolve'2 v}- s5
      | s5 = {[@expl:type invariant] inv'2 _19} s6
      | s6 = -{resolve'0 _19}- s7
      | s7 = {[@expl:type invariant] inv'2 l} s8
      | s8 = -{resolve'0 l}- s9
      | s9 = {[@expl:type invariant] inv'9 self} s10
      | s10 = -{resolve'4 self}- s11
      | s11 = {[@expl:assertion] [%#shashmap8] hashmap_inv'0 self.current} s12
      | s12 = bb20 ]
      
    | bb20 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (MyHashMap'0.t_MyHashMap k v) = self
    | & key : k = key
    | & val' : v = val'
    | & old_self : Snapshot.snap_ty (borrowed (MyHashMap'0.t_MyHashMap k v)) = any_l ()
    | & length : usize = any_l ()
    | & index : usize = any_l ()
    | & _12 : usize = any_l ()
    | & _13 : uint64 = any_l ()
    | & _15 : usize = any_l ()
    | & _16 : bool = any_l ()
    | & l : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _18 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _19 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _20 : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) = any_l ()
    | & old_l : Snapshot.snap_ty (borrowed (List'0.t_List (k, v))) = any_l ()
    | & k : borrowed k = any_l ()
    | & v : borrowed v = any_l ()
    | & tl : borrowed (List'0.t_List (k, v)) = any_l ()
    | & tl1 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _39 : bool = any_l ()
    | & _46 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _47 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _51 : List'0.t_List (k, v) = any_l ()
    | & _52 : (k, v) = any_l ()
    | & _56 : List'0.t_List (k, v) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#shashmap14] forall i : t_DeepModelTy'0 . Map.get (shallow_model'0 self.final) i
      = (if i = deep_model'0 key then Option'0.C_Some val' else Map.get (shallow_model'1 self) i)}
      {[@expl:postcondition] [%#shashmap13] hashmap_inv'0 self.final}
      (! return' {result}) ]
    
end
module M_hashmap__qy123zimplqy35z5qy125z__get
  type k
  
  type v
  
  let%span shashmap0 = "../hashmap.rs" 144 27 144 67
  
  let%span shashmap1 = "../hashmap.rs" 147 20 147 26
  
  let%span shashmap2 = "../hashmap.rs" 148 20 148 101
  
  let%span shashmap3 = "../hashmap.rs" 138 15 138 33
  
  let%span shashmap4 = "../hashmap.rs" 143 16 143 20
  
  let%span shashmap5 = "../hashmap.rs" 143 22 143 25
  
  let%span shashmap6 = "../hashmap.rs" 139 14 142 5
  
  let%span shashmap7 = "../hashmap.rs" 143 33 143 43
  
  let%span span8 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  
  let%span span9 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span10 = "" 0 0 0 0
  
  let%span span11 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span12 = "../../../../creusot-contracts/src/std/vec.rs" 61 20 61 41
  
  let%span span13 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span14 = "../hashmap.rs" 31 12 34 13
  
  let%span span15 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span16 = "../hashmap.rs" 91 20 91 66
  
  let%span span17 = "../hashmap.rs" 86 8 86 53
  
  let%span span18 = "../hashmap.rs" 80 8 80 33
  
  let%span span19 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span20 = "../hashmap.rs" 41 12 44 13
  
  let%span span21 = "../hashmap.rs" 207 8 209 9
  
  let%span span22 = "../hashmap.rs" 216 8 219 9
  
  let%span span23 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  let%span span24 = "" 0 0 0 0
  
  let%span span25 = "" 0 0 0 0
  
  let%span span26 = "../../../../creusot-contracts/src/std/cmp.rs" 11 26 11 75
  
  let%span span27 = "../../../../creusot-contracts/src/std/slice.rs" 132 20 132 37
  
  let%span span28 = "../../../../creusot-contracts/src/std/slice.rs" 125 20 125 37
  
  let%span span29 = "../../../../creusot-contracts/src/std/vec.rs" 158 27 158 46
  
  let%span span30 = "" 0 0 0 0
  
  let%span span31 = "" 0 0 0 0
  
  let%span span32 = "../../../../creusot-contracts/src/std/vec.rs" 159 26 159 54
  
  let%span span33 = "" 0 0 0 0
  
  let%span span34 = "" 0 0 0 0
  
  let%span span35 = "../../../../creusot-contracts/src/std/vec.rs" 79 26 79 48
  
  let%span span36 = "../hashmap.rs" 52 13 52 17
  
  let%span span37 = "../hashmap.rs" 51 14 51 58
  
  use T_hashmap__List as List'0
  
  predicate inv'12 (_1 : List'0.t_List (k, v))
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'10 (self : Seq.seq (List'0.t_List (k, v))) =
    [%#span8] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'12 (Seq.get self i)
  
  predicate inv'14 (_1 : Seq.seq (List'0.t_List (k, v)))
  
  axiom inv'14 [@rewrite] : forall x : Seq.seq (List'0.t_List (k, v)) [inv'14 x] . inv'14 x = invariant'10 x
  
  predicate invariant'9 (self : v)
  
  predicate inv'13 (_1 : v)
  
  axiom inv'13 : forall x : v [inv'13 x] . inv'13 x  -> invariant'9 x
  
  predicate inv'8 (_1 : List'0.t_List (k, v))
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'8 (self : List'0.t_List (k, v)) =
    [%#span9] inv'8 self
  
  axiom inv'12 [@rewrite] : forall x : List'0.t_List (k, v) [inv'12 x] . inv'12 x = invariant'8 x
  
  predicate inv'2 (_1 : k)
  
  predicate inv'11 (_1 : (k, v))
  
  axiom inv'11 [@rewrite] : forall x : (k, v) [inv'11 x] . inv'11 x = (let (a, b) = x in inv'2 a /\ inv'13 b)
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span10] (18446744073709551615 : usize)
  
  function shallow_model'2 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (k, v))
    
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) . [%#span11] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'7 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) =
    [%#span12] inv'14 (shallow_model'2 self)
  
  predicate inv'10 (_1 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))
  
  axiom inv'10 [@rewrite] : forall x : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) [inv'10 x] . inv'10 x
  = invariant'7 x
  
  use T_hashmap__MyHashMap as MyHashMap'0
  
  predicate inv'9 (_1 : MyHashMap'0.t_MyHashMap k v)
  
  axiom inv'9 [@rewrite] : forall x : MyHashMap'0.t_MyHashMap k v [inv'9 x] . inv'9 x
  = match x with
    | MyHashMap'0.C_MyHashMap buckets -> inv'10 buckets
    end
  
  axiom inv'8 [@rewrite] : forall x : List'0.t_List (k, v) [inv'8 x] . inv'8 x
  = match x with
    | List'0.C_Nil -> true
    | List'0.C_Cons a_0 a_1 -> inv'11 a_0 /\ inv'12 a_1
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'6 (self : v) =
    [%#span13] inv'13 self
  
  predicate inv'7 (_1 : v)
  
  axiom inv'7 [@rewrite] : forall x : v [inv'7 x] . inv'7 x = invariant'6 x
  
  predicate inv'6 (_1 : usize)
  
  axiom inv'6 [@rewrite] : forall x : usize [inv'6 x] . inv'6 x = true
  
  predicate invariant'4 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) =
    [%#span13] inv'10 self
  
  predicate inv'5 (_1 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))
  
  axiom inv'5 [@rewrite] : forall x : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) [inv'5 x] . inv'5 x
  = invariant'4 x
  
  predicate invariant'3 (self : k) =
    [%#span13] inv'2 self
  
  predicate inv'4 (_1 : k)
  
  axiom inv'4 [@rewrite] : forall x : k [inv'4 x] . inv'4 x = invariant'3 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'3 (_1 : Option'0.t_Option v)
  
  axiom inv'3 [@rewrite] : forall x : Option'0.t_Option v [inv'3 x] . inv'3 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'7 a_0
    end
  
  predicate invariant'2 (self : k)
  
  axiom inv'2 : forall x : k [inv'2 x] . inv'2 x  -> invariant'2 x
  
  predicate invariant'1 (self : MyHashMap'0.t_MyHashMap k v) =
    [%#span13] inv'9 self
  
  predicate inv'1 (_1 : MyHashMap'0.t_MyHashMap k v)
  
  axiom inv'1 [@rewrite] : forall x : MyHashMap'0.t_MyHashMap k v [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : List'0.t_List (k, v)) =
    [%#span13] inv'8 self
  
  predicate inv'0 (_1 : List'0.t_List (k, v))
  
  axiom inv'0 [@rewrite] : forall x : List'0.t_List (k, v) [inv'0 x] . inv'0 x = invariant'0 x
  
  use map.Map
  
  use prelude.prelude.Mapping
  
  type t_DeepModelTy'0
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  function get'0 [#"../hashmap.rs" 29 4 29 56] (self : List'0.t_List (k, v)) (index : t_DeepModelTy'0) : Option'0.t_Option v
    
   =
    [%#span14] match self with
      | List'0.C_Nil -> Option'0.C_None
      | List'0.C_Cons (k, v) tl -> if deep_model'0 k = index then Option'0.C_Some v else get'0 tl index
      end
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (ix : int) : List'0.t_List (k, v)
    
   =
    [%#span15] Seq.get (shallow_model'2 self) ix
  
  use int.EuclideanDivision
  
  use T_hashmap__MyHashMap as T_hashmap__MyHashMap
  
  function hash_log'0 [#"../hashmap.rs" 55 4 55 45] (_1 : t_DeepModelTy'0) : int
  
  function bucket_ix'0 [#"../hashmap.rs" 90 4 90 48] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : int =
    [%#span16] EuclideanDivision.mod (hash_log'0 k) (Seq.length (shallow_model'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self)))
  
  function bucket'0 [#"../hashmap.rs" 85 4 85 54] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : List'0.t_List (k, v)
    
   =
    [%#span17] index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) (bucket_ix'0 self k)
  
  use map.Map
  
  function shallow_model'3 [#"../hashmap.rs" 79 4 79 50] (self : MyHashMap'0.t_MyHashMap k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span18] Mapping.from_fn (fun (k : t_DeepModelTy'0) -> get'0 (bucket'0 self k) k)
  
  function shallow_model'0 (self : MyHashMap'0.t_MyHashMap k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v) =
    [%#span19] shallow_model'3 self
  
  predicate no_double_binding'0 [#"../hashmap.rs" 39 4 39 38] (self : List'0.t_List (k, v)) =
    [%#span20] match self with
      | List'0.C_Nil -> true
      | List'0.C_Cons (k, _) tl -> get'0 tl (deep_model'0 k) = Option'0.C_None /\ no_double_binding'0 tl
      end
  
  predicate good_bucket'0 [#"../hashmap.rs" 206 4 206 57] (self : MyHashMap'0.t_MyHashMap k v) (l : List'0.t_List (k, v)) (h : int)
    
   =
    [%#span21] forall k : t_DeepModelTy'0, v : v . get'0 l k = Option'0.C_Some v  -> bucket_ix'0 self k = h
  
  predicate hashmap_inv'0 [#"../hashmap.rs" 215 4 215 33] (self : MyHashMap'0.t_MyHashMap k v) =
    [%#span22] 0 < Seq.length (shallow_model'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
     -> good_bucket'0 self (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i) i
    /\ no_double_binding'0 (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i))
  
  use prelude.prelude.Intrinsic
  
  function deep_model'1 (self : k) : t_DeepModelTy'0 =
    [%#span23] deep_model'0 self
  
  let rec eq'0 (self:k) (other:k) (return'  (ret:bool))= {[@expl:precondition] [%#span25] inv'4 other}
    {[@expl:precondition] [%#span24] inv'4 self}
    any [ return' (result:bool)-> {[%#span26] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ] 
  
  use prelude.prelude.Slice
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (List'0.t_List (k, v))) (out : List'0.t_List (k, v))
    
   =
    [%#span27] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq (List'0.t_List (k, v))) =
    [%#span28] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'1 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (k, v))
    
   =
    [%#span19] shallow_model'2 self
  
  let rec index'0 (self:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (index:usize) (return'  (ret:List'0.t_List (k, v)))= {[@expl:precondition] [%#span31] inv'6 index}
    {[@expl:precondition] [%#span30] inv'5 self}
    {[@expl:precondition] [%#span29] in_bounds'0 index (shallow_model'1 self)}
    any
    [ return' (result:List'0.t_List (k, v))-> {[%#span33] inv'0 result}
      {[%#span32] has_value'0 index (shallow_model'1 self) result}
      (! return' {result}) ]
    
  
  let rec len'0 (self:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] [%#span34] inv'5 self}
    any
    [ return' (result:usize)-> {[%#span35] UIntSize.to_int result = Seq.length (shallow_model'1 self)}
      (! return' {result}) ]
    
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.UInt64
  
  let rec hash'0 (self:k) (return'  (ret:uint64))= {[@expl:precondition] [%#span36] inv'4 self}
    any
    [ return' (result:uint64)-> {[%#span37] UInt64.to_int result = hash_log'0 (deep_model'1 self)}
      (! return' {result}) ]
    
  
  let rec get (self:MyHashMap'0.t_MyHashMap k v) (key:k) (return'  (ret:Option'0.t_Option v))= {[%#shashmap5] inv'2 key}
    {[%#shashmap4] inv'1 self}
    {[%#shashmap3] hashmap_inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 = hash'0 {key} (fun (_ret':uint64) ->  [ &_8 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = UIntSize.of_int {UInt64.to_int _8} (fun (_res:usize) ->  [ &_7 <- _res ] s1)
      | s1 = MyHashMap'0.t_MyHashMap <k> <v> {self}
          (fun (rbuckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
            len'0 {rbuckets'0} (fun (_ret':usize) ->  [ &_10 <- _ret' ] s2))
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = UIntSize.eq {_10} {[%#shashmap0] (0 : usize)} (fun (_ret':bool) ->  [ &_12 <- _ret' ] s1)
      | s1 = {[@expl:remainder by zero] [%#shashmap0] not _12} s2
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = UIntSize.rem {_7} {_10} (fun (_ret':usize) ->  [ &index <- _ret' ] s1)
      | s1 = MyHashMap'0.t_MyHashMap <k> <v> {self}
          (fun (rbuckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
            index'0 {rbuckets'0} {index} (fun (_ret':List'0.t_List (k, v)) ->  [ &_14 <- _ret' ] s2))
      | s2 = bb4 ]
      
    | bb4 = s0 [ s0 =  [ &l <- _14 ] s1 | s1 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [%#shashmap2] get'0 (bucket'0 self (deep_model'0 key)) (deep_model'0 key)
        = get'0 l (deep_model'0 key)}
        {[@expl:loop invariant] [%#shashmap1] inv'0 l}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = any
          [ br0 -> {l = List'0.C_Nil } (! bb12)
          | br1 (a:(k, v)) (b:List'0.t_List (k, v))-> {l = List'0.C_Cons a b} (! bb7) ]
          
        | bb7 = bb8
        | bb8 = s0
          [ s0 = List'0.v_Cons <(k, v)> {l}
              (fun (r0'0:(k, v)) (r1'0:List'0.t_List (k, v)) ->  [ &k <- let (r'0, _) = r0'0 in r'0 ] s1)
          | s1 = List'0.v_Cons <(k, v)> {l}
              (fun (r0'1:(k, v)) (r1'1:List'0.t_List (k, v)) ->  [ &v <- let (_, r'1) = r0'1 in r'1 ] s2)
          | s2 = List'0.v_Cons <(k, v)> {l} (fun (r0'2:(k, v)) (r1'2:List'0.t_List (k, v)) ->  [ &tl <- r1'2 ] s3)
          | s3 = eq'0 {k} {key} (fun (_ret':bool) ->  [ &_26 <- _ret' ] s4)
          | s4 = bb9 ]
          
        | bb9 = any [ br0 -> {_26 = false} (! bb11) | br1 -> {_26} (! bb10) ] 
        | bb11 = s0 [ s0 =  [ &_32 <- tl ] s1 | s1 =  [ &l <- _32 ] s2 | s2 = bb5 ]  ]
         ]
      
    | bb12 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb13 ] 
    | bb10 = s0 [ s0 =  [ &_0 <- Option'0.C_Some v ] s1 | s1 = bb13 ] 
    | bb13 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option v = any_l ()
    | & self : MyHashMap'0.t_MyHashMap k v = self
    | & key : k = key
    | & index : usize = any_l ()
    | & _7 : usize = any_l ()
    | & _8 : uint64 = any_l ()
    | & _10 : usize = any_l ()
    | & _12 : bool = any_l ()
    | & l : List'0.t_List (k, v) = any_l ()
    | & _14 : List'0.t_List (k, v) = any_l ()
    | & k : k = any_l ()
    | & v : v = any_l ()
    | & tl : List'0.t_List (k, v) = any_l ()
    | & _26 : bool = any_l ()
    | & _32 : List'0.t_List (k, v) = any_l () ]
    
    [ return' (result:Option'0.t_Option v)-> {[@expl:postcondition] [%#shashmap7] inv'3 result}
      {[@expl:postcondition] [%#shashmap6] match result with
        | Option'0.C_Some v -> Map.get (shallow_model'0 self) (deep_model'0 key) = Option'0.C_Some v
        | Option'0.C_None -> Map.get (shallow_model'0 self) (deep_model'0 key) = Option'0.C_None
        end}
      (! return' {result}) ]
    
end
module M_hashmap__qy123zimplqy35z5qy125z__resize
  type k
  
  type v
  
  let%span shashmap0 = "../hashmap.rs" 165 23 165 41
  
  let%span shashmap1 = "../hashmap.rs" 166 53 166 54
  
  let%span shashmap2 = "../hashmap.rs" 168 27 168 28
  
  let%span shashmap3 = "../hashmap.rs" 169 20 169 29
  
  let%span shashmap4 = "../hashmap.rs" 170 20 170 28
  
  let%span shashmap5 = "../hashmap.rs" 169 8 169 31
  
  let%span shashmap6 = "../hashmap.rs" 177 20 177 37
  
  let%span shashmap7 = "../hashmap.rs" 178 20 178 66
  
  let%span shashmap8 = "../hashmap.rs" 179 20 179 45
  
  let%span shashmap9 = "../hashmap.rs" 183 24 183 32
  
  let%span shashmap10 = "../hashmap.rs" 184 24 184 30
  
  let%span shashmap11 = "../hashmap.rs" 185 24 185 41
  
  let%span shashmap12 = "../hashmap.rs" 183 12 183 34
  
  let%span shashmap13 = "../hashmap.rs" 192 24 192 45
  
  let%span shashmap14 = "../hashmap.rs" 193 24 193 51
  
  let%span shashmap15 = "../hashmap.rs" 198 12 198 121
  
  let%span shashmap16 = "../hashmap.rs" 199 17 199 18
  
  let%span shashmap17 = "../hashmap.rs" 159 15 159 41
  
  let%span shashmap18 = "../hashmap.rs" 160 15 160 36
  
  let%span shashmap19 = "../hashmap.rs" 164 19 164 23
  
  let%span shashmap20 = "../hashmap.rs" 161 14 161 35
  
  let%span shashmap21 = "../hashmap.rs" 162 4 162 74
  
  let%span span22 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  
  let%span span23 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span24 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span25 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span26 = "" 0 0 0 0
  
  let%span span27 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span28 = "../../../../creusot-contracts/src/std/vec.rs" 61 20 61 41
  
  let%span span29 = "../hashmap.rs" 31 12 34 13
  
  let%span span30 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span31 = "../hashmap.rs" 91 20 91 66
  
  let%span span32 = "../hashmap.rs" 86 8 86 53
  
  let%span span33 = "../hashmap.rs" 80 8 80 33
  
  let%span span34 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span35 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span36 = "../hashmap.rs" 41 12 44 13
  
  let%span span37 = "../hashmap.rs" 207 8 209 9
  
  let%span span38 = "../hashmap.rs" 216 8 219 9
  
  let%span span39 = "../hashmap.rs" 104 15 104 36
  
  let%span span40 = "../hashmap.rs" 107 20 107 24
  
  let%span span41 = "../hashmap.rs" 107 26 107 29
  
  let%span span42 = "../hashmap.rs" 107 34 107 37
  
  let%span span43 = "../hashmap.rs" 105 14 105 35
  
  let%span span44 = "../hashmap.rs" 106 4 106 124
  
  let%span span45 = "" 0 0 0 0
  
  let%span span46 = "" 0 0 0 0
  
  let%span span47 = "../../../../creusot-contracts/src/std/mem.rs" 8 22 8 34
  
  let%span span48 = "../../../../creusot-contracts/src/std/mem.rs" 9 22 9 37
  
  let%span span49 = "" 0 0 0 0
  
  let%span span50 = "../../../../creusot-contracts/src/std/slice.rs" 139 8 139 96
  
  let%span span51 = "../../../../creusot-contracts/src/std/slice.rs" 132 20 132 37
  
  let%span span52 = "../../../../creusot-contracts/src/std/slice.rs" 125 20 125 37
  
  let%span span53 = "../../../../creusot-contracts/src/std/vec.rs" 148 27 148 46
  
  let%span span54 = "" 0 0 0 0
  
  let%span span55 = "" 0 0 0 0
  
  let%span span56 = "../../../../creusot-contracts/src/std/vec.rs" 149 26 149 54
  
  let%span span57 = "../../../../creusot-contracts/src/std/vec.rs" 150 26 150 57
  
  let%span span58 = "../../../../creusot-contracts/src/std/vec.rs" 151 26 151 62
  
  let%span span59 = "../../../../creusot-contracts/src/std/vec.rs" 152 26 152 55
  
  let%span span60 = "" 0 0 0 0
  
  let%span span61 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span62 = "../../../../creusot-contracts/src/snapshot.rs" 27 20 27 48
  
  let%span span63 = "../hashmap.rs" 96 15 96 24
  
  let%span span64 = "../hashmap.rs" 97 14 97 34
  
  let%span span65 = "../hashmap.rs" 98 4 98 64
  
  let%span span66 = "../hashmap.rs" 99 31 99 46
  
  let%span span67 = "" 0 0 0 0
  
  let%span span68 = "../../../../creusot-contracts/src/std/vec.rs" 79 26 79 48
  
  use T_hashmap__List as List'0
  
  predicate inv'11 (_1 : List'0.t_List (k, v))
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'9 (self : Seq.seq (List'0.t_List (k, v))) =
    [%#span22] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'11 (Seq.get self i)
  
  predicate inv'12 (_1 : Seq.seq (List'0.t_List (k, v)))
  
  axiom inv'12 [@rewrite] : forall x : Seq.seq (List'0.t_List (k, v)) [inv'12 x] . inv'12 x = invariant'9 x
  
  predicate inv'3 (_1 : List'0.t_List (k, v))
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'8 (self : List'0.t_List (k, v)) =
    [%#span23] inv'3 self
  
  axiom inv'11 [@rewrite] : forall x : List'0.t_List (k, v) [inv'11 x] . inv'11 x = invariant'8 x
  
  predicate inv'9 (_1 : v)
  
  predicate inv'8 (_1 : k)
  
  predicate inv'10 (_1 : (k, v))
  
  axiom inv'10 [@rewrite] : forall x : (k, v) [inv'10 x] . inv'10 x = (let (a, b) = x in inv'8 a /\ inv'9 b)
  
  predicate invariant'7 (self : v)
  
  axiom inv'9 : forall x : v [inv'9 x] . inv'9 x  -> invariant'7 x
  
  predicate invariant'6 (self : k)
  
  axiom inv'8 : forall x : k [inv'8 x] . inv'8 x  -> invariant'6 x
  
  use prelude.prelude.UIntSize
  
  predicate inv'7 (_1 : usize)
  
  axiom inv'7 [@rewrite] : forall x : usize [inv'7 x] . inv'7 x = true
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'2 (_1 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) =
    [%#span24] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'6 (_1 : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)))
  
  axiom inv'6 [@rewrite] : forall x : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) [inv'6 x] . inv'6 x
  = invariant'4 x
  
  predicate invariant'3 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) =
    [%#span25] inv'2 self
  
  predicate inv'5 (_1 : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))
  
  axiom inv'5 [@rewrite] : forall x : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) [inv'5 x] . inv'5 x
  = invariant'3 x
  
  predicate invariant'2 (self : borrowed (List'0.t_List (k, v))) =
    [%#span24] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_1 : borrowed (List'0.t_List (k, v)))
  
  axiom inv'4 [@rewrite] : forall x : borrowed (List'0.t_List (k, v)) [inv'4 x] . inv'4 x = invariant'2 x
  
  axiom inv'3 [@rewrite] : forall x : List'0.t_List (k, v) [inv'3 x] . inv'3 x
  = match x with
    | List'0.C_Nil -> true
    | List'0.C_Cons a_0 a_1 -> inv'10 a_0 /\ inv'11 a_1
    end
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = [%#span26] (18446744073709551615 : usize)
  
  function shallow_model'2 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (k, v))
    
  
  axiom shallow_model'2_spec : forall self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) . [%#span27] Seq.length (shallow_model'2 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'1 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) =
    [%#span28] inv'12 (shallow_model'2 self)
  
  axiom inv'2 [@rewrite] : forall x : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global) [inv'2 x] . inv'2 x
  = invariant'1 x
  
  use T_hashmap__MyHashMap as MyHashMap'0
  
  predicate inv'1 (_1 : MyHashMap'0.t_MyHashMap k v)
  
  axiom inv'1 [@rewrite] : forall x : MyHashMap'0.t_MyHashMap k v [inv'1 x] . inv'1 x
  = match x with
    | MyHashMap'0.C_MyHashMap buckets -> inv'2 buckets
    end
  
  predicate invariant'0 (self : borrowed (MyHashMap'0.t_MyHashMap k v)) =
    [%#span24] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : borrowed (MyHashMap'0.t_MyHashMap k v))
  
  axiom inv'0 [@rewrite] : forall x : borrowed (MyHashMap'0.t_MyHashMap k v) [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Mapping
  
  type t_DeepModelTy'0
  
  function deep_model'0 (self : k) : t_DeepModelTy'0
  
  use T_core__option__Option as Option'0
  
  function get'0 [#"../hashmap.rs" 29 4 29 56] (self : List'0.t_List (k, v)) (index : t_DeepModelTy'0) : Option'0.t_Option v
    
   =
    [%#span29] match self with
      | List'0.C_Nil -> Option'0.C_None
      | List'0.C_Cons (k, v) tl -> if deep_model'0 k = index then Option'0.C_Some v else get'0 tl index
      end
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (ix : int) : List'0.t_List (k, v)
    
   =
    [%#span30] Seq.get (shallow_model'2 self) ix
  
  use int.EuclideanDivision
  
  use T_hashmap__MyHashMap as T_hashmap__MyHashMap
  
  function hash_log'0 [#"../hashmap.rs" 55 4 55 45] (_1 : t_DeepModelTy'0) : int
  
  function bucket_ix'0 [#"../hashmap.rs" 90 4 90 48] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : int =
    [%#span31] EuclideanDivision.mod (hash_log'0 k) (Seq.length (shallow_model'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self)))
  
  function bucket'0 [#"../hashmap.rs" 85 4 85 54] (self : MyHashMap'0.t_MyHashMap k v) (k : t_DeepModelTy'0) : List'0.t_List (k, v)
    
   =
    [%#span32] index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) (bucket_ix'0 self k)
  
  use map.Map
  
  function shallow_model'1 [#"../hashmap.rs" 79 4 79 50] (self : MyHashMap'0.t_MyHashMap k v) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span33] Mapping.from_fn (fun (k : t_DeepModelTy'0) -> get'0 (bucket'0 self k) k)
  
  function shallow_model'3 (self : borrowed (MyHashMap'0.t_MyHashMap k v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span34] shallow_model'1 self.current
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (MyHashMap'0.t_MyHashMap k v)) =
    [%#span35] self.final = self.current
  
  use map.Map
  
  predicate no_double_binding'0 [#"../hashmap.rs" 39 4 39 38] (self : List'0.t_List (k, v)) =
    [%#span36] match self with
      | List'0.C_Nil -> true
      | List'0.C_Cons (k, _) tl -> get'0 tl (deep_model'0 k) = Option'0.C_None /\ no_double_binding'0 tl
      end
  
  predicate good_bucket'0 [#"../hashmap.rs" 206 4 206 57] (self : MyHashMap'0.t_MyHashMap k v) (l : List'0.t_List (k, v)) (h : int)
    
   =
    [%#span37] forall k : t_DeepModelTy'0, v : v . get'0 l k = Option'0.C_Some v  -> bucket_ix'0 self k = h
  
  predicate hashmap_inv'0 [#"../hashmap.rs" 215 4 215 33] (self : MyHashMap'0.t_MyHashMap k v) =
    [%#span38] 0 < Seq.length (shallow_model'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
     -> good_bucket'0 self (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i) i
    /\ no_double_binding'0 (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i))
  
  let rec add'0 (self:borrowed (MyHashMap'0.t_MyHashMap k v)) (key:k) (val':v) (return'  (ret:()))= {[@expl:precondition] [%#span42] inv'9 val'}
    {[@expl:precondition] [%#span41] inv'8 key}
    {[@expl:precondition] [%#span40] inv'0 self}
    {[@expl:precondition] [%#span39] hashmap_inv'0 self.current}
    any
    [ return' (result:())-> {[%#span44] forall i : t_DeepModelTy'0 . Map.get (shallow_model'1 self.final) i
      = (if i = deep_model'0 key then Option'0.C_Some val' else Map.get (shallow_model'3 self) i)}
      {[%#span43] hashmap_inv'0 self.final}
      (! return' {result}) ]
    
  
  predicate resolve'0 (self : borrowed (List'0.t_List (k, v))) =
    [%#span35] self.final = self.current
  
  let rec replace'0 (dest:borrowed (List'0.t_List (k, v))) (src:List'0.t_List (k, v)) (return'  (ret:List'0.t_List (k, v)))= {[@expl:precondition] [%#span46] inv'3 src}
    {[@expl:precondition] [%#span45] inv'4 dest}
    any
    [ return' (result:List'0.t_List (k, v))-> {[%#span49] inv'3 result}
      {[%#span48] result = dest.current}
      {[%#span47] dest.final = src}
      (! return' {result}) ]
    
  
  use prelude.prelude.Slice
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (List'0.t_List (k, v))) (fin : Seq.seq (List'0.t_List (k, v)))
    
   =
    [%#span50] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (List'0.t_List (k, v))) (out : List'0.t_List (k, v))
    
   =
    [%#span51] Seq.get seq (UIntSize.to_int self) = out
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq (List'0.t_List (k, v))) =
    [%#span52] UIntSize.to_int self < Seq.length seq
  
  function shallow_model'6 (self : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) : Seq.seq (List'0.t_List (k, v))
    
   =
    [%#span34] shallow_model'2 self.current
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) (index:usize) (return'  (ret:borrowed (List'0.t_List (k, v))))= {[@expl:precondition] [%#span55] inv'7 index}
    {[@expl:precondition] [%#span54] inv'6 self}
    {[@expl:precondition] [%#span53] in_bounds'0 index (shallow_model'6 self)}
    any
    [ return' (result:borrowed (List'0.t_List (k, v)))-> {[%#span60] inv'4 result}
      {[%#span59] Seq.length (shallow_model'2 self.final) = Seq.length (shallow_model'6 self)}
      {[%#span58] resolve_elswhere'0 index (shallow_model'6 self) (shallow_model'2 self.final)}
      {[%#span57] has_value'0 index (shallow_model'2 self.final) result.final}
      {[%#span56] has_value'0 index (shallow_model'6 self) result.current}
      (! return' {result}) ]
    
  
  function shallow_model'5 (self : borrowed (MyHashMap'0.t_MyHashMap k v)) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span61] shallow_model'3 self
  
  use prelude.prelude.Snapshot
  
  function shallow_model'0 (self : Snapshot.snap_ty (borrowed (MyHashMap'0.t_MyHashMap k v))) : Map.map t_DeepModelTy'0 (Option'0.t_Option v)
    
   =
    [%#span62] shallow_model'5 (Snapshot.inner self)
  
  let rec new'0 (size:usize) (return'  (ret:MyHashMap'0.t_MyHashMap k v))= {[@expl:precondition] [%#span63] 0
    < UIntSize.to_int size}
    any
    [ return' (result:MyHashMap'0.t_MyHashMap k v)-> {[%#span66] inv'1 result}
      {[%#span65] forall i : t_DeepModelTy'0 . Map.get (shallow_model'1 result) i = Option'0.C_None}
      {[%#span64] hashmap_inv'0 result}
      (! return' {result}) ]
    
  
  function shallow_model'4 (self : Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (k, v))
    
   =
    [%#span61] shallow_model'2 self
  
  let rec len'0 (self:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) (return'  (ret:usize))= {[@expl:precondition] [%#span67] inv'5 self}
    any
    [ return' (result:usize)-> {[%#span68] UIntSize.to_int result = Seq.length (shallow_model'4 self)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  let rec resize (self:borrowed (MyHashMap'0.t_MyHashMap k v)) (return'  (ret:()))= {[%#shashmap19] inv'0 self}
    {[%#shashmap18] hashmap_inv'0 self.current}
    {[%#shashmap17] Seq.length (shallow_model'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self.current)) < 1000}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#shashmap0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = MyHashMap'0.t_MyHashMap <k> <v> {self.current}
          (fun (rbuckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
            len'0 {rbuckets'0} (fun (_ret':usize) ->  [ &_10 <- _ret' ] s1))
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = UIntSize.mul {_10} {[%#shashmap1] (2 : usize)} (fun (_ret':usize) ->  [ &_9 <- _ret' ] s1)
      | s1 = new'0 {_9} (fun (_ret':MyHashMap'0.t_MyHashMap k v) ->  [ &new <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &i <- [%#shashmap2] (0 : usize) ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = s0 [ s0 =  [ &old_7_0 <- Snapshot.new self ] s1 | s1 = bb7 ] 
    | bb7 = bb7
      [ bb7 = {[@expl:loop invariant] (Snapshot.inner old_7_0).final = self.final}
        {[@expl:loop invariant] [%#shashmap8] UIntSize.to_int i
        <= Seq.length (shallow_model'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self.current))}
        {[@expl:loop invariant] [%#shashmap7] Seq.length (shallow_model'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets (Snapshot.inner old_self).current))
        = Seq.length (shallow_model'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets self.current))}
        {[@expl:loop invariant] [%#shashmap6] hashmap_inv'0 new}
        {[@expl:loop invariant] [%#shashmap5] forall j : int . UIntSize.to_int i <= j
        /\ j
        < Seq.length (shallow_model'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets (Snapshot.inner old_self).current))
         -> index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self.current) j
        = index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets (Snapshot.inner old_self).current) j}
        {[@expl:loop invariant] [%#shashmap5] forall k : t_DeepModelTy'0 . UIntSize.to_int i
        <= bucket_ix'0 (Snapshot.inner old_self).current k
        /\ bucket_ix'0 (Snapshot.inner old_self).current k
        <= Seq.length (shallow_model'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets (Snapshot.inner old_self).current))
         -> Map.get (shallow_model'1 new) k = Option'0.C_None}
        {[@expl:loop invariant] [%#shashmap5] forall k : t_DeepModelTy'0 . bucket_ix'0 (Snapshot.inner old_self).current k
        < UIntSize.to_int i  -> Map.get (shallow_model'0 old_self) k = Map.get (shallow_model'1 new) k}
        {[@expl:loop invariant] [%#shashmap4] inv'1 new}
        {[@expl:loop invariant] [%#shashmap3] inv'0 self}
        (! s0) [ s0 = bb8 ] 
        [ bb8 = s0
          [ s0 = MyHashMap'0.t_MyHashMap <k> <v> {self.current}
              (fun (rbuckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
                len'0 {rbuckets'0} (fun (_ret':usize) ->  [ &_25 <- _ret' ] s1))
          | s1 = bb9 ]
          
        | bb9 = s0
          [ s0 = UIntSize.lt {i} {_25} (fun (_ret':bool) ->  [ &_23 <- _ret' ] s1)
          | s1 = any [ br0 -> {_23 = false} (! bb32) | br1 -> {_23} (! bb10) ]  ]
          
        | bb10 = s0
          [ s0 = MyHashMap'0.t_MyHashMap <k> <v> {self.current}
              (fun (rbuckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
                Borrow.borrow_mut <Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)> {rbuckets'0}
                  (fun (_ret':borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global))) ->
                     [ &_31 <- _ret' ] 
                    MyHashMap'0.t_MyHashMap <k> <v> {self.current}
                      (fun (l_buckets'0:Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) ->
                         [ &self <- { self with current = MyHashMap'0.C_MyHashMap _31.final ; } ] 
                        s1)))
          | s1 = -{inv'2 _31.final}- s2
          | s2 = index_mut'0 {_31} {i} (fun (_ret':borrowed (List'0.t_List (k, v))) ->  [ &_30 <- _ret' ] s3)
          | s3 = bb11 ]
          
        | bb11 = s0
          [ s0 = Borrow.borrow_final <List'0.t_List (k, v)> {_30.current} {Borrow.get_id _30}
              (fun (_ret':borrowed (List'0.t_List (k, v))) ->
                 [ &_29 <- _ret' ] 
                 [ &_30 <- { _30 with current = _29.final ; } ] 
                s1)
          | s1 = -{inv'3 _29.final}- s2
          | s2 = Borrow.borrow_final <List'0.t_List (k, v)> {_29.current} {Borrow.get_id _29}
              (fun (_ret':borrowed (List'0.t_List (k, v))) ->
                 [ &_28 <- _ret' ] 
                 [ &_29 <- { _29 with current = _28.final ; } ] 
                s3)
          | s3 = -{inv'3 _28.final}- s4
          | s4 =  [ &_33 <- List'0.C_Nil ] s5
          | s5 = replace'0 {_28} {_33} (fun (_ret':List'0.t_List (k, v)) ->  [ &l <- _ret' ] s6)
          | s6 = bb12 ]
          
        | bb12 = s0
          [ s0 = {[@expl:type invariant] inv'4 _30} s1
          | s1 = -{resolve'0 _30}- s2
          | s2 = {[@expl:type invariant] inv'4 _29} s3
          | s3 = -{resolve'0 _29}- s4
          | s4 = bb13 ]
          
        | bb13 = bb14
        | bb14 = bb15
        | bb15 = bb16
        | bb16 = bb17
        | bb17 = bb18
        | bb18 = bb19
        | bb19 = bb20
        | bb20 = bb20
          [ bb20 = {[@expl:loop invariant] [%#shashmap14] good_bucket'0 (Snapshot.inner old_self).current l (UIntSize.to_int i)}
            {[@expl:loop invariant] [%#shashmap13] no_double_binding'0 l}
            {[@expl:loop invariant] [%#shashmap12] forall k : t_DeepModelTy'0 . bucket_ix'0 (Snapshot.inner old_self).current k
            = UIntSize.to_int i
             -> Map.get (shallow_model'0 old_self) k
            = match get'0 l k with
              | Option'0.C_None -> Map.get (shallow_model'1 new) k
              | Option'0.C_Some v -> Option'0.C_Some v
              end}
            {[@expl:loop invariant] [%#shashmap12] forall k : t_DeepModelTy'0 . UIntSize.to_int i
            < bucket_ix'0 (Snapshot.inner old_self).current k
            /\ bucket_ix'0 (Snapshot.inner old_self).current k
            <= Seq.length (shallow_model'2 (T_hashmap__MyHashMap.t_MyHashMap__buckets (Snapshot.inner old_self).current))
             -> Map.get (shallow_model'1 new) k = Option'0.C_None}
            {[@expl:loop invariant] [%#shashmap12] forall k : t_DeepModelTy'0 . bucket_ix'0 (Snapshot.inner old_self).current k
            < UIntSize.to_int i  -> Map.get (shallow_model'0 old_self) k = Map.get (shallow_model'1 new) k}
            {[@expl:loop invariant] [%#shashmap11] hashmap_inv'0 new}
            {[@expl:loop invariant] [%#shashmap10] inv'3 l}
            {[@expl:loop invariant] [%#shashmap9] inv'1 new}
            (! s0) [ s0 = bb21 ] 
            [ bb21 = any
              [ br0 -> {l = List'0.C_Nil } (! bb28)
              | br1 (a:(k, v)) (b:List'0.t_List (k, v))-> {l = List'0.C_Cons a b} (! bb22) ]
              
            | bb22 = bb23
            | bb23 = s0
              [ s0 = List'0.v_Cons <(k, v)> {l}
                  (fun (r0'0:(k, v)) (r1'0:List'0.t_List (k, v)) ->  [ &k <- let (r'0, _) = r0'0 in r'0 ] s1)
              | s1 = List'0.v_Cons <(k, v)> {l}
                  (fun (r0'1:(k, v)) (r1'1:List'0.t_List (k, v)) ->  [ &v <- let (_, r'1) = r0'1 in r'1 ] s2)
              | s2 = List'0.v_Cons <(k, v)> {l} (fun (r0'2:(k, v)) (r1'2:List'0.t_List (k, v)) ->  [ &tl <- r1'2 ] s3)
              | s3 = Borrow.borrow_mut <MyHashMap'0.t_MyHashMap k v> {new}
                  (fun (_ret':borrowed (MyHashMap'0.t_MyHashMap k v)) ->  [ &_48 <- _ret' ]  [ &new <- _48.final ] s4)
              | s4 = -{inv'1 _48.final}- s5
              | s5 = add'0 {_48} {k} {v} (fun (_ret':()) ->  [ &_47 <- _ret' ] s6)
              | s6 = bb24 ]
              
            | bb24 = bb25
            | bb25 = s0 [ s0 =  [ &l <- tl ] s1 | s1 = bb27 ] 
            | bb27 = bb29
            | bb29 = bb20 ]
             ]
          
        | bb28 = s0
          [ s0 = {[@expl:type invariant] match l with
              | List'0.C_Cons _ _ -> inv'3 l
              | _ -> true
              end}
            s1
          | s1 = {[@expl:assertion] [%#shashmap15] forall k : t_DeepModelTy'0 . bucket_ix'0 (Snapshot.inner old_self).current k
            = UIntSize.to_int i  -> Map.get (shallow_model'0 old_self) k = Map.get (shallow_model'1 new) k}
            s2
          | s2 = bb30 ]
          
        | bb30 = s0
          [ s0 = UIntSize.add {i} {[%#shashmap16] (1 : usize)} (fun (_ret':usize) ->  [ &i <- _ret' ] s1) | s1 = bb31 ]
          
        | bb31 = bb7 ]
         ]
      
    | bb32 = bb33
    | bb33 = s0
      [ s0 = {[@expl:type invariant] inv'1 self.current} s1
      | s1 =  [ &self <- { self with current = new ; } ] s2
      | s2 = {[@expl:type invariant] inv'0 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = bb35 ]
      
    | bb35 = bb36
    | bb36 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & self : borrowed (MyHashMap'0.t_MyHashMap k v) = self
    | & old_self : Snapshot.snap_ty (borrowed (MyHashMap'0.t_MyHashMap k v)) = any_l ()
    | & new : MyHashMap'0.t_MyHashMap k v = any_l ()
    | & _9 : usize = any_l ()
    | & _10 : usize = any_l ()
    | & i : usize = any_l ()
    | & _23 : bool = any_l ()
    | & _25 : usize = any_l ()
    | & l : List'0.t_List (k, v) = any_l ()
    | & _28 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _29 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _30 : borrowed (List'0.t_List (k, v)) = any_l ()
    | & _31 : borrowed (Vec'0.t_Vec (List'0.t_List (k, v)) (Global'0.t_Global)) = any_l ()
    | & _33 : List'0.t_List (k, v) = any_l ()
    | & k : k = any_l ()
    | & v : v = any_l ()
    | & tl : List'0.t_List (k, v) = any_l ()
    | & _47 : () = any_l ()
    | & _48 : borrowed (MyHashMap'0.t_MyHashMap k v) = any_l ()
    | & old_7_0 : Snapshot.snap_ty (borrowed (MyHashMap'0.t_MyHashMap k v)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#shashmap21] forall k : t_DeepModelTy'0 . Map.get (shallow_model'1 self.final) k
      = Map.get (shallow_model'3 self) k}
      {[@expl:postcondition] [%#shashmap20] hashmap_inv'0 self.final}
      (! return' {result}) ]
    
end
module M_hashmap__main
  let%span shashmap0 = "../hashmap.rs" 230 57 230 59
  
  let%span shashmap1 = "../hashmap.rs" 231 57 231 59
  
  let%span shashmap2 = "../hashmap.rs" 232 24 232 25
  
  let%span shashmap3 = "../hashmap.rs" 233 24 233 25
  
  let%span shashmap4 = "../hashmap.rs" 234 24 234 25
  
  let%span shashmap5 = "../hashmap.rs" 235 24 235 25
  
  let%span shashmap6 = "../hashmap.rs" 239 11 239 12
  
  let%span shashmap7 = "../hashmap.rs" 239 14 239 16
  
  let%span shashmap8 = "../hashmap.rs" 240 16 240 17
  
  let%span shashmap9 = "../hashmap.rs" 241 16 241 17
  
  let%span shashmap10 = "../hashmap.rs" 242 16 242 17
  
  let%span shashmap11 = "../hashmap.rs" 243 16 243 17
  
  let%span shashmap12 = "../hashmap.rs" 246 11 246 12
  
  let%span shashmap13 = "../hashmap.rs" 246 14 246 16
  
  let%span shashmap14 = "../hashmap.rs" 247 16 247 17
  
  let%span shashmap15 = "../hashmap.rs" 248 16 248 17
  
  let%span shashmap16 = "../hashmap.rs" 249 16 249 17
  
  let%span shashmap17 = "../hashmap.rs" 250 16 250 17
  
  let%span span18 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span19 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span20 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span21 = "../hashmap.rs" 31 12 34 13
  
  let%span span22 = "" 0 0 0 0
  
  let%span span23 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  
  let%span span24 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  
  let%span span25 = "../hashmap.rs" 66 20 66 21
  
  let%span span26 = "../hashmap.rs" 91 20 91 66
  
  let%span span27 = "../hashmap.rs" 86 8 86 53
  
  let%span span28 = "../hashmap.rs" 80 8 80 33
  
  let%span span29 = "../../../../creusot-contracts/src/model.rs" 108 8 108 31
  
  let%span span30 = "../hashmap.rs" 41 12 44 13
  
  let%span span31 = "../hashmap.rs" 207 8 209 9
  
  let%span span32 = "../hashmap.rs" 216 8 219 9
  
  let%span span33 = "../hashmap.rs" 104 15 104 36
  
  let%span span34 = "../hashmap.rs" 107 20 107 24
  
  let%span span35 = "../hashmap.rs" 107 26 107 29
  
  let%span span36 = "../hashmap.rs" 107 34 107 37
  
  let%span span37 = "../hashmap.rs" 105 14 105 35
  
  let%span span38 = "../hashmap.rs" 106 4 106 124
  
  let%span span39 = "../../../../creusot-contracts/src/model.rs" 90 8 90 31
  
  let%span span40 = "../hashmap.rs" 138 15 138 33
  
  let%span span41 = "../hashmap.rs" 143 16 143 20
  
  let%span span42 = "../hashmap.rs" 143 22 143 25
  
  let%span span43 = "../hashmap.rs" 139 14 142 5
  
  let%span span44 = "../hashmap.rs" 143 33 143 43
  
  let%span span45 = "../hashmap.rs" 96 15 96 24
  
  let%span span46 = "../hashmap.rs" 97 14 97 34
  
  let%span span47 = "../hashmap.rs" 98 4 98 64
  
  let%span span48 = "../hashmap.rs" 99 31 99 46
  
  use prelude.prelude.IntSize
  
  predicate inv'5 (_1 : isize)
  
  axiom inv'5 [@rewrite] : forall x : isize [inv'5 x] . inv'5 x = true
  
  use prelude.prelude.UIntSize
  
  use T_hashmap__MyHashMap as MyHashMap'0
  
  predicate inv'0 (_1 : MyHashMap'0.t_MyHashMap usize isize)
  
  use prelude.prelude.Borrow
  
  predicate invariant'4 (self : borrowed (MyHashMap'0.t_MyHashMap usize isize)) =
    [%#span18] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'4 (_1 : borrowed (MyHashMap'0.t_MyHashMap usize isize))
  
  axiom inv'4 [@rewrite] : forall x : borrowed (MyHashMap'0.t_MyHashMap usize isize) [inv'4 x] . inv'4 x = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'3 (_1 : Option'0.t_Option isize)
  
  axiom inv'3 [@rewrite] : forall x : Option'0.t_Option isize [inv'3 x] . inv'3 x = true
  
  predicate inv'2 (_1 : usize)
  
  axiom inv'2 [@rewrite] : forall x : usize [inv'2 x] . inv'2 x = true
  
  predicate invariant'1 (self : MyHashMap'0.t_MyHashMap usize isize) =
    [%#span19] inv'0 self
  
  predicate inv'1 (_1 : MyHashMap'0.t_MyHashMap usize isize)
  
  axiom inv'1 [@rewrite] : forall x : MyHashMap'0.t_MyHashMap usize isize [inv'1 x] . inv'1 x = true
  
  axiom inv'0 [@rewrite] : forall x : MyHashMap'0.t_MyHashMap usize isize [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use map.Map
  
  use T_hashmap__List as List'0
  
  use prelude.prelude.Mapping
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  function deep_model'0 (self : usize) : int =
    [%#span20] UIntSize.to_int self
  
  function get'1 [#"../hashmap.rs" 29 4 29 56] (self : List'0.t_List (usize, isize)) (index : int) : Option'0.t_Option isize
    
   =
    [%#span21] match self with
      | List'0.C_Nil -> Option'0.C_None
      | List'0.C_Cons (k, v) tl -> if deep_model'0 k = index then Option'0.C_Some v else get'1 tl index
      end
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use seq.Seq
  
  use seq.Seq
  
  constant v_MAX'0 : usize = [%#span22] (18446744073709551615 : usize)
  
  use seq.Seq
  
  function shallow_model'3 (self : Vec'0.t_Vec (List'0.t_List (usize, isize)) (Global'0.t_Global)) : Seq.seq (List'0.t_List (usize, isize))
    
  
  axiom shallow_model'3_spec : forall self : Vec'0.t_Vec (List'0.t_List (usize, isize)) (Global'0.t_Global) . [%#span23] Seq.length (shallow_model'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'0 [@inline:trivial] (self : Vec'0.t_Vec (List'0.t_List (usize, isize)) (Global'0.t_Global)) (ix : int) : List'0.t_List (usize, isize)
    
   =
    [%#span24] Seq.get (shallow_model'3 self) ix
  
  use int.EuclideanDivision
  
  use T_hashmap__MyHashMap as T_hashmap__MyHashMap
  
  function hash_log'0 [#"../hashmap.rs" 65 4 65 30] (x : int) : int =
    [%#span25] x
  
  function bucket_ix'0 [#"../hashmap.rs" 90 4 90 48] (self : MyHashMap'0.t_MyHashMap usize isize) (k : int) : int =
    [%#span26] EuclideanDivision.mod (hash_log'0 k) (Seq.length (shallow_model'3 (T_hashmap__MyHashMap.t_MyHashMap__buckets self)))
  
  function bucket'0 [#"../hashmap.rs" 85 4 85 54] (self : MyHashMap'0.t_MyHashMap usize isize) (k : int) : List'0.t_List (usize, isize)
    
   =
    [%#span27] index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) (bucket_ix'0 self k)
  
  function shallow_model'0 [#"../hashmap.rs" 79 4 79 50] (self : MyHashMap'0.t_MyHashMap usize isize) : Map.map int (Option'0.t_Option isize)
    
   =
    [%#span28] Mapping.from_fn (fun (k : int) -> get'1 (bucket'0 self k) k)
  
  function shallow_model'2 (self : borrowed (MyHashMap'0.t_MyHashMap usize isize)) : Map.map int (Option'0.t_Option isize)
    
   =
    [%#span29] shallow_model'0 self.current
  
  use map.Map
  
  predicate no_double_binding'0 [#"../hashmap.rs" 39 4 39 38] (self : List'0.t_List (usize, isize)) =
    [%#span30] match self with
      | List'0.C_Nil -> true
      | List'0.C_Cons (k, _) tl -> get'1 tl (deep_model'0 k) = Option'0.C_None /\ no_double_binding'0 tl
      end
  
  predicate good_bucket'0 [#"../hashmap.rs" 206 4 206 57] (self : MyHashMap'0.t_MyHashMap usize isize) (l : List'0.t_List (usize, isize)) (h : int)
    
   =
    [%#span31] forall k : int, v : isize . get'1 l k = Option'0.C_Some v  -> bucket_ix'0 self k = h
  
  predicate hashmap_inv'0 [#"../hashmap.rs" 215 4 215 33] (self : MyHashMap'0.t_MyHashMap usize isize) =
    [%#span32] 0 < Seq.length (shallow_model'3 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (shallow_model'3 (T_hashmap__MyHashMap.t_MyHashMap__buckets self))
     -> good_bucket'0 self (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i) i
    /\ no_double_binding'0 (index_logic'0 (T_hashmap__MyHashMap.t_MyHashMap__buckets self) i))
  
  let rec add'0 (self:borrowed (MyHashMap'0.t_MyHashMap usize isize)) (key:usize) (val':isize) (return'  (ret:()))= {[@expl:precondition] [%#span36] inv'5 val'}
    {[@expl:precondition] [%#span35] inv'2 key}
    {[@expl:precondition] [%#span34] inv'4 self}
    {[@expl:precondition] [%#span33] hashmap_inv'0 self.current}
    any
    [ return' (result:())-> {[%#span38] forall i : int . Map.get (shallow_model'0 self.final) i
      = (if i = deep_model'0 key then Option'0.C_Some val' else Map.get (shallow_model'2 self) i)}
      {[%#span37] hashmap_inv'0 self.final}
      (! return' {result}) ]
    
  
  function shallow_model'1 (self : MyHashMap'0.t_MyHashMap usize isize) : Map.map int (Option'0.t_Option isize) =
    [%#span39] shallow_model'0 self
  
  let rec get'0 (self:MyHashMap'0.t_MyHashMap usize isize) (key:usize) (return'  (ret:Option'0.t_Option isize))= {[@expl:precondition] [%#span42] inv'2 key}
    {[@expl:precondition] [%#span41] inv'1 self}
    {[@expl:precondition] [%#span40] hashmap_inv'0 self}
    any
    [ return' (result:Option'0.t_Option isize)-> {[%#span44] inv'3 result}
      {[%#span43] match result with
        | Option'0.C_Some v -> Map.get (shallow_model'1 self) (deep_model'0 key) = Option'0.C_Some v
        | Option'0.C_None -> Map.get (shallow_model'1 self) (deep_model'0 key) = Option'0.C_None
        end}
      (! return' {result}) ]
    
  
  let rec new'0 (size:usize) (return'  (ret:MyHashMap'0.t_MyHashMap usize isize))= {[@expl:precondition] [%#span45] 0
    < UIntSize.to_int size}
    any
    [ return' (result:MyHashMap'0.t_MyHashMap usize isize)-> {[%#span48] inv'0 result}
      {[%#span47] forall i : int . Map.get (shallow_model'0 result) i = Option'0.C_None}
      {[%#span46] hashmap_inv'0 result}
      (! return' {result}) ]
    
  
  let rec main (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#shashmap0] (17 : usize)}
          (fun (_ret':MyHashMap'0.t_MyHashMap usize isize) ->  [ &h1 <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = new'0 {[%#shashmap1] (42 : usize)}
          (fun (_ret':MyHashMap'0.t_MyHashMap usize isize) ->  [ &h2 <- _ret' ] s1)
      | s1 = bb2 ]
      
    | bb2 = s0
      [ s0 = get'0 {h1} {[%#shashmap2] (1 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_x <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0
      [ s0 = get'0 {h1} {[%#shashmap3] (2 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_y <- _ret' ] s1)
      | s1 = bb4 ]
      
    | bb4 = s0
      [ s0 = get'0 {h2} {[%#shashmap4] (1 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_z <- _ret' ] s1)
      | s1 = bb5 ]
      
    | bb5 = s0
      [ s0 = get'0 {h2} {[%#shashmap5] (2 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_t <- _ret' ] s1)
      | s1 = bb6 ]
      
    | bb6 = s0
      [ s0 = Borrow.borrow_mut <MyHashMap'0.t_MyHashMap usize isize> {h1}
          (fun (_ret':borrowed (MyHashMap'0.t_MyHashMap usize isize)) ->  [ &_12 <- _ret' ]  [ &h1 <- _12.final ] s1)
      | s1 = add'0 {_12} {[%#shashmap6] (1 : usize)} {[%#shashmap7] (17 : isize)}
          (fun (_ret':()) ->  [ &_11 <- _ret' ] s2)
      | s2 = bb7 ]
      
    | bb7 = s0
      [ s0 = get'0 {h1} {[%#shashmap8] (1 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_13 <- _ret' ] s1)
      | s1 = bb8 ]
      
    | bb8 = s0
      [ s0 =  [ &_x <- _13 ] s1
      | s1 = get'0 {h1} {[%#shashmap9] (2 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb9 ]
      
    | bb9 = s0
      [ s0 =  [ &_y <- _15 ] s1
      | s1 = get'0 {h2} {[%#shashmap10] (1 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_17 <- _ret' ] s2)
      | s2 = bb10 ]
      
    | bb10 = s0
      [ s0 =  [ &_z <- _17 ] s1
      | s1 = get'0 {h2} {[%#shashmap11] (2 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_19 <- _ret' ] s2)
      | s2 = bb11 ]
      
    | bb11 = s0
      [ s0 =  [ &_t <- _19 ] s1
      | s1 = Borrow.borrow_mut <MyHashMap'0.t_MyHashMap usize isize> {h2}
          (fun (_ret':borrowed (MyHashMap'0.t_MyHashMap usize isize)) ->  [ &_22 <- _ret' ]  [ &h2 <- _22.final ] s2)
      | s2 = add'0 {_22} {[%#shashmap12] (1 : usize)} {[%#shashmap13] (42 : isize)}
          (fun (_ret':()) ->  [ &_21 <- _ret' ] s3)
      | s3 = bb12 ]
      
    | bb12 = s0
      [ s0 = get'0 {h1} {[%#shashmap14] (1 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_23 <- _ret' ] s1)
      | s1 = bb13 ]
      
    | bb13 = s0
      [ s0 =  [ &_x <- _23 ] s1
      | s1 = get'0 {h1} {[%#shashmap15] (2 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_25 <- _ret' ] s2)
      | s2 = bb14 ]
      
    | bb14 = s0
      [ s0 =  [ &_y <- _25 ] s1
      | s1 = get'0 {h2} {[%#shashmap16] (1 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_27 <- _ret' ] s2)
      | s2 = bb15 ]
      
    | bb15 = s0
      [ s0 =  [ &_z <- _27 ] s1
      | s1 = get'0 {h2} {[%#shashmap17] (2 : usize)} (fun (_ret':Option'0.t_Option isize) ->  [ &_29 <- _ret' ] s2)
      | s2 = bb16 ]
      
    | bb16 = s0 [ s0 =  [ &_t <- _29 ] s1 | s1 = bb17 ] 
    | bb17 = bb18
    | bb18 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & h1 : MyHashMap'0.t_MyHashMap usize isize = any_l ()
    | & h2 : MyHashMap'0.t_MyHashMap usize isize = any_l ()
    | & _x : Option'0.t_Option isize = any_l ()
    | & _y : Option'0.t_Option isize = any_l ()
    | & _z : Option'0.t_Option isize = any_l ()
    | & _t : Option'0.t_Option isize = any_l ()
    | & _11 : () = any_l ()
    | & _12 : borrowed (MyHashMap'0.t_MyHashMap usize isize) = any_l ()
    | & _13 : Option'0.t_Option isize = any_l ()
    | & _15 : Option'0.t_Option isize = any_l ()
    | & _17 : Option'0.t_Option isize = any_l ()
    | & _19 : Option'0.t_Option isize = any_l ()
    | & _21 : () = any_l ()
    | & _22 : borrowed (MyHashMap'0.t_MyHashMap usize isize) = any_l ()
    | & _23 : Option'0.t_Option isize = any_l ()
    | & _25 : Option'0.t_Option isize = any_l ()
    | & _27 : Option'0.t_Option isize = any_l ()
    | & _29 : Option'0.t_Option isize = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_hashmap__qy123zimplqy35z0qy125z
  type t
  
  let%span shashmap0 = "../hashmap.rs" 17 4 17 27
  
  let%span span1 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  let%span span2 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  use T_hashmap__List as List'0
  
  predicate inv'1 (_1 : List'0.t_List t)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'2 (self : List'0.t_List t) =
    [%#span1] inv'1 self
  
  predicate inv'3 (_1 : List'0.t_List t)
  
  axiom inv'3 [@rewrite] : forall x : List'0.t_List t [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate invariant'1 (self : t)
  
  predicate inv'2 (_1 : t)
  
  axiom inv'2 : forall x : t [inv'2 x] . inv'2 x  -> invariant'1 x
  
  axiom inv'1 [@rewrite] : forall x : List'0.t_List t [inv'1 x] . inv'1 x
  = match x with
    | List'0.C_Nil -> true
    | List'0.C_Cons a_0 a_1 -> inv'2 a_0 /\ inv'3 a_1
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : List'0.t_List t) =
    [%#span2] inv'1 self
  
  predicate inv'0 (_1 : List'0.t_List t)
  
  axiom inv'0 [@rewrite] : forall x : List'0.t_List t [inv'0 x] . inv'0 x = invariant'0 x
  
  goal clone'_refn : [%#shashmap0] forall self : List'0.t_List t . inv'0 self
   -> inv'0 self /\ (forall result : List'0.t_List t . inv'1 result /\ result = self  -> inv'1 result /\ result = self)
end
module M_hashmap__qy123zimplqy35z2qy125z
  let%span shashmap0 = "../hashmap.rs" 60 4 60 25
  
  let%span span1 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span2 = "../hashmap.rs" 66 20 66 21
  
  let%span span3 = "../../../../creusot-contracts/src/std/num.rs" 22 16 22 35
  
  let%span span4 = "../../../../creusot-contracts/src/model.rs" 81 8 81 28
  
  use prelude.prelude.UIntSize
  
  predicate inv'1 (_1 : usize)
  
  axiom inv'1 [@rewrite] : forall x : usize [inv'1 x] . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : usize) =
    [%#span1] inv'1 self
  
  predicate inv'0 (_1 : usize)
  
  axiom inv'0 [@rewrite] : forall x : usize [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Int
  
  function hash_log'0 [#"../hashmap.rs" 65 4 65 30] (x : int) : int =
    [%#span2] x
  
  use prelude.prelude.UIntSize
  
  function deep_model'1 (self : usize) : int =
    [%#span3] UIntSize.to_int self
  
  use prelude.prelude.Int
  
  function deep_model'0 (self : usize) : int =
    [%#span4] deep_model'1 self
  
  use prelude.prelude.UInt64
  
  use prelude.prelude.UInt64
  
  goal hash_refn : [%#shashmap0] forall self : usize . inv'0 self
   -> (forall result : uint64 . UInt64.to_int result = hash_log'0 (deep_model'0 self)
   -> UInt64.to_int result = hash_log'0 (deep_model'0 self))
end
module M_hashmap__qy123zimplqy35z3qy125z
  type k
  
  type v
end
