
module CreusotContracts_Std1_Iter_IteratorSpec_Completed_Stub
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module CreusotContracts_Std1_Iter_IteratorSpec_Completed
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module Core_Iter_Traits_Iterator_Iterator_Item_Type
  type self
  type item
end
module CreusotContracts_Std1_Iter_IteratorSpec_Produces_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module CreusotContracts_Std1_Iter_IteratorSpec_Produces
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module CreusotContracts_Std1_Vec_Impl0_Model_Stub
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = model self }
    
  axiom model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (model self) <= UInt64.to_int (18446744073709551615 : usize)
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
  val model (self : self) : ModelTy0.modelTy
    ensures { result = model self }
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
  val model (self : borrowed t) : ModelTy0.modelTy
    ensures { result = model self }
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy_Type
  type t
  type a
  use seq.Seq
  type modelTy  =
    Seq.seq t
end
module CreusotContracts_Std1_Iter_IteratorSpec_ProducesRefl_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Stub as Produces0 with type self = self,
    type Item0.item = Item0.item
  function produces_refl (a : self) : ()
end
module CreusotContracts_Std1_Iter_IteratorSpec_ProducesRefl_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Stub as Produces0 with type self = self,
    type Item0.item = Item0.item
  function produces_refl (a : self) : ()
  axiom produces_refl_spec : forall a : self . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_IteratorSpec_ProducesRefl
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Stub as Produces0 with type self = self,
    type Item0.item = Item0.item
  function produces_refl (a : self) : ()
  val produces_refl (a : self) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Iter_IteratorSpec_ProducesTrans_Stub
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Stub as Produces0 with type self = self,
    type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
end
module CreusotContracts_Std1_Iter_IteratorSpec_ProducesTrans_Interface
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Stub as Produces0 with type self = self,
    type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Iter_IteratorSpec_ProducesTrans
  type self
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Stub as Produces0 with type self = self,
    type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
  val produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module Core_Iter_Traits_Collect_Impl0_IntoIter_Interface
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module Core_Iter_Traits_Collect_Impl0_IntoIter
  type i
  val into_iter [@cfg:stackify] (self : i) : i
    ensures { result = self }
    
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module Core_Iter_Traits_Iterator_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Stub as Produces0 with type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Stub as Completed0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Core_Iter_Traits_Iterator_Iterator_Next
  type self
  use prelude.Borrow
  use seq.Seq
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = self
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface as Produces0 with type self = self,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface as Completed0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    ensures { match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { Model0.model ( ^ self) = Seq.snoc (Model0.model ( * self)) value }
    
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  type t_ghost 't =
    | C_Ghost 't
    
  let function ghost_0 (self : t_ghost 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ghost a -> a
      end
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C08CollectExtend_Extend_Interface
  type t
  type i
  use seq.Seq
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl1_Model_Stub as Model1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Stub as Produces0 with type self = i, type Item0.item = t
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Stub as Completed0 with type self = i
  val extend [@cfg:stackify] (vec : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (iter : i) : ()
    ensures { [#"../08_collect_extend.rs" 18 0 21 2] exists prod : Seq.seq t . exists done_ : borrowed i . Completed0.completed done_ /\ Produces0.produces iter prod ( * done_) /\ Model0.model ( ^ vec) = Seq.(++) (Model1.model vec) prod }
    
end
module C08CollectExtend_Extend
  type t
  type i
  use seq.Seq
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface as Produces0 with type self = i, type Item0.item = t
  clone CreusotContracts_Std1_Iter_IteratorSpec_ProducesTrans as ProducesTrans0 with type self = i,
    predicate Produces0.produces = Produces0.produces, type Item0.item = t, axiom .
  clone CreusotContracts_Std1_Iter_IteratorSpec_ProducesRefl as ProducesRefl0 with type self = i,
    predicate Produces0.produces = Produces0.produces, type Item0.item = t, axiom .
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface as Completed0 with type self = i
  use mach.int.Int
  use prelude.IntSize
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve6 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Core_Option_Option_Type.t_option t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost i
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone Core_Iter_Traits_Iterator_Iterator_Next_Interface as Next0 with type self = i, type Item0.item = t,
    predicate Completed0.completed = Completed0.completed, predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq t)
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with type i = i
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = i
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec cfg extend [@cfg:stackify] [#"../08_collect_extend.rs" 22 0 22 70] (vec : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (iter : i) : ()
    ensures { [#"../08_collect_extend.rs" 18 0 21 2] exists prod : Seq.seq t . exists done_ : borrowed i . Completed0.completed done_ /\ Produces0.produces iter prod ( * done_) /\ Model0.model ( ^ vec) = Seq.(++) (Model1.model vec) prod }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var vec_1 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var iter_2 : i;
  var old_vec_4 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)));
  var _6 : ();
  var iter_7 : i;
  var _8 : i;
  var iter_old_9 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost i;
  var _11 : ();
  var produced_12 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq t);
  var _15 : ();
  var _19 : ();
  var _20 : Core_Option_Option_Type.t_option t;
  var _21 : borrowed i;
  var _22 : isize;
  var i_23 : t;
  var _24 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq t);
  var _26 : ();
  var x_27 : t;
  var _28 : ();
  var _29 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _30 : t;
  var _31 : ();
  {
    vec_1 <- vec;
    iter_2 <- iter;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    _6 <- ();
    old_vec_4 <- ([#"../08_collect_extend.rs" 23 18 23 32] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost vec_1);
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve old_vec_4 };
    assume { Resolve1.resolve _8 };
    _8 <- iter_2;
    iter_2 <- any i;
    iter_7 <- ([#"../08_collect_extend.rs" 24 4 24 46] IntoIter0.into_iter _8);
    goto BB3
  }
  BB3 {
    _11 <- ();
    iter_old_9 <- ([#"../08_collect_extend.rs" 24 4 24 46] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter_7);
    goto BB4
  }
  BB4 {
    _15 <- ();
    produced_12 <- ([#"../08_collect_extend.rs" 24 4 24 46] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ));
    goto BB5
  }
  BB5 {
    assume { Resolve2.resolve produced_12 };
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    invariant structural { [#"../08_collect_extend.rs" 24 4 24 46] Produces0.produces (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 iter_old_9) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_12) iter_7 };
    invariant vec_proph { [#"../08_collect_extend.rs" 24 27 24 44]  ^ CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_vec_4 =  ^ vec_1 };
    invariant vec { [#"../08_collect_extend.rs" 25 21 25 64] Seq.(==) (Model1.model vec_1) (Seq.(++) (Model1.model (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 old_vec_4)) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_12)) };
    _21 <- borrow_mut iter_7;
    iter_7 <-  ^ _21;
    _20 <- ([#"../08_collect_extend.rs" 24 4 24 46] Next0.next _21);
    goto BB8
  }
  BB8 {
    switch (_20)
      | Core_Option_Option_Type.C_None -> goto BB9
      | Core_Option_Option_Type.C_Some _ -> goto BB11
      end
  }
  BB9 {
    assume { Resolve3.resolve vec_1 };
    _0 <- ();
    goto BB17
  }
  BB10 {
    assume { Resolve3.resolve vec_1 };
    assume { Resolve1.resolve iter_7 };
    assume { Resolve4.resolve iter_old_9 };
    assume { Resolve5.resolve _20 };
    absurd
  }
  BB11 {
    assume { Resolve6.resolve i_23 };
    i_23 <- Core_Option_Option_Type.some_0 _20;
    _20 <- (let Core_Option_Option_Type.C_Some a = _20 in Core_Option_Option_Type.C_Some (any t));
    _26 <- ();
    _24 <- ([#"../08_collect_extend.rs" 24 4 24 46] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.snoc (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_12) i_23));
    goto BB12
  }
  BB12 {
    assume { Resolve2.resolve produced_12 };
    produced_12 <- _24;
    _24 <- any CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq t);
    assume { Resolve6.resolve x_27 };
    x_27 <- i_23;
    i_23 <- any t;
    _29 <- borrow_mut ( * vec_1);
    vec_1 <- { vec_1 with current = ( ^ _29) };
    assume { Resolve6.resolve _30 };
    _30 <- x_27;
    x_27 <- any t;
    _28 <- ([#"../08_collect_extend.rs" 27 8 27 19] Push0.push _29 _30);
    goto BB13
  }
  BB13 {
    _19 <- ();
    goto BB14
  }
  BB14 {
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    assume { Resolve5.resolve _20 };
    goto BB7
  }
  BB17 {
    assume { Resolve5.resolve _20 };
    goto BB18
  }
  BB18 {
    assume { Resolve4.resolve iter_old_9 };
    goto BB19
  }
  BB19 {
    assume { Resolve1.resolve iter_7 };
    goto BB20
  }
  BB20 {
    return _0
  }
  
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  val new [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  val new [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl3_Resolve
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use mach.int.Int
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    forall i : int . 0 <= i /\ i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module C08CollectExtend_Collect_Interface
  type i
  use seq.Seq
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = i
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = Item0.item,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Stub as Produces0 with type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Stub as Completed0 with type self = i
  val collect [@cfg:stackify] (iter : i) : Alloc_Vec_Vec_Type.t_vec Item0.item (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../08_collect_extend.rs" 35 0 38 2] exists prod : Seq.seq Item0.item . exists done_ : borrowed i . Completed0.completed done_ /\ Produces0.produces iter prod ( * done_) /\ Model0.model result = prod }
    
end
module C08CollectExtend_Collect
  type i
  use seq.Seq
  use prelude.Borrow
  clone Core_Iter_Traits_Iterator_Iterator_Item_Type as Item0 with type self = i
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface as Produces0 with type self = i,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Iter_IteratorSpec_ProducesTrans as ProducesTrans0 with type self = i,
    predicate Produces0.produces = Produces0.produces, type Item0.item = Item0.item, axiom .
  clone CreusotContracts_Std1_Iter_IteratorSpec_ProducesRefl as ProducesRefl0 with type self = i,
    predicate Produces0.produces = Produces0.produces, type Item0.item = Item0.item, axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Item0.item,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface as Completed0 with type self = i
  use mach.int.Int
  use prelude.IntSize
  use seq.Seq
  use Core_Option_Option_Type as Core_Option_Option_Type
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = Item0.item, type a = Alloc_Alloc_Global_Type.t_global,
    function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve5 with type self = Item0.item
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost i
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve2 with type t = Item0.item,
    function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve5.resolve
  clone Core_Iter_Traits_Iterator_Iterator_Next_Interface as Next0 with type self = i, type Item0.item = Item0.item,
    predicate Completed0.completed = Completed0.completed, predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)
  clone Core_Iter_Traits_Collect_Impl0_IntoIter_Interface as IntoIter0 with type i = i
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = i
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = Item0.item, function Model0.model = Model0.model
  let rec cfg collect [@cfg:stackify] [#"../08_collect_extend.rs" 39 0 39 56] (iter : i) : Alloc_Vec_Vec_Type.t_vec Item0.item (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../08_collect_extend.rs" 35 0 38 2] exists prod : Seq.seq Item0.item . exists done_ : borrowed i . Completed0.completed done_ /\ Produces0.produces iter prod ( * done_) /\ Model0.model result = prod }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec Item0.item (Alloc_Alloc_Global_Type.t_global);
  var iter_1 : i;
  var res_3 : Alloc_Vec_Vec_Type.t_vec Item0.item (Alloc_Alloc_Global_Type.t_global);
  var _4 : ();
  var iter_5 : i;
  var _6 : i;
  var iter_old_7 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost i;
  var _9 : ();
  var produced_10 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
  var _13 : ();
  var _16 : ();
  var _17 : Core_Option_Option_Type.t_option Item0.item;
  var _18 : borrowed i;
  var _19 : isize;
  var i_20 : Item0.item;
  var _21 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
  var _23 : ();
  var x_24 : Item0.item;
  var _25 : ();
  var _26 : borrowed (Alloc_Vec_Vec_Type.t_vec Item0.item (Alloc_Alloc_Global_Type.t_global));
  var _27 : Item0.item;
  var _28 : ();
  {
    iter_1 <- iter;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    res_3 <- ([#"../08_collect_extend.rs" 40 18 40 28] New0.new ());
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _6 };
    _6 <- iter_1;
    iter_1 <- any i;
    iter_5 <- ([#"../08_collect_extend.rs" 42 4 42 47] IntoIter0.into_iter _6);
    goto BB3
  }
  BB3 {
    _9 <- ();
    iter_old_7 <- ([#"../08_collect_extend.rs" 42 4 42 47] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter_5);
    goto BB4
  }
  BB4 {
    _13 <- ();
    produced_10 <- ([#"../08_collect_extend.rs" 42 4 42 47] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ));
    goto BB5
  }
  BB5 {
    assume { Resolve1.resolve produced_10 };
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    invariant structural { [#"../08_collect_extend.rs" 42 4 42 47] Produces0.produces (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 iter_old_7) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_10) iter_5 };
    invariant vec { [#"../08_collect_extend.rs" 42 21 42 45] Seq.(==) (Model0.model res_3) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_10) };
    _18 <- borrow_mut iter_5;
    iter_5 <-  ^ _18;
    _17 <- ([#"../08_collect_extend.rs" 42 4 42 47] Next0.next _18);
    goto BB9
  }
  BB9 {
    switch (_17)
      | Core_Option_Option_Type.C_None -> goto BB10
      | Core_Option_Option_Type.C_Some _ -> goto BB12
      end
  }
  BB10 {
    _4 <- ();
    goto BB18
  }
  BB11 {
    assume { Resolve2.resolve res_3 };
    assume { Resolve0.resolve iter_5 };
    assume { Resolve3.resolve iter_old_7 };
    assume { Resolve4.resolve _17 };
    absurd
  }
  BB12 {
    assume { Resolve5.resolve i_20 };
    i_20 <- Core_Option_Option_Type.some_0 _17;
    _17 <- (let Core_Option_Option_Type.C_Some a = _17 in Core_Option_Option_Type.C_Some (any Item0.item));
    _23 <- ();
    _21 <- ([#"../08_collect_extend.rs" 42 4 42 47] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.snoc (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_10) i_20));
    goto BB13
  }
  BB13 {
    assume { Resolve1.resolve produced_10 };
    produced_10 <- _21;
    _21 <- any CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
    assume { Resolve5.resolve x_24 };
    x_24 <- i_20;
    i_20 <- any Item0.item;
    _26 <- borrow_mut res_3;
    res_3 <-  ^ _26;
    assume { Resolve5.resolve _27 };
    _27 <- x_24;
    x_24 <- any Item0.item;
    _25 <- ([#"../08_collect_extend.rs" 44 8 44 19] Push0.push _26 _27);
    goto BB14
  }
  BB14 {
    _16 <- ();
    goto BB15
  }
  BB15 {
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    assume { Resolve4.resolve _17 };
    goto BB8
  }
  BB18 {
    assume { Resolve4.resolve _17 };
    goto BB19
  }
  BB19 {
    assume { Resolve3.resolve iter_old_7 };
    goto BB20
  }
  BB20 {
    assume { Resolve0.resolve iter_5 };
    assume { Resolve2.resolve _0 };
    _0 <- res_3;
    res_3 <- any Alloc_Vec_Vec_Type.t_vec Item0.item (Alloc_Alloc_Global_Type.t_global);
    goto BB21
  }
  BB21 {
    goto BB22
  }
  BB22 {
    return _0
  }
  
end
module Core_Mem_ManuallyDrop_ManuallyDrop_Type
  type t_manuallydrop 't =
    | C_ManuallyDrop 't
    
end
module Alloc_Vec_IntoIter_IntoIter_Type
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Opaque
  use Core_Mem_ManuallyDrop_ManuallyDrop_Type as Core_Mem_ManuallyDrop_ManuallyDrop_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_intoiter 't 'a =
    | C_IntoIter (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't) usize (Core_Mem_ManuallyDrop_ManuallyDrop_Type.t_manuallydrop 'a) opaque_ptr opaque_ptr
    
end
module CreusotContracts_Std1_Vec_Impl2_Model_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl2_Model_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl2_Model
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  function model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
  val model (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : Seq.seq t
    ensures { result = model self }
    
end
module Alloc_Vec_Impl19_IntoIter_Interface
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Vec_Impl2_Model_Stub as Model0 with type t = t, type a = a
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
    ensures { Model0.model result = Model1.model self }
    
end
module Alloc_Vec_Impl19_IntoIter
  type t
  type a
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Vec_Impl2_Model_Interface as Model0 with type t = t, type a = a
  val into_iter [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
    ensures { Model0.model result = Model1.model self }
    
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Stub
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t
  predicate resolve (self : t) =
    true
  val resolve (self : t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl1_Completed_Stub
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
end
module CreusotContracts_Std1_Vec_Impl1_Completed_Interface
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a))
end
module CreusotContracts_Std1_Vec_Impl1_Completed
  type t
  type a
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl2_Model_Stub as Model0 with type t = t, type a = a
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub as Resolve0 with type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a
  predicate completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) =
    Resolve0.resolve self /\ Model0.model ( * self) = Seq.empty 
  val completed (self : borrowed (Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Vec_Impl1_Produces_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
end
module CreusotContracts_Std1_Vec_Impl1_Produces_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
end
module CreusotContracts_Std1_Vec_Impl1_Produces
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  use mach.int.Int
  use seq_ext.SeqExt
  clone CreusotContracts_Std1_Vec_Impl2_Model_Stub as Model0 with type t = t, type a = a
  predicate produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a)
    
   =
    Seq.length (Model0.model self) = Seq.length visited + Seq.length (Model0.model rhs) /\ Seq.(==) (SeqExt.subsequence (Model0.model self) (Seq.length visited) (Seq.length (Model0.model self))) (Model0.model rhs) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> Seq.get (Model0.model self) i = Seq.get visited i)
  val produces (self : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (visited : Seq.seq t) (rhs : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : bool
    ensures { result = produces self visited rhs }
    
end
module CreusotContracts_Std1_Vec_Impl1_ProducesRefl_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Stub as Produces0 with type t = t, type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
end
module CreusotContracts_Std1_Vec_Impl1_ProducesRefl_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Stub as Produces0 with type t = t, type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl1_ProducesRefl
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Stub as Produces0 with type t = t, type a = a
  function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : () =
    ()
  val produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a (Seq.empty ) a
end
module CreusotContracts_Std1_Vec_Impl1_ProducesRefl_Impl
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl2_Model as Model0 with type t = t, type a = a
  clone CreusotContracts_Std1_Vec_Impl1_Produces as Produces0 with type t = t, type a = a,
    function Model0.model = Model0.model
  let rec ghost function produces_refl (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    ensures { Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module CreusotContracts_Std1_Vec_Impl1_ProducesTrans_Stub
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Stub as Produces0 with type t = t, type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
end
module CreusotContracts_Std1_Vec_Impl1_ProducesTrans_Interface
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Stub as Produces0 with type t = t, type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Vec_Impl1_ProducesTrans
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl1_Produces_Stub as Produces0 with type t = t, type a = a
  function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    
   =
    ()
  val produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, ab : Seq.seq t, b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a, bc : Seq.seq t, c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a . Produces0.produces a ab b -> Produces0.produces b bc c -> Produces0.produces a (Seq.(++) ab bc) c
end
module CreusotContracts_Std1_Vec_Impl1_ProducesTrans_Impl
  type t
  type a
  use seq.Seq
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Std1_Vec_Impl2_Model as Model0 with type t = t, type a = a
  clone CreusotContracts_Std1_Vec_Impl1_Produces as Produces0 with type t = t, type a = a,
    function Model0.model = Model0.model
  let rec ghost function produces_trans (a : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (ab : Seq.seq t) (b : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) (bc : Seq.seq t) (c : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter t a) : ()
    requires {Produces0.produces a ab b}
    requires {Produces0.produces b bc c}
    ensures { Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    ()
end
module C08CollectExtend_ExtendIndex_Interface
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Stub as Model0 with type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  val extend_index [@cfg:stackify] (v1 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (v2 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"../08_collect_extend.rs" 49 11 49 27] Seq.length (Model0.model v1) = 5}
    requires {[#"../08_collect_extend.rs" 50 11 50 27] Seq.length (Model0.model v2) = 5}
    requires {[#"../08_collect_extend.rs" 51 0 51 71] forall i : int . 0 <= i /\ i < Seq.length (Model0.model v2) -> UInt32.to_int (Seq.get (Model0.model v2) i) = i}
    
end
module C08CollectExtend_ExtendIndex
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = uint32, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  use prelude.Borrow
  use Alloc_Vec_IntoIter_IntoIter_Type as Alloc_Vec_IntoIter_IntoIter_Type
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter uint32 (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Std1_Vec_Impl2_Model as Model1 with type t = uint32, type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Std1_Vec_Impl1_Produces as Produces0 with type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl1_ProducesTrans as ProducesTrans0 with type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global, predicate Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Std1_Vec_Impl1_ProducesRefl as ProducesRefl0 with type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global, predicate Produces0.produces = Produces0.produces, axiom .
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy_Type as ModelTy0 with type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Logic_Model_Impl1_Model as Model2 with type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global),
    type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Completed as Completed0 with type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global, predicate Resolve0.resolve = Resolve3.resolve,
    function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = uint32
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)
  clone C08CollectExtend_Extend_Interface as Extend0 with type t = uint32,
    type i = Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter uint32 (Alloc_Alloc_Global_Type.t_global),
    predicate Completed0.completed = Completed0.completed, predicate Produces0.produces = Produces0.produces,
    function Model0.model = Model0.model, function Model1.model = Model2.model
  clone Alloc_Vec_Impl19_IntoIter_Interface as IntoIter1 with type t = uint32,
    type a = Alloc_Alloc_Global_Type.t_global, function Model0.model = Model1.model,
    function Model1.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve0 with type t = uint32, function Model0.model = Model0.model,
    predicate Resolve0.resolve = Resolve2.resolve
  let rec cfg extend_index [@cfg:stackify] [#"../08_collect_extend.rs" 52 0 52 51] (v1 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) (v2 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global)) : ()
    requires {[#"../08_collect_extend.rs" 49 11 49 27] Seq.length (Model0.model v1) = 5}
    requires {[#"../08_collect_extend.rs" 50 11 50 27] Seq.length (Model0.model v2) = 5}
    requires {[#"../08_collect_extend.rs" 51 0 51 71] forall i : int . 0 <= i /\ i < Seq.length (Model0.model v2) -> UInt32.to_int (Seq.get (Model0.model v2) i) = i}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v1_1 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var v2_2 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var _6 : ();
  var _7 : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global));
  var _8 : borrowed (Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global));
  var _9 : Alloc_Vec_IntoIter_IntoIter_Type.t_intoiter uint32 (Alloc_Alloc_Global_Type.t_global);
  var _10 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var _11 : ();
  var _13 : ();
  {
    v1_1 <- v1;
    v2_2 <- v2;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _8 <- borrow_mut v1_1;
    v1_1 <-  ^ _8;
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    assume { Resolve0.resolve _10 };
    _10 <- v2_2;
    v2_2 <- any Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
    _9 <- ([#"../08_collect_extend.rs" 53 20 53 34] IntoIter1.into_iter _10);
    goto BB4
  }
  BB4 {
    _6 <- ([#"../08_collect_extend.rs" 53 4 53 35] Extend0.extend _7 _9);
    goto BB5
  }
  BB5 {
    assume { Resolve1.resolve _8 };
    assert { [#"../08_collect_extend.rs" 55 20 55 37] Seq.length (Model0.model v1_1) = 10 };
    goto BB6
  }
  BB6 {
    _11 <- ();
    assert { [#"../08_collect_extend.rs" 56 20 56 34] UInt32.to_int (Seq.get (Model0.model v1_1) 5) = 0 };
    goto BB7
  }
  BB7 {
    _13 <- ();
    _0 <- ();
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    assume { Resolve0.resolve v1_1 };
    return _0
  }
  
end
module C08CollectExtend_CollectExample_Interface
  type i
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Stub as Produces0 with type self = i, type Item0.item = uint32
  val collect_example [@cfg:stackify] (iter : i) : ()
    requires {[#"../08_collect_extend.rs" 59 0 59 130] forall fin : i . forall prod : Seq.seq uint32 . Produces0.produces iter prod fin -> (forall i : int . 0 <= i /\ i < Seq.length prod -> UInt32.to_int (Seq.get prod i) = i)}
    
end
module C08CollectExtend_CollectExample
  type i
  use seq.Seq
  use mach.int.Int
  use mach.int.UInt32
  clone CreusotContracts_Std1_Iter_IteratorSpec_Produces_Interface as Produces0 with type self = i,
    type Item0.item = uint32
  clone CreusotContracts_Std1_Iter_IteratorSpec_ProducesTrans as ProducesTrans0 with type self = i,
    predicate Produces0.produces = Produces0.produces, type Item0.item = uint32, axiom .
  clone CreusotContracts_Std1_Iter_IteratorSpec_ProducesRefl as ProducesRefl0 with type self = i,
    predicate Produces0.produces = Produces0.produces, type Item0.item = uint32, axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = uint32
  clone CreusotContracts_Std1_Iter_IteratorSpec_Completed_Interface as Completed0 with type self = i
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = uint32, type a = Alloc_Alloc_Global_Type.t_global,
    axiom .
  clone CreusotContracts_Std1_Vec_Impl3_Resolve as Resolve1 with type t = uint32, function Model0.model = Model0.model,
    predicate Resolve0.resolve = Resolve2.resolve
  clone C08CollectExtend_Collect_Interface as Collect0 with type i = i, type Item0.item = uint32,
    predicate Completed0.completed = Completed0.completed, predicate Produces0.produces = Produces0.produces,
    function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = i
  let rec cfg collect_example [@cfg:stackify] [#"../08_collect_extend.rs" 60 0 60 60] (iter : i) : ()
    requires {[#"../08_collect_extend.rs" 59 0 59 130] forall fin : i . forall prod : Seq.seq uint32 . Produces0.produces iter prod fin -> (forall i : int . 0 <= i /\ i < Seq.length prod -> UInt32.to_int (Seq.get prod i) = i)}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var iter_1 : i;
  var v_3 : Alloc_Vec_Vec_Type.t_vec uint32 (Alloc_Alloc_Global_Type.t_global);
  var _4 : i;
  var _5 : ();
  {
    iter_1 <- iter;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _4 };
    _4 <- iter_1;
    iter_1 <- any i;
    v_3 <- ([#"../08_collect_extend.rs" 61 22 61 35] Collect0.collect _4);
    goto BB2
  }
  BB2 {
    assert { [#"../08_collect_extend.rs" 63 4 63 80] forall i : int . 0 <= i /\ i < Seq.length (Model0.model v_3) -> UInt32.to_int (Seq.get (Model0.model v_3) i) = i };
    goto BB3
  }
  BB3 {
    _5 <- ();
    _0 <- ();
    goto BB4
  }
  BB4 {
    assume { Resolve1.resolve v_3 };
    goto BB5
  }
  BB5 {
    return _0
  }
  
end
