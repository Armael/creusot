
module C01Range_Range_Type
  use mach.int.Int
  use prelude.IntSize
  type c01range_range_type  =
    | C01Range_Range_Type isize isize
    
  let function c01range_range_type_Range_start (self : c01range_range_type) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C01Range_Range_Type a _ -> a
      end
  let function c01range_range_type_Range_end (self : c01range_range_type) : isize = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C01Range_Range_Type _ a -> a
      end
end
module C01Range_Impl0_Completed_Interface
  use C01Range_Range_Type
  predicate completed (self : C01Range_Range_Type.c01range_range_type)
end
module C01Range_Impl0_Completed
  use C01Range_Range_Type
  use mach.int.Int
  use prelude.IntSize
  predicate completed [#"../01_range.rs" 18 4 18 30] (self : C01Range_Range_Type.c01range_range_type) =
    [#"../01_range.rs" 19 20 19 42] C01Range_Range_Type.c01range_range_type_Range_start self >= C01Range_Range_Type.c01range_range_type_Range_end self
end
module C01Range_Impl0_Produces_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type
  predicate produces (self : C01Range_Range_Type.c01range_range_type) (visited : Seq.seq isize) (o : C01Range_Range_Type.c01range_range_type)
    
end
module C01Range_Impl0_Produces
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type
  use mach.int.Int64
  use mach.int.Int32
  predicate produces [#"../01_range.rs" 23 4 23 64] (self : C01Range_Range_Type.c01range_range_type) (visited : Seq.seq isize) (o : C01Range_Range_Type.c01range_range_type)
    
   =
    [#"../01_range.rs" 24 8 29 9] C01Range_Range_Type.c01range_range_type_Range_end self = C01Range_Range_Type.c01range_range_type_Range_end o /\ C01Range_Range_Type.c01range_range_type_Range_start self <= C01Range_Range_Type.c01range_range_type_Range_start o /\ Seq.length visited = Int64.to_int (C01Range_Range_Type.c01range_range_type_Range_start o) - Int64.to_int (C01Range_Range_Type.c01range_range_type_Range_start self) /\ (forall i : (int) . 0 <= i /\ i < Seq.length visited -> Int64.to_int (Seq.get visited i) = Int64.to_int (C01Range_Range_Type.c01range_range_type_Range_start self) + i)
end
module C01Range_Impl0_ProducesRefl_Interface
  use seq.Seq
  use C01Range_Range_Type
  clone C01Range_Impl0_Produces_Interface as Produces0
  function produces_refl (a : C01Range_Range_Type.c01range_range_type) : ()
end
module C01Range_Impl0_ProducesRefl
  use seq.Seq
  use C01Range_Range_Type
  clone C01Range_Impl0_Produces_Interface as Produces0
  function produces_refl [#"../01_range.rs" 34 4 34 29] (a : C01Range_Range_Type.c01range_range_type) : () =
    [#"../01_range.rs" 32 4 32 10] ()
  axiom produces_refl_spec : forall a : C01Range_Range_Type.c01range_range_type . [#"../01_range.rs" 33 14 33 39] Produces0.produces a (Seq.empty ) a
end
module C01Range_Impl0_ProducesRefl_Impl
  use seq.Seq
  use C01Range_Range_Type
  clone C01Range_Impl0_Produces as Produces0
  let rec ghost function produces_refl (a : C01Range_Range_Type.c01range_range_type) : ()
    ensures { [#"../01_range.rs" 33 14 33 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01_range.rs" 32 4 32 10] ()
end
module C01Range_Impl0_ProducesTrans_Interface
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type
  clone C01Range_Impl0_Produces_Interface as Produces0
  function produces_trans (a : C01Range_Range_Type.c01range_range_type) (ab : Seq.seq isize) (b : C01Range_Range_Type.c01range_range_type) (bc : Seq.seq isize) (c : C01Range_Range_Type.c01range_range_type) : ()
    
end
module C01Range_Impl0_ProducesTrans
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type
  clone C01Range_Impl0_Produces_Interface as Produces0
  function produces_trans [#"../01_range.rs" 40 4 40 90] (a : C01Range_Range_Type.c01range_range_type) (ab : Seq.seq isize) (b : C01Range_Range_Type.c01range_range_type) (bc : Seq.seq isize) (c : C01Range_Range_Type.c01range_range_type) : ()
    
   =
    [#"../01_range.rs" 36 4 36 10] ()
  axiom produces_trans_spec : forall a : C01Range_Range_Type.c01range_range_type, ab : Seq.seq isize, b : C01Range_Range_Type.c01range_range_type, bc : Seq.seq isize, c : C01Range_Range_Type.c01range_range_type . ([#"../01_range.rs" 37 15 37 32] Produces0.produces a ab b) -> ([#"../01_range.rs" 38 15 38 32] Produces0.produces b bc c) -> ([#"../01_range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C01Range_Impl0_ProducesTrans_Impl
  use seq.Seq
  use mach.int.Int
  use prelude.IntSize
  use C01Range_Range_Type
  clone C01Range_Impl0_Produces as Produces0
  let rec ghost function produces_trans (a : C01Range_Range_Type.c01range_range_type) (ab : Seq.seq isize) (b : C01Range_Range_Type.c01range_range_type) (bc : Seq.seq isize) (c : C01Range_Range_Type.c01range_range_type) : ()
    requires {[#"../01_range.rs" 37 15 37 32] Produces0.produces a ab b}
    requires {[#"../01_range.rs" 38 15 38 32] Produces0.produces b bc c}
    ensures { [#"../01_range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../01_range.rs" 36 4 36 10] ()
end
module Core_Option_Option_Type
  type core_option_option_type 't =
    | Core_Option_Option_None_Type
    | Core_Option_Option_Some_Type 't
    
  let function core_option_option_type_Some_0 (self : core_option_option_type 't) : 't
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | Core_Option_Option_None_Type -> any 't
      | Core_Option_Option_Some_Type a -> a
      end
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
end
module CreusotContracts_Logic_Resolve_Impl1
  type t
end
module C01Range_Impl0_Next_Interface
  use mach.int.Int
  use prelude.IntSize
  use prelude.Borrow
  use seq.Seq
  use C01Range_Range_Type
  clone C01Range_Impl0_Produces_Interface as Produces0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface as Resolve0 with type t = C01Range_Range_Type.c01range_range_type
  clone C01Range_Impl0_Completed_Interface as Completed0
  use Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed (C01Range_Range_Type.c01range_range_type)) : Core_Option_Option_Type.core_option_option_type isize
    ensures { [#"../01_range.rs" 43 14 46 5] match (result) with
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> Completed0.completed ( ^ self) /\ Resolve0.resolve self
      | Core_Option_Option_Type.Core_Option_Option_Some_Type v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) /\ not Completed0.completed ( * self)
      end }
    
end
module C01Range_Impl0_Next
  use mach.int.Int
  use prelude.IntSize
  use prelude.Borrow
  use seq.Seq
  use C01Range_Range_Type
  clone C01Range_Impl0_Produces as Produces0
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = C01Range_Range_Type.c01range_range_type
  clone C01Range_Impl0_Completed as Completed0
  use Core_Option_Option_Type
  let rec cfg next [@cfg:stackify] [#"../01_range.rs" 47 4 47 39] (self : borrowed (C01Range_Range_Type.c01range_range_type)) : Core_Option_Option_Type.core_option_option_type isize
    ensures { [#"../01_range.rs" 43 14 46 5] match (result) with
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> Completed0.completed ( ^ self) /\ Resolve0.resolve self
      | Core_Option_Option_Type.Core_Option_Option_Some_Type v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) /\ not Completed0.completed ( * self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.core_option_option_type isize;
  var self_1 : borrowed (C01Range_Range_Type.c01range_range_type);
  var _2 : bool;
  var _3 : isize;
  var _4 : isize;
  var r_5 : isize;
  var _6 : isize;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _3 <- C01Range_Range_Type.c01range_range_type_Range_start ( * self_1);
    _4 <- C01Range_Range_Type.c01range_range_type_Range_end ( * self_1);
    _2 <- ([#"../01_range.rs" 48 11 48 33] _3 >= _4);
    switch (_2)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.Core_Option_Option_None_Type;
    goto BB3
  }
  BB2 {
    r_5 <- C01Range_Range_Type.c01range_range_type_Range_start ( * self_1);
    self_1 <- { self_1 with current = (let C01Range_Range_Type.C01Range_Range_Type a b =  * self_1 in C01Range_Range_Type.C01Range_Range_Type ([#"../01_range.rs" 52 12 52 27] C01Range_Range_Type.c01range_range_type_Range_start ( * self_1) + (1 : isize)) b) };
    assume { Resolve0.resolve self_1 };
    _6 <- r_5;
    _0 <- Core_Option_Option_Type.Core_Option_Option_Some_Type _6;
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module C01Range_Impl1_IntoIter_Interface
  use C01Range_Range_Type
  val into_iter [@cfg:stackify] (self : C01Range_Range_Type.c01range_range_type) : C01Range_Range_Type.c01range_range_type
    ensures { [#"../01_range.rs" 59 14 59 28] result = self }
    
end
module C01Range_Impl1_IntoIter
  use C01Range_Range_Type
  let rec cfg into_iter [@cfg:stackify] [#"../01_range.rs" 60 4 60 34] (self : C01Range_Range_Type.c01range_range_type) : C01Range_Range_Type.c01range_range_type
    ensures { [#"../01_range.rs" 59 14 59 28] result = self }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C01Range_Range_Type.c01range_range_type;
  var self_1 : C01Range_Range_Type.c01range_range_type;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _0 <- self_1;
    self_1 <- any C01Range_Range_Type.c01range_range_type;
    return _0
  }
  
end
module C01Range_Impl0_Item_Type
  use mach.int.Int
  use prelude.IntSize
  type item  =
    isize
end
module C01Range_Common_Iterator_Item_Type
  type self
  type item
end
module C01Range_Common_Iterator_Completed_Interface
  type self
  predicate completed (self : self)
end
module C01Range_Common_Iterator_Completed
  type self
  predicate completed [#"../common.rs" 8 4 8 31] (self : self)
end
module C01Range_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C01Range_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  predicate produces [#"../common.rs" 11 4 11 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C01Range_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_refl (a : self) : ()
end
module C01Range_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_refl [#"../common.rs" 15 4 15 30] (a : self) : ()
  axiom produces_refl_spec : forall a : self . [#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a
end
module C01Range_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
end
module C01Range_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  function produces_trans [#"../common.rs" 21 4 21 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C01Range_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces_Interface as Produces0 with type self = self, type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Completed_Interface as Completed0 with type self = self
  use Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.core_option_option_type Item0.item
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> Completed0.completed ( * self)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) /\ not Completed0.completed ( * self)
      end }
    
end
module C01Range_Common_Iterator_Next
  type self
  use prelude.Borrow
  use seq.Seq
  clone C01Range_Common_Iterator_Item_Type as Item0 with type self = self
  clone C01Range_Common_Iterator_Produces as Produces0 with type self = self, type Item0.item = Item0.item
  clone C01Range_Common_Iterator_Completed as Completed0 with type self = self
  use Core_Option_Option_Type
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.core_option_option_type Item0.item
    ensures { [#"../common.rs" 23 14 26 5] match (result) with
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> Completed0.completed ( * self)
      | Core_Option_Option_Type.Core_Option_Option_Some_Type v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self) /\ not Completed0.completed ( * self)
      end }
    
end
module C01Range_Impl0
  use seq.Seq
  use C01Range_Range_Type
  clone C01Range_Impl0_Item_Type as Item0
  clone C01Range_Impl0_Produces as Produces0
  clone C01Range_Impl0_ProducesRefl as ProducesRefl0 with predicate Produces0.produces = Produces0.produces, axiom .
  clone C01Range_Common_Iterator_ProducesRefl_Interface as ProducesRefl1 with type self = C01Range_Range_Type.c01range_range_type,
  function produces_refl = ProducesRefl0.produces_refl, predicate Produces0.produces = Produces0.produces,
  type Item0.item = Item0.item, axiom .
  clone C01Range_Common_Iterator_Produces_Interface as Produces1 with type self = C01Range_Range_Type.c01range_range_type,
  predicate produces = Produces0.produces, type Item0.item = Item0.item
  clone C01Range_Impl0_Completed as Completed0
  clone C01Range_Common_Iterator_Completed_Interface as Completed1 with type self = C01Range_Range_Type.c01range_range_type,
  predicate completed = Completed0.completed
  clone C01Range_Common_Iterator_Item_Type as Item1 with type self = C01Range_Range_Type.c01range_range_type,
  type item = Item0.item
  goal produces_refl_spec : forall a : C01Range_Range_Type.c01range_range_type . forall result : () . ([#"../01_range.rs" 33 14 33 39] Produces0.produces a (Seq.empty ) a) -> ([#"../common.rs" 14 14 14 39] Produces0.produces a (Seq.empty ) a)
  use mach.int.Int
  use prelude.IntSize
  clone C01Range_Impl0_ProducesTrans as ProducesTrans0 with predicate Produces0.produces = Produces0.produces, axiom .
  clone C01Range_Common_Iterator_ProducesTrans_Interface as ProducesTrans1 with type self = C01Range_Range_Type.c01range_range_type,
  function produces_trans = ProducesTrans0.produces_trans, predicate Produces0.produces = Produces0.produces,
  type Item0.item = Item0.item, axiom .
  goal produces_trans_spec : forall a : C01Range_Range_Type.c01range_range_type, ab : Seq.seq isize, b : C01Range_Range_Type.c01range_range_type, bc : Seq.seq isize, c : C01Range_Range_Type.c01range_range_type . (([#"../common.rs" 19 15 19 32] Produces0.produces b bc c) && ([#"../common.rs" 18 15 18 32] Produces0.produces a ab b) -> ([#"../01_range.rs" 38 15 38 32] Produces0.produces b bc c) && ([#"../01_range.rs" 37 15 37 32] Produces0.produces a ab b)) /\ (forall result : () . ([#"../01_range.rs" 39 14 39 42] Produces0.produces a (Seq.(++) ab bc) c) -> ([#"../common.rs" 20 14 20 42] Produces0.produces a (Seq.(++) ab bc) c))
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = C01Range_Range_Type.c01range_range_type
  use Core_Option_Option_Type
  clone C01Range_Impl0_Next_Interface as Next0 with predicate Completed0.completed = Completed0.completed,
  predicate Resolve0.resolve = Resolve0.resolve, predicate Produces0.produces = Produces0.produces
  clone C01Range_Common_Iterator_Next_Interface as Next1 with type self = C01Range_Range_Type.c01range_range_type,
  val next = Next0.next, type Item0.item = Item0.item, predicate Completed0.completed = Completed0.completed,
  predicate Produces0.produces = Produces0.produces
end
module C01Range_SumRange_Interface
  use mach.int.Int64
  use mach.int.Int
  use mach.int.Int32
  use prelude.IntSize
  val sum_range [@cfg:stackify] (n : isize) : isize
    requires {[#"../01_range.rs" 65 11 65 18] Int64.to_int n >= 0}
    ensures { [#"../01_range.rs" 66 10 66 21] result = n }
    
end
module C01Range_SumRange
  use mach.int.Int64
  use mach.int.Int
  use mach.int.Int32
  use prelude.IntSize
  use seq.Seq
  use C01Range_Range_Type
  clone C01Range_Impl0_Produces as Produces0
  clone C01Range_Impl0_ProducesTrans as ProducesTrans0 with predicate Produces0.produces = Produces0.produces, axiom .
  clone C01Range_Impl0_ProducesRefl as ProducesRefl0 with predicate Produces0.produces = Produces0.produces, axiom .
  use prelude.Borrow
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = C01Range_Range_Type.c01range_range_type
  clone C01Range_Impl0_Completed as Completed0
  use Core_Option_Option_Type
  clone C01Range_Impl0_Next_Interface as Next0 with predicate Completed0.completed = Completed0.completed,
  predicate Resolve0.resolve = Resolve0.resolve, predicate Produces0.produces = Produces0.produces
  clone C01Range_Impl1_IntoIter_Interface as IntoIter0
  let rec cfg sum_range [@cfg:stackify] [#"../01_range.rs" 67 0 67 35] (n : isize) : isize
    requires {[#"../01_range.rs" 65 11 65 18] Int64.to_int n >= 0}
    ensures { [#"../01_range.rs" 66 10 66 21] result = n }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : isize;
  var n_1 : isize;
  var i_2 : isize;
  var _3 : ();
  var iter_4 : C01Range_Range_Type.c01range_range_type;
  var _5 : C01Range_Range_Type.c01range_range_type;
  var _6 : isize;
  ghost var iter_old_7 : C01Range_Range_Type.c01range_range_type;
  var _8 : ();
  ghost var produced_9 : Seq.seq isize;
  var _10 : ();
  var _11 : ();
  var _12 : Core_Option_Option_Type.core_option_option_type isize;
  var _13 : borrowed (C01Range_Range_Type.c01range_range_type);
  var _14 : isize;
  var i_15 : isize;
  ghost var _16 : Seq.seq isize;
  var _17 : ();
  var _18 : ();
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    i_2 <- (0 : isize);
    _6 <- n_1;
    _5 <- C01Range_Range_Type.C01Range_Range_Type (0 : isize) _6;
    iter_4 <- ([#"../01_range.rs" 69 4 69 54] IntoIter0.into_iter _5);
    goto BB1
  }
  BB1 {
    _8 <- ();
    iter_old_7 <- ghost ([#"../01_range.rs" 69 4 69 54] iter_4);
    goto BB2
  }
  BB2 {
    _10 <- ();
    produced_9 <- ghost ([#"../01_range.rs" 69 4 69 54] Seq.empty );
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    invariant structural { [#"../01_range.rs" 69 4 69 54] Produces0.produces iter_old_7 produced_9 iter_4 };
    invariant user { [#"../01_range.rs" 69 22 69 52] Int64.to_int i_2 = Seq.length produced_9 /\ i_2 <= n_1 };
    _13 <- borrow_mut iter_4;
    iter_4 <-  ^ _13;
    _12 <- ([#"../01_range.rs" 69 4 69 54] Next0.next _13);
    goto BB5
  }
  BB5 {
    switch (_12)
      | Core_Option_Option_Type.Core_Option_Option_None_Type -> goto BB6
      | Core_Option_Option_Type.Core_Option_Option_Some_Type _ -> goto BB8
      end
  }
  BB6 {
    _3 <- ();
    _0 <- i_2;
    return _0
  }
  BB7 {
    absurd
  }
  BB8 {
    i_15 <- Core_Option_Option_Type.core_option_option_type_Some_0 _12;
    _17 <- ();
    _16 <- ghost ([#"../01_range.rs" 69 4 69 54] Seq.snoc produced_9 i_15);
    goto BB9
  }
  BB9 {
    produced_9 <- _16;
    _16 <- any Seq.seq isize;
    i_2 <- ([#"../01_range.rs" 71 8 71 14] i_2 + (1 : isize));
    _11 <- ();
    goto BB4
  }
  
end
