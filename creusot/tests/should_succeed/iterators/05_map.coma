
module C05Map_Map_Type
  type t_map 'i 'b 'f =
    | C_Map 'i 'f
  
  function any_l (_ : 'b) : 'a
  
  let rec t_map < 'i > < 'b > < 'f > (input:t_map 'i 'b 'f) (ret  (iter:'i) (func:'f))= any
    [ good (iter:'i) (func:'f)-> {C_Map iter func = input} (! ret {iter} {func})
    | bad (iter:'i) (func:'f)-> {C_Map iter func <> input} {false} any ]
    
  
  function map_iter (self : t_map 'i 'b 'f) : 'i =
    match self with
      | C_Map a _ -> a
      end
  
  function map_func (self : t_map 'i 'b 'f) : 'f =
    match self with
      | C_Map _ a -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_box 't 'a =
    | C_Box (Unique'0.t_unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C05Map_Impl0_ProducesRefl_Impl
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "../05_map.rs" 29 21 29 25
  
  let%span s05_map1 = "../05_map.rs" 28 14 28 45
  
  let%span span2 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span6 = "../common.rs" 18 15 18 32
  
  let%span span7 = "../common.rs" 19 15 19 32
  
  let%span span8 = "../common.rs" 21 22 21 23
  
  let%span span9 = "../common.rs" 21 31 21 33
  
  let%span span10 = "../common.rs" 21 52 21 53
  
  let%span span11 = "../common.rs" 21 61 21 63
  
  let%span span12 = "../common.rs" 21 82 21 83
  
  let%span span13 = "../common.rs" 20 14 20 42
  
  let%span span14 = "../common.rs" 15 21 15 25
  
  let%span span15 = "../common.rs" 14 14 14 45
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span26 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span29 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span30 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span31 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span32 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span33 = "../05_map.rs" 75 8 77 9
  
  let%span span34 = "../05_map.rs" 82 8 89 9
  
  let%span span35 = "../05_map.rs" 94 8 98 9
  
  let%span span36 = "../05_map.rs" 133 12 135 57
  
  let%span span37 = "../05_map.rs" 42 8 53 9
  
  use prelude.prelude.Borrow
  
  predicate inv'5 (_x : borrowed f)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'11 (self : borrowed f) =
    [%#span2] inv'5 self
  
  predicate inv'11 (_x : borrowed f)
  
  axiom inv'11 : forall x : borrowed f . inv'11 x = true
  
  type item'0
  
  predicate inv'9 (_x : item'0)
  
  predicate invariant'10 (self : item'0) =
    [%#span2] inv'9 self
  
  predicate inv'10 (_x : item'0)
  
  axiom inv'10 : forall x : item'0 . inv'10 x = true
  
  predicate invariant'9 (self : item'0)
  
  axiom inv'9 : forall x : item'0 . inv'9 x = true
  
  predicate inv'3 (_x : i)
  
  predicate invariant'8 (self : borrowed i) =
    [%#span3] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'8 (_x : borrowed i)
  
  axiom inv'8 : forall x : borrowed i . inv'8 x = true
  
  predicate invariant'7 (self : b)
  
  predicate inv'7 (_x : b)
  
  axiom inv'7 : forall x : b . inv'7 x = true
  
  predicate invariant'6 (self : item'0) =
    [%#span4] true
  
  predicate inv'6 (_x : item'0)
  
  axiom inv'6 : forall x : item'0 . inv'6 x = true
  
  predicate inv'4 (_x : f)
  
  predicate invariant'5 (self : borrowed f) =
    [%#span3] inv'4 self.current /\ inv'4 self.final
  
  axiom inv'5 : forall x : borrowed f . inv'5 x = true
  
  predicate invariant'4 (self : f)
  
  axiom inv'4 : forall x : f . inv'4 x = true
  
  predicate invariant'3 (self : i)
  
  axiom inv'3 : forall x : i . inv'3 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq (borrowed f)) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'11 (Seq.get self i)
  
  predicate inv'2 (_x : Seq.seq (borrowed f))
  
  axiom inv'2 : forall x : Seq.seq (borrowed f) . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq item'0) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  predicate inv'1 (_x : Seq.seq item'0)
  
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span6] produces'1 a ab b)
   -> ([%#span7] produces'1 b bc c)
   -> ([%#span8] inv'3 a)
   -> ([%#span9] inv'1 ab)
   -> ([%#span10] inv'3 b)
   -> ([%#span11] inv'1 bc)  -> ([%#span12] inv'3 c)  -> ([%#span13] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span14] inv'3 self)
   -> ([%#span15] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  predicate resolve'0 (self : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([%#span16] inv'4 self)
   -> ([%#span17] inv'6 args)
   -> ([%#span18] inv'7 res)
   -> ([%#span19] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'5 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span20] unnest'0 self b)
   -> ([%#span21] unnest'0 b c)
   -> ([%#span22] inv'4 self)  -> ([%#span23] inv'4 b)  -> ([%#span24] inv'4 c)  -> ([%#span25] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span26] inv'4 self)  -> ([%#span27] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([%#span28] postcondition_mut'0 self args res)
   -> ([%#span29] inv'5 self)
   -> ([%#span30] inv'6 args)  -> ([%#span31] inv'7 res)  -> ([%#span32] unnest'0 self.current self.final)
  
  predicate precondition'0 (self : f) (_2 : item'0)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [%#span33] forall e : item'0, i : i . inv'9 e /\ inv'3 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  use seq.Seq
  
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [%#span34] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'1 s
    /\ inv'9 e1 /\ inv'9 e2 /\ inv'5 f /\ inv'7 b /\ inv'3 i
     -> unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 f.final (e2)
  
  use C05Map_Map_Type as C05Map_Map_Type
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [%#span35] forall iter : borrowed i, func : f . inv'8 iter /\ inv'4 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  use C05Map_Map_Type as Map'0
  
  predicate invariant'0 [#"../05_map.rs" 131 4 131 30] (self : Map'0.t_map i b f) =
    [%#span36] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  
  predicate inv'0 (_x : Map'0.t_map i b f)
  
  axiom inv'0 : forall x : Map'0.t_map i b f . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func -> true
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : Map'0.t_map i b f) (visited : Seq.seq b) (succ : Map'0.t_map i b f)
    
   =
    [%#span37] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'1 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'2 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
      (Seq.get fs 0).current = C05Map_Map_Type.map_func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C05Map_Map_Type.map_func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  
  use seq.Seq
  
  constant self  : Map'0.t_map i b f
  
  function produces_refl [#"../05_map.rs" 29 4 29 26] (self : Map'0.t_map i b f) : ()
  
  goal vc_produces_refl : ([%#s05_map0] inv'0 self)  -> ([%#s05_map1] produces'0 self (Seq.empty  : Seq.seq b) self)
end
module C05Map_Impl0_ProducesTrans_Impl
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "../05_map.rs" 33 15 33 32
  
  let%span s05_map1 = "../05_map.rs" 34 15 34 32
  
  let%span s05_map2 = "../05_map.rs" 36 22 36 23
  
  let%span s05_map3 = "../05_map.rs" 36 31 36 33
  
  let%span s05_map4 = "../05_map.rs" 36 52 36 53
  
  let%span s05_map5 = "../05_map.rs" 36 61 36 63
  
  let%span s05_map6 = "../05_map.rs" 36 82 36 83
  
  let%span s05_map7 = "../05_map.rs" 35 14 35 42
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span9 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span10 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span12 = "../common.rs" 18 15 18 32
  
  let%span span13 = "../common.rs" 19 15 19 32
  
  let%span span14 = "../common.rs" 21 22 21 23
  
  let%span span15 = "../common.rs" 21 31 21 33
  
  let%span span16 = "../common.rs" 21 52 21 53
  
  let%span span17 = "../common.rs" 21 61 21 63
  
  let%span span18 = "../common.rs" 21 82 21 83
  
  let%span span19 = "../common.rs" 20 14 20 42
  
  let%span span20 = "../common.rs" 15 21 15 25
  
  let%span span21 = "../common.rs" 14 14 14 45
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span26 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span29 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span30 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span31 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span32 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span33 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span34 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span35 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span36 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span37 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span38 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span39 = "../05_map.rs" 75 8 77 9
  
  let%span span40 = "../05_map.rs" 82 8 89 9
  
  let%span span41 = "../05_map.rs" 94 8 98 9
  
  let%span span42 = "../05_map.rs" 133 12 135 57
  
  let%span span43 = "../05_map.rs" 42 8 53 9
  
  type item'0
  
  predicate invariant'13 (self : item'0)
  
  predicate inv'13 (_x : item'0)
  
  axiom inv'13 : forall x : item'0 . inv'13 x = true
  
  predicate inv'4 (_x : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'12 (self : borrowed i) =
    [%#span8] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'12 (_x : borrowed i)
  
  axiom inv'12 : forall x : borrowed i . inv'12 x = true
  
  predicate inv'6 (_x : borrowed f)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'11 (self : borrowed f) =
    [%#span9] inv'6 self
  
  predicate inv'11 (_x : borrowed f)
  
  axiom inv'11 : forall x : borrowed f . inv'11 x = true
  
  predicate invariant'10 (self : item'0) =
    [%#span9] inv'13 self
  
  predicate inv'10 (_x : item'0)
  
  axiom inv'10 : forall x : item'0 . inv'10 x = true
  
  predicate inv'8 (_x : b)
  
  predicate invariant'9 (self : b) =
    [%#span9] inv'8 self
  
  predicate inv'9 (_x : b)
  
  axiom inv'9 : forall x : b . inv'9 x = true
  
  predicate invariant'8 (self : b)
  
  axiom inv'8 : forall x : b . inv'8 x = true
  
  predicate invariant'7 (self : item'0) =
    [%#span10] true
  
  predicate inv'7 (_x : item'0)
  
  axiom inv'7 : forall x : item'0 . inv'7 x = true
  
  predicate inv'5 (_x : f)
  
  predicate invariant'6 (self : borrowed f) =
    [%#span8] inv'5 self.current /\ inv'5 self.final
  
  axiom inv'6 : forall x : borrowed f . inv'6 x = true
  
  predicate invariant'5 (self : f)
  
  axiom inv'5 : forall x : f . inv'5 x = true
  
  predicate invariant'4 (self : i)
  
  axiom inv'4 : forall x : i . inv'4 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq (borrowed f)) =
    [%#span11] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'11 (Seq.get self i)
  
  predicate inv'3 (_x : Seq.seq (borrowed f))
  
  axiom inv'3 : forall x : Seq.seq (borrowed f) . inv'3 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq item'0) =
    [%#span11] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  predicate inv'2 (_x : Seq.seq item'0)
  
  axiom inv'2 : forall x : Seq.seq item'0 . inv'2 x = true
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span12] produces'1 a ab b)
   -> ([%#span13] produces'1 b bc c)
   -> ([%#span14] inv'4 a)
   -> ([%#span15] inv'2 ab)
   -> ([%#span16] inv'4 b)
   -> ([%#span17] inv'2 bc)  -> ([%#span18] inv'4 c)  -> ([%#span19] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span20] inv'4 self)
   -> ([%#span21] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  predicate resolve'0 (self : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([%#span22] inv'5 self)
   -> ([%#span23] inv'7 args)
   -> ([%#span24] inv'8 res)
   -> ([%#span25] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'6 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span26] unnest'0 self b)
   -> ([%#span27] unnest'0 b c)
   -> ([%#span28] inv'5 self)  -> ([%#span29] inv'5 b)  -> ([%#span30] inv'5 c)  -> ([%#span31] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span32] inv'5 self)  -> ([%#span33] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([%#span34] postcondition_mut'0 self args res)
   -> ([%#span35] inv'6 self)
   -> ([%#span36] inv'7 args)  -> ([%#span37] inv'8 res)  -> ([%#span38] unnest'0 self.current self.final)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq b) =
    [%#span11] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'1 (_x : Seq.seq b)
  
  axiom inv'1 : forall x : Seq.seq b . inv'1 x = true
  
  predicate precondition'0 (self : f) (_2 : item'0)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [%#span39] forall e : item'0, i : i . inv'13 e /\ inv'4 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  use seq.Seq
  
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [%#span40] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'2 s
    /\ inv'13 e1 /\ inv'13 e2 /\ inv'6 f /\ inv'8 b /\ inv'4 i
     -> unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 f.final (e2)
  
  use C05Map_Map_Type as C05Map_Map_Type
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [%#span41] forall iter : borrowed i, func : f . inv'12 iter /\ inv'5 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  use C05Map_Map_Type as Map'0
  
  predicate invariant'0 [#"../05_map.rs" 131 4 131 30] (self : Map'0.t_map i b f) =
    [%#span42] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  
  predicate inv'0 (_x : Map'0.t_map i b f)
  
  axiom inv'0 : forall x : Map'0.t_map i b f . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func -> true
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : Map'0.t_map i b f) (visited : Seq.seq b) (succ : Map'0.t_map i b f)
    
   =
    [%#span43] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'2 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'3 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
      (Seq.get fs 0).current = C05Map_Map_Type.map_func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C05Map_Map_Type.map_func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  
  constant a  : Map'0.t_map i b f
  
  constant ab  : Seq.seq b
  
  constant b  : Map'0.t_map i b f
  
  constant bc  : Seq.seq b
  
  constant c  : Map'0.t_map i b f
  
  function produces_trans [#"../05_map.rs" 36 4 36 90] (a : Map'0.t_map i b f) (ab : Seq.seq b) (b : Map'0.t_map i b f) (bc : Seq.seq b) (c : Map'0.t_map i b f) : ()
    
  
  goal vc_produces_trans : ([%#s05_map6] inv'0 c)
   -> ([%#s05_map5] inv'1 bc)
   -> ([%#s05_map4] inv'0 b)
   -> ([%#s05_map3] inv'1 ab)
   -> ([%#s05_map2] inv'0 a)
   -> ([%#s05_map1] produces'0 b bc c)
   -> ([%#s05_map0] produces'0 a ab b)  -> ([%#s05_map7] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C05Map_Impl1_ProducesOne_Impl
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "../05_map.rs" 117 20 117 24
  
  let%span s05_map1 = "../05_map.rs" 117 26 117 33
  
  let%span s05_map2 = "../05_map.rs" 117 38 117 42
  
  let%span s05_map3 = "../05_map.rs" 116 14 116 68
  
  let%span s05_map4 = "../05_map.rs" 118 8 123 9
  
  let%span span5 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span7 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span26 = "../common.rs" 18 15 18 32
  
  let%span span27 = "../common.rs" 19 15 19 32
  
  let%span span28 = "../common.rs" 21 22 21 23
  
  let%span span29 = "../common.rs" 21 31 21 33
  
  let%span span30 = "../common.rs" 21 52 21 53
  
  let%span span31 = "../common.rs" 21 61 21 63
  
  let%span span32 = "../common.rs" 21 82 21 83
  
  let%span span33 = "../common.rs" 20 14 20 42
  
  let%span span34 = "../common.rs" 15 21 15 25
  
  let%span span35 = "../common.rs" 14 14 14 45
  
  let%span span36 = "../05_map.rs" 42 8 53 9
  
  let%span span37 = "../05_map.rs" 33 15 33 32
  
  let%span span38 = "../05_map.rs" 34 15 34 32
  
  let%span span39 = "../05_map.rs" 36 22 36 23
  
  let%span span40 = "../05_map.rs" 36 31 36 33
  
  let%span span41 = "../05_map.rs" 36 52 36 53
  
  let%span span42 = "../05_map.rs" 36 61 36 63
  
  let%span span43 = "../05_map.rs" 36 82 36 83
  
  let%span span44 = "../05_map.rs" 35 14 35 42
  
  let%span span45 = "../05_map.rs" 31 4 31 10
  
  let%span span46 = "../05_map.rs" 29 21 29 25
  
  let%span span47 = "../05_map.rs" 28 14 28 45
  
  let%span span48 = "../05_map.rs" 26 4 26 10
  
  let%span span49 = "../05_map.rs" 75 8 77 9
  
  let%span span50 = "../05_map.rs" 82 8 89 9
  
  let%span span51 = "../05_map.rs" 94 8 98 9
  
  let%span span52 = "../05_map.rs" 133 12 135 57
  
  predicate inv'1 (_x : b)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'13 (self : b) =
    [%#span5] inv'1 self
  
  predicate inv'13 (_x : b)
  
  axiom inv'13 : forall x : b . inv'13 x = true
  
  use prelude.prelude.Borrow
  
  predicate inv'2 (_x : borrowed f)
  
  predicate invariant'12 (self : borrowed f) =
    [%#span5] inv'2 self
  
  predicate inv'12 (_x : borrowed f)
  
  axiom inv'12 : forall x : borrowed f . inv'12 x = true
  
  type item'0
  
  predicate inv'3 (_x : item'0)
  
  predicate invariant'11 (self : item'0) =
    [%#span5] inv'3 self
  
  predicate inv'11 (_x : item'0)
  
  axiom inv'11 : forall x : item'0 . inv'11 x = true
  
  predicate inv'6 (_x : i)
  
  predicate invariant'10 (self : borrowed i) =
    [%#span6] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'10 (_x : borrowed i)
  
  axiom inv'10 : forall x : borrowed i . inv'10 x = true
  
  predicate invariant'9 (self : item'0) =
    [%#span7] true
  
  predicate inv'9 (_x : item'0)
  
  axiom inv'9 : forall x : item'0 . inv'9 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'8 (self : Seq.seq b) =
    [%#span8] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'13 (Seq.get self i)
  
  predicate inv'8 (_x : Seq.seq b)
  
  axiom inv'8 : forall x : Seq.seq b . inv'8 x = true
  
  predicate invariant'7 (self : f)
  
  predicate inv'7 (_x : f)
  
  axiom inv'7 : forall x : f . inv'7 x = true
  
  predicate invariant'6 (self : i)
  
  axiom inv'6 : forall x : i . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq (borrowed f)) =
    [%#span8] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'12 (Seq.get self i)
  
  predicate inv'5 (_x : Seq.seq (borrowed f))
  
  axiom inv'5 : forall x : Seq.seq (borrowed f) . inv'5 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq item'0) =
    [%#span8] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'11 (Seq.get self i)
  
  predicate inv'4 (_x : Seq.seq item'0)
  
  axiom inv'4 : forall x : Seq.seq item'0 . inv'4 x = true
  
  predicate resolve'0 (self : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([%#span9] inv'7 self)
   -> ([%#span10] inv'9 args)
   -> ([%#span11] inv'1 res)
   -> ([%#span12] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'2 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span13] unnest'0 self b)
   -> ([%#span14] unnest'0 b c)
   -> ([%#span15] inv'7 self)  -> ([%#span16] inv'7 b)  -> ([%#span17] inv'7 c)  -> ([%#span18] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span19] inv'7 self)  -> ([%#span20] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([%#span21] postcondition_mut'0 self args res)
   -> ([%#span22] inv'2 self)
   -> ([%#span23] inv'9 args)  -> ([%#span24] inv'1 res)  -> ([%#span25] unnest'0 self.current self.final)
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'1_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span26] produces'1 a ab b)
   -> ([%#span27] produces'1 b bc c)
   -> ([%#span28] inv'6 a)
   -> ([%#span29] inv'4 ab)
   -> ([%#span30] inv'6 b)
   -> ([%#span31] inv'4 bc)  -> ([%#span32] inv'6 c)  -> ([%#span33] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'1_spec : forall self : i . ([%#span34] inv'6 self)
   -> ([%#span35] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  predicate invariant'3 (self : item'0)
  
  axiom inv'3 : forall x : item'0 . inv'3 x = true
  
  predicate invariant'2 (self : borrowed f) =
    [%#span6] inv'7 self.current /\ inv'7 self.final
  
  axiom inv'2 : forall x : borrowed f . inv'2 x = true
  
  use C05Map_Map_Type as Map'0
  
  use seq.Seq
  
  predicate inv'0 (_x : Map'0.t_map i b f)
  
  use seq.Seq
  
  predicate precondition'0 (self : f) (_2 : item'0)
  
  use seq.Seq
  
  use seq.Seq
  
  use C05Map_Map_Type as C05Map_Map_Type
  
  predicate produces'0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : Map'0.t_map i b f) (visited : Seq.seq b) (succ : Map'0.t_map i b f)
    
   =
    [%#span36] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'4 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'5 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
      (Seq.get fs 0).current = C05Map_Map_Type.map_func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C05Map_Map_Type.map_func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  
  function produces_trans'0 [#"../05_map.rs" 36 4 36 90] (a : Map'0.t_map i b f) (ab : Seq.seq b) (b : Map'0.t_map i b f) (bc : Seq.seq b) (c : Map'0.t_map i b f) : ()
    
   =
    [%#span45] ()
  
  axiom produces_trans'0_spec : forall a : Map'0.t_map i b f, ab : Seq.seq b, b : Map'0.t_map i b f, bc : Seq.seq b, c : Map'0.t_map i b f . ([%#span37] produces'0 a ab b)
   -> ([%#span38] produces'0 b bc c)
   -> ([%#span39] inv'0 a)
   -> ([%#span40] inv'8 ab)
   -> ([%#span41] inv'0 b)
   -> ([%#span42] inv'8 bc)  -> ([%#span43] inv'0 c)  -> ([%#span44] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../05_map.rs" 29 4 29 26] (self : Map'0.t_map i b f) : () =
    [%#span48] ()
  
  axiom produces_refl'0_spec : forall self : Map'0.t_map i b f . ([%#span46] inv'0 self)
   -> ([%#span47] produces'0 self (Seq.empty  : Seq.seq b) self)
  
  predicate invariant'1 (self : b)
  
  axiom inv'1 : forall x : b . inv'1 x = true
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [%#span49] forall e : item'0, i : i . inv'3 e /\ inv'6 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  use seq.Seq
  
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [%#span50] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'4 s
    /\ inv'3 e1 /\ inv'3 e2 /\ inv'2 f /\ inv'1 b /\ inv'6 i
     -> unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 f.final (e2)
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [%#span51] forall iter : borrowed i, func : f . inv'10 iter /\ inv'7 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"../05_map.rs" 131 4 131 30] (self : Map'0.t_map i b f) =
    [%#span52] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  
  axiom inv'0 : forall x : Map'0.t_map i b f . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func -> true
    end)
  
  use seq.Seq
  
  constant self  : Map'0.t_map i b f
  
  constant visited  : b
  
  constant succ  : Map'0.t_map i b f
  
  predicate produces_one [#"../05_map.rs" 117 4 117 57] (self : Map'0.t_map i b f) (visited : b) (succ : Map'0.t_map i b f)
    
  
  goal vc_produces_one : ([%#s05_map2] inv'0 succ)
   -> ([%#s05_map1] inv'1 visited)
   -> ([%#s05_map0] inv'0 self)
   -> ([%#s05_map3] ([%#s05_map4] exists f : borrowed f . inv'2 f
  /\ f.current = C05Map_Map_Type.map_func self
  /\ f.final = C05Map_Map_Type.map_func succ
  /\ (exists e : item'0 . inv'3 e
  /\ produces'1 (C05Map_Map_Type.map_iter self) (Seq.singleton e) (C05Map_Map_Type.map_iter succ)
  /\ precondition'0 f.current (e) /\ postcondition_mut'0 f (e) visited))
  = produces'0 self (Seq.singleton visited) succ)
end
module C05Map_Impl1_ProducesOneInvariant_Impl
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "../05_map.rs" 102 4 102 60
  
  let%span s05_map1 = "../05_map.rs" 103 15 103 30
  
  let%span s05_map2 = "../05_map.rs" 104 15 104 43
  
  let%span s05_map3 = "../05_map.rs" 107 30 107 34
  
  let%span s05_map4 = "../05_map.rs" 107 36 107 37
  
  let%span s05_map5 = "../05_map.rs" 107 48 107 49
  
  let%span s05_map6 = "../05_map.rs" 107 54 107 55
  
  let%span s05_map7 = "../05_map.rs" 107 65 107 69
  
  let%span s05_map8 = "../05_map.rs" 105 14 105 42
  
  let%span s05_map9 = "../05_map.rs" 106 14 106 47
  
  let%span s05_map10 = "../05_map.rs" 101 4 101 12
  
  let%span span11 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span12 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span13 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span15 = "../05_map.rs" 75 8 77 9
  
  let%span span16 = "../05_map.rs" 82 8 89 9
  
  let%span span17 = "../05_map.rs" 94 8 98 9
  
  let%span span18 = "../05_map.rs" 133 12 135 57
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span26 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span29 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span30 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span31 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span32 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span33 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span34 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span35 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span36 = "../common.rs" 18 15 18 32
  
  let%span span37 = "../common.rs" 19 15 19 32
  
  let%span span38 = "../common.rs" 21 22 21 23
  
  let%span span39 = "../common.rs" 21 31 21 33
  
  let%span span40 = "../common.rs" 21 52 21 53
  
  let%span span41 = "../common.rs" 21 61 21 63
  
  let%span span42 = "../common.rs" 21 82 21 83
  
  let%span span43 = "../common.rs" 20 14 20 42
  
  let%span span44 = "../common.rs" 15 21 15 25
  
  let%span span45 = "../common.rs" 14 14 14 45
  
  predicate inv'4 (_x : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'9 (self : borrowed i) =
    [%#span11] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'9 (_x : borrowed i)
  
  axiom inv'9 : forall x : borrowed i . inv'9 x = true
  
  type item'0
  
  predicate inv'1 (_x : item'0)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'8 (self : item'0) =
    [%#span12] inv'1 self
  
  predicate inv'8 (_x : item'0)
  
  axiom inv'8 : forall x : item'0 . inv'8 x = true
  
  predicate invariant'7 (self : f)
  
  predicate inv'7 (_x : f)
  
  axiom inv'7 : forall x : f . inv'7 x = true
  
  predicate invariant'6 (self : item'0) =
    [%#span13] true
  
  predicate inv'6 (_x : item'0)
  
  axiom inv'6 : forall x : item'0 . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq item'0) =
    [%#span14] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'5 (_x : Seq.seq item'0)
  
  axiom inv'5 : forall x : Seq.seq item'0 . inv'5 x = true
  
  predicate invariant'4 (self : i)
  
  axiom inv'4 : forall x : i . inv'4 x = true
  
  predicate invariant'3 (self : borrowed f) =
    [%#span11] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'3 (_x : borrowed f)
  
  axiom inv'3 : forall x : borrowed f . inv'3 x = true
  
  predicate invariant'2 (self : b)
  
  predicate inv'2 (_x : b)
  
  axiom inv'2 : forall x : b . inv'2 x = true
  
  predicate invariant'1 (self : item'0)
  
  axiom inv'1 : forall x : item'0 . inv'1 x = true
  
  predicate precondition'0 (self : f) (_2 : item'0)
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [%#span15] forall e : item'0, i : i . inv'1 e /\ inv'4 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  
  use seq.Seq
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [%#span16] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'5 s
    /\ inv'1 e1 /\ inv'1 e2 /\ inv'3 f /\ inv'2 b /\ inv'4 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 f.final (e2)
  
  use C05Map_Map_Type as C05Map_Map_Type
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [%#span17] forall iter : borrowed i, func : f . inv'9 iter /\ inv'7 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  use C05Map_Map_Type as Map'0
  
  predicate invariant'0 [#"../05_map.rs" 131 4 131 30] (self : Map'0.t_map i b f) =
    [%#span18] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  
  predicate inv'0 (_x : Map'0.t_map i b f)
  
  axiom inv'0 : forall x : Map'0.t_map i b f . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func -> true
    end)
  
  predicate resolve'0 (self : f)
  
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([%#span19] inv'7 self)
   -> ([%#span20] inv'6 args)
   -> ([%#span21] inv'2 res)
   -> ([%#span22] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'3 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span23] unnest'0 self b)
   -> ([%#span24] unnest'0 b c)
   -> ([%#span25] inv'7 self)  -> ([%#span26] inv'7 b)  -> ([%#span27] inv'7 c)  -> ([%#span28] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span29] inv'7 self)  -> ([%#span30] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([%#span31] postcondition_mut'0 self args res)
   -> ([%#span32] inv'3 self)
   -> ([%#span33] inv'6 args)  -> ([%#span34] inv'2 res)  -> ([%#span35] unnest'0 self.current self.final)
  
  use seq.Seq
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span36] produces'0 a ab b)
   -> ([%#span37] produces'0 b bc c)
   -> ([%#span38] inv'4 a)
   -> ([%#span39] inv'5 ab)
   -> ([%#span40] inv'4 b)
   -> ([%#span41] inv'5 bc)  -> ([%#span42] inv'4 c)  -> ([%#span43] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span44] inv'4 self)
   -> ([%#span45] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  
  constant self  : Map'0.t_map i b f
  
  constant e  : item'0
  
  constant r  : b
  
  constant f  : borrowed f
  
  constant iter  : i
  
  function produces_one_invariant [#"../05_map.rs" 107 4 107 73] (self : Map'0.t_map i b f) (e : item'0) (r : b) (f : borrowed f) (iter : i) : ()
    
  
  goal vc_produces_one_invariant : ([%#s05_map7] inv'4 iter)
   -> ([%#s05_map6] inv'3 f)
   -> ([%#s05_map5] inv'2 r)
   -> ([%#s05_map4] inv'1 e)
   -> ([%#s05_map3] inv'0 self)
   -> ([%#s05_map2] postcondition_mut'0 f (e) r)
   -> ([%#s05_map1] f.current = C05Map_Map_Type.map_func self)
   -> ([%#s05_map0] produces'0 (C05Map_Map_Type.map_iter self) (Seq.singleton e) iter)
   -> ([%#s05_map10] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, i : i . inv'5 s
  /\ inv'1 e1 /\ inv'1 e2 /\ inv'4 i
   -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
   -> produces'0 (C05Map_Map_Type.map_iter self) (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i)
  && (let _ = () in ([%#s05_map9] next_precondition'0 iter f.final) && ([%#s05_map8] preservation'0 iter f.final))
end
module C05Map_Impl0_Next
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "../05_map.rs" 63 16 63 62
  
  let%span s05_map1 = "../05_map.rs" 64 16 64 58
  
  let%span s05_map2 = "../05_map.rs" 60 17 60 21
  
  let%span s05_map3 = "../05_map.rs" 56 14 59 5
  
  let%span s05_map4 = "../05_map.rs" 60 26 60 44
  
  let%span span5 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span7 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span9 = "../05_map.rs" 75 8 77 9
  
  let%span span10 = "../05_map.rs" 82 8 89 9
  
  let%span span11 = "../05_map.rs" 94 8 98 9
  
  let%span span12 = "../05_map.rs" 133 12 135 57
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span26 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span29 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span30 = "../common.rs" 18 15 18 32
  
  let%span span31 = "../common.rs" 19 15 19 32
  
  let%span span32 = "../common.rs" 21 22 21 23
  
  let%span span33 = "../common.rs" 21 31 21 33
  
  let%span span34 = "../common.rs" 21 52 21 53
  
  let%span span35 = "../common.rs" 21 61 21 63
  
  let%span span36 = "../common.rs" 21 82 21 83
  
  let%span span37 = "../common.rs" 20 14 20 42
  
  let%span span38 = "../common.rs" 15 21 15 25
  
  let%span span39 = "../common.rs" 14 14 14 45
  
  let%span span40 = "../05_map.rs" 42 8 53 9
  
  let%span span41 = "../05_map.rs" 117 20 117 24
  
  let%span span42 = "../05_map.rs" 117 26 117 33
  
  let%span span43 = "../05_map.rs" 117 38 117 42
  
  let%span span44 = "../05_map.rs" 116 14 116 68
  
  let%span span45 = "../05_map.rs" 118 8 123 9
  
  let%span span46 = "../05_map.rs" 23 8 23 75
  
  let%span span47 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span48 = "../../../../../creusot-contracts/src/std/ops.rs" 160 27 160 52
  
  let%span span49 = "" 0 0 0 0
  
  let%span span50 = "" 0 0 0 0
  
  let%span span51 = "../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1
  
  let%span span52 = "" 0 0 0 0
  
  let%span span53 = "../05_map.rs" 102 4 102 60
  
  let%span span54 = "../05_map.rs" 103 15 103 30
  
  let%span span55 = "../05_map.rs" 104 15 104 43
  
  let%span span56 = "../05_map.rs" 107 30 107 34
  
  let%span span57 = "../05_map.rs" 107 36 107 37
  
  let%span span58 = "../05_map.rs" 107 48 107 49
  
  let%span span59 = "../05_map.rs" 107 54 107 55
  
  let%span span60 = "../05_map.rs" 107 65 107 69
  
  let%span span61 = "../05_map.rs" 105 14 105 42
  
  let%span span62 = "../05_map.rs" 106 14 106 47
  
  let%span span63 = "../05_map.rs" 101 4 101 12
  
  let%span span64 = "../common.rs" 27 17 27 21
  
  let%span span65 = "../common.rs" 23 14 26 5
  
  let%span span66 = "../common.rs" 27 26 27 44
  
  use prelude.prelude.Borrow
  
  predicate inv'9 (_x : borrowed f)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'14 (self : borrowed f) =
    [%#span5] inv'9 self
  
  predicate inv'14 (_x : borrowed f)
  
  axiom inv'14 : forall x : borrowed f . inv'14 x = true
  
  type item'0
  
  predicate inv'7 (_x : item'0)
  
  predicate invariant'13 (self : item'0) =
    [%#span5] inv'7 self
  
  predicate inv'13 (_x : item'0)
  
  axiom inv'13 : forall x : item'0 . inv'13 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'12 (self : Seq.seq (borrowed f)) =
    [%#span6] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'14 (Seq.get self i)
  
  predicate inv'12 (_x : Seq.seq (borrowed f))
  
  axiom inv'12 : forall x : Seq.seq (borrowed f) . inv'12 x = true
  
  predicate invariant'11 (self : item'0) =
    [%#span7] true
  
  predicate inv'11 (_x : item'0)
  
  axiom inv'11 : forall x : item'0 . inv'11 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'10 (self : Seq.seq item'0) =
    [%#span6] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'13 (Seq.get self i)
  
  predicate inv'10 (_x : Seq.seq item'0)
  
  axiom inv'10 : forall x : Seq.seq item'0 . inv'10 x = true
  
  predicate inv'1 (_x : f)
  
  predicate invariant'9 (self : borrowed f) =
    [%#span8] inv'1 self.current /\ inv'1 self.final
  
  axiom inv'9 : forall x : borrowed f . inv'9 x = true
  
  predicate invariant'8 (self : b)
  
  predicate inv'8 (_x : b)
  
  axiom inv'8 : forall x : b . inv'8 x = true
  
  predicate invariant'7 (self : item'0)
  
  axiom inv'7 : forall x : item'0 . inv'7 x = true
  
  predicate inv'0 (_x : i)
  
  predicate precondition'0 (self : f) (_2 : item'0)
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [%#span9] forall e : item'0, i : i . inv'7 e /\ inv'0 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  
  use seq.Seq
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [%#span10] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'10 s
    /\ inv'7 e1 /\ inv'7 e2 /\ inv'9 f /\ inv'8 b /\ inv'0 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 f.final (e2)
  
  use C05Map_Map_Type as C05Map_Map_Type
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate inv'4 (_x : borrowed i)
  
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [%#span11] forall iter : borrowed i, func : f . inv'4 iter /\ inv'1 func
     -> completed'1 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  use C05Map_Map_Type as Map'0
  
  predicate invariant'6 [#"../05_map.rs" 131 4 131 30] (self : Map'0.t_map i b f) =
    [%#span12] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  
  predicate inv'6 (_x : Map'0.t_map i b f)
  
  axiom inv'6 : forall x : Map'0.t_map i b f . inv'6 x
  = (invariant'6 x
  /\ match x with
    | Map'0.C_Map iter func -> true
    end)
  
  predicate resolve'1 (self : f)
  
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([%#span13] inv'1 self)
   -> ([%#span14] inv'11 args)
   -> ([%#span15] inv'8 res)
   -> ([%#span16] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'9 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'1 s.final))
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span17] unnest'0 self b)
   -> ([%#span18] unnest'0 b c)
   -> ([%#span19] inv'1 self)  -> ([%#span20] inv'1 b)  -> ([%#span21] inv'1 c)  -> ([%#span22] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span23] inv'1 self)  -> ([%#span24] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([%#span25] postcondition_mut'0 self args res)
   -> ([%#span26] inv'9 self)
   -> ([%#span27] inv'11 args)  -> ([%#span28] inv'8 res)  -> ([%#span29] unnest'0 self.current self.final)
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'5 (self : Option'0.t_option item'0) =
    [%#span7] true
  
  predicate inv'5 (_x : Option'0.t_option item'0)
  
  axiom inv'5 : forall x : Option'0.t_option item'0 . inv'5 x = true
  
  predicate invariant'4 (self : borrowed i) =
    [%#span8] inv'0 self.current /\ inv'0 self.final
  
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  
  predicate invariant'3 (self : Option'0.t_option b) =
    [%#span7] true
  
  predicate inv'3 (_x : Option'0.t_option b)
  
  axiom inv'3 : forall x : Option'0.t_option b . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (Map'0.t_map i b f)) =
    [%#span8] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'2 (_x : borrowed (Map'0.t_map i b f))
  
  axiom inv'2 : forall x : borrowed (Map'0.t_map i b f) . inv'2 x = invariant'2 x
  
  predicate invariant'1 (self : f)
  
  axiom inv'1 : forall x : f . inv'1 x = true
  
  use seq.Seq
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span30] produces'0 a ab b)
   -> ([%#span31] produces'0 b bc c)
   -> ([%#span32] inv'0 a)
   -> ([%#span33] inv'10 ab)
   -> ([%#span34] inv'0 b)
   -> ([%#span35] inv'10 bc)  -> ([%#span36] inv'0 c)  -> ([%#span37] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span38] inv'0 self)
   -> ([%#span39] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  
  predicate invariant'0 (self : i)
  
  axiom inv'0 : forall x : i . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : Map'0.t_map i b f) (visited : Seq.seq b) (succ : Map'0.t_map i b f)
    
   =
    [%#span40] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'10 s
    /\ Seq.length s = Seq.length visited
    /\ produces'0 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'12 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
      (Seq.get fs 0).current = C05Map_Map_Type.map_func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C05Map_Map_Type.map_func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  
  use seq.Seq
  
  predicate produces_one'0 [#"../05_map.rs" 117 4 117 57] (self : Map'0.t_map i b f) (visited : b) (succ : Map'0.t_map i b f)
    
   =
    [%#span45] exists f : borrowed f . inv'9 f
    /\ f.current = C05Map_Map_Type.map_func self
    /\ f.final = C05Map_Map_Type.map_func succ
    /\ (exists e : item'0 . inv'7 e
    /\ produces'0 (C05Map_Map_Type.map_iter self) (Seq.singleton e) (C05Map_Map_Type.map_iter succ)
    /\ precondition'0 f.current (e) /\ postcondition_mut'0 f (e) visited)
  
  axiom produces_one'0_spec : forall self : Map'0.t_map i b f, visited : b, succ : Map'0.t_map i b f . ([%#span41] inv'6 self)
   -> ([%#span42] inv'8 visited)
   -> ([%#span43] inv'6 succ)
   -> ([%#span44] produces_one'0 self visited succ = produces'1 self (Seq.singleton visited) succ)
  
  predicate completed'0 [#"../05_map.rs" 22 4 22 35] (self : borrowed (Map'0.t_map i b f)) =
    [%#span46] completed'1 (Borrow.borrow_logic (C05Map_Map_Type.map_iter self.current) (C05Map_Map_Type.map_iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C05Map_Map_Type.map_func self.current = C05Map_Map_Type.map_func self.final
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed (Map'0.t_map i b f)) =
    [%#span47] self.final = self.current
  
  let rec call_mut'0 (self:borrowed f) (args:item'0) (return'  (ret:b))= {[@expl:precondition] [%#span50] inv'11 args}
    {[@expl:precondition] [%#span49] inv'9 self}
    {[@expl:precondition] [%#span48] precondition'0 self.current args}
    any
    [ return' (result:b)-> {[%#span52] inv'8 result}
      {[%#span51] postcondition_mut'0 self args result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  function produces_one_invariant'0 [#"../05_map.rs" 107 4 107 73] (self : Map'0.t_map i b f) (e : item'0) (r : b) (f : borrowed f) (iter : i) : ()
    
  
  axiom produces_one_invariant'0_spec : forall self : Map'0.t_map i b f, e : item'0, r : b, f : borrowed f, iter : i . ([%#span53] produces'0 (C05Map_Map_Type.map_iter self) (Seq.singleton e) iter)
   -> ([%#span54] f.current = C05Map_Map_Type.map_func self)
   -> ([%#span55] postcondition_mut'0 f (e) r)
   -> ([%#span56] inv'6 self)
   -> ([%#span57] inv'7 e)
   -> ([%#span58] inv'8 r)
   -> ([%#span59] inv'9 f)
   -> ([%#span60] inv'0 iter)
   -> ([%#span62] next_precondition'0 iter f.final) && ([%#span61] preservation'0 iter f.final)
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_option item'0))= {[@expl:precondition] [%#span64] inv'4 self}
    any
    [ return' (result:Option'0.t_option item'0)-> {[%#span66] inv'5 result}
      {[%#span65] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  let rec next (self:borrowed (Map'0.t_map i b f)) (return'  (ret:Option'0.t_option b))= {[%#s05_map2] inv'2 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Map'0.t_map <i> <b> <f> {self.current}
          (fun (riter'0:i) (rfunc'0:f) ->
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_4 <- _ret' ] 
                Map'0.t_map <i> <b> <f> {self.current}
                  (fun (l_iter'0:i) (l_func'0:f) ->
                     [ &self <- { self with current = Map'0.C_Map _4.final l_func'0 ; } ] 
                    s1)))
      | s1 = -{inv'0 _4.final}- s2
      | s2 = next'0 {_4} (fun (_ret':Option'0.t_option item'0) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = any [ br0 -> {_3 = Option'0.C_None } (! bb4) | br1 (a:item'0)-> {_3 = Option'0.C_Some a} (! bb3) ] 
    | bb3 = bb5
    | bb5 = s0
      [ s0 = Option'0.some <item'0> {_3} (fun (r0'0:item'0) ->  [ &v <- r0'0 ] s1)
      | s1 = {[@expl:assertion] [%#s05_map0] precondition'0 (C05Map_Map_Type.map_func self.current) (v)} s2
      | s2 = bb6 ]
      
    | bb6 = s0 [ s0 =  [ &_9 <- [%#s05_map1] Snapshot.new () ] s1 | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = Map'0.t_map <i> <b> <f> {self.current}
          (fun (riter'0:i) (rfunc'0:f) ->
            Borrow.borrow_final <f> {rfunc'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed f) ->
                 [ &_12 <- _ret' ] 
                Map'0.t_map <i> <b> <f> {self.current}
                  (fun (l_iter'0:i) (l_func'0:f) ->
                     [ &self <- { self with current = Map'0.C_Map l_iter'0 _12.final ; } ] 
                    s1)))
      | s1 = -{inv'1 _12.final}- s2
      | s2 =  [ &_13 <- (v) ] s3
      | s3 = call_mut'0 {_12} {_13} (fun (_ret':b) ->  [ &_11 <- _ret' ] s4)
      | s4 = bb8 ]
      
    | bb8 = s0 [ s0 = {[@expl:type invariant] inv'2 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb9 ] 
    | bb9 = s0 [ s0 =  [ &_0 <- Option'0.C_Some _11 ] s1 | s1 = bb10 ] 
    | bb10 = bb11
    | bb11 = bb12
    | bb4 = s0
      [ s0 = {[@expl:type invariant] inv'2 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 =  [ &_0 <- Option'0.C_None ] s3
      | s3 = bb12 ]
      
    | bb12 = bb13
    | bb13 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option b = any_l ()
    | & self : borrowed (Map'0.t_map i b f) = self
    | & _3 : Option'0.t_option item'0 = any_l ()
    | & _4 : borrowed i = any_l ()
    | & v : item'0 = any_l ()
    | & _9 : Snapshot.snap_ty () = any_l ()
    | & _11 : b = any_l ()
    | & _12 : borrowed f = any_l ()
    | & _13 : item'0 = any_l () ]
    
    [ return' (result:Option'0.t_option b)-> {[@expl:postcondition] [%#s05_map4] inv'3 result}
      {[@expl:postcondition] [%#s05_map3] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces_one'0 self.current v self.final
        end}
      (! return' {result}) ]
    
end
module C05Map_Map
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "../05_map.rs" 140 0 140 105
  
  let%span s05_map1 = "../05_map.rs" 141 11 141 41
  
  let%span s05_map2 = "../05_map.rs" 142 11 142 51
  
  let%span s05_map3 = "../05_map.rs" 144 51 144 55
  
  let%span s05_map4 = "../05_map.rs" 144 60 144 64
  
  let%span s05_map5 = "../05_map.rs" 143 10 143 38
  
  let%span s05_map6 = "../05_map.rs" 144 72 144 84
  
  let%span span7 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span26 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span27 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span28 = "../05_map.rs" 75 8 77 9
  
  let%span span29 = "../05_map.rs" 82 8 89 9
  
  let%span span30 = "../05_map.rs" 94 8 98 9
  
  let%span span31 = "../05_map.rs" 133 12 135 57
  
  let%span span32 = "../common.rs" 18 15 18 32
  
  let%span span33 = "../common.rs" 19 15 19 32
  
  let%span span34 = "../common.rs" 21 22 21 23
  
  let%span span35 = "../common.rs" 21 31 21 33
  
  let%span span36 = "../common.rs" 21 52 21 53
  
  let%span span37 = "../common.rs" 21 61 21 63
  
  let%span span38 = "../common.rs" 21 82 21 83
  
  let%span span39 = "../common.rs" 20 14 20 42
  
  let%span span40 = "../common.rs" 15 21 15 25
  
  let%span span41 = "../common.rs" 14 14 14 45
  
  type item'0
  
  predicate inv'0 (_x : item'0)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'9 (self : item'0) =
    [%#span7] inv'0 self
  
  predicate inv'9 (_x : item'0)
  
  axiom inv'9 : forall x : item'0 . inv'9 x = true
  
  predicate invariant'8 (self : item'0) =
    [%#span8] true
  
  predicate inv'8 (_x : item'0)
  
  axiom inv'8 : forall x : item'0 . inv'8 x = true
  
  predicate resolve'0 (self : f)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  
  predicate inv'6 (_x : borrowed f)
  
  predicate postcondition_once'0 (self : f) (_2 : item'0) (_3 : b)
  
  predicate inv'7 (_x : b)
  
  predicate inv'2 (_x : f)
  
  function fn_mut_once'0 (self : f) (args : item'0) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : item'0, res : b . ([%#span9] inv'2 self)
   -> ([%#span10] inv'8 args)
   -> ([%#span11] inv'7 res)
   -> ([%#span12] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'6 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span13] unnest'0 self b)
   -> ([%#span14] unnest'0 b c)
   -> ([%#span15] inv'2 self)  -> ([%#span16] inv'2 b)  -> ([%#span17] inv'2 c)  -> ([%#span18] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span19] inv'2 self)  -> ([%#span20] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : item'0) (res : b) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : item'0, res : b . ([%#span21] postcondition_mut'0 self args res)
   -> ([%#span22] inv'6 self)
   -> ([%#span23] inv'8 args)  -> ([%#span24] inv'7 res)  -> ([%#span25] unnest'0 self.current self.final)
  
  predicate invariant'7 (self : b)
  
  axiom inv'7 : forall x : b . inv'7 x = true
  
  predicate invariant'6 (self : borrowed f) =
    [%#span26] inv'2 self.current /\ inv'2 self.final
  
  axiom inv'6 : forall x : borrowed f . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq item'0) =
    [%#span27] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'5 (_x : Seq.seq item'0)
  
  axiom inv'5 : forall x : Seq.seq item'0 . inv'5 x = true
  
  predicate inv'1 (_x : i)
  
  predicate invariant'4 (self : borrowed i) =
    [%#span26] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'4 (_x : borrowed i)
  
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  
  predicate precondition'0 (self : f) (_2 : item'0)
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [%#span28] forall e : item'0, i : i . inv'0 e /\ inv'1 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  use seq.Seq
  
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [%#span29] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'5 s
    /\ inv'0 e1 /\ inv'0 e2 /\ inv'6 f /\ inv'7 b /\ inv'1 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 f.final (e2)
  
  use C05Map_Map_Type as C05Map_Map_Type
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [%#span30] forall iter : borrowed i, func : f . inv'4 iter /\ inv'2 func
     -> completed'0 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  use C05Map_Map_Type as Map'0
  
  predicate invariant'3 [#"../05_map.rs" 131 4 131 30] (self : Map'0.t_map i b f) =
    [%#span31] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  
  predicate inv'3 (_x : Map'0.t_map i b f)
  
  axiom inv'3 : forall x : Map'0.t_map i b f . inv'3 x
  = (invariant'3 x
  /\ match x with
    | Map'0.C_Map iter func -> true
    end)
  
  predicate invariant'2 (self : f)
  
  axiom inv'2 : forall x : f . inv'2 x = true
  
  predicate invariant'1 (self : i)
  
  axiom inv'1 : forall x : i . inv'1 x = true
  
  predicate invariant'0 (self : item'0)
  
  axiom inv'0 : forall x : item'0 . inv'0 x = true
  
  use seq.Seq
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span32] produces'0 a ab b)
   -> ([%#span33] produces'0 b bc c)
   -> ([%#span34] inv'1 a)
   -> ([%#span35] inv'5 ab)
   -> ([%#span36] inv'1 b)
   -> ([%#span37] inv'5 bc)  -> ([%#span38] inv'1 c)  -> ([%#span39] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span40] inv'1 self)
   -> ([%#span41] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  
  use prelude.prelude.Intrinsic
  
  let rec map (iter:i) (func:f) (return'  (ret:Map'0.t_map i b f))= {[%#s05_map4] inv'2 func}
    {[%#s05_map3] inv'1 iter}
    {[%#s05_map2] preservation'0 iter func}
    {[%#s05_map1] reinitialize'0 ()}
    {[%#s05_map0] forall e : item'0, i2 : i . inv'0 e /\ inv'1 i2
     -> produces'0 iter (Seq.singleton e) i2  -> precondition'0 func (e)}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = s0 [ s0 =  [ &_0 <- Map'0.C_Map iter func ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = return' {_0} ]
    ) [ & _0 : Map'0.t_map i b f = any_l () | & iter : i = iter | & func : f = func ] 
    [ return' (result:Map'0.t_map i b f)-> {[@expl:postcondition] [%#s05_map6] inv'3 result}
      {[@expl:postcondition] [%#s05_map5] result = Map'0.C_Map iter func}
      (! return' {result}) ]
    
end
module C05Map_Impl0
  type i
  
  type b
  
  type f
  
  let%span s05_map0 = "../05_map.rs" 29 4 29 26
  
  let%span s05_map1 = "../05_map.rs" 60 4 60 44
  
  let%span s05_map2 = "../05_map.rs" 36 4 36 90
  
  let%span span3 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../05_map.rs" 75 8 77 9
  
  let%span span8 = "../05_map.rs" 82 8 89 9
  
  let%span span9 = "../05_map.rs" 94 8 98 9
  
  let%span span10 = "../05_map.rs" 133 12 135 57
  
  let%span span11 = "../05_map.rs" 42 8 53 9
  
  let%span span12 = "../05_map.rs" 117 20 117 24
  
  let%span span13 = "../05_map.rs" 117 26 117 33
  
  let%span span14 = "../05_map.rs" 117 38 117 42
  
  let%span span15 = "../05_map.rs" 116 14 116 68
  
  let%span span16 = "../05_map.rs" 118 8 123 9
  
  let%span span17 = "../05_map.rs" 23 8 23 75
  
  use prelude.prelude.Borrow
  
  predicate inv'7 (_x : borrowed f)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'14 (self : borrowed f) =
    [%#span3] inv'7 self
  
  predicate inv'14 (_x : borrowed f)
  
  axiom inv'14 : forall x : borrowed f . inv'14 x = true
  
  type item'0
  
  predicate inv'8 (_x : item'0)
  
  predicate invariant'13 (self : item'0) =
    [%#span3] inv'8 self
  
  predicate inv'13 (_x : item'0)
  
  axiom inv'13 : forall x : item'0 . inv'13 x = true
  
  predicate inv'9 (_x : i)
  
  predicate invariant'12 (self : borrowed i) =
    [%#span4] inv'9 self.current /\ inv'9 self.final
  
  predicate inv'12 (_x : borrowed i)
  
  axiom inv'12 : forall x : borrowed i . inv'12 x = true
  
  predicate inv'6 (_x : b)
  
  predicate invariant'11 (self : b) =
    [%#span3] inv'6 self
  
  predicate inv'11 (_x : b)
  
  axiom inv'11 : forall x : b . inv'11 x = true
  
  predicate invariant'10 (self : f)
  
  predicate inv'10 (_x : f)
  
  axiom inv'10 : forall x : f . inv'10 x = true
  
  predicate invariant'9 (self : i)
  
  axiom inv'9 : forall x : i . inv'9 x = true
  
  predicate invariant'8 (self : item'0)
  
  axiom inv'8 : forall x : item'0 . inv'8 x = true
  
  predicate invariant'7 (self : borrowed f) =
    [%#span4] inv'10 self.current /\ inv'10 self.final
  
  axiom inv'7 : forall x : borrowed f . inv'7 x = true
  
  predicate invariant'6 (self : b)
  
  axiom inv'6 : forall x : b . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq (borrowed f)) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'14 (Seq.get self i)
  
  predicate inv'5 (_x : Seq.seq (borrowed f))
  
  axiom inv'5 : forall x : Seq.seq (borrowed f) . inv'5 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq item'0) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'13 (Seq.get self i)
  
  predicate inv'4 (_x : Seq.seq item'0)
  
  axiom inv'4 : forall x : Seq.seq item'0 . inv'4 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq b) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'11 (Seq.get self i)
  
  predicate inv'3 (_x : Seq.seq b)
  
  axiom inv'3 : forall x : Seq.seq b . inv'3 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'2 (self : Option'0.t_option b) =
    [%#span6] true
  
  predicate inv'2 (_x : Option'0.t_option b)
  
  axiom inv'2 : forall x : Option'0.t_option b . inv'2 x = true
  
  use C05Map_Map_Type as Map'0
  
  predicate inv'0 (_x : Map'0.t_map i b f)
  
  predicate invariant'1 (self : borrowed (Map'0.t_map i b f)) =
    [%#span4] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_x : borrowed (Map'0.t_map i b f))
  
  axiom inv'1 : forall x : borrowed (Map'0.t_map i b f) . inv'1 x = invariant'1 x
  
  predicate precondition'0 (self : f) (_2 : item'0)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../05_map.rs" 74 4 74 50] (iter : i) (func : f) =
    [%#span7] forall e : item'0, i : i . inv'8 e /\ inv'9 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : item'0) (_3 : b)
  
  use seq.Seq
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate preservation'0 [#"../05_map.rs" 81 4 81 45] (iter : i) (func : f) =
    [%#span8] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'4 s
    /\ inv'8 e1 /\ inv'8 e2 /\ inv'7 f /\ inv'6 b /\ inv'9 i
     -> unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1)  -> postcondition_mut'0 f (e1) b  -> precondition'0 f.final (e2)
  
  use C05Map_Map_Type as C05Map_Map_Type
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../05_map.rs" 93 4 93 29] (_1 : ()) =
    [%#span9] forall iter : borrowed i, func : f . inv'12 iter /\ inv'10 func
     -> completed'1 iter  -> next_precondition'0 iter.final func /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"../05_map.rs" 131 4 131 30] (self : Map'0.t_map i b f) =
    [%#span10] reinitialize'0 ()
    /\ preservation'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
    /\ next_precondition'0 (C05Map_Map_Type.map_iter self) (C05Map_Map_Type.map_func self)
  
  axiom inv'0 : forall x : Map'0.t_map i b f . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func -> true
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"../05_map.rs" 41 4 41 67] (self : Map'0.t_map i b f) (visited : Seq.seq b) (succ : Map'0.t_map i b f)
    
   =
    [%#span11] unnest'0 (C05Map_Map_Type.map_func self) (C05Map_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'4 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C05Map_Map_Type.map_iter self) s (C05Map_Map_Type.map_iter succ)
    /\ (exists fs : Seq.seq (borrowed f) . inv'5 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      C05Map_Map_Type.map_func self = C05Map_Map_Type.map_func succ
    else
      (Seq.get fs 0).current = C05Map_Map_Type.map_func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = C05Map_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C05Map_Map_Type.map_func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i)
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i) (Seq.get visited i))))
  
  predicate produces_one'0 [#"../05_map.rs" 117 4 117 57] (self : Map'0.t_map i b f) (visited : b) (succ : Map'0.t_map i b f)
    
   =
    [%#span16] exists f : borrowed f . inv'7 f
    /\ f.current = C05Map_Map_Type.map_func self
    /\ f.final = C05Map_Map_Type.map_func succ
    /\ (exists e : item'0 . inv'8 e
    /\ produces'1 (C05Map_Map_Type.map_iter self) (Seq.singleton e) (C05Map_Map_Type.map_iter succ)
    /\ precondition'0 f.current (e) /\ postcondition_mut'0 f (e) visited)
  
  axiom produces_one'0_spec : forall self : Map'0.t_map i b f, visited : b, succ : Map'0.t_map i b f . ([%#span12] inv'0 self)
   -> ([%#span13] inv'6 visited)
   -> ([%#span14] inv'0 succ)
   -> ([%#span15] produces_one'0 self visited succ = produces'0 self (Seq.singleton visited) succ)
  
  predicate completed'0 [#"../05_map.rs" 22 4 22 35] (self : borrowed (Map'0.t_map i b f)) =
    [%#span17] completed'1 (Borrow.borrow_logic (C05Map_Map_Type.map_iter self.current) (C05Map_Map_Type.map_iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C05Map_Map_Type.map_func self.current = C05Map_Map_Type.map_func self.final
  
  use seq.Seq
  
  use seq.Seq
  
  goal produces_refl_refn : [%#s05_map0] forall self : Map'0.t_map i b f . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq b) self
   -> produces'0 self (Seq.empty  : Seq.seq b) self)
  
  goal next_refn : [%#s05_map1] forall self : borrowed (Map'0.t_map i b f) . inv'1 self
   -> inv'1 self
  /\ (forall result : Option'0.t_option b . inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces_one'0 self.current v self.final
    end
   -> inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_trans_refn : [%#s05_map2] forall a : Map'0.t_map i b f . forall ab : Seq.seq b . forall b : Map'0.t_map i b f . forall bc : Seq.seq b . forall c : Map'0.t_map i b f . inv'0 c
  /\ inv'3 bc /\ inv'0 b /\ inv'3 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'0 c
  /\ inv'3 bc
  /\ inv'0 b
  /\ inv'3 ab
  /\ inv'0 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
module C05Map_Impl2
  type i
  
  type b
  
  type f
end
