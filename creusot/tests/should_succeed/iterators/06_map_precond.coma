
module C06MapPrecond_Map_Type
  type item'0
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  type t_map 'i 'b 'f 'proj0 =
    | C_Map 'i 'f (Snapshot.snap_ty (Seq.seq 'proj0))
  
  function any_l (_ : 'b) : 'a
  
  let rec t_map < 'i > < 'b > < 'f > < 'proj0 > (input:t_map 'i 'b 'f 'proj0) (ret  (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'proj0)))= any
    [ good (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'proj0))-> {C_Map iter func produced = input}
      (! ret {iter} {func} {produced})
    | bad (iter:'i) (func:'f) (produced:Snapshot.snap_ty (Seq.seq 'proj0))-> {C_Map iter func produced <> input}
      {false}
      any ]
    
  
  function map_produced (self : t_map 'i 'b 'f 'proj0) : Snapshot.snap_ty (Seq.seq 'proj0) =
    match self with
      | C_Map _ _ a -> a
      end
  
  function map_iter (self : t_map 'i 'b 'f 'proj0) : 'i =
    match self with
      | C_Map a _ _ -> a
      end
  
  function map_func (self : t_map 'i 'b 'f 'proj0) : 'f =
    match self with
      | C_Map _ a _ -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_box 't 'a =
    | C_Box (Unique'0.t_unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C06MapPrecond_Impl1_PreservationInv_Impl
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "../06_map_precond.rs" 93 24 93 28
  
  let%span s06_map_precond1 = "../06_map_precond.rs" 93 33 93 37
  
  let%span s06_map_precond2 = "../06_map_precond.rs" 93 42 93 50
  
  let%span s06_map_precond3 = "../06_map_precond.rs" 92 4 92 83
  
  let%span s06_map_precond4 = "../06_map_precond.rs" 94 8 101 9
  
  let%span span5 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span24 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span25 = "../common.rs" 18 15 18 32
  
  let%span span26 = "../common.rs" 19 15 19 32
  
  let%span span27 = "../common.rs" 21 22 21 23
  
  let%span span28 = "../common.rs" 21 31 21 33
  
  let%span span29 = "../common.rs" 21 52 21 53
  
  let%span span30 = "../common.rs" 21 61 21 63
  
  let%span span31 = "../common.rs" 21 82 21 83
  
  let%span span32 = "../common.rs" 20 14 20 42
  
  let%span span33 = "../common.rs" 15 21 15 25
  
  let%span span34 = "../common.rs" 14 14 14 45
  
  let%span span35 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span36 = "../06_map_precond.rs" 106 8 113 9
  
  type item'0
  
  predicate inv'3 (_x : item'0)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'7 (self : item'0) =
    [%#span5] inv'3 self
  
  predicate inv'7 (_x : item'0)
  
  axiom inv'7 : forall x : item'0 . inv'7 x = true
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate invariant'6 (self : (item'0, Snapshot.snap_ty (Seq.seq item'0))) =
    [%#span6] true
  
  predicate inv'6 (_x : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  axiom inv'6 : forall x : (item'0, Snapshot.snap_ty (Seq.seq item'0)) . inv'6 x = true
  
  predicate resolve'0 (self : f)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  predicate inv'4 (_x : borrowed f)
  
  predicate postcondition_once'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  predicate inv'5 (_x : b)
  
  predicate inv'1 (_x : f)
  
  function fn_mut_once'0 (self : f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([%#span7] inv'1 self)
   -> ([%#span8] inv'6 args)
   -> ([%#span9] inv'5 res)
   -> ([%#span10] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'4 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span11] unnest'0 self b)
   -> ([%#span12] unnest'0 b c)
   -> ([%#span13] inv'1 self)  -> ([%#span14] inv'1 b)  -> ([%#span15] inv'1 c)  -> ([%#span16] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span17] inv'1 self)  -> ([%#span18] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([%#span19] postcondition_mut'0 self args res)
   -> ([%#span20] inv'4 self)
   -> ([%#span21] inv'6 args)  -> ([%#span22] inv'5 res)  -> ([%#span23] unnest'0 self.current self.final)
  
  predicate invariant'5 (self : b)
  
  axiom inv'5 : forall x : b . inv'5 x = true
  
  predicate invariant'4 (self : borrowed f) =
    [%#span24] inv'1 self.current /\ inv'1 self.final
  
  axiom inv'4 : forall x : borrowed f . inv'4 x = true
  
  predicate invariant'3 (self : item'0)
  
  axiom inv'3 : forall x : item'0 . inv'3 x = true
  
  use seq.Seq
  
  predicate inv'2 (_x : Seq.seq item'0)
  
  predicate inv'0 (_x : i)
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span25] produces'0 a ab b)
   -> ([%#span26] produces'0 b bc c)
   -> ([%#span27] inv'0 a)
   -> ([%#span28] inv'2 ab)
   -> ([%#span29] inv'0 b)
   -> ([%#span30] inv'2 bc)  -> ([%#span31] inv'0 c)  -> ([%#span32] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span33] inv'0 self)
   -> ([%#span34] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'2 (self : Seq.seq item'0) =
    [%#span35] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  axiom inv'2 : forall x : Seq.seq item'0 . inv'2 x = true
  
  predicate invariant'1 (self : f)
  
  axiom inv'1 : forall x : f . inv'1 x = true
  
  predicate invariant'0 (self : i)
  
  axiom inv'0 : forall x : i . inv'0 x = true
  
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [%#span36] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'2 s
    /\ inv'3 e1 /\ inv'3 e2 /\ inv'4 f /\ inv'5 b /\ inv'0 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  constant iter  : i
  
  constant func  : f
  
  constant produced  : Seq.seq item'0
  
  predicate preservation_inv [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0)
  
  goal vc_preservation_inv : ([%#s06_map_precond2] inv'2 produced)
   -> ([%#s06_map_precond1] inv'1 func)
   -> ([%#s06_map_precond0] inv'0 iter)
   -> ([%#s06_map_precond3] produced = (Seq.empty  : Seq.seq item'0)
   -> ([%#s06_map_precond4] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'2 s
  /\ inv'3 e1 /\ inv'3 e2 /\ inv'4 f /\ inv'5 b /\ inv'0 i
   -> unnest'0 func f.current
   -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
   -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
   -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
   -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1)))
  = preservation'0 iter func)
end
module C06MapPrecond_Impl0_ProducesRefl_Impl
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "../06_map_precond.rs" 31 21 31 25
  
  let%span s06_map_precond1 = "../06_map_precond.rs" 30 14 30 45
  
  let%span span2 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span23 = "../common.rs" 18 15 18 32
  
  let%span span24 = "../common.rs" 19 15 19 32
  
  let%span span25 = "../common.rs" 21 22 21 23
  
  let%span span26 = "../common.rs" 21 31 21 33
  
  let%span span27 = "../common.rs" 21 52 21 53
  
  let%span span28 = "../common.rs" 21 61 21 63
  
  let%span span29 = "../common.rs" 21 82 21 83
  
  let%span span30 = "../common.rs" 20 14 20 42
  
  let%span span31 = "../common.rs" 15 21 15 25
  
  let%span span32 = "../common.rs" 14 14 14 45
  
  let%span span33 = "../06_map_precond.rs" 84 8 88 9
  
  let%span span34 = "../06_map_precond.rs" 106 8 113 9
  
  let%span span35 = "../06_map_precond.rs" 93 24 93 28
  
  let%span span36 = "../06_map_precond.rs" 93 33 93 37
  
  let%span span37 = "../06_map_precond.rs" 93 42 93 50
  
  let%span span38 = "../06_map_precond.rs" 92 4 92 83
  
  let%span span39 = "../06_map_precond.rs" 94 8 101 9
  
  let%span span40 = "../06_map_precond.rs" 118 8 123 9
  
  let%span span41 = "../06_map_precond.rs" 159 12 161 73
  
  let%span span42 = "../06_map_precond.rs" 44 8 56 9
  
  use prelude.prelude.Borrow
  
  predicate inv'6 (_x : borrowed f)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'12 (self : borrowed f) =
    [%#span2] inv'6 self
  
  predicate inv'12 (_x : borrowed f)
  
  axiom inv'12 : forall x : borrowed f . inv'12 x = true
  
  type item'0
  
  predicate inv'10 (_x : item'0)
  
  predicate invariant'11 (self : item'0) =
    [%#span2] inv'10 self
  
  predicate inv'11 (_x : item'0)
  
  axiom inv'11 : forall x : item'0 . inv'11 x = true
  
  predicate invariant'10 (self : item'0)
  
  axiom inv'10 : forall x : item'0 . inv'10 x = true
  
  predicate inv'3 (_x : i)
  
  predicate invariant'9 (self : borrowed i) =
    [%#span3] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'9 (_x : borrowed i)
  
  axiom inv'9 : forall x : borrowed i . inv'9 x = true
  
  predicate invariant'8 (self : b)
  
  predicate inv'8 (_x : b)
  
  axiom inv'8 : forall x : b . inv'8 x = true
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate invariant'7 (self : (item'0, Snapshot.snap_ty (Seq.seq item'0))) =
    [%#span4] true
  
  predicate inv'7 (_x : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  axiom inv'7 : forall x : (item'0, Snapshot.snap_ty (Seq.seq item'0)) . inv'7 x = true
  
  predicate inv'4 (_x : f)
  
  predicate invariant'6 (self : borrowed f) =
    [%#span3] inv'4 self.current /\ inv'4 self.final
  
  axiom inv'6 : forall x : borrowed f . inv'6 x = true
  
  predicate invariant'5 (self : Snapshot.snap_ty (Seq.seq item'0)) =
    [%#span4] true
  
  predicate inv'5 (_x : Snapshot.snap_ty (Seq.seq item'0))
  
  axiom inv'5 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'5 x = true
  
  predicate invariant'4 (self : f)
  
  axiom inv'4 : forall x : f . inv'4 x = true
  
  predicate invariant'3 (self : i)
  
  axiom inv'3 : forall x : i . inv'3 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'2 (self : Seq.seq (borrowed f)) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'12 (Seq.get self i)
  
  predicate inv'2 (_x : Seq.seq (borrowed f))
  
  axiom inv'2 : forall x : Seq.seq (borrowed f) . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq item'0) =
    [%#span5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'11 (Seq.get self i)
  
  predicate inv'1 (_x : Seq.seq item'0)
  
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  
  predicate resolve'0 (self : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([%#span6] inv'4 self)
   -> ([%#span7] inv'7 args)
   -> ([%#span8] inv'8 res)
   -> ([%#span9] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'6 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span10] unnest'0 self b)
   -> ([%#span11] unnest'0 b c)
   -> ([%#span12] inv'4 self)  -> ([%#span13] inv'4 b)  -> ([%#span14] inv'4 c)  -> ([%#span15] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span16] inv'4 self)  -> ([%#span17] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([%#span18] postcondition_mut'0 self args res)
   -> ([%#span19] inv'6 self)
   -> ([%#span20] inv'7 args)  -> ([%#span21] inv'8 res)  -> ([%#span22] unnest'0 self.current self.final)
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span23] produces'1 a ab b)
   -> ([%#span24] produces'1 b bc c)
   -> ([%#span25] inv'3 a)
   -> ([%#span26] inv'1 ab)
   -> ([%#span27] inv'3 b)
   -> ([%#span28] inv'1 bc)  -> ([%#span29] inv'3 c)  -> ([%#span30] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span31] inv'3 self)
   -> ([%#span32] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [%#span33] forall e : item'0, i : i . inv'10 e /\ inv'3 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [%#span34] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'1 s
    /\ inv'10 e1 /\ inv'10 e2 /\ inv'6 f /\ inv'8 b /\ inv'3 i
     -> unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [%#span39] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'1 s
    /\ inv'10 e1 /\ inv'10 e2 /\ inv'6 f /\ inv'8 b /\ inv'3 i
     -> unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq item'0 . ([%#span35] inv'3 iter)
   -> ([%#span36] inv'4 func)
   -> ([%#span37] inv'1 produced)
   -> ([%#span38] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  
  use prelude.prelude.Snapshot
  
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [%#span40] forall iter : borrowed i, func : f . inv'9 iter /\ inv'4 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq item'0) /\ preservation'0 iter.final func
  
  use C06MapPrecond_Map_Type as Map'0
  
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : Map'0.t_map i b f item'0) =
    [%#span41] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  
  predicate inv'0 (_x : Map'0.t_map i b f item'0)
  
  axiom inv'0 : forall x : Map'0.t_map i b f item'0 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> true
    end)
  
  use seq.Seq
  
  use prelude.seq_ext.SeqExt
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : Map'0.t_map i b f item'0) (visited : Seq.seq b) (succ : Map'0.t_map i b f item'0)
    
   =
    [%#span42] unnest'0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'1 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) s
    /\ (exists fs : Seq.seq (borrowed f) . inv'2 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
      (Seq.get fs 0).current = C06MapPrecond_Map_Type.map_func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = C06MapPrecond_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C06MapPrecond_Map_Type.map_func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  
  use seq.Seq
  
  constant self  : Map'0.t_map i b f item'0
  
  function produces_refl [#"../06_map_precond.rs" 31 4 31 26] (self : Map'0.t_map i b f item'0) : ()
  
  goal vc_produces_refl : ([%#s06_map_precond0] inv'0 self)
   -> ([%#s06_map_precond1] produces'0 self (Seq.empty  : Seq.seq b) self)
end
module C06MapPrecond_Impl0_ProducesTrans_Impl
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "../06_map_precond.rs" 35 15 35 32
  
  let%span s06_map_precond1 = "../06_map_precond.rs" 36 15 36 32
  
  let%span s06_map_precond2 = "../06_map_precond.rs" 38 22 38 23
  
  let%span s06_map_precond3 = "../06_map_precond.rs" 38 31 38 33
  
  let%span s06_map_precond4 = "../06_map_precond.rs" 38 52 38 53
  
  let%span s06_map_precond5 = "../06_map_precond.rs" 38 61 38 63
  
  let%span s06_map_precond6 = "../06_map_precond.rs" 38 82 38 83
  
  let%span s06_map_precond7 = "../06_map_precond.rs" 37 14 37 42
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span9 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span10 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span11 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span26 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span29 = "../common.rs" 18 15 18 32
  
  let%span span30 = "../common.rs" 19 15 19 32
  
  let%span span31 = "../common.rs" 21 22 21 23
  
  let%span span32 = "../common.rs" 21 31 21 33
  
  let%span span33 = "../common.rs" 21 52 21 53
  
  let%span span34 = "../common.rs" 21 61 21 63
  
  let%span span35 = "../common.rs" 21 82 21 83
  
  let%span span36 = "../common.rs" 20 14 20 42
  
  let%span span37 = "../common.rs" 15 21 15 25
  
  let%span span38 = "../common.rs" 14 14 14 45
  
  let%span span39 = "../06_map_precond.rs" 84 8 88 9
  
  let%span span40 = "../06_map_precond.rs" 106 8 113 9
  
  let%span span41 = "../06_map_precond.rs" 93 24 93 28
  
  let%span span42 = "../06_map_precond.rs" 93 33 93 37
  
  let%span span43 = "../06_map_precond.rs" 93 42 93 50
  
  let%span span44 = "../06_map_precond.rs" 92 4 92 83
  
  let%span span45 = "../06_map_precond.rs" 94 8 101 9
  
  let%span span46 = "../06_map_precond.rs" 118 8 123 9
  
  let%span span47 = "../06_map_precond.rs" 159 12 161 73
  
  let%span span48 = "../06_map_precond.rs" 44 8 56 9
  
  type item'0
  
  predicate invariant'14 (self : item'0)
  
  predicate inv'14 (_x : item'0)
  
  axiom inv'14 : forall x : item'0 . inv'14 x = true
  
  predicate inv'4 (_x : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'13 (self : borrowed i) =
    [%#span8] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'13 (_x : borrowed i)
  
  axiom inv'13 : forall x : borrowed i . inv'13 x = true
  
  predicate inv'7 (_x : borrowed f)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'12 (self : borrowed f) =
    [%#span9] inv'7 self
  
  predicate inv'12 (_x : borrowed f)
  
  axiom inv'12 : forall x : borrowed f . inv'12 x = true
  
  predicate invariant'11 (self : item'0) =
    [%#span9] inv'14 self
  
  predicate inv'11 (_x : item'0)
  
  axiom inv'11 : forall x : item'0 . inv'11 x = true
  
  predicate inv'9 (_x : b)
  
  predicate invariant'10 (self : b) =
    [%#span9] inv'9 self
  
  predicate inv'10 (_x : b)
  
  axiom inv'10 : forall x : b . inv'10 x = true
  
  predicate invariant'9 (self : b)
  
  axiom inv'9 : forall x : b . inv'9 x = true
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate invariant'8 (self : (item'0, Snapshot.snap_ty (Seq.seq item'0))) =
    [%#span10] true
  
  predicate inv'8 (_x : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  axiom inv'8 : forall x : (item'0, Snapshot.snap_ty (Seq.seq item'0)) . inv'8 x = true
  
  predicate inv'5 (_x : f)
  
  predicate invariant'7 (self : borrowed f) =
    [%#span8] inv'5 self.current /\ inv'5 self.final
  
  axiom inv'7 : forall x : borrowed f . inv'7 x = true
  
  predicate invariant'6 (self : Snapshot.snap_ty (Seq.seq item'0)) =
    [%#span10] true
  
  predicate inv'6 (_x : Snapshot.snap_ty (Seq.seq item'0))
  
  axiom inv'6 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'6 x = true
  
  predicate invariant'5 (self : f)
  
  axiom inv'5 : forall x : f . inv'5 x = true
  
  predicate invariant'4 (self : i)
  
  axiom inv'4 : forall x : i . inv'4 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'3 (self : Seq.seq (borrowed f)) =
    [%#span11] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'12 (Seq.get self i)
  
  predicate inv'3 (_x : Seq.seq (borrowed f))
  
  axiom inv'3 : forall x : Seq.seq (borrowed f) . inv'3 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq item'0) =
    [%#span11] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'11 (Seq.get self i)
  
  predicate inv'2 (_x : Seq.seq item'0)
  
  axiom inv'2 : forall x : Seq.seq item'0 . inv'2 x = true
  
  predicate resolve'0 (self : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([%#span12] inv'5 self)
   -> ([%#span13] inv'8 args)
   -> ([%#span14] inv'9 res)
   -> ([%#span15] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'7 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span16] unnest'0 self b)
   -> ([%#span17] unnest'0 b c)
   -> ([%#span18] inv'5 self)  -> ([%#span19] inv'5 b)  -> ([%#span20] inv'5 c)  -> ([%#span21] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span22] inv'5 self)  -> ([%#span23] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([%#span24] postcondition_mut'0 self args res)
   -> ([%#span25] inv'7 self)
   -> ([%#span26] inv'8 args)  -> ([%#span27] inv'9 res)  -> ([%#span28] unnest'0 self.current self.final)
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span29] produces'1 a ab b)
   -> ([%#span30] produces'1 b bc c)
   -> ([%#span31] inv'4 a)
   -> ([%#span32] inv'2 ab)
   -> ([%#span33] inv'4 b)
   -> ([%#span34] inv'2 bc)  -> ([%#span35] inv'4 c)  -> ([%#span36] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span37] inv'4 self)
   -> ([%#span38] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq b) =
    [%#span11] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  predicate inv'1 (_x : Seq.seq b)
  
  axiom inv'1 : forall x : Seq.seq b . inv'1 x = true
  
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [%#span39] forall e : item'0, i : i . inv'14 e /\ inv'4 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [%#span40] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'2 s
    /\ inv'14 e1 /\ inv'14 e2 /\ inv'7 f /\ inv'9 b /\ inv'4 i
     -> unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [%#span45] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'2 s
    /\ inv'14 e1 /\ inv'14 e2 /\ inv'7 f /\ inv'9 b /\ inv'4 i
     -> unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq item'0 . ([%#span41] inv'4 iter)
   -> ([%#span42] inv'5 func)
   -> ([%#span43] inv'2 produced)
   -> ([%#span44] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  
  use prelude.prelude.Snapshot
  
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [%#span46] forall iter : borrowed i, func : f . inv'13 iter /\ inv'5 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq item'0) /\ preservation'0 iter.final func
  
  use C06MapPrecond_Map_Type as Map'0
  
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : Map'0.t_map i b f item'0) =
    [%#span47] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  
  predicate inv'0 (_x : Map'0.t_map i b f item'0)
  
  axiom inv'0 : forall x : Map'0.t_map i b f item'0 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> true
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.seq_ext.SeqExt
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate produces'0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : Map'0.t_map i b f item'0) (visited : Seq.seq b) (succ : Map'0.t_map i b f item'0)
    
   =
    [%#span48] unnest'0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'2 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) s
    /\ (exists fs : Seq.seq (borrowed f) . inv'3 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
      (Seq.get fs 0).current = C06MapPrecond_Map_Type.map_func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = C06MapPrecond_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C06MapPrecond_Map_Type.map_func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  
  constant a  : Map'0.t_map i b f item'0
  
  constant ab  : Seq.seq b
  
  constant b  : Map'0.t_map i b f item'0
  
  constant bc  : Seq.seq b
  
  constant c  : Map'0.t_map i b f item'0
  
  function produces_trans [#"../06_map_precond.rs" 38 4 38 90] (a : Map'0.t_map i b f item'0) (ab : Seq.seq b) (b : Map'0.t_map i b f item'0) (bc : Seq.seq b) (c : Map'0.t_map i b f item'0) : ()
    
  
  goal vc_produces_trans : ([%#s06_map_precond6] inv'0 c)
   -> ([%#s06_map_precond5] inv'1 bc)
   -> ([%#s06_map_precond4] inv'0 b)
   -> ([%#s06_map_precond3] inv'1 ab)
   -> ([%#s06_map_precond2] inv'0 a)
   -> ([%#s06_map_precond1] produces'0 b bc c)
   -> ([%#s06_map_precond0] produces'0 a ab b)  -> ([%#s06_map_precond7] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C06MapPrecond_Impl1_ProducesOne_Impl
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "../06_map_precond.rs" 142 20 142 24
  
  let%span s06_map_precond1 = "../06_map_precond.rs" 142 26 142 33
  
  let%span s06_map_precond2 = "../06_map_precond.rs" 142 38 142 42
  
  let%span s06_map_precond3 = "../06_map_precond.rs" 141 14 141 68
  
  let%span s06_map_precond4 = "../06_map_precond.rs" 143 8 149 9
  
  let%span span5 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span7 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span8 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span26 = "../common.rs" 18 15 18 32
  
  let%span span27 = "../common.rs" 19 15 19 32
  
  let%span span28 = "../common.rs" 21 22 21 23
  
  let%span span29 = "../common.rs" 21 31 21 33
  
  let%span span30 = "../common.rs" 21 52 21 53
  
  let%span span31 = "../common.rs" 21 61 21 63
  
  let%span span32 = "../common.rs" 21 82 21 83
  
  let%span span33 = "../common.rs" 20 14 20 42
  
  let%span span34 = "../common.rs" 15 21 15 25
  
  let%span span35 = "../common.rs" 14 14 14 45
  
  let%span span36 = "../06_map_precond.rs" 44 8 56 9
  
  let%span span37 = "../06_map_precond.rs" 35 15 35 32
  
  let%span span38 = "../06_map_precond.rs" 36 15 36 32
  
  let%span span39 = "../06_map_precond.rs" 38 22 38 23
  
  let%span span40 = "../06_map_precond.rs" 38 31 38 33
  
  let%span span41 = "../06_map_precond.rs" 38 52 38 53
  
  let%span span42 = "../06_map_precond.rs" 38 61 38 63
  
  let%span span43 = "../06_map_precond.rs" 38 82 38 83
  
  let%span span44 = "../06_map_precond.rs" 37 14 37 42
  
  let%span span45 = "../06_map_precond.rs" 33 4 33 10
  
  let%span span46 = "../06_map_precond.rs" 31 21 31 25
  
  let%span span47 = "../06_map_precond.rs" 30 14 30 45
  
  let%span span48 = "../06_map_precond.rs" 28 4 28 10
  
  let%span span49 = "../06_map_precond.rs" 84 8 88 9
  
  let%span span50 = "../06_map_precond.rs" 106 8 113 9
  
  let%span span51 = "../06_map_precond.rs" 93 24 93 28
  
  let%span span52 = "../06_map_precond.rs" 93 33 93 37
  
  let%span span53 = "../06_map_precond.rs" 93 42 93 50
  
  let%span span54 = "../06_map_precond.rs" 92 4 92 83
  
  let%span span55 = "../06_map_precond.rs" 94 8 101 9
  
  let%span span56 = "../06_map_precond.rs" 118 8 123 9
  
  let%span span57 = "../06_map_precond.rs" 159 12 161 73
  
  predicate inv'1 (_x : b)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'14 (self : b) =
    [%#span5] inv'1 self
  
  predicate inv'14 (_x : b)
  
  axiom inv'14 : forall x : b . inv'14 x = true
  
  use prelude.prelude.Borrow
  
  predicate inv'2 (_x : borrowed f)
  
  predicate invariant'13 (self : borrowed f) =
    [%#span5] inv'2 self
  
  predicate inv'13 (_x : borrowed f)
  
  axiom inv'13 : forall x : borrowed f . inv'13 x = true
  
  type item'0
  
  predicate inv'3 (_x : item'0)
  
  predicate invariant'12 (self : item'0) =
    [%#span5] inv'3 self
  
  predicate inv'12 (_x : item'0)
  
  axiom inv'12 : forall x : item'0 . inv'12 x = true
  
  predicate inv'6 (_x : i)
  
  predicate invariant'11 (self : borrowed i) =
    [%#span6] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'11 (_x : borrowed i)
  
  axiom inv'11 : forall x : borrowed i . inv'11 x = true
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate invariant'10 (self : (item'0, Snapshot.snap_ty (Seq.seq item'0))) =
    [%#span7] true
  
  predicate inv'10 (_x : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  axiom inv'10 : forall x : (item'0, Snapshot.snap_ty (Seq.seq item'0)) . inv'10 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'9 (self : Seq.seq b) =
    [%#span8] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'14 (Seq.get self i)
  
  predicate inv'9 (_x : Seq.seq b)
  
  axiom inv'9 : forall x : Seq.seq b . inv'9 x = true
  
  predicate invariant'8 (self : Snapshot.snap_ty (Seq.seq item'0)) =
    [%#span7] true
  
  predicate inv'8 (_x : Snapshot.snap_ty (Seq.seq item'0))
  
  axiom inv'8 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'8 x = true
  
  predicate invariant'7 (self : f)
  
  predicate inv'7 (_x : f)
  
  axiom inv'7 : forall x : f . inv'7 x = true
  
  predicate invariant'6 (self : i)
  
  axiom inv'6 : forall x : i . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq (borrowed f)) =
    [%#span8] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'13 (Seq.get self i)
  
  predicate inv'5 (_x : Seq.seq (borrowed f))
  
  axiom inv'5 : forall x : Seq.seq (borrowed f) . inv'5 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq item'0) =
    [%#span8] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'12 (Seq.get self i)
  
  predicate inv'4 (_x : Seq.seq item'0)
  
  axiom inv'4 : forall x : Seq.seq item'0 . inv'4 x = true
  
  predicate resolve'0 (self : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  predicate postcondition_once'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([%#span9] inv'7 self)
   -> ([%#span10] inv'10 args)
   -> ([%#span11] inv'1 res)
   -> ([%#span12] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'2 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span13] unnest'0 self b)
   -> ([%#span14] unnest'0 b c)
   -> ([%#span15] inv'7 self)  -> ([%#span16] inv'7 b)  -> ([%#span17] inv'7 c)  -> ([%#span18] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span19] inv'7 self)  -> ([%#span20] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([%#span21] postcondition_mut'0 self args res)
   -> ([%#span22] inv'2 self)
   -> ([%#span23] inv'10 args)  -> ([%#span24] inv'1 res)  -> ([%#span25] unnest'0 self.current self.final)
  
  predicate invariant'3 (self : item'0)
  
  axiom inv'3 : forall x : item'0 . inv'3 x = true
  
  predicate invariant'2 (self : borrowed f) =
    [%#span6] inv'7 self.current /\ inv'7 self.final
  
  axiom inv'2 : forall x : borrowed f . inv'2 x = true
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'1_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span26] produces'1 a ab b)
   -> ([%#span27] produces'1 b bc c)
   -> ([%#span28] inv'6 a)
   -> ([%#span29] inv'4 ab)
   -> ([%#span30] inv'6 b)
   -> ([%#span31] inv'4 bc)  -> ([%#span32] inv'6 c)  -> ([%#span33] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'1_spec : forall self : i . ([%#span34] inv'6 self)
   -> ([%#span35] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  use C06MapPrecond_Map_Type as Map'0
  
  use seq.Seq
  
  predicate inv'0 (_x : Map'0.t_map i b f item'0)
  
  use seq.Seq
  
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  use prelude.prelude.Snapshot
  
  use prelude.seq_ext.SeqExt
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  
  predicate produces'0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : Map'0.t_map i b f item'0) (visited : Seq.seq b) (succ : Map'0.t_map i b f item'0)
    
   =
    [%#span36] unnest'0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'4 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) s
    /\ (exists fs : Seq.seq (borrowed f) . inv'5 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
      (Seq.get fs 0).current = C06MapPrecond_Map_Type.map_func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = C06MapPrecond_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C06MapPrecond_Map_Type.map_func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  
  function produces_trans'0 [#"../06_map_precond.rs" 38 4 38 90] (a : Map'0.t_map i b f item'0) (ab : Seq.seq b) (b : Map'0.t_map i b f item'0) (bc : Seq.seq b) (c : Map'0.t_map i b f item'0) : ()
    
   =
    [%#span45] ()
  
  axiom produces_trans'0_spec : forall a : Map'0.t_map i b f item'0, ab : Seq.seq b, b : Map'0.t_map i b f item'0, bc : Seq.seq b, c : Map'0.t_map i b f item'0 . ([%#span37] produces'0 a ab b)
   -> ([%#span38] produces'0 b bc c)
   -> ([%#span39] inv'0 a)
   -> ([%#span40] inv'9 ab)
   -> ([%#span41] inv'0 b)
   -> ([%#span42] inv'9 bc)  -> ([%#span43] inv'0 c)  -> ([%#span44] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../06_map_precond.rs" 31 4 31 26] (self : Map'0.t_map i b f item'0) : () =
    [%#span48] ()
  
  axiom produces_refl'0_spec : forall self : Map'0.t_map i b f item'0 . ([%#span46] inv'0 self)
   -> ([%#span47] produces'0 self (Seq.empty  : Seq.seq b) self)
  
  predicate invariant'1 (self : b)
  
  axiom inv'1 : forall x : b . inv'1 x = true
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [%#span49] forall e : item'0, i : i . inv'3 e /\ inv'6 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [%#span50] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'4 s
    /\ inv'3 e1 /\ inv'3 e2 /\ inv'2 f /\ inv'1 b /\ inv'6 i
     -> unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [%#span55] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'4 s
    /\ inv'3 e1 /\ inv'3 e2 /\ inv'2 f /\ inv'1 b /\ inv'6 i
     -> unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq item'0 . ([%#span51] inv'6 iter)
   -> ([%#span52] inv'7 func)
   -> ([%#span53] inv'4 produced)
   -> ([%#span54] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [%#span56] forall iter : borrowed i, func : f . inv'11 iter /\ inv'7 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq item'0) /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : Map'0.t_map i b f item'0) =
    [%#span57] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  
  axiom inv'0 : forall x : Map'0.t_map i b f item'0 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> true
    end)
  
  use seq.Seq
  
  constant self  : Map'0.t_map i b f item'0
  
  constant visited  : b
  
  constant succ  : Map'0.t_map i b f item'0
  
  predicate produces_one [#"../06_map_precond.rs" 142 4 142 57] (self : Map'0.t_map i b f item'0) (visited : b) (succ : Map'0.t_map i b f item'0)
    
  
  goal vc_produces_one : ([%#s06_map_precond2] inv'0 succ)
   -> ([%#s06_map_precond1] inv'1 visited)
   -> ([%#s06_map_precond0] inv'0 self)
   -> ([%#s06_map_precond3] ([%#s06_map_precond4] exists f : borrowed f . inv'2 f
  /\ f.current = C06MapPrecond_Map_Type.map_func self
  /\ f.final = C06MapPrecond_Map_Type.map_func succ
  /\ (exists e : item'0 . inv'3 e
  /\ produces'1 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) (C06MapPrecond_Map_Type.map_iter succ)
  /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
  = Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) e
  /\ precondition'0 f.current (e, C06MapPrecond_Map_Type.map_produced self)
  /\ postcondition_mut'0 f (e, C06MapPrecond_Map_Type.map_produced self) visited))
  = produces'0 self (Seq.singleton visited) succ)
end
module C06MapPrecond_Impl1_ProducesOneInvariant_Impl
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "../06_map_precond.rs" 127 4 127 60
  
  let%span s06_map_precond1 = "../06_map_precond.rs" 128 15 128 30
  
  let%span s06_map_precond2 = "../06_map_precond.rs" 129 15 129 57
  
  let%span s06_map_precond3 = "../06_map_precond.rs" 132 30 132 34
  
  let%span s06_map_precond4 = "../06_map_precond.rs" 132 36 132 37
  
  let%span s06_map_precond5 = "../06_map_precond.rs" 132 48 132 49
  
  let%span s06_map_precond6 = "../06_map_precond.rs" 132 54 132 55
  
  let%span s06_map_precond7 = "../06_map_precond.rs" 132 65 132 69
  
  let%span s06_map_precond8 = "../06_map_precond.rs" 130 14 130 69
  
  let%span s06_map_precond9 = "../06_map_precond.rs" 131 14 131 70
  
  let%span s06_map_precond10 = "../06_map_precond.rs" 126 4 126 12
  
  let%span span11 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span12 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span13 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span14 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span15 = "../06_map_precond.rs" 84 8 88 9
  
  let%span span16 = "../06_map_precond.rs" 106 8 113 9
  
  let%span span17 = "../06_map_precond.rs" 93 24 93 28
  
  let%span span18 = "../06_map_precond.rs" 93 33 93 37
  
  let%span span19 = "../06_map_precond.rs" 93 42 93 50
  
  let%span span20 = "../06_map_precond.rs" 92 4 92 83
  
  let%span span21 = "../06_map_precond.rs" 94 8 101 9
  
  let%span span22 = "../06_map_precond.rs" 118 8 123 9
  
  let%span span23 = "../06_map_precond.rs" 159 12 161 73
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span26 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span29 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span30 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span31 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span32 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span33 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span34 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span35 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span36 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span37 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span38 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span39 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span40 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span41 = "../common.rs" 18 15 18 32
  
  let%span span42 = "../common.rs" 19 15 19 32
  
  let%span span43 = "../common.rs" 21 22 21 23
  
  let%span span44 = "../common.rs" 21 31 21 33
  
  let%span span45 = "../common.rs" 21 52 21 53
  
  let%span span46 = "../common.rs" 21 61 21 63
  
  let%span span47 = "../common.rs" 21 82 21 83
  
  let%span span48 = "../common.rs" 20 14 20 42
  
  let%span span49 = "../common.rs" 15 21 15 25
  
  let%span span50 = "../common.rs" 14 14 14 45
  
  predicate inv'4 (_x : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'10 (self : borrowed i) =
    [%#span11] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'10 (_x : borrowed i)
  
  axiom inv'10 : forall x : borrowed i . inv'10 x = true
  
  type item'0
  
  predicate inv'1 (_x : item'0)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'9 (self : item'0) =
    [%#span12] inv'1 self
  
  predicate inv'9 (_x : item'0)
  
  axiom inv'9 : forall x : item'0 . inv'9 x = true
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate invariant'8 (self : Snapshot.snap_ty (Seq.seq item'0)) =
    [%#span13] true
  
  predicate inv'8 (_x : Snapshot.snap_ty (Seq.seq item'0))
  
  axiom inv'8 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'8 x = true
  
  predicate invariant'7 (self : (item'0, Snapshot.snap_ty (Seq.seq item'0))) =
    [%#span13] true
  
  predicate inv'7 (_x : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  axiom inv'7 : forall x : (item'0, Snapshot.snap_ty (Seq.seq item'0)) . inv'7 x = true
  
  predicate invariant'6 (self : f)
  
  predicate inv'6 (_x : f)
  
  axiom inv'6 : forall x : f . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'5 (self : Seq.seq item'0) =
    [%#span14] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'5 (_x : Seq.seq item'0)
  
  axiom inv'5 : forall x : Seq.seq item'0 . inv'5 x = true
  
  predicate invariant'4 (self : i)
  
  axiom inv'4 : forall x : i . inv'4 x = true
  
  predicate invariant'3 (self : borrowed f) =
    [%#span11] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'3 (_x : borrowed f)
  
  axiom inv'3 : forall x : borrowed f . inv'3 x = true
  
  predicate invariant'2 (self : b)
  
  predicate inv'2 (_x : b)
  
  axiom inv'2 : forall x : b . inv'2 x = true
  
  predicate invariant'1 (self : item'0)
  
  axiom inv'1 : forall x : item'0 . inv'1 x = true
  
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  use prelude.prelude.Snapshot
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [%#span15] forall e : item'0, i : i . inv'1 e /\ inv'4 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [%#span16] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'5 s
    /\ inv'1 e1 /\ inv'1 e2 /\ inv'3 f /\ inv'2 b /\ inv'4 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  use seq.Seq
  
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [%#span21] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'5 s
    /\ inv'1 e1 /\ inv'1 e2 /\ inv'3 f /\ inv'2 b /\ inv'4 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq item'0 . ([%#span17] inv'4 iter)
   -> ([%#span18] inv'6 func)
   -> ([%#span19] inv'5 produced)
   -> ([%#span20] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  
  use prelude.prelude.Snapshot
  
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [%#span22] forall iter : borrowed i, func : f . inv'10 iter /\ inv'6 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq item'0) /\ preservation'0 iter.final func
  
  use C06MapPrecond_Map_Type as Map'0
  
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : Map'0.t_map i b f item'0) =
    [%#span23] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  
  predicate inv'0 (_x : Map'0.t_map i b f item'0)
  
  axiom inv'0 : forall x : Map'0.t_map i b f item'0 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> true
    end)
  
  predicate resolve'0 (self : f)
  
  predicate postcondition_once'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  function fn_mut_once'0 (self : f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([%#span24] inv'6 self)
   -> ([%#span25] inv'7 args)
   -> ([%#span26] inv'2 res)
   -> ([%#span27] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'3 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span28] unnest'0 self b)
   -> ([%#span29] unnest'0 b c)
   -> ([%#span30] inv'6 self)  -> ([%#span31] inv'6 b)  -> ([%#span32] inv'6 c)  -> ([%#span33] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span34] inv'6 self)  -> ([%#span35] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([%#span36] postcondition_mut'0 self args res)
   -> ([%#span37] inv'3 self)
   -> ([%#span38] inv'7 args)  -> ([%#span39] inv'2 res)  -> ([%#span40] unnest'0 self.current self.final)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span41] produces'0 a ab b)
   -> ([%#span42] produces'0 b bc c)
   -> ([%#span43] inv'4 a)
   -> ([%#span44] inv'5 ab)
   -> ([%#span45] inv'4 b)
   -> ([%#span46] inv'5 bc)  -> ([%#span47] inv'4 c)  -> ([%#span48] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span49] inv'4 self)
   -> ([%#span50] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  
  constant self  : Map'0.t_map i b f item'0
  
  constant e  : item'0
  
  constant r  : b
  
  constant f  : borrowed f
  
  constant iter  : i
  
  function produces_one_invariant [#"../06_map_precond.rs" 132 4 132 73] (self : Map'0.t_map i b f item'0) (e : item'0) (r : b) (f : borrowed f) (iter : i) : ()
    
  
  goal vc_produces_one_invariant : ([%#s06_map_precond7] inv'4 iter)
   -> ([%#s06_map_precond6] inv'3 f)
   -> ([%#s06_map_precond5] inv'2 r)
   -> ([%#s06_map_precond4] inv'1 e)
   -> ([%#s06_map_precond3] inv'0 self)
   -> ([%#s06_map_precond2] postcondition_mut'0 f (e, C06MapPrecond_Map_Type.map_produced self) r)
   -> ([%#s06_map_precond1] f.current = C06MapPrecond_Map_Type.map_func self)
   -> ([%#s06_map_precond0] produces'0 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) iter)
   -> ([%#s06_map_precond10] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, i : i . inv'5 s
  /\ inv'1 e1 /\ inv'1 e2 /\ inv'4 i
   -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
   -> produces'0 (C06MapPrecond_Map_Type.map_iter self) (Seq.snoc (Seq.snoc (Seq.(++) (Seq.singleton e) s) e1) e2) i)
  && (let _ = () in ([%#s06_map_precond9] next_precondition'0 iter f.final (Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) e))
  && ([%#s06_map_precond8] preservation_inv'0 iter f.final (Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) e)))
end
module C06MapPrecond_Impl0_Next
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "../06_map_precond.rs" 66 16 66 76
  
  let%span s06_map_precond1 = "../06_map_precond.rs" 67 31 67 66
  
  let%span s06_map_precond2 = "../06_map_precond.rs" 70 16 70 58
  
  let%span s06_map_precond3 = "../06_map_precond.rs" 74 32 74 56
  
  let%span s06_map_precond4 = "../06_map_precond.rs" 63 17 63 21
  
  let%span s06_map_precond5 = "../06_map_precond.rs" 59 14 62 5
  
  let%span s06_map_precond6 = "../06_map_precond.rs" 63 26 63 44
  
  let%span span7 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span9 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span10 = "../06_map_precond.rs" 84 8 88 9
  
  let%span span11 = "../06_map_precond.rs" 106 8 113 9
  
  let%span span12 = "../06_map_precond.rs" 93 24 93 28
  
  let%span span13 = "../06_map_precond.rs" 93 33 93 37
  
  let%span span14 = "../06_map_precond.rs" 93 42 93 50
  
  let%span span15 = "../06_map_precond.rs" 92 4 92 83
  
  let%span span16 = "../06_map_precond.rs" 94 8 101 9
  
  let%span span17 = "../06_map_precond.rs" 118 8 123 9
  
  let%span span18 = "../06_map_precond.rs" 159 12 161 73
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span26 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span27 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span28 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span29 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span30 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span31 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span32 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span33 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span34 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span35 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span36 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span37 = "../common.rs" 18 15 18 32
  
  let%span span38 = "../common.rs" 19 15 19 32
  
  let%span span39 = "../common.rs" 21 22 21 23
  
  let%span span40 = "../common.rs" 21 31 21 33
  
  let%span span41 = "../common.rs" 21 52 21 53
  
  let%span span42 = "../common.rs" 21 61 21 63
  
  let%span span43 = "../common.rs" 21 82 21 83
  
  let%span span44 = "../common.rs" 20 14 20 42
  
  let%span span45 = "../common.rs" 15 21 15 25
  
  let%span span46 = "../common.rs" 14 14 14 45
  
  let%span span47 = "../06_map_precond.rs" 44 8 56 9
  
  let%span span48 = "../06_map_precond.rs" 142 20 142 24
  
  let%span span49 = "../06_map_precond.rs" 142 26 142 33
  
  let%span span50 = "../06_map_precond.rs" 142 38 142 42
  
  let%span span51 = "../06_map_precond.rs" 141 14 141 68
  
  let%span span52 = "../06_map_precond.rs" 143 8 149 9
  
  let%span span53 = "../06_map_precond.rs" 22 8 25 9
  
  let%span span54 = "../06_map_precond.rs" 127 4 127 60
  
  let%span span55 = "../06_map_precond.rs" 128 15 128 30
  
  let%span span56 = "../06_map_precond.rs" 129 15 129 57
  
  let%span span57 = "../06_map_precond.rs" 132 30 132 34
  
  let%span span58 = "../06_map_precond.rs" 132 36 132 37
  
  let%span span59 = "../06_map_precond.rs" 132 48 132 49
  
  let%span span60 = "../06_map_precond.rs" 132 54 132 55
  
  let%span span61 = "../06_map_precond.rs" 132 65 132 69
  
  let%span span62 = "../06_map_precond.rs" 130 14 130 69
  
  let%span span63 = "../06_map_precond.rs" 131 14 131 70
  
  let%span span64 = "../06_map_precond.rs" 126 4 126 12
  
  let%span span65 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span66 = "../../../../../creusot-contracts/src/std/ops.rs" 160 27 160 52
  
  let%span span67 = "" 0 0 0 0
  
  let%span span68 = "" 0 0 0 0
  
  let%span span69 = "../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1
  
  let%span span70 = "" 0 0 0 0
  
  let%span span71 = "../common.rs" 27 17 27 21
  
  let%span span72 = "../common.rs" 23 14 26 5
  
  let%span span73 = "../common.rs" 27 26 27 44
  
  use prelude.prelude.Borrow
  
  predicate inv'6 (_x : borrowed f)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'15 (self : borrowed f) =
    [%#span7] inv'6 self
  
  predicate inv'15 (_x : borrowed f)
  
  axiom inv'15 : forall x : borrowed f . inv'15 x = true
  
  type item'0
  
  predicate inv'10 (_x : item'0)
  
  predicate invariant'14 (self : item'0) =
    [%#span7] inv'10 self
  
  predicate inv'14 (_x : item'0)
  
  axiom inv'14 : forall x : item'0 . inv'14 x = true
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate invariant'13 (self : Snapshot.snap_ty (Seq.seq item'0)) =
    [%#span8] true
  
  predicate inv'13 (_x : Snapshot.snap_ty (Seq.seq item'0))
  
  axiom inv'13 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'13 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'12 (self : Seq.seq (borrowed f)) =
    [%#span9] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'15 (Seq.get self i)
  
  predicate inv'12 (_x : Seq.seq (borrowed f))
  
  axiom inv'12 : forall x : Seq.seq (borrowed f) . inv'12 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'11 (self : Seq.seq item'0) =
    [%#span9] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'14 (Seq.get self i)
  
  predicate inv'11 (_x : Seq.seq item'0)
  
  axiom inv'11 : forall x : Seq.seq item'0 . inv'11 x = true
  
  predicate invariant'10 (self : item'0)
  
  axiom inv'10 : forall x : item'0 . inv'10 x = true
  
  predicate inv'1 (_x : f)
  
  predicate inv'0 (_x : i)
  
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  use prelude.prelude.Snapshot
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [%#span10] forall e : item'0, i : i . inv'10 e /\ inv'0 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate inv'8 (_x : b)
  
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [%#span11] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'11 s
    /\ inv'10 e1 /\ inv'10 e2 /\ inv'6 f /\ inv'8 b /\ inv'0 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  use seq.Seq
  
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [%#span16] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'11 s
    /\ inv'10 e1 /\ inv'10 e2 /\ inv'6 f /\ inv'8 b /\ inv'0 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq item'0 . ([%#span12] inv'0 iter)
   -> ([%#span13] inv'1 func)
   -> ([%#span14] inv'11 produced)
   -> ([%#span15] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  
  use prelude.prelude.Snapshot
  
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate inv'4 (_x : borrowed i)
  
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [%#span17] forall iter : borrowed i, func : f . inv'4 iter /\ inv'1 func
     -> completed'1 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq item'0) /\ preservation'0 iter.final func
  
  use C06MapPrecond_Map_Type as Map'0
  
  predicate invariant'9 [#"../06_map_precond.rs" 157 4 157 30] (self : Map'0.t_map i b f item'0) =
    [%#span18] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  
  predicate inv'9 (_x : Map'0.t_map i b f item'0)
  
  axiom inv'9 : forall x : Map'0.t_map i b f item'0 . inv'9 x
  = (invariant'9 x
  /\ match x with
    | Map'0.C_Map iter func produced -> true
    end)
  
  predicate invariant'8 (self : b)
  
  axiom inv'8 : forall x : b . inv'8 x = true
  
  predicate resolve'1 (self : f)
  
  predicate postcondition_once'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  predicate inv'7 (_x : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  function fn_mut_once'0 (self : f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([%#span19] inv'1 self)
   -> ([%#span20] inv'7 args)
   -> ([%#span21] inv'8 res)
   -> ([%#span22] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'6 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'1 s.final))
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span23] unnest'0 self b)
   -> ([%#span24] unnest'0 b c)
   -> ([%#span25] inv'1 self)  -> ([%#span26] inv'1 b)  -> ([%#span27] inv'1 c)  -> ([%#span28] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span29] inv'1 self)  -> ([%#span30] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([%#span31] postcondition_mut'0 self args res)
   -> ([%#span32] inv'6 self)
   -> ([%#span33] inv'7 args)  -> ([%#span34] inv'8 res)  -> ([%#span35] unnest'0 self.current self.final)
  
  predicate invariant'7 (self : (item'0, Snapshot.snap_ty (Seq.seq item'0))) =
    [%#span8] true
  
  axiom inv'7 : forall x : (item'0, Snapshot.snap_ty (Seq.seq item'0)) . inv'7 x = true
  
  predicate invariant'6 (self : borrowed f) =
    [%#span36] inv'1 self.current /\ inv'1 self.final
  
  axiom inv'6 : forall x : borrowed f . inv'6 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'5 (self : Option'0.t_option item'0) =
    [%#span8] true
  
  predicate inv'5 (_x : Option'0.t_option item'0)
  
  axiom inv'5 : forall x : Option'0.t_option item'0 . inv'5 x = true
  
  predicate invariant'4 (self : borrowed i) =
    [%#span36] inv'0 self.current /\ inv'0 self.final
  
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  
  predicate invariant'3 (self : Option'0.t_option b) =
    [%#span8] true
  
  predicate inv'3 (_x : Option'0.t_option b)
  
  axiom inv'3 : forall x : Option'0.t_option b . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (Map'0.t_map i b f item'0)) =
    [%#span36] inv'9 self.current /\ inv'9 self.final
  
  predicate inv'2 (_x : borrowed (Map'0.t_map i b f item'0))
  
  axiom inv'2 : forall x : borrowed (Map'0.t_map i b f item'0) . inv'2 x = invariant'2 x
  
  predicate invariant'1 (self : f)
  
  axiom inv'1 : forall x : f . inv'1 x = true
  
  predicate invariant'0 (self : i)
  
  axiom inv'0 : forall x : i . inv'0 x = true
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span37] produces'0 a ab b)
   -> ([%#span38] produces'0 b bc c)
   -> ([%#span39] inv'0 a)
   -> ([%#span40] inv'11 ab)
   -> ([%#span41] inv'0 b)
   -> ([%#span42] inv'11 bc)  -> ([%#span43] inv'0 c)  -> ([%#span44] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span45] inv'0 self)
   -> ([%#span46] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use prelude.seq_ext.SeqExt
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : Map'0.t_map i b f item'0) (visited : Seq.seq b) (succ : Map'0.t_map i b f item'0)
    
   =
    [%#span47] unnest'0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'11 s
    /\ Seq.length s = Seq.length visited
    /\ produces'0 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) s
    /\ (exists fs : Seq.seq (borrowed f) . inv'12 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
      (Seq.get fs 0).current = C06MapPrecond_Map_Type.map_func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = C06MapPrecond_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C06MapPrecond_Map_Type.map_func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  
  use seq.Seq
  
  predicate produces_one'0 [#"../06_map_precond.rs" 142 4 142 57] (self : Map'0.t_map i b f item'0) (visited : b) (succ : Map'0.t_map i b f item'0)
    
   =
    [%#span52] exists f : borrowed f . inv'6 f
    /\ f.current = C06MapPrecond_Map_Type.map_func self
    /\ f.final = C06MapPrecond_Map_Type.map_func succ
    /\ (exists e : item'0 . inv'10 e
    /\ produces'0 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) e
    /\ precondition'0 f.current (e, C06MapPrecond_Map_Type.map_produced self)
    /\ postcondition_mut'0 f (e, C06MapPrecond_Map_Type.map_produced self) visited)
  
  axiom produces_one'0_spec : forall self : Map'0.t_map i b f item'0, visited : b, succ : Map'0.t_map i b f item'0 . ([%#span48] inv'9 self)
   -> ([%#span49] inv'8 visited)
   -> ([%#span50] inv'9 succ)
   -> ([%#span51] produces_one'0 self visited succ = produces'1 self (Seq.singleton visited) succ)
  
  predicate completed'0 [#"../06_map_precond.rs" 21 4 21 35] (self : borrowed (Map'0.t_map i b f item'0)) =
    [%#span53] Snapshot.inner (C06MapPrecond_Map_Type.map_produced self.final) = (Seq.empty  : Seq.seq item'0)
    /\ completed'1 (Borrow.borrow_logic (C06MapPrecond_Map_Type.map_iter self.current) (C06MapPrecond_Map_Type.map_iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C06MapPrecond_Map_Type.map_func self.current = C06MapPrecond_Map_Type.map_func self.final
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  function produces_one_invariant'0 [#"../06_map_precond.rs" 132 4 132 73] (self : Map'0.t_map i b f item'0) (e : item'0) (r : b) (f : borrowed f) (iter : i) : ()
    
  
  axiom produces_one_invariant'0_spec : forall self : Map'0.t_map i b f item'0, e : item'0, r : b, f : borrowed f, iter : i . ([%#span54] produces'0 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) iter)
   -> ([%#span55] f.current = C06MapPrecond_Map_Type.map_func self)
   -> ([%#span56] postcondition_mut'0 f (e, C06MapPrecond_Map_Type.map_produced self) r)
   -> ([%#span57] inv'9 self)
   -> ([%#span58] inv'10 e)
   -> ([%#span59] inv'8 r)
   -> ([%#span60] inv'6 f)
   -> ([%#span61] inv'0 iter)
   -> ([%#span63] next_precondition'0 iter f.final (Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) e))
  && ([%#span62] preservation_inv'0 iter f.final (Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) e))
  
  predicate resolve'0 (self : borrowed (Map'0.t_map i b f item'0)) =
    [%#span65] self.final = self.current
  
  let rec call_mut'0 (self:borrowed f) (args:(item'0, Snapshot.snap_ty (Seq.seq item'0))) (return'  (ret:b))= {[@expl:precondition] [%#span68] inv'7 args}
    {[@expl:precondition] [%#span67] inv'6 self}
    {[@expl:precondition] [%#span66] precondition'0 self.current args}
    any
    [ return' (result:b)-> {[%#span70] inv'8 result}
      {[%#span69] postcondition_mut'0 self args result}
      (! return' {result}) ]
    
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_option item'0))= {[@expl:precondition] [%#span71] inv'4 self}
    any
    [ return' (result:Option'0.t_option item'0)-> {[%#span73] inv'5 result}
      {[%#span72] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  let rec next (self:borrowed (Map'0.t_map i b f item'0)) (return'  (ret:Option'0.t_option b))= {[%#s06_map_precond4] inv'2 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Map'0.t_map <i> <b> <f> <item'0> {self.current}
          (fun (riter'0:i) (rfunc'0:f) (rproduced'0:Snapshot.snap_ty (Seq.seq item'0)) ->
            Borrow.borrow_final <i> {riter'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_4 <- _ret' ] 
                Map'0.t_map <i> <b> <f> <item'0> {self.current}
                  (fun (l_iter'0:i) (l_func'0:f) (l_produced'0:Snapshot.snap_ty (Seq.seq item'0)) ->
                     [ &self <- { self with current = Map'0.C_Map _4.final l_func'0 l_produced'0 ; } ] 
                    s1)))
      | s1 = -{inv'0 _4.final}- s2
      | s2 = next'0 {_4} (fun (_ret':Option'0.t_option item'0) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = any [ br0 -> {_3 = Option'0.C_None } (! bb4) | br1 (a:item'0)-> {_3 = Option'0.C_Some a} (! bb3) ] 
    | bb3 = bb5
    | bb5 = s0
      [ s0 = Option'0.some <item'0> {_3} (fun (r0'0:item'0) ->  [ &v <- r0'0 ] s1)
      | s1 = {[@expl:assertion] [%#s06_map_precond0] precondition'0 (C06MapPrecond_Map_Type.map_func self.current) (v, C06MapPrecond_Map_Type.map_produced self.current)}
        s2
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = 
        [ &produced <- [%#s06_map_precond1] Snapshot.new (Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self.current)) v) ]
        
        s1
      | s1 = bb7 ]
      
    | bb7 = s0
      [ s0 = Map'0.t_map <i> <b> <f> <item'0> {self.current}
          (fun (riter'0:i) (rfunc'0:f) (rproduced'0:Snapshot.snap_ty (Seq.seq item'0)) ->
            Borrow.borrow_final <f> {rfunc'0} {Borrow.inherit_id (Borrow.get_id self) 2}
              (fun (_ret':borrowed f) ->
                 [ &_12 <- _ret' ] 
                Map'0.t_map <i> <b> <f> <item'0> {self.current}
                  (fun (l_iter'0:i) (l_func'0:f) (l_produced'0:Snapshot.snap_ty (Seq.seq item'0)) ->
                     [ &self <- { self with current = Map'0.C_Map l_iter'0 _12.final l_produced'0 ; } ] 
                    s1)))
      | s1 = -{inv'1 _12.final}- s2
      | s2 = Map'0.t_map <i> <b> <f> <item'0> {self.current}
          (fun (riter'1:i) (rfunc'1:f) (rproduced'1:Snapshot.snap_ty (Seq.seq item'0)) ->
             [ &_13 <- (v, rproduced'1) ] 
            s3)
      | s3 = call_mut'0 {_12} {_13} (fun (_ret':b) ->  [ &r <- _ret' ] s4)
      | s4 = bb8 ]
      
    | bb8 = bb9
    | bb9 = s0
      [ s0 = Map'0.t_map <i> <b> <f> <item'0> {self.current}
          (fun (l_iter'0:i) (l_func'0:f) (l_produced'0:Snapshot.snap_ty (Seq.seq item'0)) ->
             [ &self <- { self with current = Map'0.C_Map l_iter'0 l_func'0 produced ; } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'2 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_17 <- [%#s06_map_precond2] Snapshot.new () ] s4
      | s4 = bb10 ]
      
    | bb10 = s0 [ s0 =  [ &_0 <- Option'0.C_Some r ] s1 | s1 = bb11 ] 
    | bb11 = bb12
    | bb12 = bb13
    | bb13 = bb15
    | bb4 = s0 [ s0 =  [ &_20 <- [%#s06_map_precond3] Snapshot.new (Seq.empty  : Seq.seq item'0) ] s1 | s1 = bb14 ] 
    | bb14 = s0
      [ s0 = Map'0.t_map <i> <b> <f> <item'0> {self.current}
          (fun (l_iter'0:i) (l_func'0:f) (l_produced'0:Snapshot.snap_ty (Seq.seq item'0)) ->
             [ &self <- { self with current = Map'0.C_Map l_iter'0 l_func'0 _20 ; } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'2 self} s2
      | s2 = -{resolve'0 self}- s3
      | s3 =  [ &_0 <- Option'0.C_None ] s4
      | s4 = bb15 ]
      
    | bb15 = bb16
    | bb16 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option b = any_l ()
    | & self : borrowed (Map'0.t_map i b f item'0) = self
    | & _3 : Option'0.t_option item'0 = any_l ()
    | & _4 : borrowed i = any_l ()
    | & v : item'0 = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq item'0) = any_l ()
    | & r : b = any_l ()
    | & _12 : borrowed f = any_l ()
    | & _13 : (item'0, Snapshot.snap_ty (Seq.seq item'0)) = any_l ()
    | & _17 : Snapshot.snap_ty () = any_l ()
    | & _20 : Snapshot.snap_ty (Seq.seq item'0) = any_l () ]
    
    [ return' (result:Option'0.t_option b)-> {[@expl:postcondition] [%#s06_map_precond6] inv'3 result}
      {[@expl:postcondition] [%#s06_map_precond5] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces_one'0 self.current v self.final
        end}
      (! return' {result}) ]
    
end
module C06MapPrecond_Map
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "../06_map_precond.rs" 174 32 174 54
  
  let%span s06_map_precond1 = "../06_map_precond.rs" 166 0 166 131
  
  let%span s06_map_precond2 = "../06_map_precond.rs" 167 11 167 41
  
  let%span s06_map_precond3 = "../06_map_precond.rs" 168 11 168 51
  
  let%span s06_map_precond4 = "../06_map_precond.rs" 171 4 171 8
  
  let%span s06_map_precond5 = "../06_map_precond.rs" 172 4 172 8
  
  let%span s06_map_precond6 = "../06_map_precond.rs" 169 10 169 75
  
  let%span s06_map_precond7 = "../06_map_precond.rs" 173 5 173 17
  
  let%span span8 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span9 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 123 19 123 23
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 123 25 123 29
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 123 37 123 40
  
  let%span span13 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 135
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 117 20 117 24
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 117 26 117 27
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 117 35 117 36
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 110 19 110 23
  
  let%span span21 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span22 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span23 = "../../../../../creusot-contracts/src/std/ops.rs" 105 37 105 41
  
  let%span span24 = "../../../../../creusot-contracts/src/std/ops.rs" 105 43 105 47
  
  let%span span25 = "../../../../../creusot-contracts/src/std/ops.rs" 105 55 105 58
  
  let%span span26 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span27 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span28 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span29 = "../06_map_precond.rs" 84 8 88 9
  
  let%span span30 = "../06_map_precond.rs" 106 8 113 9
  
  let%span span31 = "../06_map_precond.rs" 93 24 93 28
  
  let%span span32 = "../06_map_precond.rs" 93 33 93 37
  
  let%span span33 = "../06_map_precond.rs" 93 42 93 50
  
  let%span span34 = "../06_map_precond.rs" 92 4 92 83
  
  let%span span35 = "../06_map_precond.rs" 94 8 101 9
  
  let%span span36 = "../06_map_precond.rs" 118 8 123 9
  
  let%span span37 = "../06_map_precond.rs" 159 12 161 73
  
  let%span span38 = "../common.rs" 18 15 18 32
  
  let%span span39 = "../common.rs" 19 15 19 32
  
  let%span span40 = "../common.rs" 21 22 21 23
  
  let%span span41 = "../common.rs" 21 31 21 33
  
  let%span span42 = "../common.rs" 21 52 21 53
  
  let%span span43 = "../common.rs" 21 61 21 63
  
  let%span span44 = "../common.rs" 21 82 21 83
  
  let%span span45 = "../common.rs" 20 14 20 42
  
  let%span span46 = "../common.rs" 15 21 15 25
  
  let%span span47 = "../common.rs" 14 14 14 45
  
  type item'0
  
  predicate inv'0 (_x : item'0)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'10 (self : item'0) =
    [%#span8] inv'0 self
  
  predicate inv'10 (_x : item'0)
  
  axiom inv'10 : forall x : item'0 . inv'10 x = true
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate invariant'9 (self : (item'0, Snapshot.snap_ty (Seq.seq item'0))) =
    [%#span9] true
  
  predicate inv'9 (_x : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  axiom inv'9 : forall x : (item'0, Snapshot.snap_ty (Seq.seq item'0)) . inv'9 x = true
  
  predicate invariant'8 (self : Snapshot.snap_ty (Seq.seq item'0)) =
    [%#span9] true
  
  predicate inv'8 (_x : Snapshot.snap_ty (Seq.seq item'0))
  
  axiom inv'8 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'8 x = true
  
  predicate resolve'0 (self : f)
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  predicate inv'6 (_x : borrowed f)
  
  predicate postcondition_once'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  predicate inv'7 (_x : b)
  
  predicate inv'2 (_x : f)
  
  function fn_mut_once'0 (self : f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([%#span10] inv'2 self)
   -> ([%#span11] inv'9 args)
   -> ([%#span12] inv'7 res)
   -> ([%#span13] postcondition_once'0 self args res
  = (exists s : borrowed f . inv'6 s /\ s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final))
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span14] unnest'0 self b)
   -> ([%#span15] unnest'0 b c)
   -> ([%#span16] inv'2 self)  -> ([%#span17] inv'2 b)  -> ([%#span18] inv'2 c)  -> ([%#span19] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . ([%#span20] inv'2 self)  -> ([%#span21] unnest'0 self self)
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (res : b) : ()
    
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : (item'0, Snapshot.snap_ty (Seq.seq item'0)), res : b . ([%#span22] postcondition_mut'0 self args res)
   -> ([%#span23] inv'6 self)
   -> ([%#span24] inv'9 args)  -> ([%#span25] inv'7 res)  -> ([%#span26] unnest'0 self.current self.final)
  
  predicate invariant'7 (self : b)
  
  axiom inv'7 : forall x : b . inv'7 x = true
  
  predicate invariant'6 (self : borrowed f) =
    [%#span27] inv'2 self.current /\ inv'2 self.final
  
  axiom inv'6 : forall x : borrowed f . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'5 (self : Seq.seq item'0) =
    [%#span28] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  predicate inv'5 (_x : Seq.seq item'0)
  
  axiom inv'5 : forall x : Seq.seq item'0 . inv'5 x = true
  
  predicate inv'1 (_x : i)
  
  predicate invariant'4 (self : borrowed i) =
    [%#span27] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'4 (_x : borrowed i)
  
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  use prelude.prelude.Snapshot
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [%#span29] forall e : item'0, i : i . inv'0 e /\ inv'1 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [%#span30] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'5 s
    /\ inv'0 e1 /\ inv'0 e2 /\ inv'6 f /\ inv'7 b /\ inv'1 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  use seq.Seq
  
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [%#span35] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'5 s
    /\ inv'0 e1 /\ inv'0 e2 /\ inv'6 f /\ inv'7 b /\ inv'1 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq item'0 . ([%#span31] inv'1 iter)
   -> ([%#span32] inv'2 func)
   -> ([%#span33] inv'5 produced)
   -> ([%#span34] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  
  use prelude.prelude.Snapshot
  
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [%#span36] forall iter : borrowed i, func : f . inv'4 iter /\ inv'2 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq item'0) /\ preservation'0 iter.final func
  
  use C06MapPrecond_Map_Type as Map'0
  
  predicate invariant'3 [#"../06_map_precond.rs" 157 4 157 30] (self : Map'0.t_map i b f item'0) =
    [%#span37] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  
  predicate inv'3 (_x : Map'0.t_map i b f item'0)
  
  axiom inv'3 : forall x : Map'0.t_map i b f item'0 . inv'3 x
  = (invariant'3 x
  /\ match x with
    | Map'0.C_Map iter func produced -> true
    end)
  
  predicate invariant'2 (self : f)
  
  axiom inv'2 : forall x : f . inv'2 x = true
  
  predicate invariant'1 (self : i)
  
  axiom inv'1 : forall x : i . inv'1 x = true
  
  predicate invariant'0 (self : item'0)
  
  axiom inv'0 : forall x : item'0 . inv'0 x = true
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span38] produces'0 a ab b)
   -> ([%#span39] produces'0 b bc c)
   -> ([%#span40] inv'1 a)
   -> ([%#span41] inv'5 ab)
   -> ([%#span42] inv'1 b)
   -> ([%#span43] inv'5 bc)  -> ([%#span44] inv'1 c)  -> ([%#span45] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span46] inv'1 self)
   -> ([%#span47] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  
  use prelude.prelude.Intrinsic
  
  let rec map (iter:i) (func:f) (return'  (ret:Map'0.t_map i b f item'0))= {[%#s06_map_precond5] inv'2 func}
    {[%#s06_map_precond4] inv'1 iter}
    {[%#s06_map_precond3] preservation'0 iter func}
    {[%#s06_map_precond2] reinitialize'0 ()}
    {[%#s06_map_precond1] forall e : item'0, i2 : i . inv'0 e /\ inv'1 i2
     -> produces'0 iter (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq item'0))}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = s0 [ s0 =  [ &_9 <- [%#s06_map_precond0] Snapshot.new (Seq.empty  : Seq.seq item'0) ] s1 | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &_0 <- Map'0.C_Map iter func _9 ] s1 | s1 = bb5 ] 
    | bb5 = bb6
    | bb6 = bb7
    | bb7 = bb8
    | bb8 = return' {_0} ]
    )
    [ & _0 : Map'0.t_map i b f item'0 = any_l ()
    | & iter : i = iter
    | & func : f = func
    | & _9 : Snapshot.snap_ty (Seq.seq item'0) = any_l () ]
    
    [ return' (result:Map'0.t_map i b f item'0)-> {[@expl:postcondition] [%#s06_map_precond7] inv'3 result}
      {[@expl:postcondition] [%#s06_map_precond6] result
      = Map'0.C_Map iter func (Snapshot.new (Seq.empty  : Seq.seq item'0))}
      (! return' {result}) ]
    
end
module C06MapPrecond_Identity_Closure0_Type
  use Alloc_Alloc_Global_Type as Global'0
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int16
  
  type c06mapprecond_identity_closure0 'i =
    | C06mapprecond_identity_closure0
  
  let rec c06mapprecond_identity_closure0 < 'i > (input:c06mapprecond_identity_closure0 'i) (ret  )= any
    [ good -> {C06mapprecond_identity_closure0  = input} (! ret)
    | bad -> {C06mapprecond_identity_closure0  <> input} {false} any ]
    
end
module C06MapPrecond_Identity_Closure0
  type i
  
  let%span s06_map_precond0 = "../06_map_precond.rs" 178 15 178 16
  
  let%span s06_map_precond1 = "../06_map_precond.rs" 178 14 178 20
  
  let%span span2 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span5 = "../common.rs" 18 15 18 32
  
  let%span span6 = "../common.rs" 19 15 19 32
  
  let%span span7 = "../common.rs" 21 22 21 23
  
  let%span span8 = "../common.rs" 21 31 21 33
  
  let%span span9 = "../common.rs" 21 52 21 53
  
  let%span span10 = "../common.rs" 21 61 21 63
  
  let%span span11 = "../common.rs" 21 82 21 83
  
  let%span span12 = "../common.rs" 20 14 20 42
  
  let%span span13 = "../common.rs" 15 21 15 25
  
  let%span span14 = "../common.rs" 14 14 14 45
  
  let%span span15 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  type item'0
  
  predicate inv'0 (_x : item'0)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'4 (self : item'0) =
    [%#span2] inv'0 self
  
  predicate inv'4 (_x : item'0)
  
  axiom inv'4 : forall x : item'0 . inv'4 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq item'0) =
    [%#span3] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'3 (_x : Seq.seq item'0)
  
  axiom inv'3 : forall x : Seq.seq item'0 . inv'3 x = true
  
  predicate invariant'2 (self : i)
  
  predicate inv'2 (_x : i)
  
  axiom inv'2 : forall x : i . inv'2 x = true
  
  use prelude.prelude.Snapshot
  
  predicate invariant'1 (self : Snapshot.snap_ty (Seq.seq item'0)) =
    [%#span4] true
  
  predicate inv'1 (_x : Snapshot.snap_ty (Seq.seq item'0))
  
  axiom inv'1 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'1 x = true
  
  predicate invariant'0 (self : item'0)
  
  axiom inv'0 : forall x : item'0 . inv'0 x = true
  
  use seq.Seq
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span5] produces'0 a ab b)
   -> ([%#span6] produces'0 b bc c)
   -> ([%#span7] inv'2 a)
   -> ([%#span8] inv'3 ab)
   -> ([%#span9] inv'2 b)
   -> ([%#span10] inv'3 bc)  -> ([%#span11] inv'2 c)  -> ([%#span12] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span13] inv'2 self)
   -> ([%#span14] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  
  use prelude.prelude.Int16
  
  use C06MapPrecond_Identity_Closure0_Type as Closure'0
  
  predicate unnest'0 [#"../06_map_precond.rs" 178 14 178 20] (self : Closure'0.c06mapprecond_identity_closure0 i) (_2 : Closure'0.c06mapprecond_identity_closure0 i)
    
   =
    true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed (Closure'0.c06mapprecond_identity_closure0 i)) =
    [%#span15] self.final = self.current
  
  let rec c06mapprecond_identity_closure0 (_1:borrowed (Closure'0.c06mapprecond_identity_closure0 i)) (x:item'0) (_3:Snapshot.snap_ty (Seq.seq item'0)) (return'  (ret:item'0))= {inv'1 _3}
    {[%#s06_map_precond0] inv'0 x}
    (! bb0 [ bb0 = s0 [ s0 = -{resolve'0 _1}- s1 | s1 =  [ &_0 <- x ] s2 | s2 = bb1 ]  | bb1 = return' {_0} ] )
    [ & _0 : item'0 = any_l () | & _1 : borrowed (Closure'0.c06mapprecond_identity_closure0 i) = _1 | & x : item'0 = x ]
    
    [ return' (result:item'0)-> {[@expl:postcondition] [%#s06_map_precond1] inv'0 result}
      {[@expl:postcondition] unnest'0 _1.current _1.final}
      (! return' {result}) ]
    
end
module C06MapPrecond_Identity
  type i
  
  let%span s06_map_precond0 = "../06_map_precond.rs" 177 29 177 33
  
  let%span span1 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span2 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span5 = "../06_map_precond.rs" 84 8 88 9
  
  let%span span6 = "../06_map_precond.rs" 106 8 113 9
  
  let%span span7 = "../06_map_precond.rs" 93 24 93 28
  
  let%span span8 = "../06_map_precond.rs" 93 33 93 37
  
  let%span span9 = "../06_map_precond.rs" 93 42 93 50
  
  let%span span10 = "../06_map_precond.rs" 92 4 92 83
  
  let%span span11 = "../06_map_precond.rs" 94 8 101 9
  
  let%span span12 = "../06_map_precond.rs" 118 8 123 9
  
  let%span span13 = "../06_map_precond.rs" 159 12 161 73
  
  let%span span14 = "../common.rs" 18 15 18 32
  
  let%span span15 = "../common.rs" 19 15 19 32
  
  let%span span16 = "../common.rs" 21 22 21 23
  
  let%span span17 = "../common.rs" 21 31 21 33
  
  let%span span18 = "../common.rs" 21 52 21 53
  
  let%span span19 = "../common.rs" 21 61 21 63
  
  let%span span20 = "../common.rs" 21 82 21 83
  
  let%span span21 = "../common.rs" 20 14 20 42
  
  let%span span22 = "../common.rs" 15 21 15 25
  
  let%span span23 = "../common.rs" 14 14 14 45
  
  let%span span24 = "../06_map_precond.rs" 166 0 166 131
  
  let%span span25 = "../06_map_precond.rs" 167 11 167 41
  
  let%span span26 = "../06_map_precond.rs" 168 11 168 51
  
  let%span span27 = "../06_map_precond.rs" 171 4 171 8
  
  let%span span28 = "../06_map_precond.rs" 172 4 172 8
  
  let%span span29 = "../06_map_precond.rs" 169 10 169 75
  
  let%span span30 = "../06_map_precond.rs" 173 5 173 17
  
  type item'0
  
  predicate inv'2 (_x : item'0)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'8 (self : item'0) =
    [%#span1] inv'2 self
  
  predicate inv'8 (_x : item'0)
  
  axiom inv'8 : forall x : item'0 . inv'8 x = true
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate invariant'7 (self : Snapshot.snap_ty (Seq.seq item'0)) =
    [%#span2] true
  
  predicate inv'7 (_x : Snapshot.snap_ty (Seq.seq item'0))
  
  axiom inv'7 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'7 x = true
  
  use prelude.prelude.Int16
  
  use C06MapPrecond_Identity_Closure0_Type as Closure'0
  
  predicate inv'3 (_x : Closure'0.c06mapprecond_identity_closure0 i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'6 (self : borrowed (Closure'0.c06mapprecond_identity_closure0 i)) =
    [%#span3] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'6 (_x : borrowed (Closure'0.c06mapprecond_identity_closure0 i))
  
  axiom inv'6 : forall x : borrowed (Closure'0.c06mapprecond_identity_closure0 i) . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'5 (self : Seq.seq item'0) =
    [%#span4] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'5 (_x : Seq.seq item'0)
  
  axiom inv'5 : forall x : Seq.seq item'0 . inv'5 x = true
  
  predicate inv'1 (_x : i)
  
  predicate invariant'4 (self : borrowed i) =
    [%#span3] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'4 (_x : borrowed i)
  
  axiom inv'4 : forall x : borrowed i . inv'4 x = true
  
  predicate invariant'3 (self : Closure'0.c06mapprecond_identity_closure0 i) =
    [%#span2] true
  
  axiom inv'3 : forall x : Closure'0.c06mapprecond_identity_closure0 i . inv'3 x = true
  
  predicate invariant'2 (self : item'0)
  
  axiom inv'2 : forall x : item'0 . inv'2 x = true
  
  predicate invariant'1 (self : i)
  
  axiom inv'1 : forall x : i . inv'1 x = true
  
  predicate precondition'0 [#"../06_map_precond.rs" 178 14 178 20] (self : Closure'0.c06mapprecond_identity_closure0 i) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
    
   =
    let (x, _3) = args in true
  
  use prelude.prelude.Snapshot
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : Closure'0.c06mapprecond_identity_closure0 i) (produced : Seq.seq item'0)
    
   =
    [%#span5] forall e : item'0, i : i . inv'2 e /\ inv'1 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  predicate unnest'0 [#"../06_map_precond.rs" 178 14 178 20] (self : Closure'0.c06mapprecond_identity_closure0 i) (_2 : Closure'0.c06mapprecond_identity_closure0 i)
    
   =
    true
  
  predicate postcondition_mut'0 [#"../06_map_precond.rs" 178 14 178 20] (self : borrowed (Closure'0.c06mapprecond_identity_closure0 i)) (args : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (result : item'0)
    
   =
    (let (x, _3) = args in true) /\ unnest'0 self.current self.final
  
  use seq.Seq
  
  use seq.Seq
  
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : Closure'0.c06mapprecond_identity_closure0 i)
    
   =
    [%#span6] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed (Closure'0.c06mapprecond_identity_closure0 i), b : item'0, i : i . inv'5 s
    /\ inv'2 e1 /\ inv'2 e2 /\ inv'6 f /\ inv'2 b /\ inv'1 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  use seq.Seq
  
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : Closure'0.c06mapprecond_identity_closure0 i) (produced : Seq.seq item'0)
    
   =
    [%#span11] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed (Closure'0.c06mapprecond_identity_closure0 i), b : item'0, i : i . inv'5 s
    /\ inv'2 e1 /\ inv'2 e2 /\ inv'6 f /\ inv'2 b /\ inv'1 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : Closure'0.c06mapprecond_identity_closure0 i, produced : Seq.seq item'0 . ([%#span7] inv'1 iter)
   -> ([%#span8] inv'3 func)
   -> ([%#span9] inv'5 produced)
   -> ([%#span10] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  
  use prelude.prelude.Snapshot
  
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [%#span12] forall iter : borrowed i, func : Closure'0.c06mapprecond_identity_closure0 i . inv'4 iter /\ inv'3 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq item'0) /\ preservation'0 iter.final func
  
  use C06MapPrecond_Map_Type as Map'0
  
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : Map'0.t_map i item'0 (Closure'0.c06mapprecond_identity_closure0 i) item'0)
    
   =
    [%#span13] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  
  predicate inv'0 (_x : Map'0.t_map i item'0 (Closure'0.c06mapprecond_identity_closure0 i) item'0)
  
  axiom inv'0 : forall x : Map'0.t_map i item'0 (Closure'0.c06mapprecond_identity_closure0 i) item'0 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> true
    end)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span14] produces'0 a ab b)
   -> ([%#span15] produces'0 b bc c)
   -> ([%#span16] inv'1 a)
   -> ([%#span17] inv'5 ab)
   -> ([%#span18] inv'1 b)
   -> ([%#span19] inv'5 bc)  -> ([%#span20] inv'1 c)  -> ([%#span21] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span22] inv'1 self)
   -> ([%#span23] produces'0 self (Seq.empty  : Seq.seq item'0) self)
  
  use prelude.prelude.Intrinsic
  
  let rec map'0 (iter:i) (func:Closure'0.c06mapprecond_identity_closure0 i) (return'  (ret:Map'0.t_map i item'0 (Closure'0.c06mapprecond_identity_closure0 i) item'0))= {[@expl:precondition] [%#span28] inv'3 func}
    {[@expl:precondition] [%#span27] inv'1 iter}
    {[@expl:precondition] [%#span26] preservation'0 iter func}
    {[@expl:precondition] [%#span25] reinitialize'0 ()}
    {[@expl:precondition] [%#span24] forall e : item'0, i2 : i . inv'2 e /\ inv'1 i2
     -> produces'0 iter (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq item'0))}
    any
    [ return' (result:Map'0.t_map i item'0 (Closure'0.c06mapprecond_identity_closure0 i) item'0)-> {[%#span30] inv'0 result}
      {[%#span29] result = Map'0.C_Map iter func (Snapshot.new (Seq.empty  : Seq.seq item'0))}
      (! return' {result}) ]
    
  
  let rec identity (iter:i) (return'  (ret:()))= {[%#s06_map_precond0] inv'1 iter}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- Closure'0.C06mapprecond_identity_closure0 ] s1
      | s1 = map'0 {iter} {_4}
          (fun (_ret':Map'0.t_map i item'0 (Closure'0.c06mapprecond_identity_closure0 i) item'0) ->
             [ &_2 <- _ret' ] 
            s2)
      | s2 = {[@expl:type invariant] inv'0 _2} s3
      | s3 = bb1 ]
      
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & iter : i = iter
    | & _2 : Map'0.t_map i item'0 (Closure'0.c06mapprecond_identity_closure0 i) item'0 = any_l ()
    | & _4 : Closure'0.c06mapprecond_identity_closure0 i = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C06MapPrecond_Increment_Closure2_Type
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int16
  
  type c06mapprecond_increment_closure2 'u =
    | C06mapprecond_increment_closure2
  
  let rec c06mapprecond_increment_closure2 < 'u > (input:c06mapprecond_increment_closure2 'u) (ret  )= any
    [ good -> {C06mapprecond_increment_closure2  = input} (! ret)
    | bad -> {C06mapprecond_increment_closure2  <> input} {false} any ]
    
end
module C06MapPrecond_Increment_Closure2
  type u
  
  let%span s06_map_precond0 = "../06_map_precond.rs" 190 24 190 25
  
  let%span s06_map_precond1 = "../06_map_precond.rs" 188 19 188 27
  
  let%span s06_map_precond2 = "../06_map_precond.rs" 189 18 189 33
  
  let%span span3 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Int16
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use C06MapPrecond_Increment_Closure2_Type as Closure'0
  
  predicate unnest'0 [#"../06_map_precond.rs" 189 8 189 35] (self : Closure'0.c06mapprecond_increment_closure2 u) (_2 : Closure'0.c06mapprecond_increment_closure2 u)
    
   =
    true
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  predicate resolve'0 (self : borrowed (Closure'0.c06mapprecond_increment_closure2 u)) =
    [%#span3] self.final = self.current
  
  let rec c06mapprecond_increment_closure2 (_1:borrowed (Closure'0.c06mapprecond_increment_closure2 u)) (x:uint32) (_3:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:uint32))= {[%#s06_map_precond1] UInt32.to_int x
    <= 15}
    (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 = UInt32.add {x} {[%#s06_map_precond0] (1 : uint32)} (fun (_ret':uint32) ->  [ &res1 <- _ret' ] s2)
      | s2 =  [ &res <- res1 ] s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = return' {_0} ]
       ]
    )
    [ & _0 : uint32 = any_l ()
    | & _1 : borrowed (Closure'0.c06mapprecond_increment_closure2 u) = _1
    | & x : uint32 = x
    | & res : uint32 = any_l ()
    | & res1 : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] unnest'0 _1.current _1.final}
      {[@expl:postcondition] [%#s06_map_precond2] UInt32.to_int result = UInt32.to_int x + 1}
      (! return' {result}) ]
    
end
module C06MapPrecond_Increment
  type u
  
  let%span s06_map_precond0 = "../06_map_precond.rs" 193 4 196 5
  
  let%span s06_map_precond1 = "../06_map_precond.rs" 181 0 181 158
  
  let%span s06_map_precond2 = "../06_map_precond.rs" 182 0 184 2
  
  let%span s06_map_precond3 = "../06_map_precond.rs" 185 42 185 46
  
  let%span span4 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span8 = "../common.rs" 18 15 18 32
  
  let%span span9 = "../common.rs" 19 15 19 32
  
  let%span span10 = "../common.rs" 21 22 21 23
  
  let%span span11 = "../common.rs" 21 31 21 33
  
  let%span span12 = "../common.rs" 21 52 21 53
  
  let%span span13 = "../common.rs" 21 61 21 63
  
  let%span span14 = "../common.rs" 21 82 21 83
  
  let%span span15 = "../common.rs" 20 14 20 42
  
  let%span span16 = "../common.rs" 15 21 15 25
  
  let%span span17 = "../common.rs" 14 14 14 45
  
  let%span span18 = "../06_map_precond.rs" 188 19 188 27
  
  let%span span19 = "../06_map_precond.rs" 44 8 56 9
  
  let%span span20 = "../06_map_precond.rs" 35 15 35 32
  
  let%span span21 = "../06_map_precond.rs" 36 15 36 32
  
  let%span span22 = "../06_map_precond.rs" 38 22 38 23
  
  let%span span23 = "../06_map_precond.rs" 38 31 38 33
  
  let%span span24 = "../06_map_precond.rs" 38 52 38 53
  
  let%span span25 = "../06_map_precond.rs" 38 61 38 63
  
  let%span span26 = "../06_map_precond.rs" 38 82 38 83
  
  let%span span27 = "../06_map_precond.rs" 37 14 37 42
  
  let%span span28 = "../06_map_precond.rs" 33 4 33 10
  
  let%span span29 = "../06_map_precond.rs" 31 21 31 25
  
  let%span span30 = "../06_map_precond.rs" 30 14 30 45
  
  let%span span31 = "../06_map_precond.rs" 28 4 28 10
  
  let%span span32 = "../06_map_precond.rs" 84 8 88 9
  
  let%span span33 = "../06_map_precond.rs" 106 8 113 9
  
  let%span span34 = "../06_map_precond.rs" 93 24 93 28
  
  let%span span35 = "../06_map_precond.rs" 93 33 93 37
  
  let%span span36 = "../06_map_precond.rs" 93 42 93 50
  
  let%span span37 = "../06_map_precond.rs" 92 4 92 83
  
  let%span span38 = "../06_map_precond.rs" 94 8 101 9
  
  let%span span39 = "../06_map_precond.rs" 118 8 123 9
  
  let%span span40 = "../06_map_precond.rs" 159 12 161 73
  
  let%span span41 = "../06_map_precond.rs" 166 0 166 131
  
  let%span span42 = "../06_map_precond.rs" 167 11 167 41
  
  let%span span43 = "../06_map_precond.rs" 168 11 168 51
  
  let%span span44 = "../06_map_precond.rs" 171 4 171 8
  
  let%span span45 = "../06_map_precond.rs" 172 4 172 8
  
  let%span span46 = "../06_map_precond.rs" 169 10 169 75
  
  let%span span47 = "../06_map_precond.rs" 173 5 173 17
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int16
  
  use C06MapPrecond_Increment_Closure2_Type as Closure'0
  
  use prelude.prelude.Borrow
  
  predicate inv'7 (_x : borrowed (Closure'0.c06mapprecond_increment_closure2 u))
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'10 (self : borrowed (Closure'0.c06mapprecond_increment_closure2 u)) =
    [%#span4] inv'7 self
  
  predicate inv'10 (_x : borrowed (Closure'0.c06mapprecond_increment_closure2 u))
  
  axiom inv'10 : forall x : borrowed (Closure'0.c06mapprecond_increment_closure2 u) . inv'10 x = true
  
  predicate inv'3 (_x : uint32)
  
  predicate invariant'9 (self : uint32) =
    [%#span4] inv'3 self
  
  predicate inv'9 (_x : uint32)
  
  axiom inv'9 : forall x : uint32 . inv'9 x = true
  
  predicate invariant'8 (self : Snapshot.snap_ty (Seq.seq uint32)) =
    [%#span5] true
  
  predicate inv'8 (_x : Snapshot.snap_ty (Seq.seq uint32))
  
  axiom inv'8 : forall x : Snapshot.snap_ty (Seq.seq uint32) . inv'8 x = true
  
  predicate inv'4 (_x : Closure'0.c06mapprecond_increment_closure2 u)
  
  predicate invariant'7 (self : borrowed (Closure'0.c06mapprecond_increment_closure2 u)) =
    [%#span6] inv'4 self.current /\ inv'4 self.final
  
  axiom inv'7 : forall x : borrowed (Closure'0.c06mapprecond_increment_closure2 u) . inv'7 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'6 (self : Seq.seq (borrowed (Closure'0.c06mapprecond_increment_closure2 u))) =
    [%#span7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  predicate inv'6 (_x : Seq.seq (borrowed (Closure'0.c06mapprecond_increment_closure2 u)))
  
  axiom inv'6 : forall x : Seq.seq (borrowed (Closure'0.c06mapprecond_increment_closure2 u)) . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq uint32) =
    [%#span7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'5 (_x : Seq.seq uint32)
  
  axiom inv'5 : forall x : Seq.seq uint32 . inv'5 x = true
  
  predicate invariant'4 (self : Closure'0.c06mapprecond_increment_closure2 u) =
    [%#span5] true
  
  axiom inv'4 : forall x : Closure'0.c06mapprecond_increment_closure2 u . inv'4 x = true
  
  predicate invariant'3 (self : uint32) =
    [%#span5] true
  
  axiom inv'3 : forall x : uint32 . inv'3 x = true
  
  predicate invariant'2 (self : u)
  
  predicate inv'2 (_x : u)
  
  axiom inv'2 : forall x : u . inv'2 x = true
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : u) (visited : Seq.seq uint32) (o : u)
  
  function produces_trans'1 [#"../common.rs" 21 4 21 91] (a : u) (ab : Seq.seq uint32) (b : u) (bc : Seq.seq uint32) (c : u) : ()
    
  
  axiom produces_trans'1_spec : forall a : u, ab : Seq.seq uint32, b : u, bc : Seq.seq uint32, c : u . ([%#span8] produces'1 a ab b)
   -> ([%#span9] produces'1 b bc c)
   -> ([%#span10] inv'2 a)
   -> ([%#span11] inv'5 ab)
   -> ([%#span12] inv'2 b)
   -> ([%#span13] inv'5 bc)  -> ([%#span14] inv'2 c)  -> ([%#span15] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 [#"../common.rs" 15 4 15 27] (self : u) : ()
  
  axiom produces_refl'1_spec : forall self : u . ([%#span16] inv'2 self)
   -> ([%#span17] produces'1 self (Seq.empty  : Seq.seq uint32) self)
  
  predicate invariant'1 (self : borrowed u) =
    [%#span6] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'1 (_x : borrowed u)
  
  axiom inv'1 : forall x : borrowed u . inv'1 x = true
  
  use C06MapPrecond_Map_Type as Map'0
  
  predicate inv'0 (_x : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32)
  
  predicate unnest'0 [#"../06_map_precond.rs" 189 8 189 35] (self : Closure'0.c06mapprecond_increment_closure2 u) (_2 : Closure'0.c06mapprecond_increment_closure2 u)
    
   =
    true
  
  use prelude.prelude.UInt32
  
  predicate postcondition_mut'0 [#"../06_map_precond.rs" 189 8 189 35] (self : borrowed (Closure'0.c06mapprecond_increment_closure2 u)) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (result : uint32)
    
   =
    (let (x, _3) = args in UInt32.to_int result = UInt32.to_int x + 1) /\ unnest'0 self.current self.final
  
  predicate precondition'0 [#"../06_map_precond.rs" 189 8 189 35] (self : Closure'0.c06mapprecond_increment_closure2 u) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32)))
    
   =
    [%#span18] let (x, _3) = args in UInt32.to_int x <= 15
  
  use prelude.prelude.Snapshot
  
  use prelude.seq_ext.SeqExt
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  
  predicate produces'0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32) (visited : Seq.seq uint32) (succ : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32)
    
   =
    [%#span19] unnest'0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ)
    /\ (exists s : Seq.seq uint32 . inv'5 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) s
    /\ (exists fs : Seq.seq (borrowed (Closure'0.c06mapprecond_increment_closure2 u)) . inv'6 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
      (Seq.get fs 0).current = C06MapPrecond_Map_Type.map_func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = C06MapPrecond_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C06MapPrecond_Map_Type.map_func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  
  function produces_trans'0 [#"../06_map_precond.rs" 38 4 38 90] (a : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32) (ab : Seq.seq uint32) (b : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32) (bc : Seq.seq uint32) (c : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32) : ()
    
   =
    [%#span28] ()
  
  axiom produces_trans'0_spec : forall a : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32, ab : Seq.seq uint32, b : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32, bc : Seq.seq uint32, c : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32 . ([%#span20] produces'0 a ab b)
   -> ([%#span21] produces'0 b bc c)
   -> ([%#span22] inv'0 a)
   -> ([%#span23] inv'5 ab)
   -> ([%#span24] inv'0 b)
   -> ([%#span25] inv'5 bc)  -> ([%#span26] inv'0 c)  -> ([%#span27] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"../06_map_precond.rs" 31 4 31 26] (self : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32) : ()
    
   =
    [%#span31] ()
  
  axiom produces_refl'0_spec : forall self : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32 . ([%#span29] inv'0 self)
   -> ([%#span30] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : u) (func : Closure'0.c06mapprecond_increment_closure2 u) (produced : Seq.seq uint32)
    
   =
    [%#span32] forall e : uint32, i : u . inv'3 e /\ inv'2 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  use seq.Seq
  
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : u) (func : Closure'0.c06mapprecond_increment_closure2 u)
    
   =
    [%#span33] forall s : Seq.seq uint32, e1 : uint32, e2 : uint32, f : borrowed (Closure'0.c06mapprecond_increment_closure2 u), b : uint32, i : u . inv'5 s
    /\ inv'3 e1 /\ inv'3 e2 /\ inv'7 f /\ inv'3 b /\ inv'2 i
     -> unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : u) (func : Closure'0.c06mapprecond_increment_closure2 u) (produced : Seq.seq uint32)
    
   =
    [%#span38] forall s : Seq.seq uint32, e1 : uint32, e2 : uint32, f : borrowed (Closure'0.c06mapprecond_increment_closure2 u), b : uint32, i : u . inv'5 s
    /\ inv'3 e1 /\ inv'3 e2 /\ inv'7 f /\ inv'3 b /\ inv'2 i
     -> unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : u, func : Closure'0.c06mapprecond_increment_closure2 u, produced : Seq.seq uint32 . ([%#span34] inv'2 iter)
   -> ([%#span35] inv'4 func)
   -> ([%#span36] inv'5 produced)
   -> ([%#span37] produced = (Seq.empty  : Seq.seq uint32)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed u)
  
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [%#span39] forall iter : borrowed u, func : Closure'0.c06mapprecond_increment_closure2 u . inv'1 iter /\ inv'4 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq uint32) /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32)
    
   =
    [%#span40] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  
  axiom inv'0 : forall x : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> true
    end)
  
  use prelude.prelude.Intrinsic
  
  let rec map'0 (iter:u) (func:Closure'0.c06mapprecond_increment_closure2 u) (return'  (ret:Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32))= {[@expl:precondition] [%#span45] inv'4 func}
    {[@expl:precondition] [%#span44] inv'2 iter}
    {[@expl:precondition] [%#span43] preservation'0 iter func}
    {[@expl:precondition] [%#span42] reinitialize'0 ()}
    {[@expl:precondition] [%#span41] forall e : uint32, i2 : u . inv'3 e /\ inv'2 i2
     -> produces'1 iter (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq uint32))}
    any
    [ return' (result:Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32)-> {[%#span47] inv'0 result}
      {[%#span46] result = Map'0.C_Map iter func (Snapshot.new (Seq.empty  : Seq.seq uint32))}
      (! return' {result}) ]
    
  
  let rec increment (iter:u) (return'  (ret:()))= {[%#s06_map_precond3] inv'2 iter}
    {[%#s06_map_precond2] forall prod : Seq.seq uint32, fin : u . inv'2 fin
     -> produces'1 iter prod fin
     -> (forall x : int . 0 <= x /\ x < Seq.length prod  -> Seq.get prod x <= (10 : uint32))}
    {[%#s06_map_precond1] forall done' : borrowed u . inv'1 done'
     -> completed'0 done'
     -> (forall next : u, steps : Seq.seq uint32 . inv'2 next
     -> produces'1 done'.final steps next  -> steps = (Seq.empty  : Seq.seq uint32) /\ done'.final = next)}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 =  [ &_6 <- Closure'0.C06mapprecond_increment_closure2 ] s1
      | s1 = map'0 {iter} {_6}
          (fun (_ret':Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32) ->
             [ &i <- _ret' ] 
            s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = {[@expl:type invariant] inv'0 i} s1
      | s1 = {[@expl:assertion] [%#s06_map_precond0] forall prod : Seq.seq uint32, fin : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32 . inv'0 fin
         -> produces'0 i prod fin
         -> (forall x : int . 0 <= x /\ x < Seq.length prod  -> Seq.get prod x <= (11 : uint32))}
        s2
      | s2 = bb3 ]
      
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & iter : u = iter
    | & i : Map'0.t_map u uint32 (Closure'0.c06mapprecond_increment_closure2 u) uint32 = any_l ()
    | & _6 : Closure'0.c06mapprecond_increment_closure2 u = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C06MapPrecond_Counter_Closure2_Type
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int16
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type c06mapprecond_counter_closure2 'i =
    | C06mapprecond_counter_closure2 (borrowed usize)
  
  let rec c06mapprecond_counter_closure2 < 'i > (input:c06mapprecond_counter_closure2 'i) (ret  (cnt:borrowed usize))= any
    [ good (cnt:borrowed usize)-> {C06mapprecond_counter_closure2 cnt = input} (! ret {cnt})
    | bad (cnt:borrowed usize)-> {C06mapprecond_counter_closure2 cnt <> input} {false} any ]
    
end
module C06MapPrecond_Counter_Closure2
  type i
  
  let%span s06_map_precond0 = "../06_map_precond.rs" 208 19 208 20
  
  let%span s06_map_precond1 = "../06_map_precond.rs" 205 19 205 61
  
  let%span s06_map_precond2 = "../06_map_precond.rs" 206 18 206 39
  
  let%span span3 = "" 0 0 0 0
  
  let%span span4 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Int16
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Borrow
  
  use C06MapPrecond_Counter_Closure2_Type as Closure'0
  
  function field_0'0 [#"../06_map_precond.rs" 206 8 206 41] (self : Closure'0.c06mapprecond_counter_closure2 i) : borrowed usize
    
   =
    let Closure'0.C06mapprecond_counter_closure2 a = self in a
  
  predicate unnest'0 [#"../06_map_precond.rs" 206 8 206 41] (self : Closure'0.c06mapprecond_counter_closure2 i) (_2 : Closure'0.c06mapprecond_counter_closure2 i)
    
   =
    (field_0'0 _2).final = (field_0'0 self).final
  
  constant max'0 : usize = [%#span3] (18446744073709551615 : usize)
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed (Closure'0.c06mapprecond_counter_closure2 i)) =
    [%#span4] self.final = self.current
  
  let rec c06mapprecond_counter_closure2 (_1:borrowed (Closure'0.c06mapprecond_counter_closure2 i)) (x:uint32) (_prod:Snapshot.snap_ty (Seq.seq uint32)) (return'  (ret:uint32))= {[%#s06_map_precond1] UIntSize.to_int (field_0'0 _1.current).current
    = Seq.length (Snapshot.inner _prod)
    /\ (field_0'0 _1.current).current < (max'0 : usize)}
    (! bb0
    [ bb0 = s0
      [ s0 = Closure'0.c06mapprecond_counter_closure2 <i> {_1.current}
          (fun (r'0:borrowed usize) ->
            UIntSize.add {r'0.current} {[%#s06_map_precond0] (1 : usize)}
              (fun (_ret':usize) ->
                Closure'0.c06mapprecond_counter_closure2 <i> {_1.current}
                  (fun (l'0:borrowed usize) ->
                    
                    [ &_1 <- { _1 with current = Closure'0.C06mapprecond_counter_closure2 ({ l'0 with current = _ret' ; }) ; } ]
                    
                    s1)))
      | s1 = -{resolve'0 _1}- s2
      | s2 =  [ &res1 <- x ] s3
      | s3 =  [ &res <- res1 ] s4
      | s4 =  [ &_0 <- res ] s5
      | s5 = return' {_0} ]
       ]
    )
    [ & _0 : uint32 = any_l ()
    | & _1 : borrowed (Closure'0.c06mapprecond_counter_closure2 i) = _1
    | & x : uint32 = x
    | & res : uint32 = any_l ()
    | & res1 : uint32 = any_l () ]
    
    [ return' (result:uint32)-> {[@expl:postcondition] unnest'0 _1.current _1.final}
      {[@expl:postcondition] [%#s06_map_precond2] UIntSize.to_int (field_0'0 _1.final).current
      = UIntSize.to_int (field_0'0 _1.current).current + 1}
      (! return' {result}) ]
    
end
module C06MapPrecond_Counter
  type i
  
  let%span s06_map_precond0 = "../06_map_precond.rs" 202 18 202 19
  
  let%span s06_map_precond1 = "../06_map_precond.rs" 199 0 199 158
  
  let%span s06_map_precond2 = "../06_map_precond.rs" 200 0 200 92
  
  let%span s06_map_precond3 = "../06_map_precond.rs" 201 40 201 44
  
  let%span span4 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span8 = "../common.rs" 18 15 18 32
  
  let%span span9 = "../common.rs" 19 15 19 32
  
  let%span span10 = "../common.rs" 21 22 21 23
  
  let%span span11 = "../common.rs" 21 31 21 33
  
  let%span span12 = "../common.rs" 21 52 21 53
  
  let%span span13 = "../common.rs" 21 61 21 63
  
  let%span span14 = "../common.rs" 21 82 21 83
  
  let%span span15 = "../common.rs" 20 14 20 42
  
  let%span span16 = "../common.rs" 15 21 15 25
  
  let%span span17 = "../common.rs" 14 14 14 45
  
  let%span span18 = "" 0 0 0 0
  
  let%span span19 = "../06_map_precond.rs" 205 19 205 61
  
  let%span span20 = "../06_map_precond.rs" 84 8 88 9
  
  let%span span21 = "../06_map_precond.rs" 106 8 113 9
  
  let%span span22 = "../06_map_precond.rs" 93 24 93 28
  
  let%span span23 = "../06_map_precond.rs" 93 33 93 37
  
  let%span span24 = "../06_map_precond.rs" 93 42 93 50
  
  let%span span25 = "../06_map_precond.rs" 92 4 92 83
  
  let%span span26 = "../06_map_precond.rs" 94 8 101 9
  
  let%span span27 = "../06_map_precond.rs" 118 8 123 9
  
  let%span span28 = "../06_map_precond.rs" 159 12 161 73
  
  let%span span29 = "../06_map_precond.rs" 166 0 166 131
  
  let%span span30 = "../06_map_precond.rs" 167 11 167 41
  
  let%span span31 = "../06_map_precond.rs" 168 11 168 51
  
  let%span span32 = "../06_map_precond.rs" 171 4 171 8
  
  let%span span33 = "../06_map_precond.rs" 172 4 172 8
  
  let%span span34 = "../06_map_precond.rs" 169 10 169 75
  
  let%span span35 = "../06_map_precond.rs" 173 5 173 17
  
  use prelude.prelude.UInt32
  
  predicate inv'3 (_x : uint32)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'8 (self : uint32) =
    [%#span4] inv'3 self
  
  predicate inv'8 (_x : uint32)
  
  axiom inv'8 : forall x : uint32 . inv'8 x = true
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate invariant'7 (self : Snapshot.snap_ty (Seq.seq uint32)) =
    [%#span5] true
  
  predicate inv'7 (_x : Snapshot.snap_ty (Seq.seq uint32))
  
  axiom inv'7 : forall x : Snapshot.snap_ty (Seq.seq uint32) . inv'7 x = true
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Int16
  
  use C06MapPrecond_Counter_Closure2_Type as Closure'0
  
  predicate inv'4 (_x : Closure'0.c06mapprecond_counter_closure2 i)
  
  predicate invariant'6 (self : borrowed (Closure'0.c06mapprecond_counter_closure2 i)) =
    [%#span6] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'6 (_x : borrowed (Closure'0.c06mapprecond_counter_closure2 i))
  
  axiom inv'6 : forall x : borrowed (Closure'0.c06mapprecond_counter_closure2 i) . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'5 (self : Seq.seq uint32) =
    [%#span7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'5 (_x : Seq.seq uint32)
  
  axiom inv'5 : forall x : Seq.seq uint32 . inv'5 x = true
  
  predicate invariant'4 (self : Closure'0.c06mapprecond_counter_closure2 i) =
    [%#span5] true
  
  axiom inv'4 : forall x : Closure'0.c06mapprecond_counter_closure2 i . inv'4 x = true
  
  predicate invariant'3 (self : uint32) =
    [%#span5] true
  
  axiom inv'3 : forall x : uint32 . inv'3 x = true
  
  predicate invariant'2 (self : i)
  
  predicate inv'2 (_x : i)
  
  axiom inv'2 : forall x : i . inv'2 x = true
  
  use seq.Seq
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq uint32) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq uint32) (b : i) (bc : Seq.seq uint32) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq uint32, b : i, bc : Seq.seq uint32, c : i . ([%#span8] produces'0 a ab b)
   -> ([%#span9] produces'0 b bc c)
   -> ([%#span10] inv'2 a)
   -> ([%#span11] inv'5 ab)
   -> ([%#span12] inv'2 b)
   -> ([%#span13] inv'5 bc)  -> ([%#span14] inv'2 c)  -> ([%#span15] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span16] inv'2 self)
   -> ([%#span17] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  
  predicate invariant'1 (self : borrowed i) =
    [%#span6] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'1 (_x : borrowed i)
  
  axiom inv'1 : forall x : borrowed i . inv'1 x = true
  
  constant max'0 : usize = [%#span18] (18446744073709551615 : usize)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.UIntSize
  
  function field_0'0 [#"../06_map_precond.rs" 206 8 206 41] (self : Closure'0.c06mapprecond_counter_closure2 i) : borrowed usize
    
   =
    let Closure'0.C06mapprecond_counter_closure2 a = self in a
  
  predicate precondition'0 [#"../06_map_precond.rs" 206 8 206 41] (self : Closure'0.c06mapprecond_counter_closure2 i) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32)))
    
   =
    [%#span19] let (x, _prod) = args in UIntSize.to_int (field_0'0 self).current = Seq.length (Snapshot.inner _prod)
    /\ (field_0'0 self).current < (max'0 : usize)
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : Closure'0.c06mapprecond_counter_closure2 i) (produced : Seq.seq uint32)
    
   =
    [%#span20] forall e : uint32, i : i . inv'3 e /\ inv'2 i
     -> produces'0 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  predicate unnest'0 [#"../06_map_precond.rs" 206 8 206 41] (self : Closure'0.c06mapprecond_counter_closure2 i) (_2 : Closure'0.c06mapprecond_counter_closure2 i)
    
   =
    (field_0'0 _2).final = (field_0'0 self).final
  
  predicate postcondition_mut'0 [#"../06_map_precond.rs" 206 8 206 41] (self : borrowed (Closure'0.c06mapprecond_counter_closure2 i)) (args : (uint32, Snapshot.snap_ty (Seq.seq uint32))) (result : uint32)
    
   =
    (let (x, _prod) = args in UIntSize.to_int (field_0'0 self.final).current
    = UIntSize.to_int (field_0'0 self.current).current + 1)
    /\ unnest'0 self.current self.final
  
  use seq.Seq
  
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : Closure'0.c06mapprecond_counter_closure2 i)
    
   =
    [%#span21] forall s : Seq.seq uint32, e1 : uint32, e2 : uint32, f : borrowed (Closure'0.c06mapprecond_counter_closure2 i), b : uint32, i : i . inv'5 s
    /\ inv'3 e1 /\ inv'3 e2 /\ inv'6 f /\ inv'3 b /\ inv'2 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : Closure'0.c06mapprecond_counter_closure2 i) (produced : Seq.seq uint32)
    
   =
    [%#span26] forall s : Seq.seq uint32, e1 : uint32, e2 : uint32, f : borrowed (Closure'0.c06mapprecond_counter_closure2 i), b : uint32, i : i . inv'5 s
    /\ inv'3 e1 /\ inv'3 e2 /\ inv'6 f /\ inv'3 b /\ inv'2 i
     -> unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : Closure'0.c06mapprecond_counter_closure2 i, produced : Seq.seq uint32 . ([%#span22] inv'2 iter)
   -> ([%#span23] inv'4 func)
   -> ([%#span24] inv'5 produced)
   -> ([%#span25] produced = (Seq.empty  : Seq.seq uint32)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  
  predicate completed'0 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [%#span27] forall iter : borrowed i, func : Closure'0.c06mapprecond_counter_closure2 i . inv'1 iter /\ inv'4 func
     -> completed'0 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq uint32) /\ preservation'0 iter.final func
  
  use C06MapPrecond_Map_Type as Map'0
  
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : Map'0.t_map i uint32 (Closure'0.c06mapprecond_counter_closure2 i) uint32)
    
   =
    [%#span28] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  
  predicate inv'0 (_x : Map'0.t_map i uint32 (Closure'0.c06mapprecond_counter_closure2 i) uint32)
  
  axiom inv'0 : forall x : Map'0.t_map i uint32 (Closure'0.c06mapprecond_counter_closure2 i) uint32 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> true
    end)
  
  use prelude.prelude.Intrinsic
  
  let rec map'0 (iter:i) (func:Closure'0.c06mapprecond_counter_closure2 i) (return'  (ret:Map'0.t_map i uint32 (Closure'0.c06mapprecond_counter_closure2 i) uint32))= {[@expl:precondition] [%#span33] inv'4 func}
    {[@expl:precondition] [%#span32] inv'2 iter}
    {[@expl:precondition] [%#span31] preservation'0 iter func}
    {[@expl:precondition] [%#span30] reinitialize'0 ()}
    {[@expl:precondition] [%#span29] forall e : uint32, i2 : i . inv'3 e /\ inv'2 i2
     -> produces'0 iter (Seq.singleton e) i2  -> precondition'0 func (e, Snapshot.new (Seq.empty  : Seq.seq uint32))}
    any
    [ return' (result:Map'0.t_map i uint32 (Closure'0.c06mapprecond_counter_closure2 i) uint32)-> {[%#span35] inv'0 result}
      {[%#span34] result = Map'0.C_Map iter func (Snapshot.new (Seq.empty  : Seq.seq uint32))}
      (! return' {result}) ]
    
  
  let rec counter (iter:i) (return'  (ret:()))= {[%#s06_map_precond3] inv'2 iter}
    {[%#s06_map_precond2] forall prod : Seq.seq uint32, fin : i . inv'2 fin
     -> produces'0 iter prod fin  -> Seq.length prod <= UIntSize.to_int (max'0 : usize)}
    {[%#s06_map_precond1] forall done' : borrowed i . inv'1 done'
     -> completed'0 done'
     -> (forall next : i, steps : Seq.seq uint32 . inv'2 next
     -> produces'0 done'.final steps next  -> steps = (Seq.empty  : Seq.seq uint32) /\ done'.final = next)}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 =  [ &cnt <- [%#s06_map_precond0] (0 : usize) ] s1
      | s1 = Borrow.borrow_mut <usize> {cnt} (fun (_ret':borrowed usize) ->  [ &_8 <- _ret' ]  [ &cnt <- _8.final ] s2)
      | s2 =  [ &_7 <- Closure'0.C06mapprecond_counter_closure2 _8 ] s3
      | s3 = map'0 {iter} {_7}
          (fun (_ret':Map'0.t_map i uint32 (Closure'0.c06mapprecond_counter_closure2 i) uint32) ->  [ &_5 <- _ret' ] s4)
      | s4 = {[@expl:type invariant] inv'0 _5} s5
      | s5 = bb2 ]
      
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & iter : i = iter
    | & cnt : usize = any_l ()
    | & _5 : Map'0.t_map i uint32 (Closure'0.c06mapprecond_counter_closure2 i) uint32 = any_l ()
    | & _7 : Closure'0.c06mapprecond_counter_closure2 i = any_l ()
    | & _8 : borrowed usize = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module C06MapPrecond_Impl0
  type i
  
  type b
  
  type f
  
  let%span s06_map_precond0 = "../06_map_precond.rs" 38 4 38 90
  
  let%span s06_map_precond1 = "../06_map_precond.rs" 63 4 63 44
  
  let%span s06_map_precond2 = "../06_map_precond.rs" 31 4 31 26
  
  let%span span3 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span4 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span7 = "../06_map_precond.rs" 84 8 88 9
  
  let%span span8 = "../06_map_precond.rs" 106 8 113 9
  
  let%span span9 = "../06_map_precond.rs" 93 24 93 28
  
  let%span span10 = "../06_map_precond.rs" 93 33 93 37
  
  let%span span11 = "../06_map_precond.rs" 93 42 93 50
  
  let%span span12 = "../06_map_precond.rs" 92 4 92 83
  
  let%span span13 = "../06_map_precond.rs" 94 8 101 9
  
  let%span span14 = "../06_map_precond.rs" 118 8 123 9
  
  let%span span15 = "../06_map_precond.rs" 159 12 161 73
  
  let%span span16 = "../06_map_precond.rs" 44 8 56 9
  
  let%span span17 = "../06_map_precond.rs" 142 20 142 24
  
  let%span span18 = "../06_map_precond.rs" 142 26 142 33
  
  let%span span19 = "../06_map_precond.rs" 142 38 142 42
  
  let%span span20 = "../06_map_precond.rs" 141 14 141 68
  
  let%span span21 = "../06_map_precond.rs" 143 8 149 9
  
  let%span span22 = "../06_map_precond.rs" 22 8 25 9
  
  use prelude.prelude.Borrow
  
  predicate inv'7 (_x : borrowed f)
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'15 (self : borrowed f) =
    [%#span3] inv'7 self
  
  predicate inv'15 (_x : borrowed f)
  
  axiom inv'15 : forall x : borrowed f . inv'15 x = true
  
  type item'0
  
  predicate inv'8 (_x : item'0)
  
  predicate invariant'14 (self : item'0) =
    [%#span3] inv'8 self
  
  predicate inv'14 (_x : item'0)
  
  axiom inv'14 : forall x : item'0 . inv'14 x = true
  
  predicate inv'9 (_x : i)
  
  predicate invariant'13 (self : borrowed i) =
    [%#span4] inv'9 self.current /\ inv'9 self.final
  
  predicate inv'13 (_x : borrowed i)
  
  axiom inv'13 : forall x : borrowed i . inv'13 x = true
  
  predicate inv'6 (_x : b)
  
  predicate invariant'12 (self : b) =
    [%#span3] inv'6 self
  
  predicate inv'12 (_x : b)
  
  axiom inv'12 : forall x : b . inv'12 x = true
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  predicate invariant'11 (self : Snapshot.snap_ty (Seq.seq item'0)) =
    [%#span5] true
  
  predicate inv'11 (_x : Snapshot.snap_ty (Seq.seq item'0))
  
  axiom inv'11 : forall x : Snapshot.snap_ty (Seq.seq item'0) . inv'11 x = true
  
  predicate invariant'10 (self : f)
  
  predicate inv'10 (_x : f)
  
  axiom inv'10 : forall x : f . inv'10 x = true
  
  predicate invariant'9 (self : i)
  
  axiom inv'9 : forall x : i . inv'9 x = true
  
  predicate invariant'8 (self : item'0)
  
  axiom inv'8 : forall x : item'0 . inv'8 x = true
  
  predicate invariant'7 (self : borrowed f) =
    [%#span4] inv'10 self.current /\ inv'10 self.final
  
  axiom inv'7 : forall x : borrowed f . inv'7 x = true
  
  predicate invariant'6 (self : b)
  
  axiom inv'6 : forall x : b . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'5 (self : Seq.seq (borrowed f)) =
    [%#span6] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'15 (Seq.get self i)
  
  predicate inv'5 (_x : Seq.seq (borrowed f))
  
  axiom inv'5 : forall x : Seq.seq (borrowed f) . inv'5 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq item'0) =
    [%#span6] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'14 (Seq.get self i)
  
  predicate inv'4 (_x : Seq.seq item'0)
  
  axiom inv'4 : forall x : Seq.seq item'0 . inv'4 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'3 (self : Option'0.t_option b) =
    [%#span5] true
  
  predicate inv'3 (_x : Option'0.t_option b)
  
  axiom inv'3 : forall x : Option'0.t_option b . inv'3 x = true
  
  use C06MapPrecond_Map_Type as Map'0
  
  predicate inv'0 (_x : Map'0.t_map i b f item'0)
  
  predicate invariant'2 (self : borrowed (Map'0.t_map i b f item'0)) =
    [%#span4] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_x : borrowed (Map'0.t_map i b f item'0))
  
  axiom inv'2 : forall x : borrowed (Map'0.t_map i b f item'0) . inv'2 x = invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq b) =
    [%#span6] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'12 (Seq.get self i)
  
  predicate inv'1 (_x : Seq.seq b)
  
  axiom inv'1 : forall x : Seq.seq b . inv'1 x = true
  
  predicate precondition'0 (self : f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0)))
  
  use prelude.prelude.Snapshot
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  use seq.Seq
  
  predicate next_precondition'0 [#"../06_map_precond.rs" 83 4 83 74] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [%#span7] forall e : item'0, i : i . inv'8 e /\ inv'9 i
     -> produces'1 iter (Seq.singleton e) i  -> precondition'0 func (e, Snapshot.new produced)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : (item'0, Snapshot.snap_ty (Seq.seq item'0))) (_3 : b)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate preservation'0 [#"../06_map_precond.rs" 105 4 105 45] (iter : i) (func : f) =
    [%#span8] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'4 s
    /\ inv'8 e1 /\ inv'8 e2 /\ inv'7 f /\ inv'6 b /\ inv'9 i
     -> unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new s)
     -> postcondition_mut'0 f (e1, Snapshot.new s) b  -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc s e1))
  
  use seq.Seq
  
  predicate preservation_inv'0 [#"../06_map_precond.rs" 93 4 93 73] (iter : i) (func : f) (produced : Seq.seq item'0) =
    [%#span13] forall s : Seq.seq item'0, e1 : item'0, e2 : item'0, f : borrowed f, b : b, i : i . inv'4 s
    /\ inv'8 e1 /\ inv'8 e2 /\ inv'7 f /\ inv'6 b /\ inv'9 i
     -> unnest'0 func f.current
     -> produces'1 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, Snapshot.new (Seq.(++) produced s))
     -> postcondition_mut'0 f (e1, Snapshot.new (Seq.(++) produced s)) b
     -> precondition'0 f.final (e2, Snapshot.new (Seq.snoc (Seq.(++) produced s) e1))
  
  axiom preservation_inv'0_spec : forall iter : i, func : f, produced : Seq.seq item'0 . ([%#span9] inv'9 iter)
   -> ([%#span10] inv'10 func)
   -> ([%#span11] inv'4 produced)
   -> ([%#span12] produced = (Seq.empty  : Seq.seq item'0)
   -> preservation_inv'0 iter func produced = preservation'0 iter func)
  
  use prelude.prelude.Snapshot
  
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate reinitialize'0 [#"../06_map_precond.rs" 117 4 117 29] (_1 : ()) =
    [%#span14] forall iter : borrowed i, func : f . inv'13 iter /\ inv'10 func
     -> completed'1 iter
     -> next_precondition'0 iter.final func (Seq.empty  : Seq.seq item'0) /\ preservation'0 iter.final func
  
  predicate invariant'0 [#"../06_map_precond.rs" 157 4 157 30] (self : Map'0.t_map i b f item'0) =
    [%#span15] reinitialize'0 ()
    /\ preservation_inv'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
    /\ next_precondition'0 (C06MapPrecond_Map_Type.map_iter self) (C06MapPrecond_Map_Type.map_func self) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self))
  
  axiom inv'0 : forall x : Map'0.t_map i b f item'0 . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Map'0.C_Map iter func produced -> true
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use prelude.seq_ext.SeqExt
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [@inline:trivial] [#"../06_map_precond.rs" 43 4 43 67] (self : Map'0.t_map i b f item'0) (visited : Seq.seq b) (succ : Map'0.t_map i b f item'0)
    
   =
    [%#span16] unnest'0 (C06MapPrecond_Map_Type.map_func self) (C06MapPrecond_Map_Type.map_func succ)
    /\ (exists s : Seq.seq item'0 . inv'4 s
    /\ Seq.length s = Seq.length visited
    /\ produces'1 (C06MapPrecond_Map_Type.map_iter self) s (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) s
    /\ (exists fs : Seq.seq (borrowed f) . inv'5 fs
    /\ Seq.length fs = Seq.length visited
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ
    else
      (Seq.get fs 0).current = C06MapPrecond_Map_Type.map_func self
      /\ (Seq.get fs (Seq.length visited - 1)).final = C06MapPrecond_Map_Type.map_func succ
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 (C06MapPrecond_Map_Type.map_func self) (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i)))
    /\ postcondition_mut'0 (Seq.get fs i) (Seq.get s i, Snapshot.new (Seq.(++) (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) (SeqExt.subsequence s 0 i))) (Seq.get visited i))))
  
  predicate produces_one'0 [#"../06_map_precond.rs" 142 4 142 57] (self : Map'0.t_map i b f item'0) (visited : b) (succ : Map'0.t_map i b f item'0)
    
   =
    [%#span21] exists f : borrowed f . inv'7 f
    /\ f.current = C06MapPrecond_Map_Type.map_func self
    /\ f.final = C06MapPrecond_Map_Type.map_func succ
    /\ (exists e : item'0 . inv'8 e
    /\ produces'1 (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) (C06MapPrecond_Map_Type.map_iter succ)
    /\ Snapshot.inner (C06MapPrecond_Map_Type.map_produced succ)
    = Seq.snoc (Snapshot.inner (C06MapPrecond_Map_Type.map_produced self)) e
    /\ precondition'0 f.current (e, C06MapPrecond_Map_Type.map_produced self)
    /\ postcondition_mut'0 f (e, C06MapPrecond_Map_Type.map_produced self) visited)
  
  axiom produces_one'0_spec : forall self : Map'0.t_map i b f item'0, visited : b, succ : Map'0.t_map i b f item'0 . ([%#span17] inv'0 self)
   -> ([%#span18] inv'6 visited)
   -> ([%#span19] inv'0 succ)
   -> ([%#span20] produces_one'0 self visited succ = produces'0 self (Seq.singleton visited) succ)
  
  predicate completed'0 [#"../06_map_precond.rs" 21 4 21 35] (self : borrowed (Map'0.t_map i b f item'0)) =
    [%#span22] Snapshot.inner (C06MapPrecond_Map_Type.map_produced self.final) = (Seq.empty  : Seq.seq item'0)
    /\ completed'1 (Borrow.borrow_logic (C06MapPrecond_Map_Type.map_iter self.current) (C06MapPrecond_Map_Type.map_iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ C06MapPrecond_Map_Type.map_func self.current = C06MapPrecond_Map_Type.map_func self.final
  
  use seq.Seq
  
  goal produces_trans_refn : [%#s06_map_precond0] forall a : Map'0.t_map i b f item'0 . forall ab : Seq.seq b . forall b : Map'0.t_map i b f item'0 . forall bc : Seq.seq b . forall c : Map'0.t_map i b f item'0 . inv'0 c
  /\ inv'1 bc /\ inv'0 b /\ inv'1 ab /\ inv'0 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'0 c
  /\ inv'1 bc
  /\ inv'0 b
  /\ inv'1 ab
  /\ inv'0 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal next_refn : [%#s06_map_precond1] forall self : borrowed (Map'0.t_map i b f item'0) . inv'2 self
   -> inv'2 self
  /\ (forall result : Option'0.t_option b . inv'3 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces_one'0 self.current v self.final
    end
   -> inv'3 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_refl_refn : [%#s06_map_precond2] forall self : Map'0.t_map i b f item'0 . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq b) self
   -> produces'0 self (Seq.empty  : Seq.seq b) self)
end
module C06MapPrecond_Impl2
  type i
  
  type b
  
  type f
end
