
module C06MapPrecond_Common_Iterator_Invariant_Interface
  type self
  predicate invariant' (self : self)
end
module C06MapPrecond_Common_Iterator_Invariant
  type self
  predicate invariant' [#"../common.rs" 28 4 28 30] (self : self) =
    [#"../common.rs" 29 8 29 12] true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Logic_Ghost_Ghost_Type
  type t_ghost 't =
    | C_Ghost 't
    
  let function ghost_0 (self : t_ghost 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Ghost a -> a
      end
end
module C06MapPrecond_Map_Type
  use seq.Seq
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  type t_map 'i 'a 'f =
    | C_Map 'i 'f (CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq 'a)) (CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost 'i)
    
  let function map_init_iter (self : t_map 'i 'a 'f) : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost 'i
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ _ _ a -> a
      end
  let function map_iter (self : t_map 'i 'a 'f) : 'i = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map a _ _ _ -> a
      end
  let function map_produced (self : t_map 'i 'a 'f) : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq 'a)
   = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ _ a _ -> a
      end
  let function map_func (self : t_map 'i 'a 'f) : 'f = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_Map _ a _ _ -> a
      end
end
module C06MapPrecond_Common_Iterator_Item_Type
  type self
  type item
end
module C06MapPrecond_Common_Iterator_Produces_Interface
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  predicate produces (self : self) (visited : Seq.seq Item0.item) (_3' : self)
end
module C06MapPrecond_Common_Iterator_Produces
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  predicate produces [#"../common.rs" 8 4 8 65] (self : self) (visited : Seq.seq Item0.item) (_3' : self)
  val produces (self : self) (visited : Seq.seq Item0.item) (_3' : self) : bool
    ensures { result = produces self visited _3' }
    
end
module C06MapPrecond_Common_Iterator_ProducesRefl_Interface
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with type self = self
  function produces_refl (a : self) : ()
end
module C06MapPrecond_Common_Iterator_ProducesRefl
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with type self = self
  function produces_refl [#"../common.rs" 16 4 16 30] (a : self) : ()
  val produces_refl (a : self) : ()
    requires {[#"../common.rs" 14 15 14 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : self . ([#"../common.rs" 14 15 14 28] Invariant0.invariant' a) -> ([#"../common.rs" 15 14 15 39] Produces0.produces a (Seq.empty ) a)
end
module C06MapPrecond_Common_Iterator_ProducesTrans_Interface
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with type self = self
  function produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
end
module C06MapPrecond_Common_Iterator_ProducesTrans
  type self
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with type self = self
  function produces_trans [#"../common.rs" 25 4 25 91] (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    
  val produces_trans (a : self) (ab : Seq.seq Item0.item) (b : self) (bc : Seq.seq Item0.item) (c : self) : ()
    requires {[#"../common.rs" 19 15 19 28] Invariant0.invariant' a}
    requires {[#"../common.rs" 20 15 20 28] Invariant0.invariant' b}
    requires {[#"../common.rs" 21 15 21 28] Invariant0.invariant' c}
    requires {[#"../common.rs" 22 15 22 32] Produces0.produces a ab b}
    requires {[#"../common.rs" 23 15 23 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : self, ab : Seq.seq Item0.item, b : self, bc : Seq.seq Item0.item, c : self . ([#"../common.rs" 19 15 19 28] Invariant0.invariant' a) -> ([#"../common.rs" 20 15 20 28] Invariant0.invariant' b) -> ([#"../common.rs" 21 15 21 28] Invariant0.invariant' c) -> ([#"../common.rs" 22 15 22 32] Produces0.produces a ab b) -> ([#"../common.rs" 23 15 23 32] Produces0.produces b bc c) -> ([#"../common.rs" 24 14 24 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C06MapPrecond_Common_Iterator_Completed_Interface
  type self
  use prelude.Borrow
  predicate completed (self : borrowed self)
end
module C06MapPrecond_Common_Iterator_Completed
  type self
  use prelude.Borrow
  predicate completed [#"../common.rs" 11 4 11 36] (self : borrowed self)
  val completed (self : borrowed self) : bool
    ensures { result = completed self }
    
end
module C06MapPrecond_Impl0_Completed_Interface
  type i
  type b
  type f
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate completed (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f))
end
module C06MapPrecond_Impl0_Completed
  type i
  type b
  type f
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use seq.Seq
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed0 with type self = i
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  predicate completed [#"../06_map_precond.rs" 24 4 24 35] (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f))
    
   =
    [#"../06_map_precond.rs" 26 12 27 99] CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_init_iter ( ^ self)) = C06MapPrecond_Map_Type.map_iter ( ^ self) /\ CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced ( ^ self)) = Seq.empty  /\ (exists iter : borrowed i .  * iter = C06MapPrecond_Map_Type.map_iter ( * self) /\  ^ iter = C06MapPrecond_Map_Type.map_iter ( ^ self) /\ Completed0.completed iter)
  val completed (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Std1_Fun_Impl0_Precondition_Interface
  type args
  type f
  predicate precondition (self : f) (_2' : args)
end
module CreusotContracts_Std1_Fun_Impl0_Precondition
  type args
  type f
  predicate precondition (self : f) (_2' : args)
  val precondition (self : f) (_2' : args) : bool
    ensures { result = precondition self _2' }
    
end
module C06MapPrecond_Impl1_HasPrecond_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate has_precond (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
end
module C06MapPrecond_Impl1_HasPrecond
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use seq.Seq
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Interface as Precondition0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = i, type Item0.item = Item0.item
  predicate has_precond [#"../06_map_precond.rs" 135 4 135 32] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) =
    [#"../06_map_precond.rs" 136 8 139 9] forall i2 : i . forall e : Item0.item . Produces0.produces (C06MapPrecond_Map_Type.map_iter self) (Seq.singleton e) i2 -> Precondition0.precondition (C06MapPrecond_Map_Type.map_func self) (e, C06MapPrecond_Map_Type.map_produced self)
  val has_precond (self : C06MapPrecond_Map_Type.t_map i Item0.item f) : bool
    ensures { result = has_precond self }
    
end
module C06MapPrecond_Impl1_InnerExtension_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate inner_extension (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (other : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
end
module C06MapPrecond_Impl1_InnerExtension
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use seq_ext.SeqExt
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = i, type Item0.item = Item0.item
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  predicate inner_extension [#"../06_map_precond.rs" 124 4 124 49] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (other : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
   =
    [#"../06_map_precond.rs" 123 4 123 16] C06MapPrecond_Map_Type.map_init_iter self = C06MapPrecond_Map_Type.map_init_iter other /\ Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced other)) >= Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)) /\ Seq.(==) (SeqExt.subsequence (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced other)) 0 (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)))) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)) /\ Produces0.produces (C06MapPrecond_Map_Type.map_iter self) (SeqExt.subsequence (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced other)) (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self))) (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced other)))) (C06MapPrecond_Map_Type.map_iter other)
  val inner_extension (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (other : C06MapPrecond_Map_Type.t_map i Item0.item f) : bool
    ensures { result = inner_extension self other }
    
end
module Core_Ops_Function_FnOnce_Output_Type
  type self
  type args
  type output
end
module CreusotContracts_Std1_Fun_Impl1_PostconditionMut_Interface
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_Impl1_PostconditionMut
  type args
  type f
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  predicate postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed f) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module C06MapPrecond_Impl0_Produces_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate produces (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
end
module C06MapPrecond_Impl0_Produces
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use mach.int.Int
  use mach.int.Int32
  use seq_ext.SeqExt
  use prelude.Borrow
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut_Interface as PostconditionMut0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = i, type Item0.item = Item0.item
  predicate produces [#"../06_map_precond.rs" 46 4 46 67] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f)
    
   =
    [#"../06_map_precond.rs" 47 8 61 9] Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)) + Seq.length visited = Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced succ)) /\ Seq.(==) (SeqExt.subsequence (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced succ)) 0 (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)))) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)) /\ C06MapPrecond_Map_Type.map_init_iter self = C06MapPrecond_Map_Type.map_init_iter succ /\ Produces0.produces (C06MapPrecond_Map_Type.map_iter self) (SeqExt.subsequence (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced succ)) (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self))) (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced succ)))) (C06MapPrecond_Map_Type.map_iter succ) /\ (exists fs : Seq.seq (borrowed f) . Seq.length fs = Seq.length visited /\ (forall i : int . 1 <= i /\ i < Seq.length fs ->  ^ Seq.get fs (i - 1) =  * Seq.get fs i) /\ (Seq.length visited > 0 ->  * Seq.get fs 0 = C06MapPrecond_Map_Type.map_func self /\  ^ Seq.get fs (Seq.length visited - 1) = C06MapPrecond_Map_Type.map_func succ) /\ (Seq.length visited = 0 -> C06MapPrecond_Map_Type.map_func self = C06MapPrecond_Map_Type.map_func succ) /\ (forall i : int . 0 <= i /\ i < Seq.length visited -> PostconditionMut0.postcondition_mut (Seq.get fs i) (Seq.get (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced succ)) (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)) + i), CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (SeqExt.subsequence (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced succ)) 0 (Seq.length (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)) + i))) (Seq.get visited i)))
  val produces (self : C06MapPrecond_Map_Type.t_map i Item0.item f) (visited : Seq.seq b) (succ : C06MapPrecond_Map_Type.t_map i Item0.item f) : bool
    ensures { result = produces self visited succ }
    
end
module C06MapPrecond_Impl0_Invariant_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  predicate invariant' (self : C06MapPrecond_Map_Type.t_map i Item0.item f)
end
module C06MapPrecond_Impl0_Invariant
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use prelude.Borrow
  use seq.Seq
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces1 with type self = i, type Item0.item = Item0.item
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone C06MapPrecond_Impl0_Produces_Interface as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_InnerExtension_Interface as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_HasPrecond_Interface as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Completed_Interface as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with type self = i
  predicate invariant' [#"../06_map_precond.rs" 66 4 66 30] (self : C06MapPrecond_Map_Type.t_map i Item0.item f) =
    [#"../06_map_precond.rs" 68 8 97 9] (forall reset : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f) . Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter ( * reset)) -> Completed0.completed reset -> HasPrecond0.has_precond ( ^ reset) /\ (forall initial : C06MapPrecond_Map_Type.t_map i Item0.item f . Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter initial) -> InnerExtension0.inner_extension ( ^ reset) initial -> HasPrecond0.has_precond initial -> (forall b : b . forall n : C06MapPrecond_Map_Type.t_map i Item0.item f . Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter n) -> Produces0.produces initial (Seq.singleton b) n -> HasPrecond0.has_precond n))) /\ (forall initial : C06MapPrecond_Map_Type.t_map i Item0.item f . InnerExtension0.inner_extension self initial -> HasPrecond0.has_precond initial -> Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter initial) -> (forall b : b . forall n : C06MapPrecond_Map_Type.t_map i Item0.item f . Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter n) -> Produces0.produces initial (Seq.singleton b) n -> HasPrecond0.has_precond n)) /\ Invariant0.invariant' (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_init_iter self)) /\ Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter self) /\ Produces1.produces (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_init_iter self)) (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced self)) (C06MapPrecond_Map_Type.map_iter self) /\ HasPrecond0.has_precond self
  val invariant' (self : C06MapPrecond_Map_Type.t_map i Item0.item f) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Std1_Fun_Impl1_FnMutOnce_Interface
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  function fn_mut_once (self : f) (_2' : args) (_3' : Output0.output) : ()
end
module CreusotContracts_Std1_Fun_Impl1_FnMutOnce
  type args
  type f
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = f, type args = args
  function fn_mut_once (self : f) (_2' : args) (_3' : Output0.output) : () =
    ()
  val fn_mut_once (self : f) (_2' : args) (_3' : Output0.output) : ()
    ensures { result = fn_mut_once self _2' _3' }
    
end
module C06MapPrecond_Impl0_ProducesRefl_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Interface as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Interface as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  function produces_refl (a : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
end
module C06MapPrecond_Impl0_ProducesRefl
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Interface as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Interface as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  function produces_refl [#"../06_map_precond.rs" 34 4 34 29] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) : () =
    [#"../06_map_precond.rs" 31 4 31 10] ()
  val produces_refl (a : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 32 15 32 28] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C06MapPrecond_Map_Type.t_map i Item0.item f . ([#"../06_map_precond.rs" 32 15 32 28] Invariant0.invariant' a) -> ([#"../06_map_precond.rs" 33 14 33 39] Produces0.produces a (Seq.empty ) a)
end
module C06MapPrecond_Impl0_ProducesRefl_Impl
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Completed as Completed1 with type self = i
  clone C06MapPrecond_Common_Iterator_Produces as Produces1 with type self = i, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant as Invariant1 with type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant', predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant', predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Produces0.produces = Produces1.produces
  clone C06MapPrecond_Impl1_HasPrecond as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl0_Completed as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Impl0_Produces as Produces0 with type i = i, type b = b, type f = f, type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Completed0.completed = Completed0.completed, predicate HasPrecond0.has_precond = HasPrecond0.has_precond,
    predicate InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    predicate Produces0.produces = Produces0.produces, predicate Produces1.produces = Produces1.produces
  let rec ghost function produces_refl (a : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 32 15 32 28] Invariant0.invariant' a}
    ensures { [#"../06_map_precond.rs" 33 14 33 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 31 4 31 10] ()
end
module C06MapPrecond_Impl0_ProducesTrans_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Interface as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Interface as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  function produces_trans (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
end
module C06MapPrecond_Impl0_ProducesTrans
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Interface as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Invariant_Interface as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  function produces_trans [#"../06_map_precond.rs" 43 4 43 90] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
   =
    [#"../06_map_precond.rs" 36 4 36 10] ()
  val produces_trans (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 37 15 37 28] Invariant0.invariant' a}
    requires {[#"../06_map_precond.rs" 38 15 38 28] Invariant0.invariant' b}
    requires {[#"../06_map_precond.rs" 39 15 39 28] Invariant0.invariant' c}
    requires {[#"../06_map_precond.rs" 40 15 40 32] Produces0.produces a ab b}
    requires {[#"../06_map_precond.rs" 41 15 41 32] Produces0.produces b bc c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C06MapPrecond_Map_Type.t_map i Item0.item f, ab : Seq.seq b, b : C06MapPrecond_Map_Type.t_map i Item0.item f, bc : Seq.seq b, c : C06MapPrecond_Map_Type.t_map i Item0.item f . ([#"../06_map_precond.rs" 37 15 37 28] Invariant0.invariant' a) -> ([#"../06_map_precond.rs" 38 15 38 28] Invariant0.invariant' b) -> ([#"../06_map_precond.rs" 39 15 39 28] Invariant0.invariant' c) -> ([#"../06_map_precond.rs" 40 15 40 32] Produces0.produces a ab b) -> ([#"../06_map_precond.rs" 41 15 41 32] Produces0.produces b bc c) -> ([#"../06_map_precond.rs" 42 14 42 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C06MapPrecond_Impl0_ProducesTrans_Impl
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Completed as Completed1 with type self = i
  clone C06MapPrecond_Common_Iterator_Produces as Produces1 with type self = i, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant as Invariant1 with type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant', predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant', predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Produces0.produces = Produces1.produces
  clone C06MapPrecond_Impl1_HasPrecond as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl0_Completed as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Impl0_Produces as Produces0 with type i = i, type b = b, type f = f, type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Completed0.completed = Completed0.completed, predicate HasPrecond0.has_precond = HasPrecond0.has_precond,
    predicate InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    predicate Produces0.produces = Produces0.produces, predicate Produces1.produces = Produces1.produces
  let rec ghost function produces_trans (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (ab : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (bc : Seq.seq b) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 37 15 37 28] Invariant0.invariant' a}
    requires {[#"../06_map_precond.rs" 38 15 38 28] Invariant0.invariant' b}
    requires {[#"../06_map_precond.rs" 39 15 39 28] Invariant0.invariant' c}
    requires {[#"../06_map_precond.rs" 40 15 40 32] Produces0.produces a ab b}
    requires {[#"../06_map_precond.rs" 41 15 41 32] Produces0.produces b bc c}
    ensures { [#"../06_map_precond.rs" 42 14 42 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 36 4 36 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
  let function some_0 (self : t_option 't) : 't = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_None -> any 't
      | C_Some a -> a
      end
end
module C06MapPrecond_Common_Iterator_Next_Interface
  type self
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = self,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Completed_Interface as Completed0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C06MapPrecond_Common_Iterator_Next
  type self
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = self
  clone C06MapPrecond_Common_Iterator_Produces as Produces0 with type self = self, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Completed as Completed0 with type self = self
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C06MapPrecond_Common_Iterator_Invariant as Invariant0 with type self = self
  val next [@cfg:stackify] (self : borrowed self) : Core_Option_Option_Type.t_option Item0.item
    requires {[#"../common.rs" 32 4 32 40] Invariant0.invariant' ( * self)}
    ensures { [#"../common.rs" 32 4 32 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../common.rs" 33 14 36 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
end
module CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  predicate postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output)
  val postcondition_mut (self : borrowed self) (_2' : args) (_3' : Output0.output) : bool
    ensures { result = postcondition_mut self _2' _3' }
    
end
module Core_Ops_Function_FnMut_CallMut_Interface
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = self,
    type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Interface as Precondition0 with type args = args, type f = self
  val call_mut [@cfg:stackify] (self : borrowed self) (args : args) : Output0.output
    requires {Precondition0.precondition ( * self) args}
    ensures { PostconditionMut0.postcondition_mut self args result }
    
end
module Core_Ops_Function_FnMut_CallMut
  type self
  type args
  use prelude.Borrow
  clone Core_Ops_Function_FnOnce_Output_Type as Output0 with type self = self, type args = args
  clone CreusotContracts_Std1_Fun_FnMutSpec_PostconditionMut_Interface as PostconditionMut0 with type self = self,
    type args = args, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Interface as Precondition0 with type args = args, type f = self
  val call_mut [@cfg:stackify] (self : borrowed self) (args : args) : Output0.output
    requires {Precondition0.precondition ( * self) args}
    ensures { PostconditionMut0.postcondition_mut self args result }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C06MapPrecond_Impl1_InnerProducesAg_Interface
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension_Interface as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Produces_Interface as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  function inner_produces_ag (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (s : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
end
module C06MapPrecond_Impl1_InnerProducesAg
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension_Interface as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Produces_Interface as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  function inner_produces_ag [#"../06_map_precond.rs" 145 4 145 53] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (s : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
   =
    [#"../06_map_precond.rs" 142 4 142 12] ()
  val inner_produces_ag (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (s : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 143 15 143 31] Produces0.produces a s b}
    ensures { result = inner_produces_ag a s b }
    
  axiom inner_produces_ag_spec : forall a : C06MapPrecond_Map_Type.t_map i Item0.item f, s : Seq.seq b, b : C06MapPrecond_Map_Type.t_map i Item0.item f . ([#"../06_map_precond.rs" 143 15 143 31] Produces0.produces a s b) -> ([#"../06_map_precond.rs" 144 14 144 34] InnerExtension0.inner_extension a b)
end
module C06MapPrecond_Impl1_InnerProducesAg_Impl
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Completed as Completed1 with type self = i
  clone C06MapPrecond_Common_Iterator_Produces as Produces1 with type self = i, type Item0.item = Item0.item
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_HasPrecond as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl0_Completed as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Common_Iterator_Invariant as Invariant1 with type self = i
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone C06MapPrecond_Impl0_Produces as Produces0 with type i = i, type b = b, type f = f, type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Produces0.produces = Produces1.produces
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Completed0.completed = Completed0.completed, predicate HasPrecond0.has_precond = HasPrecond0.has_precond,
    predicate InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    predicate Produces0.produces = Produces0.produces, predicate Produces1.produces = Produces1.produces
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans1 with type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant', predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl1 with type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant', predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans0 with type i = i, type b = b, type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant', predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl0 with type i = i, type b = b, type f = f,
    predicate Invariant0.invariant' = Invariant0.invariant', predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  let rec ghost function inner_produces_ag (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (s : Seq.seq b) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 143 15 143 31] Produces0.produces a s b}
    ensures { [#"../06_map_precond.rs" 144 14 144 34] InnerExtension0.inner_extension a b }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 142 4 142 12] ()
end
module C06MapPrecond_Impl1_InnerExtTrans_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension_Interface as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  function inner_ext_trans (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
end
module C06MapPrecond_Impl1_InnerExtTrans
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension_Interface as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  function inner_ext_trans [#"../06_map_precond.rs" 151 4 151 49] (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    
   =
    [#"../06_map_precond.rs" 147 4 147 12] ()
  val inner_ext_trans (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 148 15 148 35] InnerExtension0.inner_extension a b}
    requires {[#"../06_map_precond.rs" 149 15 149 35] InnerExtension0.inner_extension b c}
    ensures { result = inner_ext_trans a b c }
    
  axiom inner_ext_trans_spec : forall a : C06MapPrecond_Map_Type.t_map i Item0.item f, b : C06MapPrecond_Map_Type.t_map i Item0.item f, c : C06MapPrecond_Map_Type.t_map i Item0.item f . ([#"../06_map_precond.rs" 148 15 148 35] InnerExtension0.inner_extension a b) -> ([#"../06_map_precond.rs" 149 15 149 35] InnerExtension0.inner_extension b c) -> ([#"../06_map_precond.rs" 150 14 150 34] InnerExtension0.inner_extension a c)
end
module C06MapPrecond_Impl1_InnerExtTrans_Impl
  type i
  type b
  type f
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Invariant as Invariant0 with type self = i
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  clone C06MapPrecond_Common_Iterator_Produces as Produces0 with type self = i, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant', predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant', predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Produces0.produces = Produces0.produces
  let rec ghost function inner_ext_trans (a : C06MapPrecond_Map_Type.t_map i Item0.item f) (b : C06MapPrecond_Map_Type.t_map i Item0.item f) (c : C06MapPrecond_Map_Type.t_map i Item0.item f) : ()
    requires {[#"../06_map_precond.rs" 148 15 148 35] InnerExtension0.inner_extension a b}
    requires {[#"../06_map_precond.rs" 149 15 149 35] InnerExtension0.inner_extension b c}
    ensures { [#"../06_map_precond.rs" 150 14 150 34] InnerExtension0.inner_extension a c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../06_map_precond.rs" 147 4 147 12] ()
end
module C06MapPrecond_Impl0_Next_Interface
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Produces_Interface as Produces0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Completed_Interface as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C06MapPrecond_Impl0_Invariant_Interface as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  val next [@cfg:stackify] (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f)) : Core_Option_Option_Type.t_option b
    requires {[#"../06_map_precond.rs" 104 4 104 40] Invariant0.invariant' ( * self)}
    ensures { [#"../06_map_precond.rs" 100 14 103 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../06_map_precond.rs" 104 4 104 40] Invariant0.invariant' ( ^ self) }
    
end
module C06MapPrecond_Impl0_Next
  type i
  type b
  type f
  use prelude.Borrow
  use seq.Seq
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces as Produces1 with type self = i, type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant as Invariant1 with type self = i
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant', predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant', predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone C06MapPrecond_Common_Iterator_Completed as Completed1 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Produces0.produces = Produces1.produces
  clone C06MapPrecond_Impl1_HasPrecond as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Produces0.produces = Produces1.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl0_Produces as Produces0 with type i = i, type b = b, type f = f, type Item0.item = Item0.item,
    predicate Produces0.produces = Produces1.produces,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl0_Completed as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Completed0.completed = Completed1.completed
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone C06MapPrecond_Impl0_Invariant as Invariant0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Invariant0.invariant' = Invariant1.invariant',
    predicate Completed0.completed = Completed0.completed, predicate HasPrecond0.has_precond = HasPrecond0.has_precond,
    predicate InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    predicate Produces0.produces = Produces0.produces, predicate Produces1.produces = Produces1.produces
  use mach.int.Int
  use prelude.IntSize
  use seq.FreeMonoid
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve4 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost i
  clone Core_Ops_Function_FnMut_CallMut_Interface as CallMut0 with type self = f,
    type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    predicate Precondition0.precondition = Precondition0.precondition,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut, type Output0.output = b
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = Item0.item
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = Core_Option_Option_Type.t_option Item0.item
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = C06MapPrecond_Map_Type.t_map i Item0.item f
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)
  clone C06MapPrecond_Common_Iterator_Next_Interface as Next0 with type self = i,
    predicate Invariant0.invariant' = Invariant1.invariant', type Item0.item = Item0.item,
    predicate Completed0.completed = Completed1.completed, predicate Produces0.produces = Produces1.produces
  clone C06MapPrecond_Impl1_InnerExtTrans as InnerExtTrans0 with type i = i, type b = b, type f = f,
    predicate InnerExtension0.inner_extension = InnerExtension0.inner_extension, type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Impl1_InnerProducesAg as InnerProducesAg0 with type i = i, type b = b, type f = f,
    predicate Produces0.produces = Produces0.produces,
    predicate InnerExtension0.inner_extension = InnerExtension0.inner_extension, type Item0.item = Item0.item, axiom .
  let rec cfg next [@cfg:stackify] [#"../06_map_precond.rs" 105 4 105 44] (self : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f)) : Core_Option_Option_Type.t_option b
    requires {[#"../06_map_precond.rs" 104 4 104 40] Invariant0.invariant' ( * self)}
    ensures { [#"../06_map_precond.rs" 100 14 103 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    ensures { [#"../06_map_precond.rs" 104 4 104 40] Invariant0.invariant' ( ^ self) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option b;
  var self_1 : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f);
  var _5 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost ();
  var _8 : ();
  var produced_9 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
  var _12 : ();
  var _13 : Core_Option_Option_Type.t_option Item0.item;
  var _14 : borrowed i;
  var _15 : isize;
  var v_16 : Item0.item;
  var _17 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
  var _19 : ();
  var _20 : b;
  var _21 : borrowed f;
  var _22 : (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item));
  var _23 : Item0.item;
  var _24 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
  var _25 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost i;
  var _27 : ();
  var _28 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
  var _31 : ();
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    _8 <- ();
    _5 <- ([#"../06_map_precond.rs" 106 16 106 132] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (let _ = FreeMonoid.left_neutral  in let _ = () in let _ = () in ()));
    goto BB1
  }
  BB1 {
    _12 <- ();
    produced_9 <- ([#"../06_map_precond.rs" 107 23 107 48] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 (C06MapPrecond_Map_Type.map_produced ( * self_1))));
    goto BB2
  }
  BB2 {
    _14 <- borrow_mut (C06MapPrecond_Map_Type.map_iter ( * self_1));
    self_1 <- { self_1 with current = (let C06MapPrecond_Map_Type.C_Map a b c d =  * self_1 in C06MapPrecond_Map_Type.C_Map ( ^ _14) b c d) };
    _13 <- ([#"../06_map_precond.rs" 108 14 108 30] Next0.next _14);
    goto BB3
  }
  BB3 {
    switch (_13)
      | Core_Option_Option_Type.C_None -> goto BB4
      | Core_Option_Option_Type.C_Some _ -> goto BB6
      end
  }
  BB4 {
    assume { Resolve0.resolve produced_9 };
    _27 <- ();
    _25 <- ([#"../06_map_precond.rs" 114 33 114 53] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (C06MapPrecond_Map_Type.map_iter ( * self_1)));
    goto BB12
  }
  BB5 {
    assume { Resolve1.resolve self_1 };
    assume { Resolve0.resolve produced_9 };
    assume { Resolve2.resolve _13 };
    absurd
  }
  BB6 {
    assume { Resolve3.resolve v_16 };
    v_16 <- Core_Option_Option_Type.some_0 _13;
    _13 <- (let Core_Option_Option_Type.C_Some a = _13 in Core_Option_Option_Type.C_Some (any Item0.item));
    _19 <- ();
    _17 <- ([#"../06_map_precond.rs" 110 32 110 59] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.snoc (CreusotContracts_Logic_Ghost_Ghost_Type.ghost_0 produced_9) v_16));
    goto BB7
  }
  BB7 {
    assume { Resolve0.resolve (C06MapPrecond_Map_Type.map_produced ( * self_1)) };
    self_1 <- { self_1 with current = (let C06MapPrecond_Map_Type.C_Map a b c d =  * self_1 in C06MapPrecond_Map_Type.C_Map a b _17 d) };
    _17 <- any CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
    _21 <- borrow_mut (C06MapPrecond_Map_Type.map_func ( * self_1));
    self_1 <- { self_1 with current = (let C06MapPrecond_Map_Type.C_Map a b c d =  * self_1 in C06MapPrecond_Map_Type.C_Map a ( ^ _21) c d) };
    assume { Resolve1.resolve self_1 };
    assume { Resolve3.resolve _23 };
    _23 <- v_16;
    v_16 <- any Item0.item;
    assume { Resolve0.resolve _24 };
    _24 <- produced_9;
    produced_9 <- any CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
    _22 <- (_23, _24);
    _20 <- ([#"../06_map_precond.rs" 111 21 111 45] CallMut0.call_mut _21 _22);
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    _0 <- Core_Option_Option_Type.C_Some _20;
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    goto BB16
  }
  BB12 {
    assume { Resolve4.resolve (C06MapPrecond_Map_Type.map_init_iter ( * self_1)) };
    self_1 <- { self_1 with current = (let C06MapPrecond_Map_Type.C_Map a b c d =  * self_1 in C06MapPrecond_Map_Type.C_Map a b c _25) };
    goto BB13
  }
  BB13 {
    goto BB14
  }
  BB14 {
    _31 <- ();
    _28 <- ([#"../06_map_precond.rs" 115 32 115 53] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ));
    goto BB15
  }
  BB15 {
    assume { Resolve0.resolve (C06MapPrecond_Map_Type.map_produced ( * self_1)) };
    self_1 <- { self_1 with current = (let C06MapPrecond_Map_Type.C_Map a b c d =  * self_1 in C06MapPrecond_Map_Type.C_Map a b _28 d) };
    _28 <- any CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
    assume { Resolve1.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_None;
    goto BB16
  }
  BB16 {
    goto BB17
  }
  BB17 {
    assume { Resolve2.resolve _13 };
    return _0
  }
  
end
module C06MapPrecond_Impl1_NewLogic_Interface
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  function new_logic (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map i Item0.item f
end
module C06MapPrecond_Impl1_NewLogic
  type i
  type b
  type f
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  use seq.Seq
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  function new_logic [#"../06_map_precond.rs" 156 4 156 42] (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map i Item0.item f
    
   =
    [#"../06_map_precond.rs" 157 8 157 79] C06MapPrecond_Map_Type.C_Map iter func (CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty )) (CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter)
  val new_logic (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map i Item0.item f
    ensures { result = new_logic iter func }
    
end
module C06MapPrecond_Map_Interface
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Impl0_Invariant_Interface as Invariant1 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_NewLogic_Interface as NewLogic0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Common_Iterator_Invariant_Interface as Invariant0 with type self = i
  clone C06MapPrecond_Impl0_Produces_Interface as Produces1 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_InnerExtension_Interface as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl1_HasPrecond_Interface as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Completed_Interface as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item
  clone CreusotContracts_Std1_Fun_Impl0_Precondition_Interface as Precondition0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Common_Iterator_Produces_Interface as Produces0 with type self = i, type Item0.item = Item0.item
  val map [@cfg:stackify] (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map i Item0.item f
    requires {[#"../06_map_precond.rs" 161 0 161 123] forall i2 : i . forall e : Item0.item . Produces0.produces iter (Seq.singleton e) i2 -> Precondition0.precondition func (e, CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ))}
    requires {[#"../06_map_precond.rs" 162 0 169 2] forall reset : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f) . Completed0.completed reset -> HasPrecond0.has_precond ( ^ reset) /\ (forall initial : C06MapPrecond_Map_Type.t_map i Item0.item f . InnerExtension0.inner_extension ( ^ reset) initial -> HasPrecond0.has_precond initial -> (forall b : b . forall n : C06MapPrecond_Map_Type.t_map i Item0.item f . Produces1.produces initial (Seq.singleton b) n -> HasPrecond0.has_precond n))}
    requires {[#"../06_map_precond.rs" 170 11 170 27] Invariant0.invariant' iter}
    requires {[#"../06_map_precond.rs" 171 0 176 2] forall initial : C06MapPrecond_Map_Type.t_map i Item0.item f . Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter initial) -> InnerExtension0.inner_extension (NewLogic0.new_logic iter func) initial -> HasPrecond0.has_precond initial -> (forall b : b . forall n : C06MapPrecond_Map_Type.t_map i Item0.item f . Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter n) -> Produces1.produces initial (Seq.singleton b) n -> HasPrecond0.has_precond n)}
    ensures { [#"../06_map_precond.rs" 177 10 177 28] Invariant1.invariant' result }
    ensures { [#"../06_map_precond.rs" 178 10 178 91] result = C06MapPrecond_Map_Type.C_Map iter func (CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty )) (CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter) }
    
end
module C06MapPrecond_Map
  type i
  type b
  type f
  use seq.Seq
  use prelude.Borrow
  clone C06MapPrecond_Common_Iterator_Item_Type as Item0 with type self = i
  use seq.Seq
  use CreusotContracts_Logic_Ghost_Ghost_Type as CreusotContracts_Logic_Ghost_Ghost_Type
  clone CreusotContracts_Std1_Fun_Impl1_FnMutOnce as FnMutOnce0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone CreusotContracts_Std1_Fun_Impl1_PostconditionMut as PostconditionMut0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f, type Output0.output = b
  clone C06MapPrecond_Common_Iterator_Completed as Completed1 with type self = i
  use C06MapPrecond_Map_Type as C06MapPrecond_Map_Type
  clone C06MapPrecond_Common_Iterator_Produces as Produces0 with type self = i, type Item0.item = Item0.item
  clone C06MapPrecond_Impl0_Produces as Produces1 with type i = i, type b = b, type f = f, type Item0.item = Item0.item,
    predicate Produces0.produces = Produces0.produces,
    predicate PostconditionMut0.postcondition_mut = PostconditionMut0.postcondition_mut
  clone C06MapPrecond_Impl1_InnerExtension as InnerExtension0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Produces0.produces = Produces0.produces
  clone CreusotContracts_Std1_Fun_Impl0_Precondition as Precondition0 with type args = (Item0.item, CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item)),
    type f = f
  clone C06MapPrecond_Impl1_HasPrecond as HasPrecond0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Produces0.produces = Produces0.produces,
    predicate Precondition0.precondition = Precondition0.precondition
  clone C06MapPrecond_Impl0_Completed as Completed0 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Completed0.completed = Completed1.completed
  clone C06MapPrecond_Common_Iterator_Invariant as Invariant0 with type self = i
  clone C06MapPrecond_Impl0_Invariant as Invariant1 with type i = i, type b = b, type f = f,
    type Item0.item = Item0.item, predicate Invariant0.invariant' = Invariant0.invariant',
    predicate Completed0.completed = Completed0.completed, predicate HasPrecond0.has_precond = HasPrecond0.has_precond,
    predicate InnerExtension0.inner_extension = InnerExtension0.inner_extension,
    predicate Produces0.produces = Produces1.produces, predicate Produces1.produces = Produces0.produces
  clone C06MapPrecond_Impl0_ProducesTrans as ProducesTrans1 with type i = i, type b = b, type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant', predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Impl0_ProducesRefl as ProducesRefl1 with type i = i, type b = b, type f = f,
    predicate Invariant0.invariant' = Invariant1.invariant', predicate Produces0.produces = Produces1.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesTrans as ProducesTrans0 with type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant', predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Common_Iterator_ProducesRefl as ProducesRefl0 with type self = i,
    predicate Invariant0.invariant' = Invariant0.invariant', predicate Produces0.produces = Produces0.produces,
    type Item0.item = Item0.item, axiom .
  clone C06MapPrecond_Impl1_NewLogic as NewLogic0 with type i = i, type b = b, type f = f, type Item0.item = Item0.item
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = f
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = i
  let rec cfg map [@cfg:stackify] [#"../06_map_precond.rs" 179 0 182 23] (iter : i) (func : f) : C06MapPrecond_Map_Type.t_map i Item0.item f
    requires {[#"../06_map_precond.rs" 161 0 161 123] forall i2 : i . forall e : Item0.item . Produces0.produces iter (Seq.singleton e) i2 -> Precondition0.precondition func (e, CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ))}
    requires {[#"../06_map_precond.rs" 162 0 169 2] forall reset : borrowed (C06MapPrecond_Map_Type.t_map i Item0.item f) . Completed0.completed reset -> HasPrecond0.has_precond ( ^ reset) /\ (forall initial : C06MapPrecond_Map_Type.t_map i Item0.item f . InnerExtension0.inner_extension ( ^ reset) initial -> HasPrecond0.has_precond initial -> (forall b : b . forall n : C06MapPrecond_Map_Type.t_map i Item0.item f . Produces1.produces initial (Seq.singleton b) n -> HasPrecond0.has_precond n))}
    requires {[#"../06_map_precond.rs" 170 11 170 27] Invariant0.invariant' iter}
    requires {[#"../06_map_precond.rs" 171 0 176 2] forall initial : C06MapPrecond_Map_Type.t_map i Item0.item f . Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter initial) -> InnerExtension0.inner_extension (NewLogic0.new_logic iter func) initial -> HasPrecond0.has_precond initial -> (forall b : b . forall n : C06MapPrecond_Map_Type.t_map i Item0.item f . Invariant0.invariant' (C06MapPrecond_Map_Type.map_iter n) -> Produces1.produces initial (Seq.singleton b) n -> HasPrecond0.has_precond n)}
    ensures { [#"../06_map_precond.rs" 177 10 177 28] Invariant1.invariant' result }
    ensures { [#"../06_map_precond.rs" 178 10 178 91] result = C06MapPrecond_Map_Type.C_Map iter func (CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty )) (CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : C06MapPrecond_Map_Type.t_map i Item0.item f;
  var iter_1 : i;
  var func_2 : f;
  var _9 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost i;
  var _11 : ();
  var _12 : i;
  var _13 : f;
  var _14 : CreusotContracts_Logic_Ghost_Ghost_Type.t_ghost (Seq.seq Item0.item);
  var _17 : ();
  {
    iter_1 <- iter;
    func_2 <- func;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    _11 <- ();
    _9 <- ([#"../06_map_precond.rs" 183 21 183 34] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost iter_1);
    goto BB5
  }
  BB5 {
    assume { Resolve0.resolve _12 };
    _12 <- iter_1;
    iter_1 <- any i;
    assume { Resolve1.resolve _13 };
    _13 <- func_2;
    func_2 <- any f;
    _17 <- ();
    _14 <- ([#"../06_map_precond.rs" 183 58 183 77] CreusotContracts_Logic_Ghost_Ghost_Type.C_Ghost (Seq.empty ));
    goto BB6
  }
  BB6 {
    _0 <- C06MapPrecond_Map_Type.C_Map _12 _13 _14 _9;
    goto BB7
  }
  BB7 {
    goto BB8
  }
  BB8 {
    goto BB9
  }
  BB9 {
    goto BB10
  }
  BB10 {
    goto BB11
  }
  BB11 {
    return _0
  }
  
end
module C06MapPrecond_Impl0_Item_Type
  type i
  type b
  type f
  type item  =
    b
end
