<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.8.14" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.4.1" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="06_map_precond.mlcfg"/>
<theory name="C06MapPrecond_Impl0_ProducesRefl_Impl" proved="true">
 <goal name="produces_refl&#39;vc" expl="VC for produces_refl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_refl&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(forall s : seq &#39;a, i. 0 &lt;= i &lt; length s -&gt; subsequence s i i == empty)
">
   <goal name="produces_refl&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="2"><result status="valid" time="0.01" steps="31"/></proof>
   </goal>
   <goal name="produces_refl&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="produces_refl&#39;vc.0.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="produces_refl&#39;vc.0.1.0.0" expl="VC for produces_refl" proved="true">
     <proof prover="2"><result status="valid" time="0.01" steps="6"/></proof>
     </goal>
     <goal name="produces_refl&#39;vc.0.1.0.1" expl="VC for produces_refl" proved="true">
     <proof prover="2"><result status="valid" time="0.01" steps="58"/></proof>
     </goal>
     <goal name="produces_refl&#39;vc.0.1.0.2" expl="VC for produces_refl" proved="true">
     <proof prover="2"><result status="valid" time="0.00" steps="2"/></proof>
     </goal>
     <goal name="produces_refl&#39;vc.0.1.0.3" expl="VC for produces_refl" proved="true">
     <transf name="assert" proved="true" arg1="((subsequence (ghost_0 (map_produced a)) (length (ghost_0 (map_produced a)))
   (length (ghost_0 (map_produced a)))) == empty)">
      <goal name="produces_refl&#39;vc.0.1.0.3.0" expl="asserted formula" proved="true">
      <proof prover="2"><result status="valid" time="0.01" steps="35"/></proof>
      </goal>
      <goal name="produces_refl&#39;vc.0.1.0.3.1" expl="VC for produces_refl" proved="true">
      <proof prover="2"><result status="valid" time="0.01" steps="42"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="produces_refl&#39;vc.0.1.0.4" expl="VC for produces_refl" proved="true">
     <proof prover="1"><result status="valid" time="0.02" steps="142363"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_ProducesTrans_Impl" proved="true">
 <goal name="produces_trans&#39;vc" expl="VC for produces_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_trans&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="produces_trans&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="produces_trans&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="20"/></proof>
    </goal>
    <goal name="produces_trans&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.03" steps="624"/></proof>
    </goal>
    <goal name="produces_trans&#39;vc.0.0.2" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.00" steps="15"/></proof>
    </goal>
    <goal name="produces_trans&#39;vc.0.0.3" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(subsequence (ghost_0 (map_produced c)) 0 (length (ghost_0 (map_produced b))) == ghost_0 (map_produced b))">
     <goal name="produces_trans&#39;vc.0.0.3.0" expl="asserted formula" proved="true">
     <proof prover="2"><result status="valid" time="0.01" steps="15"/></proof>
     </goal>
     <goal name="produces_trans&#39;vc.0.0.3.1" expl="postcondition" proved="true">
     <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
      <goal name="produces_trans&#39;vc.0.0.3.1.0" expl="postcondition" proved="true">
      <proof prover="2"><result status="valid" time="0.18" steps="4203"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="produces_trans&#39;vc.0.0.4" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="produces_trans&#39;vc.0.0.4.0" expl="postcondition" proved="true">
     <transf name="unfold" proved="true" arg1="produces" arg2="in" arg3="Requires1">
      <goal name="produces_trans&#39;vc.0.0.4.0.0" expl="postcondition" proved="true">
      <transf name="unfold" proved="true" arg1="produces" arg2="in" arg3="Requires">
       <goal name="produces_trans&#39;vc.0.0.4.0.0.0" expl="postcondition" proved="true">
       <transf name="destruct_rec" proved="true" arg1="Requires1">
        <goal name="produces_trans&#39;vc.0.0.4.0.0.0.0" expl="postcondition" proved="true">
        <transf name="destruct_rec" proved="true" arg1="Requires">
         <goal name="produces_trans&#39;vc.0.0.4.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="exists" proved="true" arg1="(fs1 ++ fs)">
          <goal name="produces_trans&#39;vc.0.0.4.0.0.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="produces_trans&#39;vc.0.0.4.0.0.0.0.0.0.0" proved="true">
           <proof prover="2"><result status="valid" time="0.01" steps="50"/></proof>
           </goal>
           <goal name="produces_trans&#39;vc.0.0.4.0.0.0.0.0.0.1" proved="true">
           <proof prover="2"><result status="valid" time="0.05" steps="826"/></proof>
           </goal>
           <goal name="produces_trans&#39;vc.0.0.4.0.0.0.0.0.0.2" proved="true">
           <proof prover="2"><result status="valid" time="0.03" steps="607"/></proof>
           </goal>
           <goal name="produces_trans&#39;vc.0.0.4.0.0.0.0.0.0.3" proved="true">
           <proof prover="2"><result status="valid" time="0.03" steps="532"/></proof>
           </goal>
           <goal name="produces_trans&#39;vc.0.0.4.0.0.0.0.0.0.4" proved="true">
           <proof prover="2"><result status="valid" time="0.01" steps="169"/></proof>
           </goal>
           <goal name="produces_trans&#39;vc.0.0.4.0.0.0.0.0.0.5" proved="true">
           <transf name="case" proved="true" arg1="(i &lt; length ab)">
            <goal name="produces_trans&#39;vc.0.0.4.0.0.0.0.0.0.5.0" expl="true case" proved="true">
            <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
             <goal name="produces_trans&#39;vc.0.0.4.0.0.0.0.0.0.5.0.0" expl="true case" proved="true">
             <proof prover="0"><result status="valid" time="0.65" steps="139359"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="produces_trans&#39;vc.0.0.4.0.0.0.0.0.0.5.1" expl="false case" proved="true">
            <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
             <goal name="produces_trans&#39;vc.0.0.4.0.0.0.0.0.0.5.1.0" expl="false case" proved="true">
             <proof prover="2"><result status="valid" time="0.39" steps="6564"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl1_InnerProducesAg_Impl" proved="true">
 <goal name="inner_produces_ag&#39;vc" expl="VC for inner_produces_ag" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="27"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl1_InnerExtTrans_Impl" proved="true">
 <goal name="inner_ext_trans&#39;vc" expl="VC for inner_ext_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="inner_ext_trans&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="inner_ext_trans&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="inner_ext_trans&#39;vc.0.0.0" expl="VC for inner_ext_trans" proved="true">
    <proof prover="2"><result status="valid" time="0.00" steps="12"/></proof>
    </goal>
    <goal name="inner_ext_trans&#39;vc.0.0.1" expl="VC for inner_ext_trans" proved="true">
    <proof prover="2"><result status="valid" time="0.00" steps="24"/></proof>
    </goal>
    <goal name="inner_ext_trans&#39;vc.0.0.2" expl="VC for inner_ext_trans" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="176"/></proof>
    </goal>
    <goal name="inner_ext_trans&#39;vc.0.0.3" expl="VC for inner_ext_trans" proved="true">
    <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
     <goal name="inner_ext_trans&#39;vc.0.0.3.0" expl="VC for inner_ext_trans" proved="true">
     <proof prover="2"><result status="valid" time="0.02" steps="461"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_Next" proved="true">
 <goal name="next&#39;vc" expl="VC for next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="next&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="next&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="565"/></proof>
  </goal>
  <goal name="next&#39;vc.2" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="36"/></proof>
  </goal>
  <goal name="next&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="next&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="next&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.02" steps="198"/></proof>
    </goal>
    <goal name="next&#39;vc.3.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.03" steps="440"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="next&#39;vc.3.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="next&#39;vc.3.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.02" steps="192"/></proof>
    </goal>
    <goal name="next&#39;vc.3.1.1" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="next&#39;vc.3.1.1.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="next&#39;vc.3.1.1.0.0" expl="postcondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="next&#39;vc.3.1.1.0.0.0" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="next&#39;vc.3.1.1.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.01" steps="119"/></proof>
        </goal>
        <goal name="next&#39;vc.3.1.1.0.0.0.1" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.02" steps="258"/></proof>
        </goal>
        <goal name="next&#39;vc.3.1.1.0.0.0.2" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.01" steps="106"/></proof>
        </goal>
        <goal name="next&#39;vc.3.1.1.0.0.0.3" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.02" steps="282"/></proof>
        </goal>
        <goal name="next&#39;vc.3.1.1.0.0.0.4" expl="postcondition" proved="true">
        <transf name="exists" proved="true" arg1="(singleton _21)">
         <goal name="next&#39;vc.3.1.1.0.0.0.4.0" proved="true">
         <proof prover="2"><result status="valid" time="0.04" steps="613"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="next&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="next&#39;vc.4.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.14" steps="1965"/></proof>
   </goal>
   <goal name="next&#39;vc.4.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="next&#39;vc.4.1.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="next&#39;vc.4.1.0.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="next&#39;vc.4.1.0.0.0" expl="postcondition" proved="true">
      <transf name="inline_goal" proved="true" >
       <goal name="next&#39;vc.4.1.0.0.0.0" expl="postcondition" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="next&#39;vc.4.1.0.0.0.0.0" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.02" steps="240"/></proof>
        </goal>
        <goal name="next&#39;vc.4.1.0.0.0.0.1" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.10" steps="1747"/></proof>
        </goal>
        <goal name="next&#39;vc.4.1.0.0.0.0.2" expl="postcondition" proved="true">
        <transf name="inline_goal" proved="true" >
         <goal name="next&#39;vc.4.1.0.0.0.0.2.0" expl="postcondition" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="next&#39;vc.4.1.0.0.0.0.2.0.0" expl="postcondition" proved="true">
          <proof prover="2"><result status="valid" time="0.55" steps="10343"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="next&#39;vc.4.1.0.0.0.0.3" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.02" steps="233"/></proof>
        </goal>
        <goal name="next&#39;vc.4.1.0.0.0.0.4" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.01" steps="107"/></proof>
        </goal>
        <goal name="next&#39;vc.4.1.0.0.0.0.5" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.02" steps="347"/></proof>
        </goal>
        <goal name="next&#39;vc.4.1.0.0.0.0.6" expl="postcondition" proved="true">
        <proof prover="2"><result status="valid" time="0.09" steps="2223"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Map" proved="true">
 <goal name="map&#39;vc" expl="VC for map" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="map&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="map&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="map&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="26"/></proof>
    </goal>
    <goal name="map&#39;vc.0.0.1" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="map&#39;vc.0.0.1.0" expl="postcondition" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="map&#39;vc.0.0.1.0.0" expl="postcondition" proved="true">
      <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
       <goal name="map&#39;vc.0.0.1.0.0.0" expl="postcondition" proved="true">
       <proof prover="2"><result status="valid" time="0.13" steps="3259"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map&#39;vc.0.0.2" expl="postcondition" proved="true">
    <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
     <goal name="map&#39;vc.0.0.2.0" expl="postcondition" proved="true">
     <transf name="inline_goal" proved="true" >
      <goal name="map&#39;vc.0.0.2.0.0" expl="postcondition" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="map&#39;vc.0.0.2.0.0.0" expl="postcondition" proved="true">
       <transf name="apply" proved="true" arg1="Requires" arg2="with" arg3="initial,b,i2">
        <goal name="map&#39;vc.0.0.2.0.0.0.0" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.01" steps="34"/></proof>
        </goal>
        <goal name="map&#39;vc.0.0.2.0.0.0.1" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.01" steps="45"/></proof>
        </goal>
        <goal name="map&#39;vc.0.0.2.0.0.0.2" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.01" steps="34"/></proof>
        </goal>
        <goal name="map&#39;vc.0.0.2.0.0.0.3" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.01" steps="34"/></proof>
        </goal>
        <goal name="map&#39;vc.0.0.2.0.0.0.4" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.01" steps="34"/></proof>
        </goal>
        <goal name="map&#39;vc.0.0.2.0.0.0.5" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.01" steps="34"/></proof>
        </goal>
        <goal name="map&#39;vc.0.0.2.0.0.0.6" expl="apply premises" proved="true">
        <proof prover="2"><result status="valid" time="0.06" steps="1459"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="map&#39;vc.0.0.3" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="25"/></proof>
    </goal>
    <goal name="map&#39;vc.0.0.4" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="24"/></proof>
    </goal>
    <goal name="map&#39;vc.0.0.5" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="25"/></proof>
    </goal>
    <goal name="map&#39;vc.0.0.6" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="61"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="map&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Increment_Closure3" proved="true">
 <goal name="c06MapPrecond_Increment_Closure3&#39;vc" expl="VC for c06MapPrecond_Increment_Closure3" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="20"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Increment" proved="true">
 <goal name="increment&#39;vc" expl="VC for increment" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="increment&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="40"/></proof>
  </goal>
  <goal name="increment&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="1232"/></proof>
  </goal>
  <goal name="increment&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="increment&#39;vc.3" expl="precondition" proved="true">
  <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
   <goal name="increment&#39;vc.3.0" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.02" steps="174"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0" proved="true">
 <goal name="produces_refl_spec" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
 <goal name="produces_trans_spec" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
 <goal name="Next1.next&#39;refn&#39;vc" expl="VC for next&#39;refn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="next&#39;refn&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="2"/></proof>
  </goal>
  <goal name="next&#39;refn&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="4"/></proof>
  </goal>
  <goal name="next&#39;refn&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="12"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
