<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.4.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.8.15" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="06_map_precond.mlcfg"/>
<theory name="C06MapPrecond_Impl0_ProducesRefl_Impl" proved="true">
 <goal name="produces_refl&#39;vc" expl="VC for produces_refl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_refl&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="produces_refl&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="produces_refl&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.84" steps="123731"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_ProducesTrans_Impl" proved="true">
 <goal name="produces_trans&#39;vc" expl="VC for produces_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_trans&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="produces_trans&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="produces_trans&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="18"/></proof>
    </goal>
    <goal name="produces_trans&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.03" steps="713"/></proof>
    </goal>
    <goal name="produces_trans&#39;vc.0.0.2" expl="postcondition" proved="true">
    <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
     <goal name="produces_trans&#39;vc.0.0.2.0" expl="postcondition" proved="true">
     <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="0.23" steps="3331"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="produces_trans&#39;vc.0.0.3" expl="postcondition" proved="true">
    <transf name="inline_goal" proved="true" >
     <goal name="produces_trans&#39;vc.0.0.3.0" expl="postcondition" proved="true">
     <transf name="unfold" proved="true" arg1="produces" arg2="in" arg3="Requires1">
      <goal name="produces_trans&#39;vc.0.0.3.0.0" expl="postcondition" proved="true">
      <transf name="unfold" proved="true" arg1="produces" arg2="in" arg3="Requires">
       <goal name="produces_trans&#39;vc.0.0.3.0.0.0" expl="postcondition" proved="true">
       <transf name="destruct_rec" proved="true" arg1="Requires1">
        <goal name="produces_trans&#39;vc.0.0.3.0.0.0.0" expl="postcondition" proved="true">
        <transf name="destruct_rec" proved="true" arg1="Requires">
         <goal name="produces_trans&#39;vc.0.0.3.0.0.0.0.0" expl="postcondition" proved="true">
         <transf name="exists" proved="true" arg1="(fs1 ++ fs)">
          <goal name="produces_trans&#39;vc.0.0.3.0.0.0.0.0.0" proved="true">
          <transf name="split_vc" proved="true" >
           <goal name="produces_trans&#39;vc.0.0.3.0.0.0.0.0.0.0" proved="true">
           <proof prover="2"><result status="valid" time="0.01" steps="46"/></proof>
           </goal>
           <goal name="produces_trans&#39;vc.0.0.3.0.0.0.0.0.0.1" proved="true">
           <proof prover="2"><result status="valid" time="0.05" steps="528"/></proof>
           </goal>
           <goal name="produces_trans&#39;vc.0.0.3.0.0.0.0.0.0.2" proved="true">
           <proof prover="2"><result status="valid" time="0.03" steps="413"/></proof>
           </goal>
           <goal name="produces_trans&#39;vc.0.0.3.0.0.0.0.0.0.3" proved="true">
           <proof prover="2"><result status="valid" time="0.03" steps="363"/></proof>
           </goal>
           <goal name="produces_trans&#39;vc.0.0.3.0.0.0.0.0.0.4" proved="true">
           <proof prover="2"><result status="valid" time="0.01" steps="142"/></proof>
           </goal>
           <goal name="produces_trans&#39;vc.0.0.3.0.0.0.0.0.0.5" proved="true">
           <transf name="case" proved="true" arg1="(i &lt; length ab)">
            <goal name="produces_trans&#39;vc.0.0.3.0.0.0.0.0.0.5.0" expl="true case" proved="true">
            <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
             <goal name="produces_trans&#39;vc.0.0.3.0.0.0.0.0.0.5.0.0" expl="true case" proved="true">
             <proof prover="0"><result status="valid" time="0.89" steps="133810"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="produces_trans&#39;vc.0.0.3.0.0.0.0.0.0.5.1" expl="false case" proved="true">
            <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
             <goal name="produces_trans&#39;vc.0.0.3.0.0.0.0.0.0.5.1.0" expl="false case" proved="true">
             <proof prover="2"><result status="valid" time="0.43" steps="4884"/></proof>
             </goal>
            </transf>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl1_ProducesOne_Impl" proved="true">
 <goal name="produces_one&#39;vc" expl="VC for produces_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="produces_one&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="produces">
    <goal name="produces_one&#39;vc.0.0.0" expl="VC for produces_one" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="produces_one&#39;vc.0.0.0.0" expl="VC for produces_one" proved="true">
     <proof prover="2"><result status="valid" time="0.01" steps="25"/></proof>
     </goal>
     <goal name="produces_one&#39;vc.0.0.0.1" expl="VC for produces_one" proved="true">
     <proof prover="2"><result status="valid" time="0.01" steps="111"/></proof>
     </goal>
     <goal name="produces_one&#39;vc.0.0.0.2" expl="VC for produces_one" proved="true">
     <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
      <goal name="produces_one&#39;vc.0.0.0.2.0" expl="VC for produces_one" proved="true">
      <proof prover="2"><result status="valid" time="0.01" steps="94"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="produces_one&#39;vc.0.0.0.3" expl="VC for produces_one" proved="true">
     <transf name="exists" proved="true" arg1="(singleton f)">
      <goal name="produces_one&#39;vc.0.0.0.3.0" proved="true">
      <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
       <goal name="produces_one&#39;vc.0.0.0.3.0.0" proved="true">
       <proof prover="2"><result status="valid" time="0.02" steps="195"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="produces_one&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="produces_one&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.06" steps="1247"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl1_PreservationProducesOne_Impl" proved="true">
 <goal name="preservation_produces_one&#39;vc" expl="VC for preservation_produces_one" proved="true">
 <transf name="unfold" proved="true" arg1="invariant&#39;">
  <goal name="preservation_produces_one&#39;vc.0" expl="VC for preservation_produces_one" proved="true">
  <transf name="unfold" proved="true" arg1="preservation">
   <goal name="preservation_produces_one&#39;vc.0.0" expl="VC for preservation_produces_one" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="preservation_produces_one&#39;vc.0.0.0" expl="VC for preservation_produces_one" proved="true">
    <proof prover="2"><result status="valid" time="0.00" steps="10"/></proof>
    </goal>
    <goal name="preservation_produces_one&#39;vc.0.0.1" expl="VC for preservation_produces_one" proved="true">
    <transf name="instantiate" proved="true" arg1="H6" arg2="i,b,f,e2,e1,(cons(get (ghost_0 (map_produced other)) (length (ghost_0 (map_produced self))))s)">
     <goal name="preservation_produces_one&#39;vc.0.0.1.0" expl="VC for preservation_produces_one" proved="true">
     <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
      <goal name="preservation_produces_one&#39;vc.0.0.1.0.0" expl="VC for preservation_produces_one" proved="true">
      <proof prover="2" timelimit="5"><result status="valid" time="0.24" steps="4956"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="preservation_produces_one&#39;vc.0.0.2" expl="VC for preservation_produces_one" proved="true">
    <proof prover="2"><result status="valid" time="0.00" steps="10"/></proof>
    </goal>
    <goal name="preservation_produces_one&#39;vc.0.0.3" expl="VC for preservation_produces_one" proved="true">
    <transf name="unfold" proved="true" arg1="next_precondition">
     <goal name="preservation_produces_one&#39;vc.0.0.3.0" expl="VC for preservation_produces_one" proved="true">
     <transf name="unfold" proved="true" arg1="produces_one" arg2="in" arg3="Requires1">
      <goal name="preservation_produces_one&#39;vc.0.0.3.0.0" expl="VC for preservation_produces_one" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="preservation_produces_one&#39;vc.0.0.3.0.0.0" expl="VC for preservation_produces_one" proved="true">
       <transf name="instantiate" proved="true" arg1="H10" arg2="i,e2,f,e,e1,((empty:seq item))">
        <goal name="preservation_produces_one&#39;vc.0.0.3.0.0.0.0" expl="VC for preservation_produces_one" proved="true">
        <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
         <goal name="preservation_produces_one&#39;vc.0.0.3.0.0.0.0.0" expl="VC for preservation_produces_one" proved="true">
         <proof prover="2"><result status="valid" time="0.02" steps="287"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_Next" proved="true">
 <goal name="next&#39;vc" expl="VC for next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="next&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="20"/></proof>
  </goal>
  <goal name="next&#39;vc.1" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="115"/></proof>
  </goal>
  <goal name="next&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="71"/></proof>
  </goal>
  <goal name="next&#39;vc.3" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="29"/></proof>
  </goal>
  <goal name="next&#39;vc.4" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="next&#39;vc.4.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="next&#39;vc.4.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="92"/></proof>
    </goal>
    <goal name="next&#39;vc.4.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.02" steps="198"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="next&#39;vc.4.1" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="next&#39;vc.4.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="71"/></proof>
    </goal>
    <goal name="next&#39;vc.4.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.04" steps="510"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="next&#39;vc.5" expl="postcondition" proved="true">
  <transf name="unfold" proved="true" arg1="invariant&#39;">
   <goal name="next&#39;vc.5.0" expl="VC for next" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="next&#39;vc.5.0.0" expl="VC for next" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="11"/></proof>
    </goal>
    <goal name="next&#39;vc.5.0.1" expl="VC for next" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="next&#39;vc.5.0.1.0" expl="VC for next" proved="true">
     <proof prover="2"><result status="valid" time="0.01" steps="138"/></proof>
     </goal>
     <goal name="next&#39;vc.5.0.1.1" expl="VC for next" proved="true">
     <proof prover="2"><result status="valid" time="0.04" steps="619"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="next&#39;vc.5.0.2" expl="VC for next" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="next&#39;vc.5.0.2.0" expl="VC for next" proved="true">
     <proof prover="2"><result status="valid" time="0.01" steps="93"/></proof>
     </goal>
     <goal name="next&#39;vc.5.0.2.1" expl="VC for next" proved="true">
     <proof prover="2"><result status="valid" time="0.02" steps="266"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="next&#39;vc.5.0.3" expl="VC for next" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="next&#39;vc.5.0.3.0" expl="VC for next" proved="true">
     <proof prover="2"><result status="valid" time="0.01" steps="120"/></proof>
     </goal>
     <goal name="next&#39;vc.5.0.3.1" expl="VC for next" proved="true">
     <proof prover="2"><result status="valid" time="0.03" steps="345"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Map" proved="true">
 <goal name="map&#39;vc" expl="VC for map" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="map&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="map&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="map&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.07" steps="707"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="map&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="22"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Identity" proved="true">
 <goal name="identity&#39;vc" expl="VC for identity" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="197"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Increment_Closure4" proved="true">
 <goal name="c06MapPrecond_Increment_Closure4&#39;vc" expl="VC for c06MapPrecond_Increment_Closure4" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="51"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Increment" proved="true">
 <goal name="increment&#39;vc" expl="VC for increment" proved="true">
 <proof prover="3"><result status="valid" time="0.09" steps="206085"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Counter_Closure3" proved="true">
 <goal name="c06MapPrecond_Counter_Closure3&#39;vc" expl="VC for c06MapPrecond_Counter_Closure3" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="125"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Counter" proved="true">
 <goal name="counter&#39;vc" expl="VC for counter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="counter&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="95"/></proof>
  </goal>
  <goal name="counter&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="307"/></proof>
  </goal>
  <goal name="counter&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="30"/></proof>
  </goal>
  <goal name="counter&#39;vc.3" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="172"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0" proved="true">
 <goal name="produces_refl_spec" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
 <goal name="produces_trans_spec" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="0"/></proof>
 </goal>
 <goal name="Next1.next&#39;refn&#39;vc" expl="VC for next&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="207"/></proof>
 </goal>
</theory>
</file>
</why3session>
