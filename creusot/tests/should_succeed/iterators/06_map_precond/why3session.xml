<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="06_map_precond.mlcfg"/>
<theory name="C06MapPrecond_Impl1_PreservationInv_Impl" proved="true">
 <goal name="preservation_inv&#39;vc" expl="VC for preservation_inv" proved="true">
 <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
  <goal name="preservation_inv&#39;vc.0" expl="VC for preservation_inv" proved="true">
  <proof prover="4"><result status="valid" time="0.076544" steps="15028"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_ProducesRefl_Impl" proved="true">
 <goal name="produces_refl&#39;vc" expl="VC for produces_refl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_refl&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="produces_refl&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="produces_refl&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.234741" steps="36873"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_ProducesTrans_Impl" proved="true">
 <goal name="produces_trans&#39;vc" expl="VC for produces_trans" proved="true">
 <transf name="unfold" proved="true" arg1="produces">
  <goal name="produces_trans&#39;vc.0" expl="VC for produces_trans" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="produces_trans&#39;vc.0.0" expl="VC for produces_trans" proved="true">
   <proof prover="0"><result status="valid" time="0.010000" steps="184"/></proof>
   </goal>
   <goal name="produces_trans&#39;vc.0.1" expl="VC for produces_trans" proved="true">
   <transf name="exists" proved="true" arg1="(s1 ++ s)">
    <goal name="produces_trans&#39;vc.0.1.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="produces_trans&#39;vc.0.1.0.0" proved="true">
     <proof prover="0"><result status="valid" time="0.028099" steps="45"/></proof>
     </goal>
     <goal name="produces_trans&#39;vc.0.1.0.1" proved="true">
     <proof prover="0"><result status="valid" time="0.010000" steps="50"/></proof>
     </goal>
     <goal name="produces_trans&#39;vc.0.1.0.2" proved="true">
     <proof prover="0"><result status="valid" time="0.010000" steps="44"/></proof>
     </goal>
     <goal name="produces_trans&#39;vc.0.1.0.3" proved="true">
     <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
      <goal name="produces_trans&#39;vc.0.1.0.3.0" proved="true">
      <proof prover="0"><result status="valid" time="0.010000" steps="51"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="produces_trans&#39;vc.0.1.0.4" proved="true">
     <transf name="exists" proved="true" arg1="(fs1++fs)">
      <goal name="produces_trans&#39;vc.0.1.0.4.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="produces_trans&#39;vc.0.1.0.4.0.0" proved="true">
       <proof prover="0"><result status="valid" time="0.040708" steps="45"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.4.0.1" proved="true">
       <proof prover="0"><result status="valid" time="0.010000" steps="50"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.4.0.2" proved="true">
       <proof prover="0"><result status="valid" time="0.166171" steps="565"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.4.0.3" proved="true">
       <proof prover="0"><result status="valid" time="0.010000" steps="80"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.4.0.4" proved="true">
       <proof prover="0"><result status="valid" time="0.030000" steps="242"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.4.0.5" proved="true">
       <proof prover="0"><result status="valid" time="0.020000" steps="205"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.4.0.6" proved="true">
       <proof prover="0"><result status="valid" time="0.150000" steps="585"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.4.0.7" proved="true">
       <transf name="instantiate" proved="true" arg1="H2" arg2="(i-length ab)">
        <goal name="produces_trans&#39;vc.0.1.0.4.0.7.0" proved="true">
        <transf name="instantiate" proved="true" arg1="H12" arg2="i">
         <goal name="produces_trans&#39;vc.0.1.0.4.0.7.0.0" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_trans&#39;vc.0.1.0.4.0.7.0.0.0" proved="true">
          <proof prover="0"><result status="valid" time="0.796263" steps="6145"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
       <goal name="produces_trans&#39;vc.0.1.0.4.0.8" proved="true">
       <transf name="instantiate" proved="true" arg1="H2" arg2="(i-length ab)">
        <goal name="produces_trans&#39;vc.0.1.0.4.0.8.0" proved="true">
        <transf name="instantiate" proved="true" arg1="H12" arg2="i">
         <goal name="produces_trans&#39;vc.0.1.0.4.0.8.0.0" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_trans&#39;vc.0.1.0.4.0.8.0.0.0" proved="true">
          <proof prover="0" timelimit="30" memlimit="4000"><result status="valid" time="1.762104" steps="9538"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl1_ProducesOne_Impl" proved="true">
 <goal name="produces_one&#39;vc" expl="VC for produces_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="produces_one&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="produces">
    <goal name="produces_one&#39;vc.0.0.0" expl="VC for produces_one" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="produces_one&#39;vc.0.0.0.0" expl="VC for produces_one" proved="true">
     <proof prover="0"><result status="valid" time="0.010000" steps="54"/></proof>
     </goal>
     <goal name="produces_one&#39;vc.0.0.0.1" expl="VC for produces_one" proved="true">
     <transf name="exists" proved="true" arg1="(singleton e)">
      <goal name="produces_one&#39;vc.0.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="produces_one&#39;vc.0.0.0.1.0.0" proved="true">
       <proof prover="0"><result status="valid" time="0.023538" steps="20"/></proof>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.1" proved="true">
       <proof prover="0"><result status="valid" time="0.010000" steps="24"/></proof>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.2" proved="true">
       <proof prover="0"><result status="valid" time="0.010000" steps="18"/></proof>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.3" proved="true">
       <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
        <goal name="produces_one&#39;vc.0.0.0.1.0.3.0" proved="true">
        <proof prover="0"><result status="valid" time="0.010000" steps="20"/></proof>
        </goal>
       </transf>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.4" proved="true">
       <transf name="exists" proved="true" arg1="(singleton f)">
        <goal name="produces_one&#39;vc.0.0.0.1.0.4.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="produces_one&#39;vc.0.0.0.1.0.4.0.0" proved="true">
         <proof prover="0"><result status="valid" time="0.026703" steps="20"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.4.0.1" proved="true">
         <proof prover="0"><result status="valid" time="0.010000" steps="26"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.4.0.2" proved="true">
         <proof prover="0"><result status="valid" time="0.010000" steps="25"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.4.0.3" proved="true">
         <proof prover="0"><result status="valid" time="0.010000" steps="22"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.4.0.4" proved="true">
         <proof prover="0"><result status="valid" time="0.010000" steps="23"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.4.0.5" proved="true">
         <proof prover="0"><result status="valid" time="0.010000" steps="26"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.4.0.6" proved="true">
         <proof prover="0"><result status="valid" time="0.010000" steps="153"/></proof>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.4.0.7" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_one&#39;vc.0.0.0.1.0.4.0.7.0" proved="true">
          <proof prover="0"><result status="valid" time="0.030000" steps="489"/></proof>
          </goal>
         </transf>
         </goal>
         <goal name="produces_one&#39;vc.0.0.0.1.0.4.0.8" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_one&#39;vc.0.0.0.1.0.4.0.8.0" proved="true">
          <proof prover="0"><result status="valid" time="0.143126" steps="453"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="produces_one&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="produces_one&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="4"><result status="valid" time="0.388342" steps="41000"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl1_ProducesOneInvariant_Impl" proved="true">
 <goal name="produces_one_invariant&#39;vc" expl="VC for produces_one_invariant" proved="true">
 <transf name="rewrite" proved="true" arg1="inv_t_map">
  <goal name="produces_one_invariant&#39;vc.0" expl="VC for produces_one_invariant" proved="true">
  <transf name="rewrite" proved="true" arg1="inv_t_map">
   <goal name="produces_one_invariant&#39;vc.0.0" expl="VC for produces_one_invariant" proved="true">
   <transf name="unfold" proved="true" arg1="invariant&#39;">
    <goal name="produces_one_invariant&#39;vc.0.0.0" expl="VC for produces_one_invariant" proved="true">
    <transf name="unfold" proved="true" arg1="next_precondition">
     <goal name="produces_one_invariant&#39;vc.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
     <transf name="unfold" proved="true" arg1="preservation_inv">
      <goal name="produces_one_invariant&#39;vc.0.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
      <transf name="unfold" proved="true" arg1="produces_one">
       <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
        <proof prover="0"><result status="valid" time="0.010000" steps="24"/></proof>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1" expl="VC for produces_one_invariant" proved="true">
        <transf name="instantiate" proved="true" arg1="H12" arg2="i, b, f, e1, e2, (cons e s)">
         <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0" expl="VC for produces_one_invariant" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0.0" expl="VC for produces_one_invariant" proved="true">
          <proof prover="4"><result status="valid" time="0.689732" steps="146377"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.2" expl="VC for produces_one_invariant" proved="true">
        <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
         <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.2.0" expl="VC for produces_one_invariant" proved="true">
         <proof prover="4"><result status="valid" time="0.264204" steps="38726"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.3" expl="VC for produces_one_invariant" proved="true">
        <proof prover="0"><result status="valid" time="0.010000" steps="24"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0_Next" proved="true">
 <goal name="next&#39;vc" expl="VC for next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="next&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.112661" steps="10670"/></proof>
  </goal>
  <goal name="next&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.015246" steps="22"/></proof>
  </goal>
  <goal name="next&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.024006" steps="22"/></proof>
  </goal>
  <goal name="next&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.013144" steps="44"/></proof>
  </goal>
  <goal name="next&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.136766" steps="18712"/></proof>
  </goal>
  <goal name="next&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.024082" steps="33"/></proof>
  </goal>
  <goal name="next&#39;vc.6" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.025172" steps="242"/></proof>
  </goal>
  <goal name="next&#39;vc.7" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.015449" steps="70"/></proof>
  </goal>
  <goal name="next&#39;vc.8" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.015299" steps="67"/></proof>
  </goal>
  <goal name="next&#39;vc.9" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.013939" steps="69"/></proof>
  </goal>
  <goal name="next&#39;vc.10" expl="assertion" proved="true">
  <proof prover="0"><result status="valid" time="0.274241" steps="1106"/></proof>
  </goal>
  <goal name="next&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.078992" steps="216"/></proof>
  </goal>
  <goal name="next&#39;vc.12" expl="unreachable point" proved="true">
  <proof prover="0"><result status="valid" time="0.012501" steps="30"/></proof>
  </goal>
  <goal name="next&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.263281" steps="24767"/></proof>
  </goal>
  <goal name="next&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.015445" steps="13"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Map" proved="true">
 <goal name="map&#39;vc" expl="VC for map" proved="true">
 <proof prover="0"><result status="valid" time="0.020000" steps="170"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Identity_Closure0" proved="true">
 <goal name="c06MapPrecond_Identity_Closure0&#39;vc" expl="VC for c06MapPrecond_Identity_Closure0" proved="true">
 <proof prover="0"><result status="valid" time="0.012451" steps="6"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Identity" proved="true">
 <goal name="identity&#39;vc" expl="VC for identity" proved="true">
 <proof prover="0"><result status="valid" time="0.025832" steps="302"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Increment_Closure2" proved="true">
 <goal name="c06MapPrecond_Increment_Closure2&#39;vc" expl="VC for c06MapPrecond_Increment_Closure2" proved="true">
 <proof prover="0"><result status="valid" time="0.010000" steps="12"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Increment" proved="true">
 <goal name="increment&#39;vc" expl="VC for increment" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="increment&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.010000" steps="39"/></proof>
  </goal>
  <goal name="increment&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.040000" steps="251"/></proof>
  </goal>
  <goal name="increment&#39;vc.2" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.010000" steps="79"/></proof>
  </goal>
  <goal name="increment&#39;vc.3" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.016718" steps="8"/></proof>
  </goal>
  <goal name="increment&#39;vc.4" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.010000" steps="10"/></proof>
  </goal>
  <goal name="increment&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="0" timelimit="5"><result status="valid" time="0.026428" steps="9"/></proof>
  </goal>
  <goal name="increment&#39;vc.6" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.217347" steps="51728"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C06MapPrecond_Counter_Closure2" proved="true">
 <goal name="c06MapPrecond_Counter_Closure2&#39;vc" expl="VC for c06MapPrecond_Counter_Closure2" proved="true">
 <proof prover="0"><result status="valid" time="0.020000" steps="124"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Counter" proved="true">
 <goal name="counter&#39;vc" expl="VC for counter" proved="true">
 <proof prover="0"><result status="valid" time="0.176208" steps="892"/></proof>
 </goal>
</theory>
<theory name="C06MapPrecond_Impl0" proved="true">
 <goal name="produces_refl_refn" proved="true">
 <proof prover="0"><result status="valid" time="0.000000" steps="1"/></proof>
 </goal>
 <goal name="next_refn" proved="true">
 <proof prover="0"><result status="valid" time="0.280785" steps="1825"/></proof>
 </goal>
 <goal name="produces_trans_refn" proved="true">
 <proof prover="0"><result status="valid" time="0.000000" steps="1"/></proof>
 </goal>
</theory>
</file>
</why3session>
