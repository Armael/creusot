<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="2" name="Alt-Ergo" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="04_skip.mlcfg"/>
<theory name="C04Skip_Impl0_ProducesRefl_Impl" proved="true">
 <goal name="produces_refl&#39;vc" expl="VC for produces_refl" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="7"/></proof>
 </goal>
</theory>
<theory name="C04Skip_Impl0_ProducesTrans_Impl" proved="true">
 <goal name="produces_trans&#39;vc" expl="VC for produces_trans" proved="true">
 <transf name="assert" proved="true" arg1="(forall s:seq item. s ++ empty == s /\ empty ++ s == s)">
  <goal name="produces_trans&#39;vc.0" expl="asserted formula" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="91"/></proof>
  </goal>
  <goal name="produces_trans&#39;vc.1" expl="VC for produces_trans" proved="true">
  <transf name="assert" proved="true" arg1="(forall s:seq item. length1 s = 0 -&gt; s == empty)">
   <goal name="produces_trans&#39;vc.1.0" expl="asserted formula" proved="true">
   <proof prover="2"><result status="valid" time="0.01" steps="17"/></proof>
   </goal>
   <goal name="produces_trans&#39;vc.1.1" expl="VC for produces_trans" proved="true">
   <transf name="assert" proved="true" arg1="(forall s1:seq item, s2, s3. s1 ++ (s2 ++ s3) == (s1 ++ s2) ++ s3)">
    <goal name="produces_trans&#39;vc.1.1.0" expl="asserted formula" proved="true">
    <proof prover="2"><result status="valid" time="0.01" steps="150"/></proof>
    </goal>
    <goal name="produces_trans&#39;vc.1.1.1" expl="VC for produces_trans" proved="true">
    <proof prover="2"><result status="valid" time="0.06" steps="1073"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C04Skip_Impl0_Next" proved="true">
 <goal name="next&#39;vc" expl="VC for next" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="2829"/></proof>
 </goal>
</theory>
<theory name="C04Skip_Impl0" proved="true">
 <goal name="produces_refl_spec" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
 <goal name="produces_trans_spec" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="2"/></proof>
 </goal>
 <goal name="Next1.next&#39;refn&#39;vc" expl="VC for next&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="203"/></proof>
 </goal>
</theory>
</file>
</why3session>
