<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.4.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.11.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="03_std_iterators.mlcfg"/>
<theory name="C03StdIterators_SliceIter" proved="true">
 <goal name="slice_iter&#39;vc" expl="VC for slice_iter" proved="true">
 <proof prover="1" timelimit="5"><result status="valid" time="0.04" steps="967"/></proof>
 </goal>
</theory>
<theory name="C03StdIterators_VecIter" proved="true">
 <goal name="vec_iter&#39;vc" expl="VC for vec_iter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vec_iter&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="8"/></proof>
  </goal>
  <goal name="vec_iter&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="10"/></proof>
  </goal>
  <goal name="vec_iter&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="12"/></proof>
  </goal>
  <goal name="vec_iter&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="14"/></proof>
  </goal>
  <goal name="vec_iter&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.00" steps="18"/></proof>
  </goal>
  <goal name="vec_iter&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="121"/></proof>
  </goal>
  <goal name="vec_iter&#39;vc.6" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="383"/></proof>
  </goal>
  <goal name="vec_iter&#39;vc.7" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="36"/></proof>
  </goal>
  <goal name="vec_iter&#39;vc.8" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="44"/></proof>
  </goal>
  <goal name="vec_iter&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="38"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C03StdIterators_AllZero" proved="true">
 <goal name="all_zero&#39;vc" expl="VC for all_zero" proved="true">
 <proof prover="1" timelimit="5"><result status="valid" time="0.08" steps="1628"/></proof>
 </goal>
</theory>
<theory name="C03StdIterators_SkipTake" proved="true">
 <goal name="skip_take&#39;vc" expl="VC for skip_take" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="252"/></proof>
 </goal>
</theory>
<theory name="C03StdIterators_Counter_Closure0" proved="true">
 <goal name="c03StdIterators_Counter_Closure0&#39;vc" expl="VC for c03StdIterators_Counter_Closure0" proved="true">
 <proof prover="1"><result status="valid" time="0.01" steps="125"/></proof>
 </goal>
</theory>
<theory name="C03StdIterators_Counter" proved="true">
 <goal name="counter&#39;vc" expl="VC for counter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="counter&#39;vc.0" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="73"/></proof>
  </goal>
  <goal name="counter&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.03" steps="707"/></proof>
  </goal>
  <goal name="counter&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.02" steps="205"/></proof>
  </goal>
  <goal name="counter&#39;vc.3" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.01" steps="18"/></proof>
  </goal>
  <goal name="counter&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1" timelimit="5"><result status="valid" time="0.01" steps="17"/></proof>
  </goal>
  <goal name="counter&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.12" steps="324"/></proof>
  </goal>
  <goal name="counter&#39;vc.6" expl="assertion" proved="true">
  <proof prover="2" memlimit="2000"><result status="valid" time="0.04" steps="216833"/></proof>
  </goal>
  <goal name="counter&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2" timelimit="1"><result status="valid" time="0.07" steps="305322"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C03StdIterators_SumRange" proved="true">
 <goal name="sum_range&#39;vc" expl="VC for sum_range" proved="true">
 <proof prover="1" timelimit="5"><result status="valid" time="0.07" steps="1499"/></proof>
 </goal>
</theory>
<theory name="C03StdIterators_EnumerateRange" proved="true">
 <goal name="enumerate_range&#39;vc" expl="VC for enumerate_range" proved="true">
 <proof prover="0"><result status="valid" time="0.16" steps="3113"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="enumerate_range&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.00" steps="2"/></proof>
  </goal>
  <goal name="enumerate_range&#39;vc.1" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.00" steps="14"/></proof>
  </goal>
  <goal name="enumerate_range&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.00" steps="16"/></proof>
  </goal>
  <goal name="enumerate_range&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="25"/></proof>
  </goal>
  <goal name="enumerate_range&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="31"/></proof>
  </goal>
  <goal name="enumerate_range&#39;vc.5" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.00" steps="24"/></proof>
  </goal>
  <goal name="enumerate_range&#39;vc.6" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="55"/></proof>
  </goal>
  <goal name="enumerate_range&#39;vc.7" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="62"/></proof>
  </goal>
  <goal name="enumerate_range&#39;vc.8" expl="loop invariant preservation" proved="true">
  <proof prover="0"><result status="valid" time="0.06" steps="1512"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
