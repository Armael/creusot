
module T_17_filter__Filter
  type t_Filter 'i 'f =
    | C_Filter 'i 'f
  
  function any_l (_ : 'b) : 'a
  
  let rec t_Filter < 'i > < 'f > (input:t_Filter 'i 'f) (ret  (iter:'i) (func:'f))= any
    [ good (iter:'i) (func:'f)-> {C_Filter iter func = input} (! ret {iter} {func})
    | bad (iter:'i) (func:'f)-> {C_Filter iter func <> input} {false} any ]
    
  
  function t_Filter__iter (self : t_Filter 'i 'f) : 'i =
    match self with
      | C_Filter a _ -> a
      end
  
  function t_Filter__func (self : t_Filter 'i 'f) : 'f =
    match self with
      | C_Filter _ a -> a
      end
end
module M_17_filter__qyi2805440166685272671__produces_refl__Impl
  type i
  
  type f
  
  let%span s17_filter0 = "../17_filter.rs" 50 15 50 24
  
  let%span s17_filter1 = "../17_filter.rs" 51 14 51 45
  
  let%span span2 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 133
  
  let%span span3 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span4 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span5 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span9 = "../common.rs" 19 15 19 21
  
  let%span span10 = "../common.rs" 20 15 20 21
  
  let%span span11 = "../common.rs" 21 15 21 21
  
  let%span span12 = "../common.rs" 22 15 22 32
  
  let%span span13 = "../common.rs" 23 15 23 32
  
  let%span span14 = "../common.rs" 24 14 24 42
  
  let%span span15 = "../common.rs" 14 15 14 24
  
  let%span span16 = "../common.rs" 15 14 15 45
  
  let%span span17 = "../17_filter.rs" 22 8 35 9
  
  let%span span18 = "../17_filter.rs" 69 8 84 9
  
  predicate invariant'2 (self : f)
  
  predicate inv'2 (_1 : f)
  
  axiom inv'2 : forall x : f [inv'2 x] . inv'2 x  -> invariant'2 x
  
  predicate invariant'1 (self : i)
  
  predicate inv'1 (_1 : i)
  
  axiom inv'1 : forall x : i [inv'1 x] . inv'1 x  -> invariant'1 x
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : f)
  
  type t_Item'0
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : bool)
  
  predicate postcondition_once'0 (self : f) (_2 : t_Item'0) (_3 : bool)
  
  function fn_mut_once'0 (self : f) (args : t_Item'0) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : t_Item'0, res : bool . [%#span2] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span3] unnest'0 self b)
   -> ([%#span4] unnest'0 b c)  -> ([%#span5] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#span6] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : t_Item'0) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : t_Item'0, res : bool . ([%#span7] postcondition_mut'0 self args res)
   -> ([%#span8] unnest'0 self.current self.final)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#span9] inv'1 a)
   -> ([%#span10] inv'1 b)
   -> ([%#span11] inv'1 c)
   -> ([%#span12] produces'1 a ab b)  -> ([%#span13] produces'1 b bc c)  -> ([%#span14] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span15] inv'1 self)
   -> ([%#span16] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  use T_17_filter__Filter as Filter'0
  
  predicate invariant'0 [#"../17_filter.rs" 21 4 21 30] (self : Filter'0.t_Filter i f) =
    [%#span17] forall f : f, i : t_Item'0 . precondition'0 f (i)
    /\ (forall f : borrowed f, i : t_Item'0, b : bool . postcondition_mut'0 f (i) b  -> f.current = f.final)
    /\ (forall f : f, g : f . unnest'0 f g  -> f = g)
    /\ (forall f : borrowed f, g : borrowed f, i : t_Item'0, b : bool . f.current = g.current /\ f.final = g.final
     -> postcondition_mut'0 f (i) b = postcondition_mut'0 g (i) b)
    /\ (forall f : borrowed f, i : t_Item'0 . postcondition_mut'0 f (i) true <> postcondition_mut'0 f (i) false)
  
  predicate inv'0 (_1 : Filter'0.t_Filter i f)
  
  axiom inv'0 [@rewrite] : forall x : Filter'0.t_Filter i f [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Filter'0.C_Filter iter func -> inv'1 iter /\ inv'2 func
    end)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use map.Map
  
  use seq.Seq
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  use prelude.prelude.Int
  
  use map.Map
  
  predicate produces'0 [#"../17_filter.rs" 68 4 68 67] (self : Filter'0.t_Filter i f) (visited : Seq.seq t_Item'0) (succ : Filter'0.t_Filter i f)
    
   =
    [%#span18] unnest'0 (T_17_filter__Filter.t_Filter__func self) (T_17_filter__Filter.t_Filter__func succ)
    /\ (exists s : Seq.seq t_Item'0, f : Map.map int int . produces'1 (T_17_filter__Filter.t_Filter__iter self) s (T_17_filter__Filter.t_Filter__iter succ)
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited  -> Map.get f i <= Map.get f j)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> 0 <= Map.get f i /\ Map.get f i < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall bor_f : borrowed f . bor_f.current = T_17_filter__Filter.t_Filter__func self
    /\ bor_f.final = T_17_filter__Filter.t_Filter__func self
     -> (forall i : int . 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
     -> postcondition_mut'0 bor_f (Seq.get s i) true)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> postcondition_mut'0 bor_f (Seq.get s i) true
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i))))
  
  constant self  : Filter'0.t_Filter i f
  
  function produces_refl [#"../17_filter.rs" 52 4 52 26] (self : Filter'0.t_Filter i f) : ()
  
  goal vc_produces_refl : ([%#s17_filter0] inv'0 self)
   -> ([%#s17_filter1] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
end
module M_17_filter__qyi2805440166685272671__produces_trans__Impl
  type i
  
  type f
  
  let%span s17_filter0 = "../17_filter.rs" 56 15 56 21
  
  let%span s17_filter1 = "../17_filter.rs" 57 15 57 21
  
  let%span s17_filter2 = "../17_filter.rs" 58 15 58 21
  
  let%span s17_filter3 = "../17_filter.rs" 59 15 59 32
  
  let%span s17_filter4 = "../17_filter.rs" 60 15 60 32
  
  let%span s17_filter5 = "../17_filter.rs" 61 14 61 42
  
  let%span span6 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 133
  
  let%span span7 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span8 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span9 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span10 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span11 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span12 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span13 = "../common.rs" 19 15 19 21
  
  let%span span14 = "../common.rs" 20 15 20 21
  
  let%span span15 = "../common.rs" 21 15 21 21
  
  let%span span16 = "../common.rs" 22 15 22 32
  
  let%span span17 = "../common.rs" 23 15 23 32
  
  let%span span18 = "../common.rs" 24 14 24 42
  
  let%span span19 = "../common.rs" 14 15 14 24
  
  let%span span20 = "../common.rs" 15 14 15 45
  
  let%span span21 = "../17_filter.rs" 22 8 35 9
  
  let%span span22 = "../17_filter.rs" 69 8 84 9
  
  predicate invariant'2 (self : f)
  
  predicate inv'2 (_1 : f)
  
  axiom inv'2 : forall x : f [inv'2 x] . inv'2 x  -> invariant'2 x
  
  predicate invariant'1 (self : i)
  
  predicate inv'1 (_1 : i)
  
  axiom inv'1 : forall x : i [inv'1 x] . inv'1 x  -> invariant'1 x
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : f)
  
  type t_Item'0
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : bool)
  
  predicate postcondition_once'0 (self : f) (_2 : t_Item'0) (_3 : bool)
  
  function fn_mut_once'0 (self : f) (args : t_Item'0) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : t_Item'0, res : bool . [%#span6] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span7] unnest'0 self b)
   -> ([%#span8] unnest'0 b c)  -> ([%#span9] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#span10] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : t_Item'0) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : t_Item'0, res : bool . ([%#span11] postcondition_mut'0 self args res)
   -> ([%#span12] unnest'0 self.current self.final)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#span13] inv'1 a)
   -> ([%#span14] inv'1 b)
   -> ([%#span15] inv'1 c)
   -> ([%#span16] produces'1 a ab b)  -> ([%#span17] produces'1 b bc c)  -> ([%#span18] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span19] inv'1 self)
   -> ([%#span20] produces'1 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  use T_17_filter__Filter as Filter'0
  
  predicate invariant'0 [#"../17_filter.rs" 21 4 21 30] (self : Filter'0.t_Filter i f) =
    [%#span21] forall f : f, i : t_Item'0 . precondition'0 f (i)
    /\ (forall f : borrowed f, i : t_Item'0, b : bool . postcondition_mut'0 f (i) b  -> f.current = f.final)
    /\ (forall f : f, g : f . unnest'0 f g  -> f = g)
    /\ (forall f : borrowed f, g : borrowed f, i : t_Item'0, b : bool . f.current = g.current /\ f.final = g.final
     -> postcondition_mut'0 f (i) b = postcondition_mut'0 g (i) b)
    /\ (forall f : borrowed f, i : t_Item'0 . postcondition_mut'0 f (i) true <> postcondition_mut'0 f (i) false)
  
  predicate inv'0 (_1 : Filter'0.t_Filter i f)
  
  axiom inv'0 [@rewrite] : forall x : Filter'0.t_Filter i f [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Filter'0.C_Filter iter func -> inv'1 iter /\ inv'2 func
    end)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use map.Map
  
  use seq.Seq
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  use prelude.prelude.Int
  
  use map.Map
  
  predicate produces'0 [#"../17_filter.rs" 68 4 68 67] (self : Filter'0.t_Filter i f) (visited : Seq.seq t_Item'0) (succ : Filter'0.t_Filter i f)
    
   =
    [%#span22] unnest'0 (T_17_filter__Filter.t_Filter__func self) (T_17_filter__Filter.t_Filter__func succ)
    /\ (exists s : Seq.seq t_Item'0, f : Map.map int int . produces'1 (T_17_filter__Filter.t_Filter__iter self) s (T_17_filter__Filter.t_Filter__iter succ)
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited  -> Map.get f i <= Map.get f j)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> 0 <= Map.get f i /\ Map.get f i < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall bor_f : borrowed f . bor_f.current = T_17_filter__Filter.t_Filter__func self
    /\ bor_f.final = T_17_filter__Filter.t_Filter__func self
     -> (forall i : int . 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
     -> postcondition_mut'0 bor_f (Seq.get s i) true)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> postcondition_mut'0 bor_f (Seq.get s i) true
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i))))
  
  constant a  : Filter'0.t_Filter i f
  
  constant ab  : Seq.seq t_Item'0
  
  constant b  : Filter'0.t_Filter i f
  
  constant bc  : Seq.seq t_Item'0
  
  constant c  : Filter'0.t_Filter i f
  
  function produces_trans [#"../17_filter.rs" 62 4 62 90] (a : Filter'0.t_Filter i f) (ab : Seq.seq t_Item'0) (b : Filter'0.t_Filter i f) (bc : Seq.seq t_Item'0) (c : Filter'0.t_Filter i f) : ()
    
  
  goal vc_produces_trans : ([%#s17_filter4] produces'0 b bc c)
   -> ([%#s17_filter3] produces'0 a ab b)
   -> ([%#s17_filter2] inv'0 c)
   -> ([%#s17_filter1] inv'0 b)  -> ([%#s17_filter0] inv'0 a)  -> ([%#s17_filter5] produces'0 a (Seq.(++) ab bc) c)
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module M_17_filter__qyi2805440166685272671__next
  type i
  
  type f
  
  let%span s17_filter0 = "../17_filter.rs" 93 23 93 40
  
  let%span s17_filter1 = "../17_filter.rs" 94 27 94 51
  
  let%span s17_filter2 = "../17_filter.rs" 96 20 96 29
  
  let%span s17_filter3 = "../17_filter.rs" 97 20 97 46
  
  let%span s17_filter4 = "../17_filter.rs" 96 8 96 31
  
  let%span s17_filter5 = "../17_filter.rs" 103 23 103 53
  
  let%span s17_filter6 = "../17_filter.rs" 104 12 104 71
  
  let%span s17_filter7 = "../17_filter.rs" 87 15 87 24
  
  let%span s17_filter8 = "../17_filter.rs" 92 17 92 21
  
  let%span s17_filter9 = "../17_filter.rs" 88 14 91 5
  
  let%span s17_filter10 = "../17_filter.rs" 92 26 92 41
  
  let%span span11 = "../../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  let%span span12 = "../17_filter.rs" 22 8 35 9
  
  let%span span13 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span14 = "../../../../../creusot-contracts/src/std/ops.rs" 122 14 122 133
  
  let%span span15 = "../../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  
  let%span span16 = "../../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  
  let%span span17 = "../../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  
  let%span span18 = "../../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  
  let%span span19 = "../../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  
  let%span span20 = "../../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  
  let%span span21 = "../common.rs" 19 15 19 21
  
  let%span span22 = "../common.rs" 20 15 20 21
  
  let%span span23 = "../common.rs" 21 15 21 21
  
  let%span span24 = "../common.rs" 22 15 22 32
  
  let%span span25 = "../common.rs" 23 15 23 32
  
  let%span span26 = "../common.rs" 24 14 24 42
  
  let%span span27 = "../common.rs" 14 15 14 24
  
  let%span span28 = "../common.rs" 15 14 15 45
  
  let%span span29 = "../17_filter.rs" 69 8 84 9
  
  let%span span30 = "../17_filter.rs" 45 8 45 74
  
  let%span span31 = "../../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  let%span span32 = "../../../../../creusot-contracts/src/std/ops.rs" 160 27 160 52
  
  let%span span33 = "" 0 0 0 0
  
  let%span span34 = "" 0 0 0 0
  
  let%span span35 = "../../../../../creusot-contracts/src/std/ops.rs" 148 0 172 1
  
  let%span span36 = "" 0 0 0 0
  
  let%span span37 = "../common.rs" 31 17 31 21
  
  let%span span38 = "../common.rs" 27 14 30 5
  
  let%span span39 = "../common.rs" 31 26 31 44
  
  let%span span40 = "../../../../../creusot-contracts/src/logic/ops.rs" 86 8 86 33
  
  type t_Item'0
  
  predicate inv'3 (_1 : t_Item'0)
  
  use prelude.prelude.Borrow
  
  predicate invariant'8 (self : t_Item'0) =
    [%#span11] inv'3 self
  
  predicate inv'10 (_1 : t_Item'0)
  
  axiom inv'10 [@rewrite] : forall x : t_Item'0 [inv'10 x] . inv'10 x = invariant'8 x
  
  predicate inv'2 (_1 : f)
  
  predicate inv'1 (_1 : i)
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : bool)
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  use T_17_filter__Filter as Filter'0
  
  predicate invariant'7 [#"../17_filter.rs" 21 4 21 30] (self : Filter'0.t_Filter i f) =
    [%#span12] forall f : f, i : t_Item'0 . precondition'0 f (i)
    /\ (forall f : borrowed f, i : t_Item'0, b : bool . postcondition_mut'0 f (i) b  -> f.current = f.final)
    /\ (forall f : f, g : f . unnest'0 f g  -> f = g)
    /\ (forall f : borrowed f, g : borrowed f, i : t_Item'0, b : bool . f.current = g.current /\ f.final = g.final
     -> postcondition_mut'0 f (i) b = postcondition_mut'0 g (i) b)
    /\ (forall f : borrowed f, i : t_Item'0 . postcondition_mut'0 f (i) true <> postcondition_mut'0 f (i) false)
  
  predicate inv'9 (_1 : Filter'0.t_Filter i f)
  
  axiom inv'9 [@rewrite] : forall x : Filter'0.t_Filter i f [inv'9 x] . inv'9 x
  = (invariant'7 x
  /\ match x with
    | Filter'0.C_Filter iter func -> inv'1 iter /\ inv'2 func
    end)
  
  predicate inv'8 (_1 : bool)
  
  axiom inv'8 [@rewrite] : forall x : bool [inv'8 x] . inv'8 x = true
  
  predicate inv'7 (_1 : t_Item'0)
  
  axiom inv'7 [@rewrite] : forall x : t_Item'0 [inv'7 x] . inv'7 x = (let (a) = x in inv'10 a)
  
  predicate invariant'5 (self : borrowed f) =
    [%#span13] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'6 (_1 : borrowed f)
  
  axiom inv'6 [@rewrite] : forall x : borrowed f [inv'6 x] . inv'6 x = invariant'5 x
  
  predicate invariant'4 (self : borrowed i) =
    [%#span13] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'5 (_1 : borrowed i)
  
  axiom inv'5 [@rewrite] : forall x : borrowed i [inv'5 x] . inv'5 x = invariant'4 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'4 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv'4 [@rewrite] : forall x : Option'0.t_Option t_Item'0 [inv'4 x] . inv'4 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  predicate invariant'3 (self : t_Item'0)
  
  axiom inv'3 : forall x : t_Item'0 [inv'3 x] . inv'3 x  -> invariant'3 x
  
  predicate invariant'2 (self : f)
  
  axiom inv'2 : forall x : f [inv'2 x] . inv'2 x  -> invariant'2 x
  
  predicate invariant'1 (self : i)
  
  axiom inv'1 : forall x : i [inv'1 x] . inv'1 x  -> invariant'1 x
  
  predicate resolve'4 (_1 : f)
  
  predicate postcondition_once'0 (self : f) (_2 : t_Item'0) (_3 : bool)
  
  function fn_mut_once'0 (self : f) (args : t_Item'0) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : f, args : t_Item'0, res : bool . [%#span14] postcondition_once'0 self args res
  = (exists s : borrowed f . s.current = self /\ postcondition_mut'0 s args res /\ resolve'4 s.final)
  
  function unnest_trans'0 (self : f) (b : f) (c : f) : ()
  
  axiom unnest_trans'0_spec : forall self : f, b : f, c : f . ([%#span15] unnest'0 self b)
   -> ([%#span16] unnest'0 b c)  -> ([%#span17] unnest'0 self c)
  
  function unnest_refl'0 (self : f) : ()
  
  axiom unnest_refl'0_spec : forall self : f . [%#span18] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed f) (args : t_Item'0) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed f, args : t_Item'0, res : bool . ([%#span19] postcondition_mut'0 self args res)
   -> ([%#span20] unnest'0 self.current self.final)
  
  predicate invariant'0 (self : borrowed (Filter'0.t_Filter i f)) =
    [%#span13] inv'9 self.current /\ inv'9 self.final
  
  predicate inv'0 (_1 : borrowed (Filter'0.t_Filter i f))
  
  axiom inv'0 [@rewrite] : forall x : borrowed (Filter'0.t_Filter i f) [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq t_Item'0) (b : i) (bc : Seq.seq t_Item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq t_Item'0, b : i, bc : Seq.seq t_Item'0, c : i . ([%#span21] inv'1 a)
   -> ([%#span22] inv'1 b)
   -> ([%#span23] inv'1 c)
   -> ([%#span24] produces'0 a ab b)  -> ([%#span25] produces'0 b bc c)  -> ([%#span26] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span27] inv'1 self)
   -> ([%#span28] produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use map.Map
  
  use seq.Seq
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  use prelude.prelude.Int
  
  use map.Map
  
  predicate produces'1 [#"../17_filter.rs" 68 4 68 67] (self : Filter'0.t_Filter i f) (visited : Seq.seq t_Item'0) (succ : Filter'0.t_Filter i f)
    
   =
    [%#span29] unnest'0 (T_17_filter__Filter.t_Filter__func self) (T_17_filter__Filter.t_Filter__func succ)
    /\ (exists s : Seq.seq t_Item'0, f : Map.map int int . produces'0 (T_17_filter__Filter.t_Filter__iter self) s (T_17_filter__Filter.t_Filter__iter succ)
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited  -> Map.get f i <= Map.get f j)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> 0 <= Map.get f i /\ Map.get f i < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall bor_f : borrowed f . bor_f.current = T_17_filter__Filter.t_Filter__func self
    /\ bor_f.final = T_17_filter__Filter.t_Filter__func self
     -> (forall i : int . 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
     -> postcondition_mut'0 bor_f (Seq.get s i) true)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> postcondition_mut'0 bor_f (Seq.get s i) true
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i))))
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate completed'0 [#"../17_filter.rs" 44 4 44 35] (self : borrowed (Filter'0.t_Filter i f)) =
    [%#span30] completed'1 (Borrow.borrow_logic (T_17_filter__Filter.t_Filter__iter self.current) (T_17_filter__Filter.t_Filter__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ T_17_filter__Filter.t_Filter__func self.current = T_17_filter__Filter.t_Filter__func self.final
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (Filter'0.t_Filter i f)) =
    [%#span31] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Filter'0.t_Filter i f)) =
    resolve'3 _1
  
  predicate resolve'0 (_1 : t_Item'0)
  
  let rec call_mut'0 (self:borrowed f) (args:t_Item'0) (return'  (ret:bool))= {[@expl:precondition] [%#span34] inv'7 args}
    {[@expl:precondition] [%#span33] inv'6 self}
    {[@expl:precondition] [%#span32] precondition'0 self.current args}
    any
    [ return' (result:bool)-> {[%#span36] inv'8 result}
      {[%#span35] postcondition_mut'0 self args result}
      (! return' {result}) ]
    
  
  use seq.Seq
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_Option t_Item'0))= {[@expl:precondition] [%#span37] inv'5 self}
    any
    [ return' (result:Option'0.t_Option t_Item'0)-> {[%#span39] inv'4 result}
      {[%#span38] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq t_Item'0)) (ix : int) : t_Item'0 =
    [%#span40] Seq.get (Snapshot.inner self) ix
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec next (self:borrowed (Filter'0.t_Filter i f)) (return'  (ret:Option'0.t_Option t_Item'0))= {[%#s17_filter8] inv'0 self}
    {[%#s17_filter7] inv'0 self}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_self <- [%#s17_filter0] Snapshot.new self ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &produced <- [%#s17_filter1] Snapshot.new (Seq.empty  : Seq.seq t_Item'0) ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &old_3_0 <- Snapshot.new self ] s1 | s1 = bb3 ] 
    | bb3 = bb3
      [ bb3 = {[@expl:loop invariant] (Snapshot.inner old_3_0).final = self.final}
        {[@expl:loop invariant] [%#s17_filter4] unnest'0 (T_17_filter__Filter.t_Filter__func (Snapshot.inner old_self).current) (T_17_filter__Filter.t_Filter__func self.current)}
        {[@expl:loop invariant] [%#s17_filter4] produces'0 (T_17_filter__Filter.t_Filter__iter (Snapshot.inner old_self).current) (Snapshot.inner produced) (T_17_filter__Filter.t_Filter__iter self.current)}
        {[@expl:loop invariant] [%#s17_filter4] forall bor_f : borrowed f . bor_f.current
        = T_17_filter__Filter.t_Filter__func self.current
        /\ bor_f.final = T_17_filter__Filter.t_Filter__func self.current
         -> (forall i : int . 0 <= i /\ i < Seq.length (Snapshot.inner produced)
         -> postcondition_mut'0 bor_f (index_logic'0 produced i) false)}
        {[@expl:loop invariant] [%#s17_filter3] T_17_filter__Filter.t_Filter__func self.current
        = T_17_filter__Filter.t_Filter__func (Snapshot.inner old_self).current}
        {[@expl:loop invariant] [%#s17_filter2] inv'0 self}
        (! s0) [ s0 = bb4 ] 
        [ bb4 = s0
          [ s0 = Filter'0.t_Filter <i> <f> {self.current}
              (fun (riter'0:i) (rfunc'0:f) ->
                Borrow.borrow_mut <i> {riter'0}
                  (fun (_ret':borrowed i) ->
                     [ &_16 <- _ret' ] 
                    Filter'0.t_Filter <i> <f> {self.current}
                      (fun (l_iter'0:i) (l_func'0:f) ->
                         [ &self <- { self with current = Filter'0.C_Filter _16.final l_func'0 ; } ] 
                        s1)))
          | s1 = -{inv'1 _16.final}- s2
          | s2 = next'0 {_16} (fun (_ret':Option'0.t_Option t_Item'0) ->  [ &_15 <- _ret' ] s3)
          | s3 = bb5 ]
          
        | bb5 = any [ br0 -> {_15 = Option'0.C_None } (! bb13) | br1 (a:t_Item'0)-> {_15 = Option'0.C_Some a} (! bb6) ] 
        | bb6 = bb7
        | bb7 = s0
          [ s0 = Option'0.v_Some <t_Item'0> {_15} (fun (r0'0:t_Item'0) ->  [ &n <- r0'0 ] s1)
          | s1 =  [ &_19 <- [%#s17_filter5] Snapshot.new (Seq.snoc (Snapshot.inner produced) n) ] s2
          | s2 = bb8 ]
          
        | bb8 = s0
          [ s0 =  [ &produced <- _19 ] s1
          | s1 = {[@expl:assertion] [%#s17_filter6] produces'0 (T_17_filter__Filter.t_Filter__iter (Snapshot.inner old_self).current) (Snapshot.inner produced) (T_17_filter__Filter.t_Filter__iter self.current)}
            s2
          | s2 = Filter'0.t_Filter <i> <f> {self.current}
              (fun (riter'0:i) (rfunc'0:f) ->
                Borrow.borrow_mut <f> {rfunc'0}
                  (fun (_ret':borrowed f) ->
                     [ &_24 <- _ret' ] 
                    Filter'0.t_Filter <i> <f> {self.current}
                      (fun (l_iter'0:i) (l_func'0:f) ->
                         [ &self <- { self with current = Filter'0.C_Filter l_iter'0 _24.final ; } ] 
                        s3)))
          | s3 = -{inv'2 _24.final}- s4
          | s4 =  [ &_27 <- n ] s5
          | s5 =  [ &_25 <- (_27) ] s6
          | s6 = call_mut'0 {_24} {_25} (fun (_ret':bool) ->  [ &_23 <- _ret' ] s7)
          | s7 = bb9 ]
          
        | bb9 = any [ br0 -> {_23 = false} (! bb12) | br1 -> {_23} (! bb10) ] 
        | bb12 = s0 [ s0 = {[@expl:type invariant] inv'3 n} s1 | s1 = -{resolve'0 n}- s2 | s2 = bb14 ] 
        | bb14 = bb15
        | bb15 = bb3 ]
         ]
      
    | bb13 = s0
      [ s0 = Option'0.v_Some <t_Item'0> {_15}
          (fun (r0'0:t_Item'0) ->
            {[@expl:type invariant] match _15 with
              | Option'0.C_Some _ -> inv'3 r0'0
              | _ -> true
              end}
            s1)
      | s1 = Option'0.v_Some <t_Item'0> {_15}
          (fun (r0'1:t_Item'0) ->
            -{match _15 with
              | Option'0.C_Some _ -> resolve'0 r0'1
              | _ -> true
              end}-
            s2)
      | s2 = {[@expl:type invariant] inv'0 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = bb16 ]
      
    | bb16 = s0 [ s0 =  [ &_0 <- Option'0.C_None ] s1 | s1 = bb19 ] 
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'1 self}- s2
      | s2 =  [ &_0 <- Option'0.C_Some n ] s3
      | s3 = bb11 ]
      
    | bb11 = bb17
    | bb17 = bb18
    | bb18 = bb19
    | bb19 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option t_Item'0 = any_l ()
    | & self : borrowed (Filter'0.t_Filter i f) = self
    | & old_self : Snapshot.snap_ty (borrowed (Filter'0.t_Filter i f)) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l ()
    | & _15 : Option'0.t_Option t_Item'0 = any_l ()
    | & _16 : borrowed i = any_l ()
    | & n : t_Item'0 = any_l ()
    | & _19 : Snapshot.snap_ty (Seq.seq t_Item'0) = any_l ()
    | & _23 : bool = any_l ()
    | & _24 : borrowed f = any_l ()
    | & _25 : t_Item'0 = any_l ()
    | & _27 : t_Item'0 = any_l ()
    | & old_3_0 : Snapshot.snap_ty (borrowed (Filter'0.t_Filter i f)) = any_l () ]
    
    [ return' (result:Option'0.t_Option t_Item'0)-> {[@expl:postcondition] [%#s17_filter10] inv'4 result}
      {[@expl:postcondition] [%#s17_filter9] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_17_filter__is_even__qy123zclosureqy35z0qy125z_Type
  use prelude.prelude.UInt32
  
  use prelude.prelude.Int16
  
  type m_17_filter__is_even__qy123zclosureqy35z0qy125z 'i =
    | M_17_filter__is_even__qy123zclosureqy35z0qy125z
  
  let rec m_17_filter__is_even__qy123zclosureqy35z0qy125z < 'i > (input:m_17_filter__is_even__qy123zclosureqy35z0qy125z 'i) (ret  )= any
    [ good -> {M_17_filter__is_even__qy123zclosureqy35z0qy125z  = input} (! ret)
    | bad -> {M_17_filter__is_even__qy123zclosureqy35z0qy125z  <> input} {false} any ]
    
end
module M_17_filter__is_even__qy123zclosureqy35z0qy125z
  type i
  
  let%span s17_filter0 = "../17_filter.rs" 119 17 119 19
  
  let%span s17_filter1 = "../17_filter.rs" 118 24 118 46
  
  let%span span2 = "../../../../../creusot-contracts/src/resolve.rs" 32 20 32 34
  
  use prelude.prelude.Int16
  
  use prelude.prelude.UInt32
  
  use M_17_filter__is_even__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  predicate unnest'0 [#"../17_filter.rs" 118 14 118 48] (self : Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i) (_2 : Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)
    
   =
    true
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  predicate resolve'1 (self : borrowed (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)) =
    [%#span2] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec m_17_filter__is_even__qy123zclosureqy35z0qy125z (_1:borrowed (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)) (x:uint32) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 = UInt32.lt {x} {[%#s17_filter0] (10 : uint32)} (fun (_ret':bool) ->  [ &res <- _ret' ] s2)
      | s2 =  [ &_0 <- res ] s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : bool = any_l ()
    | & _1 : borrowed (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i) = _1
    | & x : uint32 = x
    | & res : bool = any_l () ]
    
    [ return' (result:bool)-> {[@expl:postcondition] unnest'0 _1.current _1.final}
      {[@expl:postcondition] [%#s17_filter1] result = (x < (10 : uint32))}
      (! return' {result}) ]
    
end
module M_17_filter__is_even
  type i
  
  let%span s17_filter0 = "../17_filter.rs" 115 40 115 44
  
  let%span span1 = "../common.rs" 19 15 19 21
  
  let%span span2 = "../common.rs" 20 15 20 21
  
  let%span span3 = "../common.rs" 21 15 21 21
  
  let%span span4 = "../common.rs" 22 15 22 32
  
  let%span span5 = "../common.rs" 23 15 23 32
  
  let%span span6 = "../common.rs" 24 14 24 42
  
  let%span span7 = "../common.rs" 14 15 14 24
  
  let%span span8 = "../common.rs" 15 14 15 45
  
  let%span span9 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span10 = "../17_filter.rs" 69 8 84 9
  
  let%span span11 = "../17_filter.rs" 56 15 56 21
  
  let%span span12 = "../17_filter.rs" 57 15 57 21
  
  let%span span13 = "../17_filter.rs" 58 15 58 21
  
  let%span span14 = "../17_filter.rs" 59 15 59 32
  
  let%span span15 = "../17_filter.rs" 60 15 60 32
  
  let%span span16 = "../17_filter.rs" 61 14 61 42
  
  let%span span17 = "../17_filter.rs" 54 4 54 10
  
  let%span span18 = "../17_filter.rs" 50 15 50 24
  
  let%span span19 = "../17_filter.rs" 51 14 51 45
  
  let%span span20 = "../17_filter.rs" 48 4 48 10
  
  let%span span21 = "../17_filter.rs" 22 8 35 9
  
  let%span span22 = "../17_filter.rs" 45 8 45 74
  
  let%span span23 = "../17_filter.rs" 87 15 87 24
  
  let%span span24 = "../17_filter.rs" 92 17 92 21
  
  let%span span25 = "../17_filter.rs" 88 14 91 5
  
  let%span span26 = "../17_filter.rs" 92 26 92 41
  
  use prelude.prelude.UInt32
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq uint32) (o : i)
  
  predicate inv'1 (_1 : i)
  
  function produces_trans'1 [#"../common.rs" 25 4 25 91] (a : i) (ab : Seq.seq uint32) (b : i) (bc : Seq.seq uint32) (c : i) : ()
    
  
  axiom produces_trans'1_spec : forall a : i, ab : Seq.seq uint32, b : i, bc : Seq.seq uint32, c : i . ([%#span1] inv'1 a)
   -> ([%#span2] inv'1 b)
   -> ([%#span3] inv'1 c)
   -> ([%#span4] produces'1 a ab b)  -> ([%#span5] produces'1 b bc c)  -> ([%#span6] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'1 [#"../common.rs" 16 4 16 27] (self : i) : ()
  
  axiom produces_refl'1_spec : forall self : i . ([%#span7] inv'1 self)
   -> ([%#span8] produces'1 self (Seq.empty  : Seq.seq uint32) self)
  
  use prelude.prelude.Int16
  
  use M_17_filter__is_even__qy123zclosureqy35z0qy125z_Type as Closure'0
  
  predicate inv'4 (_1 : Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)
  
  axiom inv'4 [@rewrite] : forall x : Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i [inv'4 x] . inv'4 x
  = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'3 (_1 : Option'0.t_Option uint32)
  
  axiom inv'3 [@rewrite] : forall x : Option'0.t_Option uint32 [inv'3 x] . inv'3 x = true
  
  use T_17_filter__Filter as Filter'0
  
  predicate inv'0 (_1 : Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i))
  
  use prelude.prelude.Borrow
  
  predicate invariant'2 (self : borrowed (Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)))
    
   =
    [%#span9] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : borrowed (Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)))
  
  axiom inv'2 [@rewrite] : forall x : borrowed (Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)) [inv'2 x] . inv'2 x
  = invariant'2 x
  
  predicate invariant'1 (self : i)
  
  axiom inv'1 : forall x : i [inv'1 x] . inv'1 x  -> invariant'1 x
  
  use prelude.prelude.Int
  
  predicate unnest'0 [#"../17_filter.rs" 118 14 118 48] (self : Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i) (_2 : Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)
    
   =
    true
  
  use prelude.prelude.Int
  
  predicate postcondition_mut'0 [#"../17_filter.rs" 118 14 118 48] (self : borrowed (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)) (args : uint32) (result : bool)
    
   =
    (let (x) = args in result = (x < (10 : uint32))) /\ unnest'0 self.current self.final
  
  use seq.Seq
  
  use map.Map
  
  use seq.Seq
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  use map.Map
  
  predicate produces'0 [#"../17_filter.rs" 68 4 68 67] (self : Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)) (visited : Seq.seq uint32) (succ : Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i))
    
   =
    [%#span10] unnest'0 (T_17_filter__Filter.t_Filter__func self) (T_17_filter__Filter.t_Filter__func succ)
    /\ (exists s : Seq.seq uint32, f : Map.map int int . produces'1 (T_17_filter__Filter.t_Filter__iter self) s (T_17_filter__Filter.t_Filter__iter succ)
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited  -> Map.get f i <= Map.get f j)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> 0 <= Map.get f i /\ Map.get f i < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall bor_f : borrowed (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i) . bor_f.current
    = T_17_filter__Filter.t_Filter__func self
    /\ bor_f.final = T_17_filter__Filter.t_Filter__func self
     -> (forall i : int . 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
     -> postcondition_mut'0 bor_f (Seq.get s i) true)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> postcondition_mut'0 bor_f (Seq.get s i) true
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i))))
  
  function produces_trans'0 [#"../17_filter.rs" 62 4 62 90] (a : Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)) (ab : Seq.seq uint32) (b : Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)) (bc : Seq.seq uint32) (c : Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)) : ()
    
   =
    [%#span17] ()
  
  axiom produces_trans'0_spec : forall a : Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i), ab : Seq.seq uint32, b : Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i), bc : Seq.seq uint32, c : Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i) . ([%#span11] inv'0 a)
   -> ([%#span12] inv'0 b)
   -> ([%#span13] inv'0 c)
   -> ([%#span14] produces'0 a ab b)  -> ([%#span15] produces'0 b bc c)  -> ([%#span16] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 [#"../17_filter.rs" 52 4 52 26] (self : Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)) : ()
    
   =
    [%#span20] ()
  
  axiom produces_refl'0_spec : forall self : Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i) . ([%#span18] inv'0 self)
   -> ([%#span19] produces'0 self (Seq.empty  : Seq.seq uint32) self)
  
  predicate precondition'0 [#"../17_filter.rs" 118 14 118 48] (self : Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i) (args : uint32)
    
   =
    let (x) = args in true
  
  predicate invariant'0 [#"../17_filter.rs" 21 4 21 30] (self : Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i))
    
   =
    [%#span21] forall f : Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i, i : uint32 . precondition'0 f (i)
    /\ (forall f : borrowed (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i), i : uint32, b : bool . postcondition_mut'0 f (i) b
     -> f.current = f.final)
    /\ (forall f : Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i, g : Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i . unnest'0 f g
     -> f = g)
    /\ (forall f : borrowed (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i), g : borrowed (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i), i : uint32, b : bool . f.current
    = g.current
    /\ f.final = g.final  -> postcondition_mut'0 f (i) b = postcondition_mut'0 g (i) b)
    /\ (forall f : borrowed (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i), i : uint32 . postcondition_mut'0 f (i) true
    <> postcondition_mut'0 f (i) false)
  
  axiom inv'0 [@rewrite] : forall x : Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i) [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Filter'0.C_Filter iter func -> inv'1 iter
    end)
  
  use prelude.prelude.Intrinsic
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate completed'0 [#"../17_filter.rs" 44 4 44 35] (self : borrowed (Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)))
    
   =
    [%#span22] completed'1 (Borrow.borrow_logic (T_17_filter__Filter.t_Filter__iter self.current) (T_17_filter__Filter.t_Filter__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ T_17_filter__Filter.t_Filter__func self.current = T_17_filter__Filter.t_Filter__func self.final
  
  let rec next'0 (self:borrowed (Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i))) (return'  (ret:Option'0.t_Option uint32))= {[@expl:precondition] [%#span24] inv'2 self}
    {[@expl:precondition] [%#span23] inv'2 self}
    any
    [ return' (result:Option'0.t_Option uint32)-> {[%#span26] inv'3 result}
      {[%#span25] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec is_even (iter:i) (return'  (ret:()))= {[%#s17_filter0] inv'1 iter}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- Closure'0.M_17_filter__is_even__qy123zclosureqy35z0qy125z ] s1
      | s1 =  [ &f <- Filter'0.C_Filter iter _4 ] s2
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)> {f}
          (fun (_ret':borrowed (Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i))) ->
             [ &_6 <- _ret' ] 
             [ &f <- _6.final ] 
            s1)
      | s1 = -{inv'0 _6.final}- s2
      | s2 = next'0 {_6} (fun (_ret':Option'0.t_Option uint32) ->  [ &_5 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'0 f} s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & iter : i = iter
    | & f : Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i) = any_l ()
    | & _4 : Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i = any_l ()
    | & _5 : Option'0.t_Option uint32 = any_l ()
    | & _6 : borrowed (Filter'0.t_Filter i (Closure'0.m_17_filter__is_even__qy123zclosureqy35z0qy125z i)) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_17_filter__qyi436347908490766218
  type i
  
  type f
end
module M_17_filter__qyi2805440166685272671
  type i
  
  type f
  
  let%span s17_filter0 = "../17_filter.rs" 52 4 52 26
  
  let%span s17_filter1 = "../17_filter.rs" 92 4 92 41
  
  let%span s17_filter2 = "../17_filter.rs" 62 4 62 90
  
  let%span span3 = "../../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  let%span span4 = "../17_filter.rs" 22 8 35 9
  
  let%span span5 = "../17_filter.rs" 45 8 45 74
  
  let%span span6 = "../17_filter.rs" 69 8 84 9
  
  type t_Item'0
  
  predicate invariant'4 (self : t_Item'0)
  
  predicate inv'5 (_1 : t_Item'0)
  
  axiom inv'5 : forall x : t_Item'0 [inv'5 x] . inv'5 x  -> invariant'4 x
  
  predicate invariant'3 (self : f)
  
  predicate inv'4 (_1 : f)
  
  axiom inv'4 : forall x : f [inv'4 x] . inv'4 x  -> invariant'3 x
  
  predicate invariant'2 (self : i)
  
  predicate inv'3 (_1 : i)
  
  axiom inv'3 : forall x : i [inv'3 x] . inv'3 x  -> invariant'2 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option t_Item'0)
  
  axiom inv'2 [@rewrite] : forall x : Option'0.t_Option t_Item'0 [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'5 a_0
    end
  
  use T_17_filter__Filter as Filter'0
  
  predicate inv'0 (_1 : Filter'0.t_Filter i f)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (Filter'0.t_Filter i f)) =
    [%#span3] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (Filter'0.t_Filter i f))
  
  axiom inv'1 [@rewrite] : forall x : borrowed (Filter'0.t_Filter i f) [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate unnest'0 (self : f) (_2 : f)
  
  predicate postcondition_mut'0 (self : borrowed f) (_2 : t_Item'0) (_3 : bool)
  
  predicate precondition'0 (self : f) (_2 : t_Item'0)
  
  predicate invariant'0 [#"../17_filter.rs" 21 4 21 30] (self : Filter'0.t_Filter i f) =
    [%#span4] forall f : f, i : t_Item'0 . precondition'0 f (i)
    /\ (forall f : borrowed f, i : t_Item'0, b : bool . postcondition_mut'0 f (i) b  -> f.current = f.final)
    /\ (forall f : f, g : f . unnest'0 f g  -> f = g)
    /\ (forall f : borrowed f, g : borrowed f, i : t_Item'0, b : bool . f.current = g.current /\ f.final = g.final
     -> postcondition_mut'0 f (i) b = postcondition_mut'0 g (i) b)
    /\ (forall f : borrowed f, i : t_Item'0 . postcondition_mut'0 f (i) true <> postcondition_mut'0 f (i) false)
  
  axiom inv'0 [@rewrite] : forall x : Filter'0.t_Filter i f [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | Filter'0.C_Filter iter func -> inv'3 iter /\ inv'4 func
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use T_17_filter__Filter as T_17_filter__Filter
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate completed'0 [#"../17_filter.rs" 44 4 44 35] (self : borrowed (Filter'0.t_Filter i f)) =
    [%#span5] completed'1 (Borrow.borrow_logic (T_17_filter__Filter.t_Filter__iter self.current) (T_17_filter__Filter.t_Filter__iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
    /\ T_17_filter__Filter.t_Filter__func self.current = T_17_filter__Filter.t_Filter__func self.final
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use map.Map
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq t_Item'0) (o : i)
  
  use prelude.prelude.Int
  
  use map.Map
  
  predicate produces'0 [#"../17_filter.rs" 68 4 68 67] (self : Filter'0.t_Filter i f) (visited : Seq.seq t_Item'0) (succ : Filter'0.t_Filter i f)
    
   =
    [%#span6] unnest'0 (T_17_filter__Filter.t_Filter__func self) (T_17_filter__Filter.t_Filter__func succ)
    /\ (exists s : Seq.seq t_Item'0, f : Map.map int int . produces'1 (T_17_filter__Filter.t_Filter__iter self) s (T_17_filter__Filter.t_Filter__iter succ)
    /\ (forall i : int, j : int . 0 <= i /\ i <= j /\ j < Seq.length visited  -> Map.get f i <= Map.get f j)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> 0 <= Map.get f i /\ Map.get f i < Seq.length s)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall bor_f : borrowed f . bor_f.current = T_17_filter__Filter.t_Filter__func self
    /\ bor_f.final = T_17_filter__Filter.t_Filter__func self
     -> (forall i : int . 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
     -> postcondition_mut'0 bor_f (Seq.get s i) true)
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> postcondition_mut'0 bor_f (Seq.get s i) true
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i))))
  
  use seq.Seq
  
  goal produces_refl_refn : [%#s17_filter0] forall self : Filter'0.t_Filter i f . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t_Item'0) self
   -> produces'0 self (Seq.empty  : Seq.seq t_Item'0) self)
  
  goal next_refn : [%#s17_filter1] forall self : borrowed (Filter'0.t_Filter i f) . inv'1 self
   -> inv'1 self
  /\ inv'1 self
  /\ (forall result : Option'0.t_Option t_Item'0 . inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'2 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_trans_refn : [%#s17_filter2] forall a : Filter'0.t_Filter i f . forall ab : Seq.seq t_Item'0 . forall b : Filter'0.t_Filter i f . forall bc : Seq.seq t_Item'0 . forall c : Filter'0.t_Filter i f . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
