
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module C09Empty_Empty_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  type t_empty 't =
    | C_Empty (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module CreusotContracts_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module C09Empty_Impl0_Completed_Stub
  type t
  use prelude.Borrow
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  predicate completed [#"../09_empty.rs" 14 4 14 35] (self : borrowed (C09Empty_Empty_Type.t_empty t))
end
module C09Empty_Impl0_Completed_Interface
  type t
  use prelude.Borrow
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  predicate completed [#"../09_empty.rs" 14 4 14 35] (self : borrowed (C09Empty_Empty_Type.t_empty t))
end
module C09Empty_Impl0_Completed
  type t
  use prelude.Borrow
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Resolve_Impl1_Resolve_Stub as Resolve0 with
    type t = C09Empty_Empty_Type.t_empty t
  predicate completed [#"../09_empty.rs" 14 4 14 35] (self : borrowed (C09Empty_Empty_Type.t_empty t)) =
    [#"../09_empty.rs" 15 20 15 34] Resolve0.resolve self
  val completed [#"../09_empty.rs" 14 4 14 35] (self : borrowed (C09Empty_Empty_Type.t_empty t)) : bool
    ensures { result = completed self }
    
end
module CreusotContracts_Invariant_Invariant_Invariant_Stub
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant_Interface
  type self
  predicate invariant' (self : self)
end
module CreusotContracts_Invariant_Invariant_Invariant
  type self
  predicate invariant' (self : self) =
    true
  val invariant' (self : self) : bool
    ensures { result = invariant' self }
    
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Stub
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
end
module CreusotContracts_Invariant_Invariant_IsInhabited_Interface
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool
  axiom is_inhabited_spec : forall _1' : () . is_inhabited _1' && (exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module CreusotContracts_Invariant_Invariant_IsInhabited
  type self
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = self
  function is_inhabited (_1' : ()) : bool =
    true
  val is_inhabited (_1' : ()) : bool
    ensures { result = is_inhabited _1' }
    
  axiom is_inhabited_spec : forall _1' : () . is_inhabited _1' && (exists x : self . Invariant0.invariant' x /\ Invariant0.invariant' x)
end
module C09Empty_Impl0_Produces_Stub
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  predicate produces [#"../09_empty.rs" 19 4 19 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t)
    
end
module C09Empty_Impl0_Produces_Interface
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  predicate produces [#"../09_empty.rs" 19 4 19 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t)
    
  axiom produces_spec : forall self : C09Empty_Empty_Type.t_empty t, visited : Seq.seq t, o : C09Empty_Empty_Type.t_empty t . ([#"../09_empty.rs" 19 16 19 20] Invariant0.invariant' self) -> ([#"../09_empty.rs" 19 48 19 49] Invariant0.invariant' o) -> true
end
module C09Empty_Impl0_Produces
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  predicate produces [#"../09_empty.rs" 19 4 19 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t)
    
   =
    [#"../09_empty.rs" 20 20 20 54] visited = Seq.empty  /\ self = o
  val produces [#"../09_empty.rs" 19 4 19 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t) : bool
    requires {[#"../09_empty.rs" 19 16 19 20] Invariant0.invariant' self}
    requires {[#"../09_empty.rs" 19 48 19 49] Invariant0.invariant' o}
    ensures { result = produces self visited o }
    
  axiom produces_spec : forall self : C09Empty_Empty_Type.t_empty t, visited : Seq.seq t, o : C09Empty_Empty_Type.t_empty t . ([#"../09_empty.rs" 19 16 19 20] Invariant0.invariant' self) -> ([#"../09_empty.rs" 19 48 19 49] Invariant0.invariant' o) -> true
end
module C09Empty_Impl0_Produces_Impl
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = C09Empty_Empty_Type.t_empty t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  let rec ghost predicate produces [#"../09_empty.rs" 19 4 19 64] (self : C09Empty_Empty_Type.t_empty t) (visited : Seq.seq t) (o : C09Empty_Empty_Type.t_empty t)
    requires {[#"../09_empty.rs" 19 16 19 20] Invariant0.invariant' self}
    requires {[#"../09_empty.rs" 19 48 19 49] Invariant0.invariant' o}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../09_empty.rs" 20 20 20 54] pure {visited = Seq.empty } && pure {self = o}
end
module C09Empty_Impl0_ProducesRefl_Stub
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  clone C09Empty_Impl0_Produces_Stub as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  function produces_refl [#"../09_empty.rs" 25 4 25 29] (a : C09Empty_Empty_Type.t_empty t) : ()
end
module C09Empty_Impl0_ProducesRefl_Interface
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  clone C09Empty_Impl0_Produces_Stub as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  function produces_refl [#"../09_empty.rs" 25 4 25 29] (a : C09Empty_Empty_Type.t_empty t) : ()
  axiom produces_refl_spec : forall a : C09Empty_Empty_Type.t_empty t . ([#"../09_empty.rs" 25 21 25 22] Invariant0.invariant' a) -> ([#"../09_empty.rs" 24 14 24 39] Produces0.produces a (Seq.empty ) a)
end
module C09Empty_Impl0_ProducesRefl
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  clone C09Empty_Impl0_Produces_Stub as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  function produces_refl [#"../09_empty.rs" 25 4 25 29] (a : C09Empty_Empty_Type.t_empty t) : () =
    [#"../09_empty.rs" 23 4 23 10] ()
  val produces_refl [#"../09_empty.rs" 25 4 25 29] (a : C09Empty_Empty_Type.t_empty t) : ()
    requires {[#"../09_empty.rs" 25 21 25 22] Invariant0.invariant' a}
    ensures { result = produces_refl a }
    
  axiom produces_refl_spec : forall a : C09Empty_Empty_Type.t_empty t . ([#"../09_empty.rs" 25 21 25 22] Invariant0.invariant' a) -> ([#"../09_empty.rs" 24 14 24 39] Produces0.produces a (Seq.empty ) a)
end
module C09Empty_Impl0_ProducesRefl_Impl
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = C09Empty_Empty_Type.t_empty t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone C09Empty_Impl0_Produces as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  let rec ghost function produces_refl [#"../09_empty.rs" 25 4 25 29] (a : C09Empty_Empty_Type.t_empty t) : ()
    requires {[#"../09_empty.rs" 25 21 25 22] Invariant0.invariant' a}
    ensures { [#"../09_empty.rs" 24 14 24 39] Produces0.produces a (Seq.empty ) a }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../09_empty.rs" 23 4 23 10] ()
end
module C09Empty_Impl0_ProducesTrans_Stub
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  clone C09Empty_Impl0_Produces_Stub as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  function produces_trans [#"../09_empty.rs" 31 4 31 90] (a : C09Empty_Empty_Type.t_empty t) (ab : Seq.seq t) (b : C09Empty_Empty_Type.t_empty t) (bc : Seq.seq t) (c : C09Empty_Empty_Type.t_empty t) : ()
    
end
module C09Empty_Impl0_ProducesTrans_Interface
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  clone C09Empty_Impl0_Produces_Stub as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  function produces_trans [#"../09_empty.rs" 31 4 31 90] (a : C09Empty_Empty_Type.t_empty t) (ab : Seq.seq t) (b : C09Empty_Empty_Type.t_empty t) (bc : Seq.seq t) (c : C09Empty_Empty_Type.t_empty t) : ()
    
  axiom produces_trans_spec : forall a : C09Empty_Empty_Type.t_empty t, ab : Seq.seq t, b : C09Empty_Empty_Type.t_empty t, bc : Seq.seq t, c : C09Empty_Empty_Type.t_empty t . ([#"../09_empty.rs" 28 15 28 32] Produces0.produces a ab b) -> ([#"../09_empty.rs" 29 15 29 32] Produces0.produces b bc c) -> ([#"../09_empty.rs" 31 22 31 23] Invariant0.invariant' a) -> ([#"../09_empty.rs" 31 52 31 53] Invariant0.invariant' b) -> ([#"../09_empty.rs" 31 82 31 83] Invariant0.invariant' c) -> ([#"../09_empty.rs" 30 14 30 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C09Empty_Impl0_ProducesTrans
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  clone C09Empty_Impl0_Produces_Stub as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  function produces_trans [#"../09_empty.rs" 31 4 31 90] (a : C09Empty_Empty_Type.t_empty t) (ab : Seq.seq t) (b : C09Empty_Empty_Type.t_empty t) (bc : Seq.seq t) (c : C09Empty_Empty_Type.t_empty t) : ()
    
   =
    [#"../09_empty.rs" 27 4 27 10] ()
  val produces_trans [#"../09_empty.rs" 31 4 31 90] (a : C09Empty_Empty_Type.t_empty t) (ab : Seq.seq t) (b : C09Empty_Empty_Type.t_empty t) (bc : Seq.seq t) (c : C09Empty_Empty_Type.t_empty t) : ()
    requires {[#"../09_empty.rs" 28 15 28 32] Produces0.produces a ab b}
    requires {[#"../09_empty.rs" 29 15 29 32] Produces0.produces b bc c}
    requires {[#"../09_empty.rs" 31 22 31 23] Invariant0.invariant' a}
    requires {[#"../09_empty.rs" 31 52 31 53] Invariant0.invariant' b}
    requires {[#"../09_empty.rs" 31 82 31 83] Invariant0.invariant' c}
    ensures { result = produces_trans a ab b bc c }
    
  axiom produces_trans_spec : forall a : C09Empty_Empty_Type.t_empty t, ab : Seq.seq t, b : C09Empty_Empty_Type.t_empty t, bc : Seq.seq t, c : C09Empty_Empty_Type.t_empty t . ([#"../09_empty.rs" 28 15 28 32] Produces0.produces a ab b) -> ([#"../09_empty.rs" 29 15 29 32] Produces0.produces b bc c) -> ([#"../09_empty.rs" 31 22 31 23] Invariant0.invariant' a) -> ([#"../09_empty.rs" 31 52 31 53] Invariant0.invariant' b) -> ([#"../09_empty.rs" 31 82 31 83] Invariant0.invariant' c) -> ([#"../09_empty.rs" 30 14 30 42] Produces0.produces a (Seq.(++) ab bc) c)
end
module C09Empty_Impl0_ProducesTrans_Impl
  type t
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = C09Empty_Empty_Type.t_empty t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone C09Empty_Impl0_Produces as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  let rec ghost function produces_trans [#"../09_empty.rs" 31 4 31 90] (a : C09Empty_Empty_Type.t_empty t) (ab : Seq.seq t) (b : C09Empty_Empty_Type.t_empty t) (bc : Seq.seq t) (c : C09Empty_Empty_Type.t_empty t) : ()
    requires {[#"../09_empty.rs" 28 15 28 32] Produces0.produces a ab b}
    requires {[#"../09_empty.rs" 29 15 29 32] Produces0.produces b bc c}
    requires {[#"../09_empty.rs" 31 22 31 23] Invariant0.invariant' a}
    requires {[#"../09_empty.rs" 31 52 31 53] Invariant0.invariant' b}
    requires {[#"../09_empty.rs" 31 82 31 83] Invariant0.invariant' c}
    ensures { [#"../09_empty.rs" 30 14 30 42] Produces0.produces a (Seq.(++) ab bc) c }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../09_empty.rs" 27 4 27 10] ()
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
    
end
module C09Empty_Impl0_Next_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Invariant_Invariant_Stub as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  clone C09Empty_Impl0_Produces_Stub as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone C09Empty_Impl0_Completed_Stub as Completed0 with
    type t = t
  use Core_Option_Option_Type as Core_Option_Option_Type
  val next [#"../09_empty.rs" 38 4 38 35] (self : borrowed (C09Empty_Empty_Type.t_empty t)) : Core_Option_Option_Type.t_option t
    requires {[#"../09_empty.rs" 33 4 33 40] Invariant0.invariant' ( * self)}
    ensures { [#"../09_empty.rs" 33 4 33 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../09_empty.rs" 34 14 37 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
end
module C09Empty_Impl0_Next
  type t
  use prelude.Borrow
  use seq.Seq
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  clone CreusotContracts_Invariant_Invariant_IsInhabited as IsInhabited0 with
    type self = C09Empty_Empty_Type.t_empty t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C09Empty_Empty_Type.t_empty t
  clone C09Empty_Impl0_Produces as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone C09Empty_Impl0_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve0.resolve
  use Core_Option_Option_Type as Core_Option_Option_Type
  let rec cfg next [#"../09_empty.rs" 38 4 38 35] [@cfg:stackify] [@cfg:subregion_analysis] (self : borrowed (C09Empty_Empty_Type.t_empty t)) : Core_Option_Option_Type.t_option t
    requires {[#"../09_empty.rs" 33 4 33 40] Invariant0.invariant' ( * self)}
    ensures { [#"../09_empty.rs" 33 4 33 40] Invariant0.invariant' ( ^ self) }
    ensures { [#"../09_empty.rs" 34 14 37 5] match (result) with
      | Core_Option_Option_Type.C_None -> Completed0.completed self
      | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
      end }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Core_Option_Option_Type.t_option t;
  var self_1 : borrowed (C09Empty_Empty_Type.t_empty t);
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve self_1 };
    _0 <- Core_Option_Option_Type.C_None;
    return _0
  }
  
end
module C09Empty_Common_Iterator_Item_Type
  type self
  type item
end
module C09Empty_Impl0
  type t
  use seq.Seq
  use prelude.Borrow
  use C09Empty_Empty_Type as C09Empty_Empty_Type
  clone CreusotContracts_Resolve_Impl1_Resolve as Resolve0 with
    type t = C09Empty_Empty_Type.t_empty t
  clone C09Empty_Common_Iterator_Item_Type as Item0 with
    type self = C09Empty_Empty_Type.t_empty t
  use Core_Option_Option_Type as Core_Option_Option_Type
  clone CreusotContracts_Invariant_Invariant_Invariant as Invariant0 with
    type self = C09Empty_Empty_Type.t_empty t
  clone C09Empty_Impl0_Produces as Produces0 with
    type t = t,
    predicate Invariant0.invariant' = Invariant0.invariant',
    axiom .
  clone C09Empty_Impl0_Completed as Completed0 with
    type t = t,
    predicate Resolve0.resolve = Resolve0.resolve
  goal produces_refn : [#"../09_empty.rs" 19 4 19 64] forall self : C09Empty_Empty_Type.t_empty t . forall visited : Seq.seq t . forall _o : C09Empty_Empty_Type.t_empty t . Invariant0.invariant' _o /\ Invariant0.invariant' self -> Invariant0.invariant' _o /\ Invariant0.invariant' self /\ (forall result : bool . true)
  goal next_refn : [#"../09_empty.rs" 38 4 38 35] forall self : borrowed (C09Empty_Empty_Type.t_empty t) . Invariant0.invariant' ( * self) -> Invariant0.invariant' ( * self) /\ (forall result : Core_Option_Option_Type.t_option t . match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end /\ Invariant0.invariant' ( ^ self) -> match (result) with
    | Core_Option_Option_Type.C_None -> Completed0.completed self
    | Core_Option_Option_Type.C_Some v -> Produces0.produces ( * self) (Seq.singleton v) ( ^ self)
    end /\ Invariant0.invariant' ( ^ self))
  goal produces_trans_refn : [#"../09_empty.rs" 31 4 31 90] forall a : C09Empty_Empty_Type.t_empty t . forall ab : Seq.seq t . forall b : C09Empty_Empty_Type.t_empty t . forall bc : Seq.seq t . forall c : C09Empty_Empty_Type.t_empty t . Invariant0.invariant' c /\ Invariant0.invariant' b /\ Invariant0.invariant' a /\ Produces0.produces b bc c /\ Produces0.produces a ab b -> Invariant0.invariant' c /\ Invariant0.invariant' b /\ Invariant0.invariant' a /\ Produces0.produces b bc c /\ Produces0.produces a ab b /\ (forall result : () . Produces0.produces a (Seq.(++) ab bc) c -> Produces0.produces a (Seq.(++) ab bc) c)
  goal produces_refl_refn : [#"../09_empty.rs" 25 4 25 29] forall a : C09Empty_Empty_Type.t_empty t . Invariant0.invariant' a -> Invariant0.invariant' a /\ (forall result : () . Produces0.produces a (Seq.empty ) a -> Produces0.produces a (Seq.empty ) a)
end
module C09Empty_Impl1
  type t
end
