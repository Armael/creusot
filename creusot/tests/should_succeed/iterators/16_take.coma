
module C16Take_Take_Type
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_take 'i =
    | C_Take 'i usize
  
  function any_l (_ : 'b) : 'a
  
  let rec t_take < 'i > (input:t_take 'i) (ret  (iter:'i) (n:usize))= any
    [ good (iter:'i) (n:usize)-> {C_Take iter n = input} (! ret {iter} {n})
    | bad (iter:'i) (n:usize)-> {C_Take iter n <> input} {false} any ]
    
  
  function take_n (self : t_take 'i) : usize =
    match self with
      | C_Take _ a -> a
      end
  
  function take_iter (self : t_take 'i) : 'i =
    match self with
      | C_Take a _ -> a
      end
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.prelude.Opaque
  
  type t_nonnull 't =
    | C_NonNull opaque_ptr
  
  function any_l (_ : 'b) : 'a
  
  let rec t_nonnull < 't > (input:t_nonnull 't) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer})
    | bad (pointer:opaque_ptr)-> {C_NonNull pointer <> input} {false} any ]
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
  
  function any_l (_ : 'b) : 'a
  
  let rec t_phantomdata < 't > (input:t_phantomdata 't) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) | bad -> {C_PhantomData  <> input} {false} any ]
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as PhantomData'0
  
  use Core_Ptr_NonNull_NonNull_Type as NonNull'0
  
  type t_unique 't =
    | C_Unique (NonNull'0.t_nonnull 't) (PhantomData'0.t_phantomdata 't)
  
  function any_l (_ : 'b) : 'a
  
  let rec t_unique < 't > (input:t_unique 't) (ret  (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't))= any
    [ good (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker})
    | bad (pointer:NonNull'0.t_nonnull 't) (_marker:PhantomData'0.t_phantomdata 't)-> {C_Unique pointer _marker
      <> input}
      {false}
      any ]
    
end
module Alloc_Boxed_Box_Type
  use Core_Ptr_Unique_Unique_Type as Unique'0
  
  type t_box 't 'a =
    | C_Box (Unique'0.t_unique 't) 'a
  
  function any_l (_ : 'b) : 'a
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
  
  function any_l (_ : 'b) : 'a
  
  let rec t_global (input:t_global) (ret  )= any
    [ good -> {C_Global  = input} (! ret) | bad -> {C_Global  <> input} {false} any ]
    
end
module C16Take_Impl0_ProducesRefl_Impl
  type i
  
  let%span s16_take0 = "../16_take.rs" 40 21 40 25
  
  let%span s16_take1 = "../16_take.rs" 39 14 39 45
  
  let%span span2 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span3 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span4 = "../common.rs" 18 15 18 32
  
  let%span span5 = "../common.rs" 19 15 19 32
  
  let%span span6 = "../common.rs" 21 22 21 23
  
  let%span span7 = "../common.rs" 21 31 21 33
  
  let%span span8 = "../common.rs" 21 52 21 53
  
  let%span span9 = "../common.rs" 21 61 21 63
  
  let%span span10 = "../common.rs" 21 82 21 83
  
  let%span span11 = "../common.rs" 20 14 20 42
  
  let%span span12 = "../common.rs" 15 21 15 25
  
  let%span span13 = "../common.rs" 14 14 14 45
  
  let%span span14 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span15 = "../16_take.rs" 32 8 34 9
  
  type item'0
  
  predicate invariant'4 (self : item'0)
  
  predicate inv'4 (_x : item'0)
  
  axiom inv'4 : forall x : item'0 . inv'4 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'3 (self : item'0) =
    [%#span2] inv'4 self
  
  predicate inv'3 (_x : item'0)
  
  axiom inv'3 : forall x : item'0 . inv'3 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'2 (self : Seq.seq item'0) =
    [%#span3] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'2 (_x : Seq.seq item'0)
  
  axiom inv'2 : forall x : Seq.seq item'0 . inv'2 x = true
  
  predicate invariant'1 (self : i)
  
  predicate inv'1 (_x : i)
  
  axiom inv'1 : forall x : i . inv'1 x = true
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span4] produces'1 a ab b)
   -> ([%#span5] produces'1 b bc c)
   -> ([%#span6] inv'1 a)
   -> ([%#span7] inv'2 ab)
   -> ([%#span8] inv'1 b)
   -> ([%#span9] inv'2 bc)  -> ([%#span10] inv'1 c)  -> ([%#span11] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span12] inv'1 self)
   -> ([%#span13] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  use C16Take_Take_Type as Take'0
  
  predicate invariant'0 (self : Take'0.t_take i) =
    [%#span14] true
  
  predicate inv'0 (_x : Take'0.t_take i)
  
  axiom inv'0 : forall x : Take'0.t_take i . inv'0 x = true
  
  use C16Take_Take_Type as C16Take_Take_Type
  
  use prelude.prelude.UIntSize
  
  predicate produces'0 [#"../16_take.rs" 31 4 31 64] (self : Take'0.t_take i) (visited : Seq.seq item'0) (o : Take'0.t_take i)
    
   =
    [%#span15] UIntSize.to_int (C16Take_Take_Type.take_n self)
    = UIntSize.to_int (C16Take_Take_Type.take_n o) + Seq.length visited
    /\ produces'1 (C16Take_Take_Type.take_iter self) visited (C16Take_Take_Type.take_iter o)
  
  constant self  : Take'0.t_take i
  
  function produces_refl [#"../16_take.rs" 40 4 40 26] (self : Take'0.t_take i) : ()
  
  goal vc_produces_refl : ([%#s16_take0] inv'0 self)
   -> ([%#s16_take1] produces'0 self (Seq.empty  : Seq.seq item'0) self)
end
module C16Take_Impl0_ProducesTrans_Impl
  type i
  
  let%span s16_take0 = "../16_take.rs" 44 15 44 32
  
  let%span s16_take1 = "../16_take.rs" 45 15 45 32
  
  let%span s16_take2 = "../16_take.rs" 47 22 47 23
  
  let%span s16_take3 = "../16_take.rs" 47 31 47 33
  
  let%span s16_take4 = "../16_take.rs" 47 52 47 53
  
  let%span s16_take5 = "../16_take.rs" 47 61 47 63
  
  let%span s16_take6 = "../16_take.rs" 47 82 47 83
  
  let%span s16_take7 = "../16_take.rs" 46 14 46 42
  
  let%span span8 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span9 = "../common.rs" 18 15 18 32
  
  let%span span10 = "../common.rs" 19 15 19 32
  
  let%span span11 = "../common.rs" 21 22 21 23
  
  let%span span12 = "../common.rs" 21 31 21 33
  
  let%span span13 = "../common.rs" 21 52 21 53
  
  let%span span14 = "../common.rs" 21 61 21 63
  
  let%span span15 = "../common.rs" 21 82 21 83
  
  let%span span16 = "../common.rs" 20 14 20 42
  
  let%span span17 = "../common.rs" 15 21 15 25
  
  let%span span18 = "../common.rs" 14 14 14 45
  
  let%span span19 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span20 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span21 = "../16_take.rs" 32 8 34 9
  
  type item'0
  
  predicate invariant'4 (self : item'0)
  
  predicate inv'4 (_x : item'0)
  
  axiom inv'4 : forall x : item'0 . inv'4 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'3 (self : item'0) =
    [%#span8] inv'4 self
  
  predicate inv'3 (_x : item'0)
  
  axiom inv'3 : forall x : item'0 . inv'3 x = true
  
  predicate invariant'2 (self : i)
  
  predicate inv'2 (_x : i)
  
  axiom inv'2 : forall x : i . inv'2 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'1 (_x : Seq.seq item'0)
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span9] produces'1 a ab b)
   -> ([%#span10] produces'1 b bc c)
   -> ([%#span11] inv'2 a)
   -> ([%#span12] inv'1 ab)
   -> ([%#span13] inv'2 b)
   -> ([%#span14] inv'1 bc)  -> ([%#span15] inv'2 c)  -> ([%#span16] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span17] inv'2 self)
   -> ([%#span18] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate invariant'1 (self : Seq.seq item'0) =
    [%#span19] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  axiom inv'1 : forall x : Seq.seq item'0 . inv'1 x = true
  
  use C16Take_Take_Type as Take'0
  
  predicate invariant'0 (self : Take'0.t_take i) =
    [%#span20] true
  
  predicate inv'0 (_x : Take'0.t_take i)
  
  axiom inv'0 : forall x : Take'0.t_take i . inv'0 x = true
  
  use C16Take_Take_Type as C16Take_Take_Type
  
  use prelude.prelude.UIntSize
  
  predicate produces'0 [#"../16_take.rs" 31 4 31 64] (self : Take'0.t_take i) (visited : Seq.seq item'0) (o : Take'0.t_take i)
    
   =
    [%#span21] UIntSize.to_int (C16Take_Take_Type.take_n self)
    = UIntSize.to_int (C16Take_Take_Type.take_n o) + Seq.length visited
    /\ produces'1 (C16Take_Take_Type.take_iter self) visited (C16Take_Take_Type.take_iter o)
  
  constant a  : Take'0.t_take i
  
  constant ab  : Seq.seq item'0
  
  constant b  : Take'0.t_take i
  
  constant bc  : Seq.seq item'0
  
  constant c  : Take'0.t_take i
  
  function produces_trans [#"../16_take.rs" 47 4 47 90] (a : Take'0.t_take i) (ab : Seq.seq item'0) (b : Take'0.t_take i) (bc : Seq.seq item'0) (c : Take'0.t_take i) : ()
    
  
  goal vc_produces_trans : ([%#s16_take6] inv'0 c)
   -> ([%#s16_take5] inv'1 bc)
   -> ([%#s16_take4] inv'0 b)
   -> ([%#s16_take3] inv'1 ab)
   -> ([%#s16_take2] inv'0 a)
   -> ([%#s16_take1] produces'0 b bc c)
   -> ([%#s16_take0] produces'0 a ab b)  -> ([%#s16_take7] produces'0 a (Seq.(++) ab bc) c)
end
module Core_Option_Option_Type
  type t_option 't =
    | C_None
    | C_Some 't
  
  function any_l (_ : 'b) : 'a
  
  let rec none < 't > (input:t_option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} {false} any ]
    
  
  let rec some < 't > (input:t_option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad (field_0:'t)-> {C_Some field_0 <> input} {false} any ]
    
end
module C16Take_Impl0_Next
  type i
  
  let%span s16_take0 = "../16_take.rs" 54 21 54 22
  
  let%span s16_take1 = "../16_take.rs" 55 22 55 23
  
  let%span s16_take2 = "../16_take.rs" 53 17 53 21
  
  let%span s16_take3 = "../16_take.rs" 49 14 52 5
  
  let%span s16_take4 = "../16_take.rs" 53 26 53 41
  
  let%span span5 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span7 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span8 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span9 = "../common.rs" 18 15 18 32
  
  let%span span10 = "../common.rs" 19 15 19 32
  
  let%span span11 = "../common.rs" 21 22 21 23
  
  let%span span12 = "../common.rs" 21 31 21 33
  
  let%span span13 = "../common.rs" 21 52 21 53
  
  let%span span14 = "../common.rs" 21 61 21 63
  
  let%span span15 = "../common.rs" 21 82 21 83
  
  let%span span16 = "../common.rs" 20 14 20 42
  
  let%span span17 = "../common.rs" 15 21 15 25
  
  let%span span18 = "../common.rs" 14 14 14 45
  
  let%span span19 = "../16_take.rs" 32 8 34 9
  
  let%span span20 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span21 = "../16_take.rs" 23 8 26 9
  
  let%span span22 = "../common.rs" 27 17 27 21
  
  let%span span23 = "../common.rs" 23 14 26 5
  
  let%span span24 = "../common.rs" 27 26 27 44
  
  type item'0
  
  predicate invariant'7 (self : item'0)
  
  predicate inv'7 (_x : item'0)
  
  axiom inv'7 : forall x : item'0 . inv'7 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'6 (self : item'0) =
    [%#span5] inv'7 self
  
  predicate inv'6 (_x : item'0)
  
  axiom inv'6 : forall x : item'0 . inv'6 x = true
  
  use C16Take_Take_Type as Take'0
  
  predicate invariant'5 (self : Take'0.t_take i) =
    [%#span6] true
  
  predicate inv'5 (_x : Take'0.t_take i)
  
  axiom inv'5 : forall x : Take'0.t_take i . inv'5 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq item'0) =
    [%#span7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'4 (_x : Seq.seq item'0)
  
  axiom inv'4 : forall x : Seq.seq item'0 . inv'4 x = true
  
  predicate inv'0 (_x : i)
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed i) =
    [%#span8] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_x : borrowed i)
  
  axiom inv'3 : forall x : borrowed i . inv'3 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'2 (self : Option'0.t_option item'0) =
    [%#span6] true
  
  predicate inv'2 (_x : Option'0.t_option item'0)
  
  axiom inv'2 : forall x : Option'0.t_option item'0 . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (Take'0.t_take i)) =
    [%#span8] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'1 (_x : borrowed (Take'0.t_take i))
  
  axiom inv'1 : forall x : borrowed (Take'0.t_take i) . inv'1 x = true
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  function produces_trans'0 [#"../common.rs" 21 4 21 91] (a : i) (ab : Seq.seq item'0) (b : i) (bc : Seq.seq item'0) (c : i) : ()
    
  
  axiom produces_trans'0_spec : forall a : i, ab : Seq.seq item'0, b : i, bc : Seq.seq item'0, c : i . ([%#span9] produces'1 a ab b)
   -> ([%#span10] produces'1 b bc c)
   -> ([%#span11] inv'0 a)
   -> ([%#span12] inv'4 ab)
   -> ([%#span13] inv'0 b)
   -> ([%#span14] inv'4 bc)  -> ([%#span15] inv'0 c)  -> ([%#span16] produces'1 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"../common.rs" 15 4 15 27] (self : i) : ()
  
  axiom produces_refl'0_spec : forall self : i . ([%#span17] inv'0 self)
   -> ([%#span18] produces'1 self (Seq.empty  : Seq.seq item'0) self)
  
  predicate invariant'0 (self : i)
  
  axiom inv'0 : forall x : i . inv'0 x = true
  
  use C16Take_Take_Type as C16Take_Take_Type
  
  use prelude.prelude.UIntSize
  
  predicate produces'0 [#"../16_take.rs" 31 4 31 64] (self : Take'0.t_take i) (visited : Seq.seq item'0) (o : Take'0.t_take i)
    
   =
    [%#span19] UIntSize.to_int (C16Take_Take_Type.take_n self)
    = UIntSize.to_int (C16Take_Take_Type.take_n o) + Seq.length visited
    /\ produces'1 (C16Take_Take_Type.take_iter self) visited (C16Take_Take_Type.take_iter o)
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate resolve'0 (self : borrowed (Take'0.t_take i)) =
    [%#span20] self.final = self.current
  
  predicate completed'0 [#"../16_take.rs" 22 4 22 35] (self : borrowed (Take'0.t_take i)) =
    [%#span21] UIntSize.to_int (C16Take_Take_Type.take_n self.current) = 0 /\ resolve'0 self
    \/ UIntSize.to_int (C16Take_Take_Type.take_n self.current) > 0
    /\ UIntSize.to_int (C16Take_Take_Type.take_n self.current)
    = UIntSize.to_int (C16Take_Take_Type.take_n self.final) + 1
    /\ completed'1 (Borrow.borrow_logic (C16Take_Take_Type.take_iter self.current) (C16Take_Take_Type.take_iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
  
  use prelude.prelude.Intrinsic
  
  let rec next'0 (self:borrowed i) (return'  (ret:Option'0.t_option item'0))= {[@expl:precondition] [%#span22] inv'3 self}
    any
    [ return' (result:Option'0.t_option item'0)-> {[%#span24] inv'2 result}
      {[%#span23] match result with
        | Option'0.C_None -> completed'1 self
        | Option'0.C_Some v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.UIntSize
  
  let rec next (self:borrowed (Take'0.t_take i)) (return'  (ret:Option'0.t_option item'0))= {[%#s16_take2] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Take'0.t_take <i> {self.current}
          (fun (riter'0:i) (rn'0:usize) ->
            UIntSize.ne {rn'0} {[%#s16_take0] (0 : usize)} (fun (_ret':bool) ->  [ &_3 <- _ret' ] s1))
      | s1 = any [ br0 -> {_3 = false} (! bb3) | br1 -> {_3} (! bb1) ]  ]
      
    | bb1 = s0
      [ s0 = Take'0.t_take <i> {self.current}
          (fun (riter'0:i) (rn'0:usize) ->
            UIntSize.sub {rn'0} {[%#s16_take1] (1 : usize)}
              (fun (_ret':usize) ->
                Take'0.t_take <i> {self.current}
                  (fun (l_iter'0:i) (l_n'0:usize) ->
                     [ &self <- { self with current = Take'0.C_Take l_iter'0 _ret' ; } ] 
                    s1)))
      | s1 = Take'0.t_take <i> {self.current}
          (fun (riter'1:i) (rn'1:usize) ->
            Borrow.borrow_final <i> {riter'1} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed i) ->
                 [ &_5 <- _ret' ] 
                Take'0.t_take <i> {self.current}
                  (fun (l_iter'1:i) (l_n'1:usize) ->
                     [ &self <- { self with current = Take'0.C_Take _5.final l_n'1 ; } ] 
                    s2)))
      | s2 = -{inv'0 _5.final}- s3
      | s3 = next'0 {_5} (fun (_ret':Option'0.t_option item'0) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = bb4 ] 
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'1 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 =  [ &_0 <- Option'0.C_None ] s3
      | s3 = bb4 ]
      
    | bb4 = return' {_0} ]
    )
    [ & _0 : Option'0.t_option item'0 = any_l ()
    | & self : borrowed (Take'0.t_take i) = self
    | & _3 : bool = any_l ()
    | & _5 : borrowed i = any_l () ]
    
    [ return' (result:Option'0.t_option item'0)-> {[@expl:postcondition] [%#s16_take4] inv'2 result}
      {[@expl:postcondition] [%#s16_take3] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module C16Take_Impl0
  type i
  
  let%span s16_take0 = "../16_take.rs" 53 4 53 41
  
  let%span s16_take1 = "../16_take.rs" 47 4 47 90
  
  let%span s16_take2 = "../16_take.rs" 40 4 40 26
  
  let%span span3 = "../../../../../creusot-contracts/src/std/boxed.rs" 27 8 27 18
  
  let%span span4 = "../../../../../creusot-contracts/src/logic/seq.rs" 197 8 197 97
  
  let%span span5 = "../../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span6 = "../../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span7 = "../16_take.rs" 32 8 34 9
  
  let%span span8 = "../../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  let%span span9 = "../16_take.rs" 23 8 26 9
  
  type item'0
  
  predicate invariant'5 (self : item'0)
  
  predicate inv'5 (_x : item'0)
  
  axiom inv'5 : forall x : item'0 . inv'5 x = true
  
  use Alloc_Alloc_Global_Type as Global'0
  
  predicate invariant'4 (self : item'0) =
    [%#span3] inv'5 self
  
  predicate inv'4 (_x : item'0)
  
  axiom inv'4 : forall x : item'0 . inv'4 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq item'0) =
    [%#span4] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'3 (_x : Seq.seq item'0)
  
  axiom inv'3 : forall x : Seq.seq item'0 . inv'3 x = true
  
  use C16Take_Take_Type as Take'0
  
  predicate invariant'2 (self : Take'0.t_take i) =
    [%#span5] true
  
  predicate inv'2 (_x : Take'0.t_take i)
  
  axiom inv'2 : forall x : Take'0.t_take i . inv'2 x = true
  
  use Core_Option_Option_Type as Option'0
  
  predicate invariant'1 (self : Option'0.t_option item'0) =
    [%#span5] true
  
  predicate inv'1 (_x : Option'0.t_option item'0)
  
  axiom inv'1 : forall x : Option'0.t_option item'0 . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (Take'0.t_take i)) =
    [%#span6] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'0 (_x : borrowed (Take'0.t_take i))
  
  axiom inv'0 : forall x : borrowed (Take'0.t_take i) . inv'0 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [#"../common.rs" 8 4 8 65] (self : i) (visited : Seq.seq item'0) (o : i)
  
  use C16Take_Take_Type as C16Take_Take_Type
  
  use prelude.prelude.UIntSize
  
  predicate produces'0 [#"../16_take.rs" 31 4 31 64] (self : Take'0.t_take i) (visited : Seq.seq item'0) (o : Take'0.t_take i)
    
   =
    [%#span7] UIntSize.to_int (C16Take_Take_Type.take_n self)
    = UIntSize.to_int (C16Take_Take_Type.take_n o) + Seq.length visited
    /\ produces'1 (C16Take_Take_Type.take_iter self) visited (C16Take_Take_Type.take_iter o)
  
  use seq.Seq
  
  predicate completed'1 [#"../common.rs" 11 4 11 36] (self : borrowed i)
  
  predicate resolve'0 (self : borrowed (Take'0.t_take i)) =
    [%#span8] self.final = self.current
  
  predicate completed'0 [#"../16_take.rs" 22 4 22 35] (self : borrowed (Take'0.t_take i)) =
    [%#span9] UIntSize.to_int (C16Take_Take_Type.take_n self.current) = 0 /\ resolve'0 self
    \/ UIntSize.to_int (C16Take_Take_Type.take_n self.current) > 0
    /\ UIntSize.to_int (C16Take_Take_Type.take_n self.current)
    = UIntSize.to_int (C16Take_Take_Type.take_n self.final) + 1
    /\ completed'1 (Borrow.borrow_logic (C16Take_Take_Type.take_iter self.current) (C16Take_Take_Type.take_iter self.final) (Borrow.inherit_id (Borrow.get_id self) 1))
  
  goal next_refn : [%#s16_take0] forall self : borrowed (Take'0.t_take i) . inv'0 self
   -> inv'0 self
  /\ (forall result : Option'0.t_option item'0 . inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
  
  goal produces_trans_refn : [%#s16_take1] forall a : Take'0.t_take i . forall ab : Seq.seq item'0 . forall b : Take'0.t_take i . forall bc : Seq.seq item'0 . forall c : Take'0.t_take i . inv'2 c
  /\ inv'3 bc /\ inv'2 b /\ inv'3 ab /\ inv'2 a /\ produces'0 b bc c /\ produces'0 a ab b
   -> inv'2 c
  /\ inv'3 bc
  /\ inv'2 b
  /\ inv'3 ab
  /\ inv'2 a
  /\ produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
  
  goal produces_refl_refn : [%#s16_take2] forall self : Take'0.t_take i . inv'2 self
   -> inv'2 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq item'0) self
   -> produces'0 self (Seq.empty  : Seq.seq item'0) self)
end
