<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.4.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.12.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="05_map.mlcfg"/>
<theory name="C05Map_Impl1_PreservationInv_Impl" proved="true">
 <goal name="preservation_inv&#39;vc" expl="VC for preservation_inv" proved="true">
 <proof prover="1"><result status="valid" time="0.000000" steps="90"/></proof>
 </goal>
</theory>
<theory name="C05Map_Impl0_ProducesRefl_Impl" proved="true">
 <goal name="produces_refl&#39;vc" expl="VC for produces_refl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_refl&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="produces_refl&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="produces_refl&#39;vc.0.0.0" expl="VC for produces_refl" proved="true">
    <proof prover="1"><result status="valid" time="0.000000" steps="12"/></proof>
    </goal>
    <goal name="produces_refl&#39;vc.0.0.1" expl="VC for produces_refl" proved="true">
    <proof prover="0"><result status="valid" time="0.110000" steps="29590"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C05Map_Impl0_ProducesTrans_Impl" proved="true">
 <goal name="produces_trans&#39;vc" expl="VC for produces_trans" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_trans&#39;vc.0" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="produces_trans&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="unfold" proved="true" arg1="produces" arg2="in" arg3="Requires5, Requires6">
    <goal name="produces_trans&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="produces_trans&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.046186" steps="147"/></proof>
     </goal>
     <goal name="produces_trans&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <transf name="exists" proved="true" arg1="(s1++s)">
      <goal name="produces_trans&#39;vc.0.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="produces_trans&#39;vc.0.0.0.1.0.0" proved="true">
       <proof prover="1"><result status="valid" time="0.026979" steps="40"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.0.0.1.0.1" proved="true">
       <proof prover="1"><result status="valid" time="0.024061" steps="44"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.0.0.1.0.2" proved="true">
       <proof prover="1"><result status="valid" time="0.023577" steps="40"/></proof>
       </goal>
       <goal name="produces_trans&#39;vc.0.0.0.1.0.3" proved="true">
       <transf name="exists" proved="true" arg1="(fs1++fs)">
        <goal name="produces_trans&#39;vc.0.0.0.1.0.3.0" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="produces_trans&#39;vc.0.0.0.1.0.3.0.0" proved="true">
         <proof prover="1"><result status="valid" time="0.019616" steps="40"/></proof>
         </goal>
         <goal name="produces_trans&#39;vc.0.0.0.1.0.3.0.1" proved="true">
         <proof prover="1"><result status="valid" time="0.024308" steps="44"/></proof>
         </goal>
         <goal name="produces_trans&#39;vc.0.0.0.1.0.3.0.2" proved="true">
         <proof prover="1"><result status="valid" time="0.092190" steps="477"/></proof>
         </goal>
         <goal name="produces_trans&#39;vc.0.0.0.1.0.3.0.3" proved="true">
         <proof prover="1"><result status="valid" time="0.022108" steps="66"/></proof>
         </goal>
         <goal name="produces_trans&#39;vc.0.0.0.1.0.3.0.4" proved="true">
         <proof prover="1"><result status="valid" time="0.033641" steps="195"/></proof>
         </goal>
         <goal name="produces_trans&#39;vc.0.0.0.1.0.3.0.5" proved="true">
         <proof prover="1"><result status="valid" time="0.038581" steps="168"/></proof>
         </goal>
         <goal name="produces_trans&#39;vc.0.0.0.1.0.3.0.6" proved="true">
         <proof prover="1"><result status="valid" time="0.120127" steps="797"/></proof>
         </goal>
         <goal name="produces_trans&#39;vc.0.0.0.1.0.3.0.7" proved="true">
         <proof prover="1"><result status="valid" time="0.091713" steps="675"/></proof>
         </goal>
         <goal name="produces_trans&#39;vc.0.0.0.1.0.3.0.8" proved="true">
         <proof prover="1"><result status="valid" time="0.066844" steps="398"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C05Map_Impl1_ProducesOne_Impl" proved="true">
 <goal name="produces_one&#39;vc" expl="VC for produces_one" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="produces_one&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="produces_one&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="produces_one&#39;vc.0.0.0" expl="postcondition" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="produces_one&#39;vc.0.0.0.0" expl="postcondition" proved="true">
     <proof prover="1"><result status="valid" time="0.010000" steps="36"/></proof>
     </goal>
     <goal name="produces_one&#39;vc.0.0.0.1" expl="postcondition" proved="true">
     <transf name="exists" proved="true" arg1="(singleton e)">
      <goal name="produces_one&#39;vc.0.0.0.1.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="produces_one&#39;vc.0.0.0.1.0.0" proved="true">
       <proof prover="1"><result status="valid" time="0.023917" steps="18"/></proof>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.1" proved="true">
       <proof prover="1"><result status="valid" time="0.010000" steps="18"/></proof>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.2" proved="true">
       <proof prover="1"><result status="valid" time="0.010000" steps="16"/></proof>
       </goal>
       <goal name="produces_one&#39;vc.0.0.0.1.0.3" proved="true">
       <transf name="exists" proved="true" arg1="(singleton f)">
        <goal name="produces_one&#39;vc.0.0.0.1.0.3.0" proved="true">
        <proof prover="1" timelimit="5"><result status="valid" time="0.010000" steps="230"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="produces_one&#39;vc.0.1" expl="postcondition" proved="true">
   <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
    <goal name="produces_one&#39;vc.0.1.0" expl="postcondition" proved="true">
    <proof prover="3" timelimit="5" memlimit="2000"><result status="valid" time="0.276593" steps="33275"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C05Map_Impl1_ProducesOneInvariant_Impl" proved="true">
 <goal name="produces_one_invariant&#39;vc" expl="VC for produces_one_invariant" proved="true">
 <transf name="rewrite" proved="true" arg1="inv_t_map">
  <goal name="produces_one_invariant&#39;vc.0" expl="VC for produces_one_invariant" proved="true">
  <transf name="rewrite" proved="true" arg1="inv_t_map">
   <goal name="produces_one_invariant&#39;vc.0.0" expl="VC for produces_one_invariant" proved="true">
   <transf name="unfold" proved="true" arg1="invariant&#39;">
    <goal name="produces_one_invariant&#39;vc.0.0.0" expl="VC for produces_one_invariant" proved="true">
    <transf name="unfold" proved="true" arg1="next_precondition">
     <goal name="produces_one_invariant&#39;vc.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
     <transf name="unfold" proved="true" arg1="preservation_inv">
      <goal name="produces_one_invariant&#39;vc.0.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
      <transf name="unfold" proved="true" arg1="produces_one">
       <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
       <transf name="split_vc" proved="true" >
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.0" expl="VC for produces_one_invariant" proved="true">
        <proof prover="1"><result status="valid" time="0.010000" steps="22"/></proof>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1" expl="VC for produces_one_invariant" proved="true">
        <transf name="split_vc" proved="true" >
         <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0" expl="VC for produces_one_invariant" proved="true">
         <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
          <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0.0" expl="VC for produces_one_invariant" proved="true">
          <transf name="apply" proved="true" arg1="H12" arg2="with" arg3="i,b,e1,(cons e s)">
           <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0.0.0" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.037797" steps="42"/></proof>
           </goal>
           <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0.0.1" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.024387" steps="42"/></proof>
           </goal>
           <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0.0.2" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.028321" steps="42"/></proof>
           </goal>
           <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0.0.3" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.021107" steps="42"/></proof>
           </goal>
           <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0.0.4" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.024396" steps="42"/></proof>
           </goal>
           <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0.0.5" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.028761" steps="44"/></proof>
           </goal>
           <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0.0.6" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.044284" steps="202"/></proof>
           </goal>
           <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0.0.7" expl="apply premises" proved="true">
           <proof prover="3"><result status="valid" time="0.122973" steps="25553"/></proof>
           </goal>
           <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0.0.8" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.023551" steps="42"/></proof>
           </goal>
           <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.1.0.0.9" expl="apply premises" proved="true">
           <proof prover="1"><result status="valid" time="0.014242" steps="42"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.2" expl="VC for produces_one_invariant" proved="true">
        <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
         <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.2.0" expl="VC for produces_one_invariant" proved="true">
         <proof prover="0"><result status="valid" time="0.180000" steps="33824"/></proof>
         </goal>
        </transf>
        </goal>
        <goal name="produces_one_invariant&#39;vc.0.0.0.0.0.0.3" expl="VC for produces_one_invariant" proved="true">
        <proof prover="1"><result status="valid" time="0.010000" steps="22"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C05Map_Impl0_Next" proved="true">
 <goal name="next&#39;vc" expl="VC for next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="next&#39;vc.0" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.080822" steps="9398"/></proof>
  </goal>
  <goal name="next&#39;vc.1" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.022767" steps="19"/></proof>
  </goal>
  <goal name="next&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.020531" steps="22"/></proof>
  </goal>
  <goal name="next&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.088091" steps="15242"/></proof>
  </goal>
  <goal name="next&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.034554" steps="30"/></proof>
  </goal>
  <goal name="next&#39;vc.5" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.039048" steps="240"/></proof>
  </goal>
  <goal name="next&#39;vc.6" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.019493" steps="42"/></proof>
  </goal>
  <goal name="next&#39;vc.7" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.021483" steps="50"/></proof>
  </goal>
  <goal name="next&#39;vc.8" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.016233" steps="51"/></proof>
  </goal>
  <goal name="next&#39;vc.9" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.046818" steps="319"/></proof>
  </goal>
  <goal name="next&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.011680" steps="145"/></proof>
  </goal>
  <goal name="next&#39;vc.11" expl="unreachable point" proved="true">
  <proof prover="1"><result status="valid" time="0.028356" steps="27"/></proof>
  </goal>
  <goal name="next&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.075253" steps="194100"/></proof>
  </goal>
  <goal name="next&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.023519" steps="13"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="C05Map_Map" proved="true">
 <goal name="map&#39;vc" expl="VC for map" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="92"/></proof>
 </goal>
</theory>
<theory name="C05Map_Impl0" proved="true">
 <goal name="produces_trans_refn" proved="true">
 <proof prover="1"><result status="valid" time="0.000000" steps="1"/></proof>
 </goal>
 <goal name="next_refn" proved="true">
 <proof prover="1"><result status="valid" time="0.010000" steps="603"/></proof>
 </goal>
 <goal name="produces_refl_refn" proved="true">
 <proof prover="1"><result status="valid" time="0.000000" steps="1"/></proof>
 </goal>
</theory>
</file>
</why3session>
