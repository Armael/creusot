module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type spectests_t  = 
    | SpecTests_T_A
    | SpecTests_T_B
    
  predicate drop_spectests_t (self : spectests_t) = 
    match (self) with
      | SpecTests_T_A -> true
      | SpecTests_T_B -> true
      end
  type spectests_s 'a 'b = 
    | SpecTests_S('a, 'b)
    
  predicate drop_spectests_s (drop_a : 'a -> bool) (drop_b : 'b -> bool) (self : spectests_s 'a 'b) = 
    let SpecTests_S(a, b) = self in drop_a a && drop_b b
end
module SpecTests_TestSpecs
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec cfg impl () : ()
    ensures { Type.SpecTests_S((0 : uint32), true) = Type.SpecTests_S((1 : uint32), false) }
    ensures { Type.SpecTests_T_A = Type.SpecTests_T_B }
    
   = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module SpecTests_Main
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec cfg impl () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
