module Type
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module CreusotContracts_Builtins_Resolve
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  type self   
  predicate resolve (self : self)
end
module Sum_SumFirstN
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  clone CreusotContracts_Builtins_Resolve as Resolve0 with type self = uint32
  clone CreusotContracts_Builtins_Resolve as Resolve1 with type self = bool
  clone CreusotContracts_Builtins_Resolve as Resolve2 with type self = ()
  let rec cfg impl (o_n_1 : uint32) : uint32
    ensures { result = div (o_n_1 * o_n_1 + (1 : uint32)) (2 : uint32) }
    
   = 
  var _0 : uint32;
  var n_1 : uint32;
  var sum_2 : uint32;
  var i_3 : uint32;
  var _4 : ();
  var _7 : ();
  var _8 : bool;
  var _9 : uint32;
  var _10 : uint32;
  var _11 : uint32;
  var _12 : ();
  {
    n_1 <- o_n_1;
    goto BB0
  }
  BB0 {
    sum_2 <- (0 : uint32);
    i_3 <- (0 : uint32);
    goto BB1
  }
  BB1 {
    invariant loop_bound { i_3 < n_1 + (1 : uint32) };
    invariant sum_value { sum_2 = div (i_3 * i_3 + (1 : uint32)) (2 : uint32) };
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve _9 };
    _9 <- i_3;
    assume { Resolve0.resolve _10 };
    _10 <- n_1;
    _8 <- _9 <= _10;
    switch (_8)
      | False -> goto BB4
      | True -> goto BB3
      | _ -> goto BB3
      end
  }
  BB3 {
    assume { Resolve1.resolve _8 };
    goto BB5
  }
  BB4 {
    assume { Resolve0.resolve n_1 };
    assume { Resolve0.resolve i_3 };
    assume { Resolve1.resolve _8 };
    _4 <- ();
    assume { Resolve2.resolve _4 };
    assume { Resolve0.resolve _0 };
    _0 <- sum_2;
    assume { Resolve0.resolve sum_2 };
    return _0
  }
  BB5 {
    assume { Resolve0.resolve _11 };
    _11 <- i_3;
    sum_2 <- sum_2 + _11;
    assume { Resolve0.resolve _11 };
    i_3 <- i_3 + (1 : uint32);
    _7 <- ();
    assume { Resolve2.resolve _7 };
    goto BB1
  }
  
end
module Sum_Main
  use Ref
  use mach.int.Int
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  use Type
  let rec cfg impl () : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
