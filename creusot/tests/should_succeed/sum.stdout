module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
end
module Sum_Main_Interface
  val main [@cfg:stackify] (_ : ()) : ()
end
module Sum_Main
  let rec cfg main [@cfg:stackify] (_ : ()) : () = 
  var _0 : ();
  {
    goto BB0
  }
  BB0 {
    _0 <- ();
    return _0
  }
  
end
module Sum_SumFirstN_Interface
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int32
  val sum_first_n [@cfg:stackify] (n : uint32) : uint32
    ensures { result = div (n * (n + (1 : uint32))) (2 : uint32) }
    ensures { UInt32.to_int n < 1000 }
    
end
module Sum_SumFirstN
  use mach.int.Int
  use mach.int.UInt32
  use mach.int.Int32
  let rec cfg sum_first_n [@cfg:stackify] (n : uint32) : uint32
    ensures { result = div (n * (n + (1 : uint32))) (2 : uint32) }
    ensures { UInt32.to_int n < 1000 }
    
   = 
  var _0 : uint32;
  var n_1 : uint32;
  var sum_2 : uint32;
  var i_3 : uint32;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : uint32;
  var _8 : uint32;
  var _9 : uint32;
  var _10 : ();
  var _11 : ();
  var _12 : ();
  {
    n_1 <- n;
    goto BB0
  }
  BB0 {
    sum_2 <- (0 : uint32);
    i_3 <- (0 : uint32);
    goto BB1
  }
  BB1 {
    invariant bound { i_3 <= n_1 };
    invariant sum_value { sum_2 = div (i_3 * (i_3 + (1 : uint32))) (2 : uint32) };
    _7 <- i_3;
    _8 <- n_1;
    _6 <- _7 < _8;
    switch (_6)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    i_3 <- i_3 + (1 : uint32);
    _9 <- i_3;
    sum_2 <- sum_2 + _9;
    _5 <- ();
    goto BB1
  }
  BB3 {
    _4 <- ();
    _0 <- sum_2;
    return _0
  }
  
end
