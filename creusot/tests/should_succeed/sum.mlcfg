module Ambient
use Ref 
use mach.int.Int 
use mach.int.Int32
use mach.int.Int64
use mach.int.UInt32
use mach.int.UInt64
use string.Char
use floating_point.Single
use floating_point.Double
(** Generic Type for borrowed values *) 
type borrowed 'a = 
{ current : 'a ; 
final : 'a; (* The "future" value when borrow will end *) 
} 
let function ( *_ ) x = x.current 
let function ( ^_ ) x = x.final 
val borrow_mut (a : 'a) : borrowed 'a 
ensures { *result = a }
type usize = int
type isize = int
  let cfg sumFirstN (o_n_1 : uint32) : uint32
    ensures { result = div (o_n_1 * (o_n_1 - 1)) 2 }
    =
  var _0 : uint32;
  var n_1 : uint32;
  var sum_2 : uint32;
  var i_3 : uint32;
  var _4 : ();
  var _5 : ();
  var _6 : bool;
  var _7 : uint32;
  var _8 : uint32;
  var _10 : uint32;
  var _11 : ();
  {
    n_1 <- o_n_1;
    goto BB0;
  }
  BB0 {
    sum_2 <- 0;
    i_3 <- 0;
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _7 <- i_3;
    _8 <- n_1;
    _6 <- _7 <= _8;
    switch (_6)
      | False -> goto BB4
      | _ -> goto BB3
      end
  }
  BB3 {
    goto BB5
  }
  BB5 {
    invariant xx { sum_2 = div (i_3 * (i_3 - 1)) 2 };
    _10 <- i_3;
    sum_2 <- sum_2 + _10;
    i_3 <- i_3 + 1;
    _5 <- ();
    goto BB1
  }
  BB4 {
    _4 <- ();
    _0 <- sum_2;
    _0
  }

  let cfg main () : ()
    =
  var _0 : ();
  {
    goto BB0;
  }
  BB0 {
    _0 <- ();
    _0
  }

end
