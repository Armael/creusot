module Ambient
  use Ref 
  use mach.int.Int 
  use mach.int.Int32
  use mach.int.Int64
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double

  type usize = int
  type isize = int

  (** Generic Type for borrowed values *) 
  type borrowed 'a = 
  { current : 'a ; 
  final : 'a; (* The "future" value when borrow will end *) 
  } 
  let function ( *_ ) x = x.current 
  let function ( ^_ ) x = x.final 
  val borrow_mut (a : 'a) : borrowed 'a 
  ensures { *result = a }

  predicate drop_fix (_ : 'a) = true
  predicate drop_uint (_ : 'a) = true
  predicate drop_int (_ : 'a) = true
  predicate drop_float (_ : 'a) = true
  predicate drop_bool (_ : 'a) = true
  predicate drop_mut_ref (b : borrowed 'a) = ^ b = * b
  predicate drop_ref (_ : 'a) = true

  scope Nested
    scope Further
      let cfg another () : bool
        =
      var _0 : bool;
      {
        goto BB0
      }
BB0       {
        _0 <- false;
        return _0
      }

    end
    type nested  =
        | Test

    predicate drop_nested (self : nested) =
      let Test = self in True
    let cfg innerFunc () : bool
      ensures { result = true }
      =
    var _0 : bool;
    var _1 : nested;
    {
      goto BB0
    }
BB0     {
      _1 <- Test;
      assume { Nested.drop_nested _1 };
      _0 <- true;
      return _0
    }

  end
  let cfg main () : ()
    =
  var _0 : ();
  var _1 : bool;
  var _2 : bool;
  {
    goto BB0
  }
BB0   {
    _1 <- Nested.innerFunc ();
    goto BB1
  }
BB1   {
    assume { drop_bool _1 };
    _2 <- Nested.Further.another ();
    goto BB2
  }
BB2   {
    assume { drop_bool _2 };
    _0 <- ();
    return _0
  }

end
