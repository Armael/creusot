module Ambient
use Ref 
use mach.int.Int 
use mach.int.Int32
use mach.int.Int64
use mach.int.UInt32
use mach.int.UInt64
use string.Char
use floating_point.Single
use floating_point.Double
(** Generic Type for borrowed values *) 
type borrowed 'a = 
{ current : 'a ; 
final : 'a; (* The "future" value when borrow will end *) 
} 
let function ( *_ ) x = x.current 
let function ( ^_ ) x = x.final 
val borrow_mut (a : 'a) : borrowed 'a 
ensures { *result = a }
type usize = int
type isize = int
  scope Nested
    scope Further
      let cfg another () : bool
        =
      var _0 : bool;
      {
        goto BB0;
      }
      BB0 {
        _0 <- false;
        _0
      }

    end
    type nested  =
        | Test

    let cfg innerFunc () : bool
      ensures { result = true }
      =
    var _0 : bool;
    var _1 : nested;
    {
      goto BB0;
    }
    BB0 {
      _1 <- Test;
      _0 <- true;
      _0
    }

  end
  let cfg main () : ()
    =
  var _0 : ();
  var _1 : bool;
  var _2 : bool;
  {
    goto BB0;
  }
  BB0 {
    _1 <- Nested.innerFunc ();
    goto BB1
  }
  BB1 {
    _2 <- Nested.Further.another ();
    goto BB2
  }
  BB2 {
    _0 <- ();
    _0
  }

end
