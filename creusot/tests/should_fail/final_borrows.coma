
module FinalBorrows_NotFinalBorrow
  type t
  
  let%span sfinal_borrows0 = "../final_borrows.rs" 7 18 7 27
  
  let%span sfinal_borrows1 = "../final_borrows.rs" 5 27 5 30
  
  let%span span2 = "../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span3 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  predicate inv'0 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed t) =
    [%#span2] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'0 (self : borrowed t) =
    [%#span3] self.final = self.current
  
  let rec not_final_borrow (bor:borrowed t) (return'  (ret:()))= {[%#sfinal_borrows1] inv'1 bor}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <t> {bor.current}
          (fun (_ret':borrowed t) ->  [ &b1 <- _ret' ]  [ &bor <- { bor with current = b1.final ; } ] s1)
      | s1 = -{inv'0 b1.final}- s2
      | s2 = {[@expl:type invariant] inv'1 b1} s3
      | s3 = -{resolve'0 b1}- s4
      | s4 = {[@expl:assertion] [%#sfinal_borrows0] b1 = bor} s5
      | s5 = Borrow.borrow_final <t> {bor.current} {Borrow.get_id bor}
          (fun (_ret':borrowed t) ->  [ &_b2 <- _ret' ]  [ &bor <- { bor with current = _b2.final ; } ] s6)
      | s6 = -{inv'0 _b2.final}- s7
      | s7 = {[@expl:type invariant] inv'1 _b2} s8
      | s8 = -{resolve'0 _b2}- s9
      | s9 = {[@expl:type invariant] inv'1 bor} s10
      | s10 = -{resolve'0 bor}- s11
      | s11 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () | & bor : borrowed t = bor | & b1 : borrowed t = any_l () | & _b2 : borrowed t = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module FinalBorrows_StoreChangesProphecy
  type t
  
  let%span sfinal_borrows0 = "../final_borrows.rs" 15 18 15 27
  
  let%span sfinal_borrows1 = "../final_borrows.rs" 11 33 11 36
  
  let%span sfinal_borrows2 = "../final_borrows.rs" 11 46 11 47
  
  let%span span3 = "../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span4 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  predicate inv'0 (_1 : t)
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed t) =
    [%#span3] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : t)
  
  predicate resolve'0 (self : borrowed t) =
    [%#span4] self.final = self.current
  
  let rec store_changes_prophecy (bor:borrowed t) (x:t) (return'  (ret:()))= {[%#sfinal_borrows2] inv'0 x}
    {[%#sfinal_borrows1] inv'1 bor}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <t> {bor.current}
          (fun (_ret':borrowed t) ->  [ &b1 <- _ret' ]  [ &bor <- { bor with current = b1.final ; } ] s1)
      | s1 = -{inv'0 b1.final}- s2
      | s2 = {[@expl:type invariant] inv'1 b1} s3
      | s3 = -{resolve'0 b1}- s4
      | s4 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 bor.current} s1
      | s1 = -{resolve'1 bor.current}- s2
      | s2 =  [ &bor <- { bor with current = x ; } ] s3
      | s3 = {[@expl:type invariant] inv'1 bor} s4
      | s4 = -{resolve'0 bor}- s5
      | s5 = bb3 ]
      
    | bb3 = s0 [ s0 = {[@expl:assertion] [%#sfinal_borrows0] b1 = bor} s1 | s1 = bb4 ] 
    | bb4 = return' {_0} ]
    ) [ & _0 : () = any_l () | & bor : borrowed t = bor | & x : t = x | & b1 : borrowed t = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module FinalBorrows_CallChangesProphecy_Inner
  let%span sfinal_borrows0 = "../final_borrows.rs" 20 8 20 9
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  let rec inner (_1:()) (return'  (ret:int32))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sfinal_borrows0] (2 : int32) ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : int32 = any_l () ]  [ return' (result:int32)-> (! return' {result}) ] 
end
module FinalBorrows_CallChangesProphecy
  let%span sfinal_borrows0 = "../final_borrows.rs" 24 11 24 18
  
  let%span sfinal_borrows1 = "../final_borrows.rs" 25 18 25 27
  
  let%span span2 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  let rec inner'0 (_1:()) (return'  (ret:int32))= any [ return' (result:int32)-> (! return' {result}) ] 
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (self : borrowed int32) =
    [%#span2] self.final = self.current
  
  let rec call_changes_prophecy (bor:borrowed int32) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <int32> {bor.current}
          (fun (_ret':borrowed int32) ->  [ &b1 <- _ret' ]  [ &bor <- { bor with current = b1.final ; } ] s1)
      | s1 = -{resolve'0 b1}- s2
      | s2 = inner'0 {[%#sfinal_borrows0] ()} (fun (_ret':int32) ->  [ &_3 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &bor <- { bor with current = _3 ; } ] s1
      | s1 = -{resolve'0 bor}- s2
      | s2 = {[@expl:assertion] [%#sfinal_borrows1] b1 = bor} s3
      | s3 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l () | & bor : borrowed int32 = bor | & b1 : borrowed int32 = any_l () | & _3 : int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module FinalBorrows_UnnestingFails
  type t
  
  let%span sfinal_borrows0 = "../final_borrows.rs" 30 38 30 39
  
  let%span sfinal_borrows1 = "../final_borrows.rs" 29 10 29 32
  
  let%span sfinal_borrows2 = "../final_borrows.rs" 30 68 30 77
  
  let%span span3 = "../../../../creusot-contracts/src/invariant.rs" 8 8 8 12
  
  let%span span4 = "../../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  let%span span5 = "../../../../creusot-contracts/src/resolve.rs" 26 20 26 34
  
  predicate invariant'4 (self : (t, t)) =
    [%#span3] true
  
  predicate inv'4 (_1 : (t, t))
  
  axiom inv'4 : forall x : (t, t) . inv'4 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed (t, t)) =
    [%#span4] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'3 (_1 : borrowed (t, t))
  
  axiom inv'3 : forall x : borrowed (t, t) . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (borrowed (t, t))) =
    [%#span4] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'2 (_1 : borrowed (borrowed (t, t)))
  
  axiom inv'2 : forall x : borrowed (borrowed (t, t)) . inv'2 x = true
  
  predicate inv'0 (_1 : t)
  
  predicate invariant'1 (self : borrowed t) =
    [%#span4] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed t)
  
  axiom inv'1 : forall x : borrowed t . inv'1 x = true
  
  predicate invariant'0 (self : t)
  
  axiom inv'0 : forall x : t . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (borrowed (t, t))) =
    [%#span5] self.final = self.current
  
  predicate resolve'0 (self : borrowed t) =
    [%#span5] self.final = self.current
  
  let rec unnesting_fails (x:borrowed (borrowed (t, t))) (return'  (ret:borrowed t))= {[%#sfinal_borrows0] inv'2 x}
    (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_mut <t> {let (r'0, _) = (x.current).current in r'0}
          (fun (_ret':borrowed t) ->
             [ &_4 <- _ret' ] 
            
            [ &x <- { x with current = { x.current with current = (let (_, l'2) = (x.current).current in (_4.final, l'2)) ; } ; } ]
            
            s1)
      | s1 = -{inv'0 _4.final}- s2
      | s2 = Borrow.borrow_final <t> {_4.current} {Borrow.get_id _4}
          (fun (_ret':borrowed t) ->  [ &_2 <- _ret' ]  [ &_4 <- { _4 with current = _2.final ; } ] s3)
      | s3 = -{inv'0 _2.final}- s4
      | s4 = Borrow.borrow_final <t> {_2.current} {Borrow.get_id _2}
          (fun (_ret':borrowed t) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _0.final ; } ] s5)
      | s5 = -{inv'0 _0.final}- s6
      | s6 = {[@expl:type invariant] inv'1 _4} s7
      | s7 = -{resolve'0 _4}- s8
      | s8 = {[@expl:type invariant] inv'1 _2} s9
      | s9 = -{resolve'0 _2}- s10
      | s10 = {[@expl:type invariant] inv'2 x} s11
      | s11 = -{resolve'1 x}- s12
      | s12 = return' {_0} ]
       ]
    )
    [ & _0 : borrowed t = any_l ()
    | & x : borrowed (borrowed (t, t)) = x
    | & _2 : borrowed t = any_l ()
    | & _4 : borrowed t = any_l () ]
    
    [ return' (result:borrowed t)-> {[@expl:postcondition] [%#sfinal_borrows2] inv'1 result}
      {[@expl:postcondition] [%#sfinal_borrows1] result
      = Borrow.borrow_logic (let (a, _) = (x.current).current in a) (let (a, _) = (x.current).final in a) (Borrow.inherit_id (Borrow.get_id x.current) 1)}
      (! return' {result}) ]
    
end
